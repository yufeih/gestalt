import * as React from 'react';
import React__default, { forwardRef, isValidElement, Children, createContext, useContext, useState, useEffect, useRef, useImperativeHandle, useCallback, useLayoutEffect, useReducer, Fragment, PureComponent, createElement, useMemo, cloneElement, Component, useId as useId$1, memo, useSyncExternalStore, startTransition } from 'react';
import classnames from 'classnames';
import * as ReactDOM from 'react-dom';
import ReactDOM__default, { createPortal } from 'react-dom';
import { isTypeableElement, getDocument, activeElement, contains as contains$1, isSafari, stopEvent, getTarget } from '@floating-ui/utils/react';

function createCommonjsModule(fn) {
  var module = { exports: {} };
	return fn(module, module.exports), module.exports;
}

var reactJsxRuntime_development = createCommonjsModule(function (module, exports) {

{
  (function () {

    var React = React__default;

    var enableScopeAPI = false;
    var enableCacheElement = false;
    var enableTransitionTracing = false;
    var enableLegacyHidden = false;
    var enableDebugTracing = false;
    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== 'object') {
        return null;
      }

      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }

      return null;
    }

    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

    function error(format) {
      {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          printWarning('error', format, args);
        }
      }
    }

    function printWarning(level, format, args) {
      {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();

        if (stack !== '') {
          format += '%s';
          args = args.concat([stack]);
        }

        var argsWithFormat = args.map(function (item) {
          return String(item);
        });
        argsWithFormat.unshift('Warning: ' + format);
        Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }

    var REACT_MODULE_REFERENCE;
    {
      REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
    }

    function isValidElementType(type) {
      if (typeof type === 'string' || typeof type === 'function') {
        return true;
      }

      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
        return true;
      }

      if (typeof type === 'object' && type !== null) {
        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
          return true;
        }
      }

      return false;
    }

    function getWrappedName(outerType, innerType, wrapperName) {
      var displayName = outerType.displayName;

      if (displayName) {
        return displayName;
      }

      var functionName = innerType.displayName || innerType.name || '';
      return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
    }

    function getContextName(type) {
      return type.displayName || 'Context';
    }

    function getComponentNameFromType(type) {
      if (type == null) {
        return null;
      }

      {
        if (typeof type.tag === 'number') {
          error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }

      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }

      if (typeof type === 'string') {
        return type;
      }

      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return 'Fragment';

        case REACT_PORTAL_TYPE:
          return 'Portal';

        case REACT_PROFILER_TYPE:
          return 'Profiler';

        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';

        case REACT_SUSPENSE_TYPE:
          return 'Suspense';

        case REACT_SUSPENSE_LIST_TYPE:
          return 'SuspenseList';
      }

      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + '.Consumer';

          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + '.Provider';

          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');

          case REACT_MEMO_TYPE:
            var outerName = type.displayName || null;

            if (outerName !== null) {
              return outerName;
            }

            return getComponentNameFromType(type.type) || 'Memo';

          case REACT_LAZY_TYPE:
            {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;

              try {
                return getComponentNameFromType(init(payload));
              } catch (x) {
                return null;
              }
            }
        }
      }

      return null;
    }

    var assign = Object.assign;
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;

    function disabledLog() {}

    disabledLog.__reactDisabledLog = true;

    function disableLogs() {
      {
        if (disabledDepth === 0) {
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd;
          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          };
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }

        disabledDepth++;
      }
    }

    function reenableLogs() {
      {
        disabledDepth--;

        if (disabledDepth === 0) {
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          Object.defineProperties(console, {
            log: assign({}, props, {
              value: prevLog
            }),
            info: assign({}, props, {
              value: prevInfo
            }),
            warn: assign({}, props, {
              value: prevWarn
            }),
            error: assign({}, props, {
              value: prevError
            }),
            group: assign({}, props, {
              value: prevGroup
            }),
            groupCollapsed: assign({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: assign({}, props, {
              value: prevGroupEnd
            })
          });
        }

        if (disabledDepth < 0) {
          error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
        }
      }
    }

    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;

    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix === undefined) {
          try {
            throw Error();
          } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
          }
        }

        return '\n' + prefix + name;
      }
    }

    var reentry = false;
    var componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap();
    }

    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry) {
        return '';
      }

      {
        var frame = componentFrameCache.get(fn);

        if (frame !== undefined) {
          return frame;
        }
      }
      var control;
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = undefined;
      var previousDispatcher;
      {
        previousDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = null;
        disableLogs();
      }

      try {
        if (construct) {
          var Fake = function () {
            throw Error();
          };

          Object.defineProperty(Fake.prototype, 'props', {
            set: function () {
              throw Error();
            }
          });

          if (typeof Reflect === 'object' && Reflect.construct) {
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }

            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }

            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }

          fn();
        }
      } catch (sample) {
        if (sample && control && typeof sample.stack === 'string') {
          var sampleLines = sample.stack.split('\n');
          var controlLines = control.stack.split('\n');
          var s = sampleLines.length - 1;
          var c = controlLines.length - 1;

          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
            c--;
          }

          for (; s >= 1 && c >= 0; s--, c--) {
            if (sampleLines[s] !== controlLines[c]) {
              if (s !== 1 || c !== 1) {
                do {
                  s--;
                  c--;

                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
                    var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                    if (fn.displayName && _frame.includes('<anonymous>')) {
                      _frame = _frame.replace('<anonymous>', fn.displayName);
                    }

                    {
                      if (typeof fn === 'function') {
                        componentFrameCache.set(fn, _frame);
                      }
                    }
                    return _frame;
                  }
                } while (s >= 1 && c >= 0);
              }

              break;
            }
          }
        }
      } finally {
        reentry = false;
        {
          ReactCurrentDispatcher.current = previousDispatcher;
          reenableLogs();
        }
        Error.prepareStackTrace = previousPrepareStackTrace;
      }

      var name = fn ? fn.displayName || fn.name : '';
      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
      {
        if (typeof fn === 'function') {
          componentFrameCache.set(fn, syntheticFrame);
        }
      }
      return syntheticFrame;
    }

    function describeFunctionComponentFrame(fn, source, ownerFn) {
      {
        return describeNativeComponentFrame(fn, false);
      }
    }

    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }

    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null) {
        return '';
      }

      if (typeof type === 'function') {
        {
          return describeNativeComponentFrame(type, shouldConstruct(type));
        }
      }

      if (typeof type === 'string') {
        return describeBuiltInComponentFrame(type);
      }

      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame('Suspense');

        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame('SuspenseList');
      }

      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);

          case REACT_MEMO_TYPE:
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

          case REACT_LAZY_TYPE:
            {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;

              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {}
            }
        }
      }

      return '';
    }

    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

    function setCurrentlyValidatingElement(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame.setExtraStackFrame(null);
        }
      }
    }

    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      {
        var has = Function.call.bind(hasOwnProperty);

        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0;

            try {
              if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                err.name = 'Invariant Violation';
                throw err;
              }

              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
              error$1 = ex;
            }

            if (error$1 && !(error$1 instanceof Error)) {
              setCurrentlyValidatingElement(element);
              error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);
              setCurrentlyValidatingElement(null);
            }

            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
              loggedTypeFailures[error$1.message] = true;
              setCurrentlyValidatingElement(element);
              error('Failed %s type: %s', location, error$1.message);
              setCurrentlyValidatingElement(null);
            }
          }
        }
      }
    }

    var isArrayImpl = Array.isArray;

    function isArray(a) {
      return isArrayImpl(a);
    }

    function typeName(value) {
      {
        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
        return type;
      }
    }

    function willCoercionThrow(value) {
      {
        try {
          testStringCoercion(value);
          return false;
        } catch (e) {
          return true;
        }
      }
    }

    function testStringCoercion(value) {
      return '' + value;
    }

    function checkKeyStringCoercion(value) {
      {
        if (willCoercionThrow(value)) {
          error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));
          return testStringCoercion(value);
        }
      }
    }

    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    {
      didWarnAboutStringRefs = {};
    }

    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, 'ref')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.ref !== undefined;
    }

    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, 'key')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.key !== undefined;
    }

    function warnIfStringRefCannotBeAutoConverted(config, self) {
      {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);

          if (!didWarnAboutStringRefs[componentName]) {
            error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
            didWarnAboutStringRefs[componentName] = true;
          }
        }
      }
    }

    function defineKeyPropWarningGetter(props, displayName) {
      {
        var warnAboutAccessingKey = function () {
          if (!specialPropKeyWarningShown) {
            specialPropKeyWarningShown = true;
            error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
          }
        };

        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
    }

    function defineRefPropWarningGetter(props, displayName) {
      {
        var warnAboutAccessingRef = function () {
          if (!specialPropRefWarningShown) {
            specialPropRefWarningShown = true;
            error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
          }
        };

        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
    }

    var ReactElement = function (type, key, ref, self, source, owner, props) {
      var element = {
        $$typeof: REACT_ELEMENT_TYPE,
        type: type,
        key: key,
        ref: ref,
        props: props,
        _owner: owner
      };
      {
        element._store = {};
        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        });
        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        });
        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });

        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }
      return element;
    };

    function jsxDEV(type, config, maybeKey, source, self) {
      {
        var propName;
        var props = {};
        var key = null;
        var ref = null;

        if (maybeKey !== undefined) {
          {
            checkKeyStringCoercion(maybeKey);
          }
          key = '' + maybeKey;
        }

        if (hasValidKey(config)) {
          {
            checkKeyStringCoercion(config.key);
          }
          key = '' + config.key;
        }

        if (hasValidRef(config)) {
          ref = config.ref;
          warnIfStringRefCannotBeAutoConverted(config, self);
        }

        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }

        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;

          for (propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
        }

        if (key || ref) {
          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }

          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }

        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
      }
    }

    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

    function setCurrentlyValidatingElement$1(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
      }
    }

    var propTypesMisspellWarningShown;
    {
      propTypesMisspellWarningShown = false;
    }

    function isValidElement(object) {
      {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
    }

    function getDeclarationErrorAddendum() {
      {
        if (ReactCurrentOwner$1.current) {
          var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);

          if (name) {
            return '\n\nCheck the render method of `' + name + '`.';
          }
        }

        return '';
      }
    }

    function getSourceInfoErrorAddendum(source) {
      {
        if (source !== undefined) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, '');
          var lineNumber = source.lineNumber;
          return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }

        return '';
      }
    }

    var ownerHasKeyUseWarning = {};

    function getCurrentComponentErrorInfo(parentType) {
      {
        var info = getDeclarationErrorAddendum();

        if (!info) {
          var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

          if (parentName) {
            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
          }
        }

        return info;
      }
    }

    function validateExplicitKey(element, parentType) {
      {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }

        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }

        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = '';

        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        }

        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
      }
    }

    function validateChildKeys(node, parentType) {
      {
        if (typeof node !== 'object') {
          return;
        }

        if (isArray(node)) {
          for (var i = 0; i < node.length; i++) {
            var child = node[i];

            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);

          if (typeof iteratorFn === 'function') {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;

              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
    }

    function validatePropTypes(element) {
      {
        var type = element.type;

        if (type === null || type === undefined || typeof type === 'string') {
          return;
        }

        var propTypes;

        if (typeof type === 'function') {
          propTypes = type.propTypes;
        } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
          propTypes = type.propTypes;
        } else {
          return;
        }

        if (propTypes) {
          var name = getComponentNameFromType(type);
          checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = true;

          var _name = getComponentNameFromType(type);

          error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }

        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
          error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
        }
      }
    }

    function validateFragmentProps(fragment) {
      {
        var keys = Object.keys(fragment.props);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];

          if (key !== 'children' && key !== 'key') {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
            setCurrentlyValidatingElement$1(null);
            break;
          }
        }

        if (fragment.ref !== null) {
          setCurrentlyValidatingElement$1(fragment);
          error('Invalid attribute `ref` supplied to `React.Fragment`.');
          setCurrentlyValidatingElement$1(null);
        }
      }
    }

    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
      {
        var validType = isValidElementType(type);

        if (!validType) {
          var info = '';

          if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
            info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
          }

          var sourceInfo = getSourceInfoErrorAddendum(source);

          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }

          var typeString;

          if (type === null) {
            typeString = 'null';
          } else if (isArray(type)) {
            typeString = 'array';
          } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
            info = ' Did you accidentally export a JSX literal instead of a component?';
          } else {
            typeString = typeof type;
          }

          error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
        }

        var element = jsxDEV(type, props, key, source, self);

        if (element == null) {
          return element;
        }

        if (validType) {
          var children = props.children;

          if (children !== undefined) {
            if (isStaticChildren) {
              if (isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  validateChildKeys(children[i], type);
                }

                if (Object.freeze) {
                  Object.freeze(children);
                }
              } else {
                error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
              }
            } else {
              validateChildKeys(children, type);
            }
          }
        }

        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }

        return element;
      }
    }

    function jsxWithValidationStatic(type, props, key) {
      {
        return jsxWithValidation(type, props, key, true);
      }
    }

    function jsxWithValidationDynamic(type, props, key) {
      {
        return jsxWithValidation(type, props, key, false);
      }
    }

    var jsx = jsxWithValidationDynamic;
    var jsxs = jsxWithValidationStatic;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.jsx = jsx;
    exports.jsxs = jsxs;
  })();
}
});

var jsxRuntime = createCommonjsModule(function (module) {

{
  module.exports = reactJsxRuntime_development;
}
});

const applyModuleDensityStyle = (size) => {
    switch (size) {
        case 'sm':
            return { gap: 2, padding: 2, rounding: 2, titleGap: 1, summaryListGap: 1 };
        case 'md':
            return { gap: 4, padding: 4, rounding: 3, titleGap: 2, summaryListGap: 1 };
        case 'lg':
        default:
            return { gap: 6, padding: 6, rounding: 4, titleGap: 3, summaryListGap: 2 };
    }
};

var styles$V = {"badge":"Xu4 Hsu Pja","focusInnerBorder":"Ob1","focusInnerBorderLight":"CJ6","focusInnerBorderDark":"zd4","middle":"buY KhY","top":"DP5 KhY","info":"wwE","interactive-info":"Blc","error":"UZZ","interactive-error":"rtn","warning":"_9s","interactive-warning":"Tib","success":"UlE","interactive-success":"zh0","recommendation":"Bzh","interactive-recommendation":"mnB","neutral":"UUL","interactive-neutral":"ZBM","darkWash":"wUC","interactive-darkWash":"kHS","lightWash":"tBg","interactive-lightWash":"kPB"};

function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

var boxStyles = {"box":"zI7 iyn Hsu","userSelectNone":"_wN","visuallyHidden":"CRJ","xsDisplayNone":"ESm","xsDisplayFlex":"Jea","xsDisplayBlock":"oy8","xsDisplayInlineBlock":"FNs","xsDisplayVisuallyHidden":"NVN CRJ","smDisplayNone":"_As","smDisplayFlex":"d5Q","smDisplayBlock":"BFv","smDisplayInlineBlock":"_Jd","smDisplayVisuallyHidden":"Afg CRJ","mdDisplayNone":"TJs","mdDisplayFlex":"i_c","mdDisplayBlock":"PrF","mdDisplayInlineBlock":"Frz","mdDisplayVisuallyHidden":"MPk CRJ","lgDisplayNone":"jZa","lgDisplayFlex":"GDP","lgDisplayBlock":"V1t","lgDisplayInlineBlock":"yiw","lgDisplayVisuallyHidden":"GOd CRJ","xsDirectionRow":"hs0","xsDirectionColumn":"jzS","smDirectionRow":"ccF","smDirectionColumn":"FDl","mdDirectionRow":"T9f","mdDirectionColumn":"hqI","lgDirectionRow":"IR2","lgDirectionColumn":"e8G","xsCol0":"YPQ","xsCol1":"d5S wA7","xsCol2":"dSH sxy","xsCol3":"Goa xEW","xsCol4":"cz_ MRE","xsCol5":"gPb tYG","xsCol6":"GCs UHc","xsCol7":"aoh ojd","xsCol8":"wXu PX-","xsCol9":"z-m Qfr","xsCol10":"quJ vdP","xsCol11":"Q35 kaP","xsCol12":"xcv L4E","smCol0":"NYp","smCol1":"pMp Djc","smCol2":"fut tar","smCol3":"Jra QS3","smCol4":"nUE V_L","smCol5":"QM0 kh1","smCol6":"eU_ Fue","smCol7":"YhO cgB","smCol8":"xPk DkM","smCol9":"rDN AXh","smCol10":"Pd1 UtM","smCol11":"fC1 Wyy","smCol12":"NUf dXC","mdCol0":"_8v","mdCol1":"tJY U8q","mdCol2":"dok shx","mdCol3":"HUu EGm","mdCol4":"cXK XMp","mdCol5":"ad9 H2Q","mdCol6":"BD5 HHc","mdCol7":"bi8 JWr","mdCol8":"i_s h5B","mdCol9":"gog Eeb","mdCol10":"fEC TIo","mdCol11":"M5b rPE","mdCol12":"IRj QwK","lgCol0":"_Hm","lgCol1":"dTO VSa","lgCol2":"NCg aml","lgCol3":"z5O huk","lgCol4":"n-N Vnj","lgCol5":"M7z KgZ","lgCol6":"P6z c2A","lgCol7":"qTG IGd","lgCol8":"rtP hMf","lgCol9":"y22 swh","lgCol10":"xQy Hs0","lgCol11":"kM1 YXE","lgCol12":"AiQ XTp","opacity0":"BfI","opacity01":"k39","opacity02":"a8l","opacity03":"BXM","opacity04":"ZV0","opacity05":"yD6","opacity06":"zqT","opacity07":"RfI","opacity08":"tM5","opacity09":"RBE","opacity1":"ZZS","default":"imm","infoBase":"QzN","infoWeak":"Am_","errorBase":"vfW","errorWeak":"UTe","warningBase":"CXJ","warningWeak":"Fqp","successBase":"Zti","successWeak":"zDc","recommendationBase":"yFU","recommendationWeak":"kAD","shopping":"AAz","primary":"yBD","secondary":"haa","tertiary":"mD2","selected":"uom","inverse":"b0h","brand":"OKu","education":"Rtb","transparent":"ebZ","dark":"hj2","light":"GuY","elevationAccent":"z8I","elevationFloating":"Rht","elevationRaised":"nvV","lightWash":"TzN","darkWash":"TMJ","transparentDarkGrayBg":"Wxb"};

var borderStyles = {"border":"KI_","transparentBorder":"gaK","borderColorSelected":"gSJ","borderColorDarkGray":"nG5","borderColorLightGray":"LJB","borderColorRed":"xbp","borderColorLightGrayHovered":"dPY","borderColorLightGrayDisabled":"Fvo","borderTop":"uNu","borderRight":"w7l","borderBottom":"vCE","borderLeft":"mQC","circle":"INd","pill":"Lfz","rounding0":"eEj","rounding1":"Pja","rounding2":"DUt","rounding3":"s2n","rounding4":"ho-","rounding5":"PcK","rounding6":"fev","rounding7":"v_3","rounding8":"OVX","noBorder":"adn","sizeSm":"daS","sizeLg":"XgI","solid":"Pw5","shadow":"ALa","raisedTop":"vEU","raisedBottom":"Hx-"};

var boxWhitespace = {"marginStartAuto":"s7I","marginEndAuto":"feh","marginTopAuto":"MMh","marginBottomAuto":"_Y5","marginStart0":"Ll2","marginEnd0":"MtH","marginTop0":"a3i","marginBottom0":"zmN","paddingY0":"wsz","paddingX0":"lnZ","marginStart25":"Diu","marginEnd25":"Oys","marginStartN25":"Eux","marginEndN25":"CMx","marginTop25":"HQs","marginBottom25":"k-t","marginTopN25":"u8w","marginBottomN25":"IVs","paddingY25":"aZP","paddingX25":"Y9X","marginStart50":"iCb","marginEnd50":"kVB","marginStartN50":"Lzn","marginEndN50":"gyC","marginTop50":"a4F","marginBottom50":"czD","marginTopN50":"rGO","marginBottomN50":"RYf","paddingY50":"N0W","paddingX50":"beZ","marginStart100":"kyp","marginEnd100":"MmN","marginStartN100":"_mp","marginEndN100":"H_D","marginTop100":"zX-","marginBottom100":"C00","marginTopN100":"AkL","marginBottomN100":"Eqb","paddingY100":"C7G","paddingX100":"S7o","marginStart150":"PsI","marginEnd150":"aSy","marginStartN150":"OVa","marginEndN150":"Fv5","marginTop150":"rxC","marginBottom150":"SXe","marginTopN150":"fdU","marginBottomN150":"EZl","paddingY150":"Do9","paddingX150":"Shu","marginStart1000":"KnO","marginEnd1000":"fWK","marginStartN1000":"_gF","marginEndN1000":"uf5","marginTop1000":"keq","marginBottom1000":"p9K","marginTopN1000":"JWT","marginBottomN1000":"XM_","paddingY1000":"cYJ","paddingX1000":"ZAR","marginStart1100":"boM","marginEnd1100":"rho","marginStartN1100":"cAL","marginEndN1100":"N7z","marginTop1100":"g0E","marginBottom1100":"ox-","marginTopN1100":"STE","marginBottomN1100":"D4u","paddingY1100":"Ktu","paddingX1100":"J22","marginStart1200":"j-j","marginEnd1200":"Mf2","marginStartN1200":"hED","marginEndN1200":"bS3","marginTop1200":"kfz","marginBottom1200":"wOW","marginTopN1200":"gb5","marginBottomN1200":"Gk4","paddingY1200":"uiV","paddingX1200":"x_n","marginStart1300":"kxI","marginEnd1300":"x2d","marginStartN1300":"BOz","marginEndN1300":"h2M","marginTop1300":"GLe","marginBottom1300":"jnb","marginTopN1300":"S7z","marginBottomN1300":"KNr","paddingY1300":"qtr","paddingX1300":"G5p","marginStart1400":"Skv","marginEnd1400":"NtP","marginStartN1400":"uUV","marginEndN1400":"Aon","marginTop1400":"ns1","marginBottom1400":"pdb","marginTopN1400":"yDx","marginBottomN1400":"p2z","paddingY1400":"Jth","paddingX1400":"foN","marginStart1500":"WaV","marginEnd1500":"n2e","marginStartN1500":"yOL","marginEndN1500":"itI","marginTop1500":"kbk","marginBottom1500":"P3P","marginTopN1500":"cXU","marginBottomN1500":"T9D","paddingY1500":"Amd","paddingX1500":"kMG","marginStart1600":"m9q","marginEnd1600":"xZ1","marginStartN1600":"GGc","marginEndN1600":"ERM","marginTop1600":"tor","marginBottom1600":"yuQ","marginTopN1600":"LO0","marginBottomN1600":"gcK","paddingY1600":"r6w","paddingX1600":"ebX","marginStart200":"Yo2","marginEnd200":"H-G","marginStartN200":"tZ1","marginEndN200":"wCF","marginTop200":"qGb","marginBottom200":"u8x","marginTopN200":"yZW","marginBottomN200":"PoD","paddingY200":"_co","paddingX200":"hjq","marginStart300":"BTb","marginEnd300":"L9n","marginStartN300":"tOm","marginEndN300":"NZa","marginTop300":"mjS","marginBottom300":"v35","marginTopN300":"oWa","marginBottomN300":"fN_","paddingY300":"V92","paddingX300":"pXK","marginStart400":"ueq","marginEnd400":"J8R","marginStartN400":"k9j","marginEndN400":"y1h","marginTop400":"tNl","marginBottom400":"k9Z","marginTopN400":"kkH","marginBottomN400":"Var","paddingY400":"Kzl","paddingX400":"i1W","marginStart500":"sMx","marginEnd500":"NyI","marginStartN500":"Gum","marginEndN500":"Ejo","marginTop500":"WuW","marginBottom500":"HCz","marginTopN500":"MjE","marginBottomN500":"cON","paddingY500":"Upd","paddingX500":"BAC","marginStart600":"Ubc","marginEnd600":"QLU","marginStartN600":"EDE","marginEndN600":"pAd","marginTop600":"jX8","marginBottom600":"gcw","marginTopN600":"_7S","marginBottomN600":"tlO","paddingY600":"S36","paddingX600":"fXN","marginStart700":"LqC","marginEnd700":"RE9","marginStartN700":"ufi","marginEndN700":"obf","marginTop700":"PHd","marginBottom700":"h3A","marginTopN700":"cM3","marginBottomN700":"gmN","paddingY700":"cht","paddingX700":"POt","marginStart800":"JyM","marginEnd800":"qtH","marginStartN800":"SG3","marginEndN800":"XWS","marginTop800":"azc","marginBottom800":"HtR","marginTopN800":"zzV","marginBottomN800":"MjU","paddingY800":"Pa4","paddingX800":"CXk","marginStart900":"ign","marginEnd900":"Bi0","marginStartN900":"zJ7","marginEndN900":"_iD","marginTop900":"Hu0","marginBottom900":"rUm","marginTopN900":"iPp","marginBottomN900":"W73","paddingY900":"qI7","paddingX900":"vnv","smMarginStartAuto":"mo5","smMarginEndAuto":"rFn","smMarginTopAuto":"jOT","smMarginBottomAuto":"Vfe","smMarginStart0":"Eap","smMarginEnd0":"H10","smMarginTop0":"TTc","smMarginBottom0":"Yov","smPaddingY0":"UjT","smPaddingX0":"ksp","smMarginStart25":"VPX","smMarginEnd25":"_z-","smMarginStartN25":"t8Q","smMarginEndN25":"J7-","smMarginTop25":"cD2","smMarginBottom25":"FBl","smMarginTopN25":"HPi","smMarginBottomN25":"ryX","smPaddingY25":"LUa","smPaddingX25":"uU7","smMarginStart50":"u1S","smMarginEnd50":"oHo","smMarginStartN50":"bnl","smMarginEndN50":"z9a","smMarginTop50":"dWn","smMarginBottom50":"rD_","smMarginTopN50":"CPA","smMarginBottomN50":"tdu","smPaddingY50":"kMq","smPaddingX50":"iyP","smMarginStart100":"fHG","smMarginEnd100":"lcX","smMarginStartN100":"qck","smMarginEndN100":"FJb","smMarginTop100":"rSu","smMarginBottom100":"Ri3","smMarginTopN100":"dZC","smMarginBottomN100":"P0-","smPaddingY100":"WAp","smPaddingX100":"JL8","smMarginStart150":"xY7","smMarginEnd150":"wdt","smMarginStartN150":"r5c","smMarginEndN150":"odB","smMarginTop150":"BYi","smMarginBottom150":"lwI","smMarginTopN150":"SiV","smMarginBottomN150":"FlI","smPaddingY150":"DiC","smPaddingX150":"oqT","smMarginStart1000":"_eb","smMarginEnd1000":"dv2","smMarginStartN1000":"hSx","smMarginEndN1000":"JIj","smMarginTop1000":"vGq","smMarginBottom1000":"heS","smMarginTopN1000":"Qdt","smMarginBottomN1000":"lN-","smPaddingY1000":"Ily","smPaddingX1000":"mq_","smMarginStart1100":"QuF","smMarginEnd1100":"b4w","smMarginStartN1100":"VO_","smMarginEndN1100":"nFj","smMarginTop1100":"UDb","smMarginBottom1100":"pTD","smMarginTopN1100":"p0q","smMarginBottomN1100":"LwN","smPaddingY1100":"kXW","smPaddingX1100":"k0V","smMarginStart1200":"x0h","smMarginEnd1200":"_nt","smMarginStartN1200":"PGy","smMarginEndN1200":"zhc","smMarginTop1200":"xWT","smMarginBottom1200":"tZK","smMarginTopN1200":"RH6","smMarginBottomN1200":"qWz","smPaddingY1200":"b_A","smPaddingX1200":"DwD","smMarginStart1300":"gkY","smMarginEnd1300":"vee","smMarginStartN1300":"LBn","smMarginEndN1300":"KTU","smMarginTop1300":"Gn7","smMarginBottom1300":"k-1","smMarginTopN1300":"tOk","smMarginBottomN1300":"Q56","smPaddingY1300":"__d","smPaddingX1300":"Xt3","smMarginStart1400":"fRQ","smMarginEnd1400":"o9a","smMarginStartN1400":"Us8","smMarginEndN1400":"pN8","smMarginTop1400":"W23","smMarginBottom1400":"NR-","smMarginTopN1400":"aXK","smMarginBottomN1400":"wS2","smPaddingY1400":"ykf","smPaddingX1400":"bFO","smMarginStart1500":"a7L","smMarginEnd1500":"eWl","smMarginStartN1500":"cBJ","smMarginEndN1500":"BX3","smMarginTop1500":"O1O","smMarginBottom1500":"InJ","smMarginTopN1500":"YDM","smMarginBottomN1500":"gLe","smPaddingY1500":"GIR","smPaddingX1500":"A_m","smMarginStart1600":"nue","smMarginEnd1600":"B1s","smMarginStartN1600":"sG3","smMarginEndN1600":"Hjr","smMarginTop1600":"OpQ","smMarginBottom1600":"xxB","smMarginTopN1600":"L6J","smMarginBottomN1600":"YZC","smPaddingY1600":"XBz","smPaddingX1600":"mOg","smMarginStart200":"DSW","smMarginEnd200":"NOk","smMarginStartN200":"T9h","smMarginEndN200":"dW1","smMarginTop200":"HG0","smMarginBottom200":"xgA","smMarginTopN200":"Ofn","smMarginBottomN200":"kvi","smPaddingY200":"sEu","smPaddingX200":"ld2","smMarginStart300":"JY-","smMarginEnd300":"z2g","smMarginStartN300":"RV0","smMarginEndN300":"HnV","smMarginTop300":"gZX","smMarginBottom300":"F7b","smMarginTopN300":"dZU","smMarginBottomN300":"gQg","smPaddingY300":"DJh","smPaddingX300":"Yq8","smMarginStart400":"oRy","smMarginEnd400":"H7d","smMarginStartN400":"zhK","smMarginEndN400":"Qbi","smMarginTop400":"rlF","smMarginBottom400":"kiP","smMarginTopN400":"K7T","smMarginBottomN400":"Ul4","smPaddingY400":"VfL","smPaddingX400":"WnX","smMarginStart500":"Itw","smMarginEnd500":"iEV","smMarginStartN500":"r19","smMarginEndN500":"jAG","smMarginTop500":"ghC","smMarginBottom500":"ltM","smMarginTopN500":"uuP","smMarginBottomN500":"XTP","smPaddingY500":"QMO","smPaddingX500":"ZPb","smMarginStart600":"O0R","smMarginEnd600":"BUo","smMarginStartN600":"BW_","smMarginEndN600":"ORU","smMarginTop600":"p-1","smMarginBottom600":"GpN","smMarginTopN600":"ZAn","smMarginBottomN600":"Sk6","smPaddingY600":"kYg","smPaddingX600":"S7R","smMarginStart700":"B8d","smMarginEnd700":"pzs","smMarginStartN700":"hJf","smMarginEndN700":"tKX","smMarginTop700":"PSQ","smMarginBottom700":"_oF","smMarginTopN700":"KmI","smMarginBottomN700":"NJp","smPaddingY700":"ueh","smPaddingX700":"x_m","smMarginStart800":"Bqh","smMarginEnd800":"M_m","smMarginStartN800":"v-8","smMarginEndN800":"iOt","smMarginTop800":"ZwO","smMarginBottom800":"_K4","smMarginTopN800":"r7z","smMarginBottomN800":"fUI","smPaddingY800":"qfI","smPaddingX800":"pEI","smMarginStart900":"IMj","smMarginEnd900":"WcR","smMarginStartN900":"DGU","smMarginEndN900":"HB2","smMarginTop900":"pZH","smMarginBottom900":"Oqd","smMarginTopN900":"k2c","smMarginBottomN900":"_kN","smPaddingY900":"iKn","smPaddingX900":"rUK","mdMarginStartAuto":"WC8","mdMarginEndAuto":"V49","mdMarginTopAuto":"OHp","mdMarginBottomAuto":"db5","mdMarginStart0":"zlb","mdMarginEnd0":"I6C","mdMarginTop0":"J6u","mdMarginBottom0":"sjc","mdPaddingY0":"uEl","mdPaddingX0":"Hxi","mdMarginStart25":"MHC","mdMarginEnd25":"fvL","mdMarginStartN25":"CmL","mdMarginEndN25":"qnV","mdMarginTop25":"vEE","mdMarginBottom25":"qju","mdMarginTopN25":"K73","mdMarginBottomN25":"r8y","mdPaddingY25":"qo7","mdPaddingX25":"kr5","mdMarginStart50":"zFf","mdMarginEnd50":"KcX","mdMarginStartN50":"_8L","mdMarginEndN50":"SgI","mdMarginTop50":"X_m","mdMarginBottom50":"Y9p","mdMarginTopN50":"N2J","mdMarginBottomN50":"ego","mdPaddingY50":"oDh","mdPaddingX50":"MEy","mdMarginStart100":"vcd","mdMarginEnd100":"WUW","mdMarginStartN100":"p2-","mdMarginEndN100":"k6z","mdMarginTop100":"aQ0","mdMarginBottom100":"R8n","mdMarginTopN100":"d9Z","mdMarginBottomN100":"xiB","mdPaddingY100":"fjU","mdPaddingX100":"XaX","mdMarginStart150":"x6_","mdMarginEnd150":"WKz","mdMarginStartN150":"Gkq","mdMarginEndN150":"J3a","mdMarginTop150":"PtT","mdMarginBottom150":"ayD","mdMarginTopN150":"pxZ","mdMarginBottomN150":"SKC","mdPaddingY150":"wTH","mdPaddingX150":"R7J","mdMarginStart1000":"obg","mdMarginEnd1000":"ltg","mdMarginStartN1000":"NVs","mdMarginEndN1000":"omx","mdMarginTop1000":"cDM","mdMarginBottom1000":"xke","mdMarginTopN1000":"zs0","mdMarginBottomN1000":"QL2","mdPaddingY1000":"z5l","mdPaddingX1000":"IVV","mdMarginStart1100":"cgO","mdMarginEnd1100":"Yq9","mdMarginStartN1100":"cYS","mdMarginEndN1100":"CCK","mdMarginTop1100":"tp9","mdMarginBottom1100":"Zl1","mdMarginTopN1100":"Bof","mdMarginBottomN1100":"m0L","mdPaddingY1100":"zy-","mdPaddingX1100":"hhr","mdMarginStart1200":"er2","mdMarginEnd1200":"iO0","mdMarginStartN1200":"sr3","mdMarginEndN1200":"U_Y","mdMarginTop1200":"qhA","mdMarginBottom1200":"d-c","mdMarginTopN1200":"ttt","mdMarginBottomN1200":"mZ7","mdPaddingY1200":"FPz","mdPaddingX1200":"OcY","mdMarginStart1300":"tpa","mdMarginEnd1300":"MXX","mdMarginStartN1300":"BgZ","mdMarginEndN1300":"LQ8","mdMarginTop1300":"aX4","mdMarginBottom1300":"PhF","mdMarginTopN1300":"iKy","mdMarginBottomN1300":"Bm4","mdPaddingY1300":"M39","mdPaddingX1300":"cGg","mdMarginStart1400":"u_q","mdMarginEnd1400":"SWf","mdMarginStartN1400":"XdK","mdMarginEndN1400":"p6I","mdMarginTop1400":"E4C","mdMarginBottom1400":"ThW","mdMarginTopN1400":"DsF","mdMarginBottomN1400":"xCW","mdPaddingY1400":"Bin","mdPaddingX1400":"vDZ","mdMarginStart1500":"rHF","mdMarginEnd1500":"Qrn","mdMarginStartN1500":"QcO","mdMarginEndN1500":"FZi","mdMarginTop1500":"CSU","mdMarginBottom1500":"va4","mdMarginTopN1500":"tCE","mdMarginBottomN1500":"bXh","mdPaddingY1500":"Q1g","mdPaddingX1500":"F7R","mdMarginStart1600":"LEV","mdMarginEnd1600":"veA","mdMarginStartN1600":"vm9","mdMarginEndN1600":"iUG","mdMarginTop1600":"qf3","mdMarginBottom1600":"fxc","mdMarginTopN1600":"ygL","mdMarginBottomN1600":"XYC","mdPaddingY1600":"Dou","mdPaddingX1600":"a8v","mdMarginStart200":"Kt4","mdMarginEnd200":"HJW","mdMarginStartN200":"aUS","mdMarginEndN200":"cv8","mdMarginTop200":"TFx","mdMarginBottom200":"e_z","mdMarginTopN200":"aH9","mdMarginBottomN200":"JKU","mdPaddingY200":"GfI","mdPaddingX200":"Chw","mdMarginStart300":"O-l","mdMarginEnd300":"z3Z","mdMarginStartN300":"n4j","mdMarginEndN300":"woz","mdMarginTop300":"ytb","mdMarginBottom300":"Spo","mdMarginTopN300":"j_R","mdMarginBottomN300":"UDJ","mdPaddingY300":"Ii4","mdPaddingX300":"m41","mdMarginStart400":"rV7","mdMarginEnd400":"nZ7","mdMarginStartN400":"ScU","mdMarginEndN400":"FzQ","mdMarginTop400":"vra","mdMarginBottom400":"BWt","mdMarginTopN400":"Ey4","mdMarginBottomN400":"w1x","mdPaddingY400":"hEF","mdPaddingX400":"aPG","mdMarginStart500":"l8Z","mdMarginEnd500":"iwc","mdMarginStartN500":"VFl","mdMarginEndN500":"g2Q","mdMarginTop500":"fDz","mdMarginBottom500":"KWb","mdMarginTopN500":"Auz","mdMarginBottomN500":"a6r","mdPaddingY500":"H0R","mdPaddingX500":"mWu","mdMarginStart600":"A5J","mdMarginEnd600":"zZe","mdMarginStartN600":"iQF","mdMarginEndN600":"l2e","mdMarginTop600":"cvs","mdMarginBottom600":"aKg","mdMarginTopN600":"R-P","mdMarginBottomN600":"fmu","mdPaddingY600":"LHy","mdPaddingX600":"gXv","mdMarginStart700":"sYb","mdMarginEnd700":"fqv","mdMarginStartN700":"FxB","mdMarginEndN700":"uY6","mdMarginTop700":"h2l","mdMarginBottom700":"iX3","mdMarginTopN700":"JZW","mdMarginBottomN700":"IVE","mdPaddingY700":"ctq","mdPaddingX700":"Vu9","mdMarginStart800":"UYJ","mdMarginEnd800":"w5s","mdMarginStartN800":"CvW","mdMarginEndN800":"EVj","mdMarginTop800":"EkZ","mdMarginBottom800":"J3A","mdMarginTopN800":"O_9","mdMarginBottomN800":"W6K","mdPaddingY800":"E-5","mdPaddingX800":"Z_P","mdMarginStart900":"Q2r","mdMarginEnd900":"hu3","mdMarginStartN900":"HV-","mdMarginEndN900":"ah0","mdMarginTop900":"shK","mdMarginBottom900":"SWq","mdMarginTopN900":"PPU","mdMarginBottomN900":"evE","mdPaddingY900":"bk-","mdPaddingX900":"ZT0","lgMarginStartAuto":"EzO","lgMarginEndAuto":"Xqy","lgMarginTopAuto":"XhV","lgMarginBottomAuto":"XsV","lgMarginStart0":"yNv","lgMarginEnd0":"K11","lgMarginTop0":"vOt","lgMarginBottom0":"pEy","lgPaddingY0":"m-x","lgPaddingX0":"sVI","lgMarginStart25":"Mlq","lgMarginEnd25":"_u0","lgMarginStartN25":"ZVK","lgMarginEndN25":"OGf","lgMarginTop25":"g1x","lgMarginBottom25":"NuV","lgMarginTopN25":"Yhp","lgMarginBottomN25":"w49","lgPaddingY25":"DQ4","lgPaddingX25":"irG","lgMarginStart50":"qcC","lgMarginEnd50":"MWv","lgMarginStartN50":"WWA","lgMarginEndN50":"EOP","lgMarginTop50":"Esz","lgMarginBottom50":"DfQ","lgMarginTopN50":"oxa","lgMarginBottomN50":"c_y","lgPaddingY50":"UIw","lgPaddingX50":"mjF","lgMarginStart100":"Tk5","lgMarginEnd100":"V3q","lgMarginStartN100":"CFV","lgMarginEndN100":"A0f","lgMarginTop100":"y3k","lgMarginBottom100":"Kk9","lgMarginTopN100":"RxG","lgMarginBottomN100":"k98","lgPaddingY100":"hiQ","lgPaddingX100":"W1H","lgMarginStart150":"RCJ","lgMarginEnd150":"kPe","lgMarginStartN150":"Xuj","lgMarginEndN150":"u__","lgMarginTop150":"JaZ","lgMarginBottom150":"iJ8","lgMarginTopN150":"aTM","lgMarginBottomN150":"WDO","lgPaddingY150":"isM","lgPaddingX150":"gc-","lgMarginStart1000":"wbY","lgMarginEnd1000":"KlA","lgMarginStartN1000":"Cr8","lgMarginEndN1000":"aIW","lgMarginTop1000":"sul","lgMarginBottom1000":"BJE","lgMarginTopN1000":"mIS","lgMarginBottomN1000":"b4C","lgPaddingY1000":"P6U","lgPaddingX1000":"GEu","lgMarginStart1100":"bG1","lgMarginEnd1100":"fsq","lgMarginStartN1100":"cug","lgMarginEndN1100":"kZ1","lgMarginTop1100":"KzE","lgMarginBottom1100":"ldL","lgMarginTopN1100":"QUm","lgMarginBottomN1100":"QMs","lgPaddingY1100":"Rbd","lgPaddingX1100":"aSV","lgMarginStart1200":"dCv","lgMarginEnd1200":"A0v","lgMarginStartN1200":"yhG","lgMarginEndN1200":"UxN","lgMarginTop1200":"Lgs","lgMarginBottom1200":"INe","lgMarginTopN1200":"phH","lgMarginBottomN1200":"Vwr","lgPaddingY1200":"uqK","lgPaddingX1200":"shV","lgMarginStart1300":"XLq","lgMarginEnd1300":"zXe","lgMarginStartN1300":"hA-","lgMarginEndN1300":"fzd","lgMarginTop1300":"DKQ","lgMarginBottom1300":"HIi","lgMarginTopN1300":"xfR","lgMarginBottomN1300":"lh6","lgPaddingY1300":"KJY","lgPaddingX1300":"gsi","lgMarginStart1400":"A7Z","lgMarginEnd1400":"kr8","lgMarginStartN1400":"Nxm","lgMarginEndN1400":"H_0","lgMarginTop1400":"Pqw","lgMarginBottom1400":"Ypn","lgMarginTopN1400":"Axi","lgMarginBottomN1400":"uhP","lgPaddingY1400":"WFz","lgPaddingX1400":"d27","lgMarginStart1500":"DnK","lgMarginEnd1500":"qqQ","lgMarginStartN1500":"a2U","lgMarginEndN1500":"L9r","lgMarginTop1500":"bNq","lgMarginBottom1500":"Gn_","lgMarginTopN1500":"Mq0","lgMarginBottomN1500":"NQ2","lgPaddingY1500":"CHD","lgPaddingX1500":"sfu","lgMarginStart1600":"hRL","lgMarginEnd1600":"GSm","lgMarginStartN1600":"Xs8","lgMarginEndN1600":"ef_","lgMarginTop1600":"W3a","lgMarginBottom1600":"ynp","lgMarginTopN1600":"kqd","lgMarginBottomN1600":"lAg","lgPaddingY1600":"nFH","lgPaddingX1600":"g1b","lgMarginStart200":"Qfz","lgMarginEnd200":"IGZ","lgMarginStartN200":"UUH","lgMarginEndN200":"ncp","lgMarginTop200":"wpk","lgMarginBottom200":"h5N","lgMarginTopN200":"e3n","lgMarginBottomN200":"YbX","lgPaddingY200":"od9","lgPaddingX200":"d1M","lgMarginStart300":"n67","lgMarginEnd300":"Tm5","lgMarginStartN300":"GfL","lgMarginEndN300":"nRi","lgMarginTop300":"vnn","lgMarginBottom300":"fna","lgMarginTopN300":"Fux","lgMarginBottomN300":"c4k","lgPaddingY300":"rdM","lgPaddingX300":"ybx","lgMarginStart400":"Epk","lgMarginEnd400":"IgA","lgMarginStartN400":"FiT","lgMarginEndN400":"oiW","lgMarginTop400":"gpI","lgMarginBottom400":"FWX","lgMarginTopN400":"Uv9","lgMarginBottomN400":"Rop","lgPaddingY400":"O5Z","lgPaddingX400":"pVD","lgMarginStart500":"CQY","lgMarginEnd500":"rOG","lgMarginStartN500":"tJ3","lgMarginEndN500":"abj","lgMarginTop500":"Bgt","lgMarginBottom500":"MCu","lgMarginTopN500":"oY0","lgMarginBottomN500":"K30","lgPaddingY500":"N6H","lgPaddingX500":"USy","lgMarginStart600":"r0A","lgMarginEnd600":"gI5","lgMarginStartN600":"aA4","lgMarginEndN600":"IfL","lgMarginTop600":"dwF","lgMarginBottom600":"Pp2","lgMarginTopN600":"KA5","lgMarginBottomN600":"nPG","lgPaddingY600":"aag","lgPaddingX600":"c4b","lgMarginStart700":"sVa","lgMarginEnd700":"PDp","lgMarginStartN700":"Xf8","lgMarginEndN700":"Ztm","lgMarginTop700":"_Wk","lgMarginBottom700":"TzX","lgMarginTopN700":"YIC","lgMarginBottomN700":"N0o","lgPaddingY700":"M4J","lgPaddingX700":"Hjl","lgMarginStart800":"a64","lgMarginEnd800":"YQz","lgMarginStartN800":"bkb","lgMarginEndN800":"Lat","lgMarginTop800":"EMg","lgMarginBottom800":"TbH","lgMarginTopN800":"NEv","lgMarginBottomN800":"FnM","lgPaddingY800":"Xrv","lgPaddingX800":"fzG","lgMarginStart900":"Sw1","lgMarginEnd900":"h38","lgMarginStartN900":"ViR","lgMarginEndN900":"arI","lgMarginTop900":"rNV","lgMarginBottom900":"AKd","lgMarginTopN900":"fSz","lgMarginBottomN900":"KRr","lgPaddingY900":"rC6","lgPaddingX900":"EPv"};

/*

Style is a monoid that capture the "to-be-applied" styles (inline and classes)
for a Box. It's basically set that is closed under an associative binary
operation and has an identity element such that for all HA HA HA. Yes, it's a
monoid, which sounds scary but it's not really and actually super useful. All
that means is that basically you can do two things with it:

    1. concat(concat(a, b), c) === concat(a, concat(b, c));
    2. concat(identity(), a) === concat(a, identity()) === a;

What that means is that it's really easy to compose styles together and the
order in which you do so doesn't really matter.

*/
const identity = () => ({
    className: new Set(),
    inlineStyle: {},
});
const fromClassName = (...classNames) => ({
    className: new Set(classNames),
    inlineStyle: {},
});
const fromInlineStyle = (inlineStyle) => ({
    className: new Set(),
    inlineStyle,
});
const concat = (styles) => styles.reduce(({ className: classNameA, inlineStyle: inlineStyleA }, { className: classNameB, inlineStyle: inlineStyleB }) => ({
    className: new Set([...classNameA, ...classNameB]),
    inlineStyle: Object.assign(Object.assign({}, inlineStyleA), inlineStyleB),
}), identity());
const mapClassName = (fn) => ({ className, inlineStyle }) => ({
    className: new Set(Array.from(className).map((n) => fn(n))),
    inlineStyle,
});
const toProps = ({ className, inlineStyle }) => {
    let sortedClassNames;
    if (className.size > 0) {
        // Sorting here ensures that classNames are always stable, reducing diff
        // churn. Box usually has a small number of properties so it's not a perf
        // concern.
        sortedClassNames = Array.from(className).sort().join(' ');
    }
    let stylesObj;
    if (Object.keys(inlineStyle).length > 0) {
        stylesObj = inlineStyle;
    }
    return { className: sortedClassNames, style: stylesObj };
};

// Adds a classname when a property is present.
//     <Box top />
const toggle = (...classNames) => (val) => val ? fromClassName(...classNames) : identity();
// Maps string values to classes
//     <Box alignItems="center" />
const mapping = (map) => (val) => Object.prototype.hasOwnProperty.call(map, val) && typeof map[val] === 'string'
    ? fromClassName(map[val])
    : identity();
// Maps a range of integers to a range of classnames
//     <Box padding={1} />
const range = (scale) => (n) => fromClassName(`${scale}${n < 0 ? `N${Math.abs(n)}` : n}`);
const rangeWithZero = (scale) => (n) => range(scale)(n * 100);
// Binds a string classname to the value in an object. Useful when interacting
// with ranges that need to come dynamically from a style object. This is
// similar to the NPM package 'classnames/bind'.
function bind(fn, scope) {
    const map = mapClassName((name) => scope[name]);
    return (val) => map(fn(val));
}
// This takes a series of the previously defined functors, runs them all
// against a value and returns the set of their classnames.
const union = (...fns) => (val) => concat(fns.map((fn) => fn(val)));

const getRoundingStyle = (rounding) => {
    if (typeof rounding === 'number') {
        return bind(range('rounding'), borderStyles)(rounding);
    }
    if (rounding === 'circle') {
        return fromClassName(borderStyles.circle);
    }
    if (rounding === 'pill') {
        return fromClassName(borderStyles.pill);
    }
    return identity();
};
const getRoundingClassName = (rounding) => toProps(getRoundingStyle(rounding)).className;

var Layout = {"block":"kVc","inline":"goI","inlineBlock":"KhY","inlineFlex":"DyB","table":"zsR","overflowHidden":"sLG","overflowScroll":"xqS","overflowScrollX":"vVc","overflowScrollY":"Cii","overflowAuto":"XbT","overflowAutoY":"r-d","fit":"xuU","relative":"XiG","fixed":"_he","absolute":"MIw","sticky":"qiB","top0":"QLY","right0":"p6V","bottom0":"ojN","left0":"Rym","small":"I56","medium":"aZc","large":"xD4","borderBox":"Hsu","contentBox":"jr-","flex":"_O1","smFlex":"pRa","mdFlex":"t6T","lgFlex":"i0q","flexColumn":"qT6","flexWrap":"kzZ","xsItemsStart":"qF5","xsItemsEnd":"iJk","xsItemsCenter":"KS5","xsItemsBaseline":"dLb","xsItemsStretch":"WOZ","smItemsStart":"nH8","smItemsEnd":"Kxm","smItemsCenter":"YcN","smItemsBaseline":"wKg","smItemsStretch":"sRf","mdItemsStart":"yqc","mdItemsEnd":"Cor","mdItemsCenter":"ReJ","mdItemsBaseline":"Yfi","mdItemsStretch":"fWv","lgItemsStart":"Xma","lgItemsEnd":"vu7","lgItemsCenter":"pD_","lgItemsBaseline":"gjO","lgItemsStretch":"djZ","selfStart":"X0f","selfEnd":"gRy","selfCenter":"Z2K","selfBaseline":"Op6","selfStretch":"Zvs","justifyStart":"rrK","justifyEnd":"jx-","justifyCenter":"mQ8","justifyBetween":"b8T","justifyAround":"Ah0","justifyEvenly":"nt5","contentStart":"yOS","contentEnd":"hwG","contentCenter":"TpD","contentBetween":"bkI","contentAround":"x9O","contentEvenly":"zus","contentStretch":"kBO","flexGrow":"ujU","flexNone":"Eqh","orderFirst":"oTa","orderLast":"nEN","minWidth60":"USg","fullWidth":"CLD","fullHeight":"zHq"};

const contains = (key, arr) => arr.indexOf(key) >= 0;
const omit = (keys, obj) => Object.keys(obj).reduce((acc, k) => {
    if (contains(k, keys)) {
        return acc;
    }
    return Object.assign(Object.assign({}, acc), { [k]: obj[k] });
}, {});

/*

# Transformers

This is where the meat and the bones of Box's transforms are. You can read more about the DSL in `./transforms.js`, but basically they are a small declarative way of specifying how a property (i.e. `marginTop={4}`) gets turned into a CSS class (`marginTop4`).

There's a little preamble here, but it culminates in a big object mapping the actual property names to the transformer values.

*/
const alignItems = mapping({
    start: Layout.xsItemsStart,
    end: Layout.xsItemsEnd,
    center: Layout.xsItemsCenter,
    baseline: Layout.xsItemsBaseline,
    // default: stretch
});
const display = mapping({
    none: boxStyles.xsDisplayNone,
    flex: boxStyles.xsDisplayFlex,
    block: boxStyles.xsDisplayBlock,
    inlineBlock: boxStyles.xsDisplayInlineBlock,
    visuallyHidden: boxStyles.xsDisplayVisuallyHidden,
});
const column = bind(range('xsCol'), boxStyles);
const direction = mapping({
    row: boxStyles.xsDirectionRow,
    column: boxStyles.xsDirectionColumn,
});
const smAlignItems = mapping({
    start: Layout.smItemsStart,
    end: Layout.smItemsEnd,
    center: Layout.smItemsCenter,
    baseline: Layout.smItemsBaseline,
    // default: stretch
});
const smDisplay = mapping({
    none: boxStyles.smDisplayNone,
    flex: boxStyles.smDisplayFlex,
    block: boxStyles.smDisplayBlock,
    inlineBlock: boxStyles.smDisplayInlineBlock,
    visuallyHidden: boxStyles.smDisplayVisuallyHidden,
});
const smColumn = bind(range('smCol'), boxStyles);
const smDirection = mapping({
    row: boxStyles.smDirectionRow,
    column: boxStyles.smDirectionColumn,
});
const mdAlignItems = mapping({
    start: Layout.mdItemsStart,
    end: Layout.mdItemsEnd,
    center: Layout.mdItemsCenter,
    baseline: Layout.mdItemsBaseline,
    // default: stretch
});
const mdDisplay = mapping({
    none: boxStyles.mdDisplayNone,
    flex: boxStyles.mdDisplayFlex,
    block: boxStyles.mdDisplayBlock,
    inlineBlock: boxStyles.mdDisplayInlineBlock,
    visuallyHidden: boxStyles.mdDisplayVisuallyHidden,
});
const mdColumn = bind(range('mdCol'), boxStyles);
const mdDirection = mapping({
    row: boxStyles.mdDirectionRow,
    column: boxStyles.mdDirectionColumn,
});
const lgAlignItems = mapping({
    start: Layout.lgItemsStart,
    end: Layout.lgItemsEnd,
    center: Layout.lgItemsCenter,
    baseline: Layout.lgItemsBaseline,
    // default: stretch
});
const lgDisplay = mapping({
    none: boxStyles.lgDisplayNone,
    flex: boxStyles.lgDisplayFlex,
    block: boxStyles.lgDisplayBlock,
    inlineBlock: boxStyles.lgDisplayInlineBlock,
    visuallyHidden: boxStyles.lgDisplayVisuallyHidden,
});
const lgColumn = bind(range('lgCol'), boxStyles);
const lgDirection = mapping({
    row: boxStyles.lgDirectionRow,
    column: boxStyles.lgDirectionColumn,
});
/* ***************************************** */
const alignContent = mapping({
    start: Layout.contentStart,
    end: Layout.contentEnd,
    center: Layout.contentCenter,
    between: Layout.contentBetween,
    around: Layout.contentAround,
    evenly: Layout.contentEvenly,
    // default: stretch
});
const alignSelf = mapping({
    start: Layout.selfStart,
    end: Layout.selfEnd,
    center: Layout.selfCenter,
    baseline: Layout.selfBaseline,
    stretch: Layout.selfStretch,
    // default: auto
});
const bottom = toggle(Layout.bottom0);
const borderStyle = (value) => {
    const borderProps = value === 'sm' || value === 'lg'
        ? [fromClassName(borderStyles.solid), fromClassName(borderStyles.borderColorLightGray)]
        : [];
    return concat([
        mapping({
            sm: borderStyles.sizeSm,
            lg: borderStyles.sizeLg,
            shadow: borderStyles.shadow,
            raisedTopShadow: borderStyles.raisedTop,
            raisedBottomShadow: borderStyles.raisedBottom,
        })(value),
        ...borderProps,
    ]);
};
const color$2 = mapping({
    default: boxStyles.default,
    infoBase: boxStyles.infoBase,
    infoWeak: boxStyles.infoWeak,
    errorBase: boxStyles.errorBase,
    errorWeak: boxStyles.errorWeak,
    warningBase: boxStyles.warningBase,
    warningWeak: boxStyles.warningWeak,
    successBase: boxStyles.successBase,
    successWeak: boxStyles.successWeak,
    recommendationBase: boxStyles.recommendationBase,
    recommendationWeak: boxStyles.recommendationWeak,
    shopping: boxStyles.shopping,
    primary: boxStyles.primary,
    secondary: boxStyles.secondary,
    tertiary: boxStyles.tertiary,
    selected: boxStyles.selected,
    inverse: boxStyles.inverse,
    brand: boxStyles.brand,
    education: boxStyles.education,
    elevationAccent: boxStyles.elevationAccent,
    elevationFloating: boxStyles.elevationFloating,
    elevationRaised: boxStyles.elevationRaised,
    dark: boxStyles.dark,
    light: boxStyles.light,
    lightWash: boxStyles.lightWash,
    darkWash: boxStyles.darkWash,
    transparentDarkGray: boxStyles.transparentDarkGrayBg,
    transparent: boxStyles.transparent,
});
const fit = toggle(Layout.fit);
const flex = mapping({
    grow: Layout.flexGrow,
    none: Layout.flexNone,
    // default: shrink
});
const flexBasis = (v) => fromInlineStyle({ flexBasis: v });
const height = (h) => fromInlineStyle({ height: h });
const justifyContent = mapping({
    end: Layout.justifyEnd,
    center: Layout.justifyCenter,
    between: Layout.justifyBetween,
    around: Layout.justifyAround,
    evenly: Layout.justifyEvenly,
    // default: start
});
const left = toggle(Layout.left0);
const transformNumberOrPassthrough = (selector) => (m) => {
    if (typeof m === 'number') {
        return bind(rangeWithZero(selector), boxWhitespace)(m);
    }
    if (m === 'auto') {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore cannot infer type with dynamic property name
        return fromClassName(boxWhitespace[`${selector}Auto`]);
    }
    return identity();
};
const marginStart = transformNumberOrPassthrough('marginStart');
const marginEnd = transformNumberOrPassthrough('marginEnd');
const marginTop = transformNumberOrPassthrough('marginTop');
const marginBottom = transformNumberOrPassthrough('marginBottom');
const margin = union(marginTop, marginBottom, marginStart, marginEnd);
const smMarginStart = transformNumberOrPassthrough('smMarginStart');
const smMarginEnd = transformNumberOrPassthrough('smMarginEnd');
const smMarginTop = transformNumberOrPassthrough('smMarginTop');
const smMarginBottom = transformNumberOrPassthrough('smMarginBottom');
const smMargin = union(smMarginTop, smMarginBottom, smMarginStart, smMarginEnd);
const mdMarginStart = transformNumberOrPassthrough('mdMarginStart');
const mdMarginEnd = transformNumberOrPassthrough('mdMarginEnd');
const mdMarginTop = transformNumberOrPassthrough('mdMarginTop');
const mdMarginBottom = transformNumberOrPassthrough('mdMarginBottom');
const mdMargin = union(mdMarginTop, mdMarginBottom, mdMarginStart, mdMarginEnd);
const lgMarginStart = transformNumberOrPassthrough('lgMarginStart');
const lgMarginEnd = transformNumberOrPassthrough('lgMarginEnd');
const lgMarginTop = transformNumberOrPassthrough('lgMarginTop');
const lgMarginBottom = transformNumberOrPassthrough('lgMarginBottom');
const lgMargin = union(lgMarginTop, lgMarginBottom, lgMarginStart, lgMarginEnd);
/* ***************************************** */
const maxHeight = (d) => fromInlineStyle({ maxHeight: d });
const maxWidth = (d) => fromInlineStyle({ maxWidth: d });
const minHeight = (d) => fromInlineStyle({ minHeight: d });
const minWidth = (d) => fromInlineStyle({ minWidth: d });
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore cannot infer type with dynamic property name
const opacityMap = mapClassName((name) => boxStyles[name]);
const opacity = (val) => {
    if (val > 0 && val < 1) {
        return opacityMap(range('opacity0')(val * 10));
    }
    return opacityMap(range('opacity')(val));
};
const overflow = mapping({
    hidden: Layout.overflowHidden,
    scroll: Layout.overflowScroll,
    auto: Layout.overflowAuto,
    scrollX: Layout.overflowScrollX,
    scrollY: Layout.overflowScrollY,
    // default: visible
});
const paddingX = bind(rangeWithZero('paddingX'), boxWhitespace);
const paddingY = bind(rangeWithZero('paddingY'), boxWhitespace);
const padding = union(paddingX, paddingY);
const smPaddingX = bind(rangeWithZero('smPaddingX'), boxWhitespace);
const smPaddingY = bind(rangeWithZero('smPaddingY'), boxWhitespace);
const smPadding = union(smPaddingX, smPaddingY);
const mdPaddingX = bind(rangeWithZero('mdPaddingX'), boxWhitespace);
const mdPaddingY = bind(rangeWithZero('mdPaddingY'), boxWhitespace);
const mdPadding = union(mdPaddingX, mdPaddingY);
const lgPaddingX = bind(rangeWithZero('lgPaddingX'), boxWhitespace);
const lgPaddingY = bind(rangeWithZero('lgPaddingY'), boxWhitespace);
const lgPadding = union(lgPaddingX, lgPaddingY);
/* ***************************************** */
const position = mapping({
    absolute: Layout.absolute,
    relative: Layout.relative,
    fixed: Layout.fixed,
    // default: static
});
const right = toggle(Layout.right0);
const rounding$1 = getRoundingStyle;
const top = toggle(Layout.top0);
const userSelect = mapping({
    none: boxStyles.userSelectNone,
    // default: auto
});
const width = (w) => fromInlineStyle({ width: w });
const wrap = toggle(Layout.flexWrap);
const dangerouslySetInlineStyle = (value) => 
// eslint-disable-next-line no-underscore-dangle
value && value.__style ? fromInlineStyle(value.__style) : identity();
const zIndex = (value) => {
    if (!value) {
        return identity();
    }
    return fromInlineStyle({ zIndex: value.index() });
};
/*

It's preferable to put new properties into that object directly just so it's easier to read.
Unfortunately Flow doesn't like that for the vast majority of the fields. :(

*/
const propToFn = {
    alignItems,
    display,
    column,
    direction,
    smAlignItems,
    smDisplay,
    smColumn,
    smDirection,
    mdAlignItems,
    mdDisplay,
    mdColumn,
    mdDirection,
    lgAlignItems,
    lgDisplay,
    lgColumn,
    lgDirection,
    alignContent,
    alignSelf,
    bottom,
    borderStyle,
    color: color$2,
    fit,
    flex,
    flexBasis,
    height,
    justifyContent,
    left,
    margin,
    marginTop,
    marginBottom,
    marginStart,
    marginEnd,
    smMargin,
    smMarginTop,
    smMarginBottom,
    smMarginStart,
    smMarginEnd,
    mdMargin,
    mdMarginTop,
    mdMarginBottom,
    mdMarginStart,
    mdMarginEnd,
    lgMargin,
    lgMarginTop,
    lgMarginBottom,
    lgMarginStart,
    lgMarginEnd,
    maxHeight,
    maxWidth,
    minHeight,
    minWidth,
    opacity,
    overflow,
    padding,
    paddingX,
    paddingY,
    smPadding,
    smPaddingX,
    smPaddingY,
    mdPadding,
    mdPaddingX,
    mdPaddingY,
    lgPadding,
    lgPaddingX,
    lgPaddingY,
    position,
    right,
    rounding: rounding$1,
    top,
    userSelect,
    width,
    wrap,
    dangerouslySetInlineStyle,
    zIndex,
};
/*

# Style Builder

This is where it all comes together. This function takes the base styles for the component,
the component's props, and any disallowed props. It outputs the passthrough props (after
removing disallowed and given props), as well as an object with the combined classNames
and styles from the given props.

Optionally, for more restrictive components, this function can accept an allowlist of
valid props. Any props not on this list will be ignored.

*/
function buildStyles({ baseStyles, props, blocklistProps, allowlistProps, }) {
    // Flow can't reason about the constant nature of Object.keys so we can't use
    // a functional (reduce) style here.
    // All Box's are box-sized by default, so we start off building up the styles
    // to be applied with a Box base class.
    let s = fromClassName(baseStyles);
    // Init the list of props we'll omit from passthrough. We'll add to this
    // list as we match props against the transforms list.
    const omitProps = [...(blocklistProps !== null && blocklistProps !== void 0 ? blocklistProps : [])];
    // This loops through each property and if it exists in the previously
    // defined transform map, concatenates the resulting styles to the base
    // styles. If there's a match, we also don't pass through that property. This
    // means Box's runtime is only dependent on the number of properties passed
    // to it (which is typically small) instead of the total number of possible
    // properties (~30 or so). While it may ~feel~ like Box is inefficient, its
    // biggest performance impact is on startup time because there's so much code
    // here.
    // eslint-disable-next-line no-restricted-syntax
    for (const prop in props) {
        if (Object.prototype.hasOwnProperty.call(propToFn, prop) &&
            !omitProps.includes(prop) &&
            (!allowlistProps || allowlistProps.includes(prop))) {
            // @ts-expect-error - TS2536 - Type 'Extract<keyof T, string>' cannot be used to index type '{ readonly alignItems: Functor<AlignItems>; readonly display: Functor<Display>; readonly column: Functor<Column>; readonly direction: Functor<...>; ... 69 more ...; readonly zIndex: Functor<...>; }'.
            const fn = propToFn[prop];
            const value = props[prop];
            omitProps.push(prop);
            s = concat([s, fn(value)]);
        }
    }
    return {
        passthroughProps: omit(omitProps, props),
        propsStyles: toProps(s),
    };
}

// --
/*

# The Component

*/
// Box is a "pass-through" component, meaning that if you pass properties to it
// that it doesn't know about (`aria-label` for instance) it passes directly
// back to the underlying `<div/>`. That's generally useful, but we'd also like
// to strip out a few naughty properties that break style encapsulation
// (className, style) or accessibility (onClick).
const disallowedProps = [
    'onClick',
    'className',
    'style',
    // We're currently also explicitly disallowing the deprecated marginLeft/Right
    // props, as they're not RTL-friendly.
    'marginLeft',
    'smMarginLeft',
    'mdMarginLeft',
    'lgMarginLeft',
    'marginRight',
    'smMarginRight',
    'mdMarginRight',
    'lgMarginRight',
];
/**
 * [Box](https://gestalt.pinterest.systems/web/box) is a component primitive that can be used to build the foundation of pretty much any other component. It keeps details like spacing, borders and colors consistent with the rest of Gestalt, while allowing the developer to focus on the content.
 *
 * ![Box light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Box.spec.ts-snapshots/Box-chromium-darwin.png)
 * ![Box dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Box-dark.spec.ts-snapshots/Box-dark-chromium-darwin.png)
 *
 */
const BoxWithForwardRef = forwardRef(function Box(_a, ref) {
    var { as } = _a, props = __rest(_a, ["as"]);
    const { passthroughProps, propsStyles } = buildStyles({
        baseStyles: boxStyles.box,
        props,
        blocklistProps: disallowedProps,
    });
    const BoxElement = as !== null && as !== void 0 ? as : 'div';
    // And... magic!
    // @ts-expect-error - TS2322
    return jsxRuntime.jsx(BoxElement, Object.assign({}, passthroughProps, propsStyles, { ref: ref }));
});
BoxWithForwardRef.displayName = 'Box';

var flexStyles = {"Flex":"un8","FlexItem":"xuA","columnGap0":"TB_","rowGap0":"C9i","columnGap25":"yEQ","rowGap25":"bDW","columnGap50":"cKt","rowGap50":"NUa","columnGap100":"yLs","rowGap100":"aW4","columnGap150":"YPD","rowGap150":"yID","columnGap1000":"jDD","rowGap1000":"L4V","columnGap1100":"JQx","rowGap1100":"Ab3","columnGap1200":"yZm","rowGap1200":"jJC","columnGap200":"JrK","rowGap200":"b23","columnGap300":"wn_","rowGap300":"pQW","columnGap400":"qQp","rowGap400":"a1C","columnGap500":"kML","rowGap500":"EQL","columnGap600":"FKv","rowGap600":"fvB","columnGap700":"mrD","rowGap700":"t9k","columnGap800":"V71","rowGap800":"_Fp","columnGap900":"bnw","rowGap900":"UsO"};

const allowedProps$1 = ['alignSelf', 'children', 'flex', 'flexBasis', 'maxWidth', 'minWidth'];
/**
 * Use [Flex.Item](https://gestalt.pinterest.systems/web/flex) within a Flex container for more precise control over the child element. Flex children that are not explicitly wrapped in Flex.Item will be wrapped in the the component automatically to apply `gap` spacing.
 */
const FlexItemWithForwardRef = forwardRef(function FlexItem(_a, ref) {
    var { dataTestId } = _a, rest = __rest(_a, ["dataTestId"]);
    const { passthroughProps, propsStyles } = buildStyles({
        baseStyles: flexStyles.FlexItem,
        props: rest,
        allowlistProps: allowedProps$1,
    });
    // @ts-expect-error - TS2322 - Type '{ "data-test-id": string | undefined; className: string | null | undefined; style: InlineStyle | null | undefined; alignSelf?: "center" | "start" | "end" | "baseline" | "stretch" | "auto" | undefined; ... 5 more ...; minWidth?: Dimension | undefined; }' is not assignable to type 'DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>'.
    return jsxRuntime.jsx("div", Object.assign({ ref: ref }, passthroughProps, propsStyles, { "data-test-id": dataTestId }));
});
FlexItemWithForwardRef.displayName = 'Flex.Item';

// In development, we compare based on the name of the function because
// React Hot Loader proxies React components in order to make updates. In
// production we can simply compare the components for equality.
const isComponent = (AComponent, AnotherComponent) => AComponent === AnotherComponent;
// Checks whether `element` is a React element of type `Component` (or one of
// the passed components, if `Component` is an array of React components).
function isElementOfType(element, Component) {
    if (element === null ||
        element === undefined ||
        typeof element !== 'object' // catch all other primitives
    ) {
        return false;
    }
    if (!isValidElement(element) || typeof element.type === 'string') {
        return false;
    }
    const { type } = element;
    const Components = Array.isArray(Component) ? Component : [Component];
    return Components.some((AComponent) => typeof type !== 'string' && isComponent(AComponent, type));
}
// Conditionally wraps `element` in `Component` if it is not already an instance of
// `Component`. If `props` is passed, those will be added as props on the
// wrapped component. If `element` is nullish, null is returned.
function wrapWithComponent({ element, Component, props, }) {
    if (element === null || element === undefined) {
        return null;
    }
    return isElementOfType(element, Component) ? (element) : (jsxRuntime.jsx(Component, Object.assign({}, props, { children: element })));
}

const allowedProps = [
    'alignContent',
    'alignItems',
    'smAlignItems',
    'mdAlignItems',
    'lgAlignItems',
    'alignSelf',
    'children',
    'direction',
    'flex',
    'height',
    'justifyContent',
    'maxHeight',
    'maxWidth',
    'minHeight',
    'minWidth',
    'overflow',
    'width',
    'wrap',
];
/**
 * [Flex](https://gestalt.pinterest.systems/web/flex) is a layout component with a very limited subset of the props available to [Box](https://gestalt.pinterest.systems/web/box) and a special prop of its own.

 * Use this component for flexbox layouts, especially when even spacing between elements is desired (see the `gap` prop!).
 *
 * ![Flex light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Flex.spec.ts-snapshots/Flex-chromium-darwin.png)
 *
 */
const FlexWithForwardRef = forwardRef((_a, ref) => {
    var { children: childrenProp, dataTestId, direction = 'row', gap = 0, justifyContent } = _a, rest = __rest(_a, ["children", "dataTestId", "direction", "gap", "justifyContent"]);
    const children = gap
        ? // @ts-expect-error - TS2533 - Object is possibly 'null' or 'undefined'.
            Children.map(childrenProp, (child, index) => {
                if (child === null || child === undefined) {
                    return null;
                }
                return wrapWithComponent({
                    element: child,
                    Component: FlexItemWithForwardRef,
                    props: {
                        key: index,
                    },
                });
            }).filter(Boolean)
        : childrenProp;
    const gapStyles = `${flexStyles[`rowGap${typeof gap === 'number' ? gap * 100 : gap.row * 100}`]} ${flexStyles[`columnGap${typeof gap === 'number' ? gap * 100 : gap.column * 100}`]}`;
    const { passthroughProps, propsStyles } = buildStyles({
        baseStyles: `${flexStyles.Flex} ${gapStyles}`,
        props: Object.assign(Object.assign({}, rest), { children,
            direction,
            justifyContent }),
        allowlistProps: allowedProps,
    });
    // @ts-expect-error - TS2322 - Type '{ "data-test-id": string | undefined; className: string | null | undefined; style: InlineStyle | null | undefined; alignContent?: "center" | "start" | "end" | "stretch" | "between" | "around" | "evenly" | undefined; ... 18 more ...; wrap?: boolean | undefined; }' is not assignable to type 'DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>'.
    return jsxRuntime.jsx("div", Object.assign({ ref: ref }, passthroughProps, propsStyles, { "data-test-id": dataTestId }));
});
// Attach the subcomponent to the main component
FlexWithForwardRef.Item = FlexItemWithForwardRef;
FlexWithForwardRef.displayName = 'Flex';

const swapOnRtlIconNames = Object.freeze(['list-numbered']);
const flipOnRtlIconNames = Object.freeze([
    'ads-stats',
    'ads-overview',
    'arrow-back',
    'arrow-circle-forward',
    'arrow-end',
    'arrow-forward',
    'arrow-start',
    'arrow-up-right',
    'compose',
    'chevron-left-circle',
    'chevron-right-circle',
    'directional-arrow-left',
    'directional-arrow-right',
    'flip-vertical',
    'hand-pointing',
    'link',
    'mute',
    'reorder-images',
    'send',
    'sound',
    'speech',
    'speech-ellipsis',
    'switch-account',
    'text-size',
    'visit',
]);

var styles$U = {"icon":"gUZ","iconBlock":"U9O kVc","rtlSupport":"Hn_","inherit":"hdS","inverse":"AR6","error":"X7a","default":"Uvi","disabled":"m9E","subtle":"BNH","warning":"W53","success":"AiB","recommendation":"U3K","shopping":"vvo","info":"FxY","brandPrimary":"g_1","light":"ePF","dark":"bW6"};

var compactAdd$1 = 'M9.41 1.41a1.41 1.41 0 0 0-2.82 0V6.6H1.4a1.41 1.41 0 1 0 0 2.82h5.2v5.18a1.41 1.41 0 1 0 2.82 0V9.4h5.18a1.41 1.41 0 1 0 0-2.82H9.4z';

var compactArrowUpRight$1 = 'M14.89 1.93q.1.26.11.57v8a1.5 1.5 0 0 1-3 0V6.12L3.62 14.5a1.5 1.5 0 1 1-2.12-2.12L9.88 4H5.5a1.5 1.5 0 0 1 0-3h8a1.5 1.5 0 0 1 1.39.93';

var compactCancel$1 = 'M12.94.94a1.5 1.5 0 0 1 2.12 2.12L10.12 8l4.94 4.94a1.5 1.5 0 0 1-2.12 2.12L8 10.12l-4.94 4.94a1.5 1.5 0 0 1-2.12-2.12L5.88 8 .94 3.06A1.5 1.5 0 1 1 3.06.94L8 5.88z';

var compactCheck$1 = 'M15.61 2.83c.52.53.52 1.37 0 1.9l-8.44 8.44c-.53.52-1.37.52-1.9 0L.4 8.27A1.33 1.33 0 1 1 2.28 6.4l3.94 3.95 7.5-7.5a1.33 1.33 0 0 1 1.89 0';

var compactCheckCircleFill$1 = 'M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0M4.24 7.74a.83.83 0 0 1 1.18 0L7 9.31l3.58-3.57a.83.83 0 0 1 1.18 1.18L7 11.67 4.24 8.92a.83.83 0 0 1 0-1.18';

var compactChevronDown$1 = 'M14.06 5.44a1.5 1.5 0 0 0-2.12 0L8 9.38 4.06 5.44a1.5 1.5 0 1 0-2.12 2.12l5 5a1.5 1.5 0 0 0 2.12 0l5-5a1.5 1.5 0 0 0 0-2.12';

var compactChevronLeft$1 = 'M10.56 14.06a1.5 1.5 0 0 0 0-2.12L6.62 8l3.94-3.94a1.5 1.5 0 0 0-2.12-2.12l-5 5a1.5 1.5 0 0 0 0 2.12l5 5a1.5 1.5 0 0 0 2.12 0';

var compactChevronRight$1 = 'M5.44 1.94a1.5 1.5 0 0 0 0 2.12L9.38 8l-3.94 3.94a1.5 1.5 0 0 0 2.12 2.12l5-5a1.5 1.5 0 0 0 0-2.12l-5-5a1.5 1.5 0 0 0-2.12 0';

var compactChevronUp$1 = 'M1.94 10.56a1.5 1.5 0 0 0 2.12 0L8 6.62l3.94 3.94a1.5 1.5 0 0 0 2.12-2.12l-5-5a1.5 1.5 0 0 0-2.12 0l-5 5a1.5 1.5 0 0 0 0 2.12';

var compactDash$1 = 'M.5 8c0-.83.67-1.5 1.5-1.5h12a1.5 1.5 0 0 1 0 3H2A1.5 1.5 0 0 1 .5 8';

var compactInfoCircleFill$1 = 'M8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2m1 5a1 1 0 1 1-2 0V7.67a1 1 0 1 1 2 0zM8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0';

var compactLock$1 = 'M5.33 6.67v-2a2.67 2.67 0 0 1 5.34 0v2zm7.34 0v-2a4.67 4.67 0 0 0-9.34 0v2a5.83 5.83 0 1 0 9.33 0';

var compactSparkle = 'M15.9 2.8a3.6 3.6 0 0 0-2.43 2.43c-.04.14-.24.14-.28 0a3.6 3.6 0 0 0-2.42-2.42c-.14-.04-.14-.24 0-.28A3.6 3.6 0 0 0 13.2.1a.14.14 0 0 1 .28 0 3.6 3.6 0 0 0 2.42 2.42c.14.04.14.24 0 .28m-2.18 6.57a9.4 9.4 0 0 0-6.35 6.35c-.1.37-.63.37-.74 0A9.4 9.4 0 0 0 .27 9.37c-.36-.1-.36-.63 0-.74a9.4 9.4 0 0 0 6.36-6.36c.1-.36.63-.36.74 0a9.4 9.4 0 0 0 6.36 6.36c.36.1.36.63 0 .74';

var compactWorkflowStatusProblem$1 = 'm15.74 12.33-6-10.64a2 2 0 0 0-3.48 0l-6 10.64c-.75 1.34.21 3 1.74 3h12a2 2 0 0 0 1.74-3m-5.04-.7a1 1 0 0 1 0 1.41 1 1 0 0 1-1.41 0l-1.3-1.3-1.29 1.3a1 1 0 0 1-1.41 0 1 1 0 0 1 0-1.41l1.3-1.3-1.3-1.29a1 1 0 0 1 0-1.41 1 1 0 0 1 1.41 0L8 8.92l1.29-1.3a1 1 0 0 1 1.41 0 1 1 0 0 1 0 1.42l-1.29 1.3z';

var compactWorkflowStatusWarning$1 = 'm15.41 6.58-6-6a2 2 0 0 0-2.83 0l-6 6a2 2 0 0 0 0 2.84l6 6a2 2 0 0 0 2.84 0l6-6a2 2 0 0 0 0-2.84M8 12.68a1.04 1.04 0 1 1 0-2.1 1.04 1.04 0 0 1 0 2.1m1.04-4.16a1.04 1.04 0 0 1-2.08 0V4.37a1.04 1.04 0 0 1 2.08 0z';

const icons$3 = Object.freeze({
    'compact-add': compactAdd$1,
    'compact-arrow-up-right': compactArrowUpRight$1,
    'compact-cancel': compactCancel$1,
    'compact-check': compactCheck$1,
    'compact-check-circle-fill': compactCheckCircleFill$1,
    'compact-chevron-down': compactChevronDown$1,
    'compact-chevron-left': compactChevronLeft$1,
    'compact-chevron-right': compactChevronRight$1,
    'compact-chevron-up': compactChevronUp$1,
    'compact-dash': compactDash$1,
    'compact-lock': compactLock$1,
    'compact-sparkle': compactSparkle,
    'compact-workflow-status-problem': compactWorkflowStatusProblem$1,
    'compact-workflow-status-warning': compactWorkflowStatusWarning$1,
    'compact-info-circle-fill': compactInfoCircleFill$1,
});

var threeD$1 = 'M21.5 9.25a2.75 2.75 0 0 0-2.75-2.75H15.5v11h3.25a2.75 2.75 0 0 0 2.75-2.75zm2.5 0v5.5c0 2.9-2.35 5.25-5.25 5.25H13V4h5.75C21.65 4 24 6.36 24 9.25M7.77 12a4.6 4.6 0 0 1-3.14 8A4.63 4.63 0 0 1 0 15.38h2.5a2.13 2.13 0 1 0 2.13-2.13H4v-2.5h.63A2.13 2.13 0 1 0 2.5 8.63H0a4.63 4.63 0 0 1 9.25 0A4.6 4.6 0 0 1 7.77 12';

var threeDMove$1 = 'M14.36 9.75h-.87v4.5h.87c.63 0 1.15-.52 1.15-1.15v-2.2c0-.63-.52-1.15-1.15-1.15m0-1c1.18 0 2.14.96 2.14 2.15v2.2c0 1.19-.96 2.15-2.14 2.15H12.5v-6.5zm-4.98 6.5a1.9 1.9 0 0 1-1.88-1.88h1a.88.88 0 1 0 .88-.87H9.1v-1h.28a.88.88 0 1 0-.88-.88h-1a1.88 1.88 0 0 1 3.75 0c0 .55-.24 1.04-.61 1.38a1.87 1.87 0 0 1-1.27 3.25M6.94 18.2a.87.87 0 1 1-1.1 1.35 9.75 9.75 0 0 1 5.74-17.28l-.78-.78A.88.88 0 0 1 12.04.26l2.84 2.84-2.84 2.84A.87.87 0 0 1 10.8 4.7l.67-.67A8 8 0 0 0 6.94 18.2m5.48 3.53.78.78a.88.88 0 0 1-1.24 1.23L9.12 20.9l2.84-2.84a.87.87 0 1 1 1.24 1.24l-.67.67A8 8 0 0 0 17.06 5.8a.88.88 0 0 1 1.1-1.35 9.75 9.75 0 0 1-5.75 17.28';

var threeSixty$1 = 'M24 12s.15-5.97-1.44-7.47C20.96 3.02 13.42 3 13.42 3h-2.84s-7.55.02-9.14 1.53C-.15 6.03 0 12 0 12s-.15 5.97 1.44 7.47c1.6 1.52 9.14 1.53 9.14 1.53h2.84s7.55-.01 9.14-1.53C24.15 17.97 24 12 24 12M7.6 14.87q-.24.45-.62.73-.39.28-.9.42a4.4 4.4 0 0 1-2.39-.05 2.3 2.3 0 0 1-1.48-1.41A3 3 0 0 1 2 13.44h1.44q.01.34.1.61.09.29.27.5.16.2.45.3.27.11.66.12.63 0 .98-.33.35-.31.34-.9.01-.54-.34-.86-.34-.3-1.04-.3H4.4v-1.14h.43q.54 0 .87-.25.36-.26.35-.75 0-.45-.29-.72a1 1 0 0 0-.78-.27q-.65 0-.96.37-.33.38-.34.98H2.24q.02-.57.2-1.02a2.2 2.2 0 0 1 1.39-1.29 3 3 0 0 1 1.15-.18q.6 0 1.07.15.46.13.82.4t.51.63q.18.38.18.86 0 .63-.36 1.02-.36.36-.91.55v.03q.72.18 1.12.63.4.48.4 1.26 0 .6-.22 1.02m6.89-.27q-.23.47-.6.84-.4.33-.89.54-.52.19-1.1.19-.81 0-1.4-.31t-.96-.83a4 4 0 0 1-.57-1.21 7 7 0 0 1 0-3.27q.23-.8.72-1.37.36-.42.89-.64.52-.23 1.28-.23a3 3 0 0 1 1.79.56 2 2 0 0 1 .8 1.39h-1.43a1 1 0 0 0-.35-.58 1.2 1.2 0 0 0-.76-.23q-.8 0-1.21.59-.4.57-.4 1.57.32-.35.71-.57a2.4 2.4 0 0 1 1.07-.21q.52 0 1 .2a2.6 2.6 0 0 1 1.4 1.39 3 3 0 0 1 0 2.17m7.29-.74q-.21.74-.62 1.25-.4.5-.99.79a3 3 0 0 1-1.32.27q-.72 0-1.3-.27-.59-.29-1-.8a4 4 0 0 1-.62-1.24 5 5 0 0 1-.23-1.62q0-.9.23-1.63.22-.74.64-1.25.4-.51 1-.78.57-.29 1.3-.28a2.9 2.9 0 0 1 2.3 1.06q.4.51.6 1.25.23.72.23 1.63t-.22 1.62m-2.2-4.1q-.3-.18-.71-.19-.44.01-.72.2-.32.2-.5.54-.19.34-.3.83a6 6 0 0 0 0 2.18q.11.5.3.86.18.33.5.54.3.17.72.17.4 0 .7-.18t.5-.54q.19-.33.28-.83.08-.5.08-1.1t-.08-1.1q-.1-.49-.28-.84-.2-.33-.5-.54m-7.16 2.39q-.26-.1-.57-.1-.69 0-1.08.4-.37.43-.37 1.08t.4 1.05 1.04.4a1.4 1.4 0 0 0 1.31-.87q.12-.25.12-.57 0-.3-.12-.58a2 2 0 0 0-.28-.48 2 2 0 0 0-.45-.33';

var accessibility$1 = 'M12 1a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5m3.6 9.31a21 21 0 0 0 6.01-1.44 1.5 1.5 0 0 0-1.22-2.74C18.41 7 15.28 7.5 12 7.5S5.59 7 3.61 6.13a1.5 1.5 0 0 0-1.22 2.74 21 21 0 0 0 6.02 1.44l-.3 4.12a4 4 0 0 1-.12.75l-1.6 5.96a1.5 1.5 0 0 0 2.9.78L10.87 16c.26-.94 2.01-.95 2.26 0l1.59 5.92a1.5 1.5 0 1 0 2.9-.78l-1.6-5.98a4 4 0 0 1-.13-.75z';

var ad$1 = 'M17 1a3 3 0 0 1 3 3v16a3 3 0 0 1-3 3H7a3 3 0 0 1-3-3V4a3 3 0 0 1 3-3zM7 20h10v-4H7z';

var adGroup$1 = 'M9 11a1 1 0 0 1-1-1V1a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1zm1-2h4V7h-4zm10 4a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1h-6a1 1 0 0 1-1-1v-9a1 1 0 0 1 1-1zm-5 9h4v-2h-4zm-5-9a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1v-9a1 1 0 0 1 1-1zm-5 9h4v-2H5z';

var add$1 = 'M22 10h-8V2a2 2 0 0 0-4 0v8H2a2 2 0 0 0 0 4h8v8a2 2 0 0 0 4 0v-8h8a2 2 0 0 0 0-4';

var addCircle$1 = 'M17.75 13.25h-4.5v4.5a1.25 1.25 0 0 1-2.5 0v-4.5h-4.5a1.25 1.25 0 0 1 0-2.5h4.5v-4.5a1.25 1.25 0 0 1 2.5 0v4.5h4.5a1.25 1.25 0 0 1 0 2.5M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24';

var addLayout$1 = 'M21 12h-6.5V5.5H20a1 1 0 0 1 1 1zm0 8a1 1 0 0 1-1 1H6.5a1 1 0 0 1-1-1v-5.5H21zM4.75 7.5A.75.75 0 0 1 4 6.75V5.5H2.75a.75.75 0 0 1 0-1.5H4V2.75a.75.75 0 0 1 1.5 0V4h1.25a.75.75 0 0 1 0 1.5H5.5v1.25c0 .41-.34.75-.75.75m4.67-2H12V12H5.5V9.42A4.7 4.7 0 0 0 9.42 5.5M20 2.5H8.9a4.73 4.73 0 1 0-6.4 6.4V20a4 4 0 0 0 4 4H20a4 4 0 0 0 4-4V6.5a4 4 0 0 0-4-4';

var addPin$1 = 'M21.5 2.93v5.76A5 5 0 0 1 24 13h-4v7.96L19 23l-1-2.04V13h-4a5 5 0 0 1 2.5-4.3V2.92A2 2 0 0 1 15 1h8a2 2 0 0 1-1.5 1.93M7 9.5h3.25a1.25 1.25 0 0 1 0 2.5H7v3.25a1.25 1.25 0 0 1-2.5 0V12H1.25a1.25 1.25 0 0 1 0-2.5H4.5V6.25a1.25 1.25 0 0 1 2.5 0z';

var addSection$1 = 'M0 3.75A2.75 2.75 0 0 1 2.75 1h5.5A2.75 2.75 0 0 1 11 3.75v.55h10.45a2.75 2.75 0 0 1 2.75 2.75v13.2A2.75 2.75 0 0 1 21.45 23H2.75A2.75 2.75 0 0 1 0 20.25zm10.73 5.5v3.03H7.7a1.38 1.38 0 0 0 0 2.75h3.03v3.02a1.38 1.38 0 0 0 2.75 0v-3.02h3.02a1.38 1.38 0 0 0 0-2.75h-3.02V9.25a1.38 1.38 0 0 0-2.75 0';

var adsOverview$1 = 'M2.5 19a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3m19 0h-14a1.5 1.5 0 1 0 0 3h14a1.5 1.5 0 1 0 0-3m-19-5a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3m19 0h-14a1.5 1.5 0 1 0 0 3h14a1.5 1.5 0 1 0 0-3M10 11h4a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1m12-9h-4a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1M2 11h4a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1';

var adsStats$1 = 'M4.75 12q.5 0 .88-.37L9.5 7.77l3 3 5.5-5.5v.98a1.25 1.25 0 0 0 2.5 0V1h-5.25a1.25 1.25 0 0 0 0 2.5h.98L12.5 7.23l-3-3-5.63 5.64A1.25 1.25 0 0 0 4.75 12M14 14h-4a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1v-7a1 1 0 0 0-1-1m8 0h-4a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1v-7a1 1 0 0 0-1-1M6 14H2a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1v-7a1 1 0 0 0-1-1';

var alert$1 = 'm14.18 7.82-1.7 5.82c-.14.48-.82.48-.96 0l-1.7-5.82h.01a2.25 2.25 0 1 1 4.34 0zM12 19a1.75 1.75 0 1 1 0-3.5 1.75 1.75 0 0 1 0 3.5m0-19a12 12 0 1 0 0 24 12 12 0 0 0 0-24';

var alignBottom$1 = 'M4.25 3.5h15.5c.41 0 .75.34.75.75V14h-17V4.25c0-.41.34-.75.75-.75M19.75 1H4.25A3.25 3.25 0 0 0 1 4.25v15.5C1 21.55 2.46 23 4.25 23h15.5c1.8 0 3.25-1.46 3.25-3.25V4.25C23 2.45 21.54 1 19.75 1';

var alignBottomCenter$1 = 'M20.5 19.75c0 .41-.34.75-.75.75H15.5V14h-7v6.5H4.25a.75.75 0 0 1-.75-.75V4.25c0-.41.34-.75.75-.75h15.5c.41 0 .75.34.75.75zM19.75 1H4.25A3.25 3.25 0 0 0 1 4.25v15.5C1 21.55 2.46 23 4.25 23h15.5c1.8 0 3.25-1.46 3.25-3.25V4.25C23 2.45 21.54 1 19.75 1';

var alignBottomLeft$1 = 'M20.5 19.75c0 .41-.34.75-.75.75H10V14H3.5V4.25c0-.41.34-.75.75-.75h15.5c.41 0 .75.34.75.75zM19.75 1H4.25A3.25 3.25 0 0 0 1 4.25v15.5C1 21.55 2.46 23 4.25 23h15.5c1.8 0 3.25-1.46 3.25-3.25V4.25C23 2.45 21.54 1 19.75 1';

var alignBottomRight$1 = 'M3.5 19.75V4.25c0-.41.34-.75.75-.75h15.5c.41 0 .75.34.75.75V14H14v6.5H4.25a.75.75 0 0 1-.75-.75M19.75 1H4.25A3.25 3.25 0 0 0 1 4.25v15.5C1 21.55 2.46 23 4.25 23h15.5c1.8 0 3.25-1.46 3.25-3.25V4.25C23 2.45 21.54 1 19.75 1';

var alignMiddle$1 = 'M19.75 20.5H4.25a.75.75 0 0 1-.75-.75V15.5h17v4.25c0 .41-.34.75-.75.75m-15.5-17h15.5c.41 0 .75.34.75.75V8.5h-17V4.25c0-.41.34-.75.75-.75M19.75 1H4.25A3.25 3.25 0 0 0 1 4.25v15.5C1 21.55 2.46 23 4.25 23h15.5c1.8 0 3.25-1.46 3.25-3.25V4.25C23 2.45 21.54 1 19.75 1';

var alignTop$1 = 'M19.75 20.5H4.25a.75.75 0 0 1-.75-.75V10h17v9.75c0 .41-.34.75-.75.75m0-19.5H4.25A3.25 3.25 0 0 0 1 4.25v15.5C1 21.55 2.46 23 4.25 23h15.5c1.8 0 3.25-1.46 3.25-3.25V4.25C23 2.45 21.54 1 19.75 1';

var alignTopCenter$1 = 'M20.5 19.75c0 .41-.34.75-.75.75H4.25a.75.75 0 0 1-.75-.75V4.25c0-.41.34-.75.75-.75H8.5V10h7V3.5h4.25c.41 0 .75.34.75.75zM19.75 1H4.25A3.25 3.25 0 0 0 1 4.25v15.5C1 21.55 2.46 23 4.25 23h15.5c1.8 0 3.25-1.46 3.25-3.25V4.25C23 2.45 21.54 1 19.75 1';

var alignTopLeft$1 = 'M20.5 19.75c0 .41-.34.75-.75.75H4.25a.75.75 0 0 1-.75-.75V10H10V3.5h9.75c.41 0 .75.34.75.75zM19.75 1H4.25A3.25 3.25 0 0 0 1 4.25v15.5C1 21.55 2.46 23 4.25 23h15.5c1.8 0 3.25-1.46 3.25-3.25V4.25C23 2.45 21.54 1 19.75 1';

var alignTopRight$1 = 'M19.75 20.5H4.25a.75.75 0 0 1-.75-.75V4.25c0-.41.34-.75.75-.75H14V10h6.5v9.75c0 .41-.34.75-.75.75m0-19.5H4.25A3.25 3.25 0 0 0 1 4.25v15.5C1 21.55 2.46 23 4.25 23h15.5c1.8 0 3.25-1.46 3.25-3.25V4.25C23 2.45 21.54 1 19.75 1';

var alphabetical$1 = 'm9 15 3-7 3 7zm12.83 5.19-8-18a2 2 0 0 0-3.66 0l-8 18a2 2 0 0 0 3.66 1.62L7.08 19h9.84l1.25 2.81a2 2 0 0 0 3.66-1.62';

var androidShare$1 = 'M19 16c-1.03 0-1.96.4-2.67 1.04L8.92 12.8a4 4 0 0 0 0-1.6l7.41-4.24A3.97 3.97 0 0 0 23 4a4 4 0 1 0-7.92.8L7.67 9.04A3.97 3.97 0 0 0 1 12a4 4 0 0 0 6.67 2.96l7.41 4.24q-.08.4-.08.8a4 4 0 1 0 4-4';

var angledPin$1 = 'M24 7.78 16.22 0a2.75 2.75 0 0 0-.32 3.5l-5.38 5.39a6.5 6.5 0 0 0-6.28 1.67l3.9 3.9L.7 21.87 0 24l2.12-.7 7.43-7.43 3.89 3.89a6.5 6.5 0 0 0 1.67-6.28L20.5 8.1c1.07.73 2.55.63 3.5-.32';

var animate$1 = 'M16 1a7 7 0 0 0-6.53 4.47 7 7 0 0 0-4 4 7 7 0 1 0 9.06 9.06 7 7 0 0 0 4-4A7 7 0 0 0 16 1M9 8a7 7 0 0 0 7 7 5 5 0 1 1-7-7m3 11a5 5 0 1 1-7-7 7 7 0 0 0 7 7';

var api$1 = 'M7 4.5c0-.55.4-1 .88-1h5.25c.48 0 .87.45.87 1s-.4 1-.87 1H7.87c-.48 0-.87-.45-.87-1m6.13 2c.48 0 .87.45.87 1s-.4 1-.87 1H7.87c-.48 0-.87-.45-.87-1s.4-1 .88-1zm3.87-2a1 1 0 1 1-2 0 1 1 0 0 1 2 0m-2 3a1 1 0 1 1 2 0 1 1 0 0 1-2 0M4 3a3 3 0 0 1 3-3h10a3 3 0 0 1 3 3v6a3 3 0 0 1-3 3h-4v3h7a3 3 0 0 1 3 3v2.27a2 2 0 1 1-2 0V18a1 1 0 0 0-1-1h-7v3.27a2 2 0 1 1-2 0V17H4a1 1 0 0 0-1 1v2.27a2 2 0 1 1-2 0V18a3 3 0 0 1 3-3h7v-3H7a3 3 0 0 1-3-3zm2 0v6a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1';

var apple$1 = 'M19.28 21.36q0 .02 0 0l-.06.16h-.02a4.27 4.27 0 0 1-7.2.9 4.27 4.27 0 0 1-7.2-.9h-.02l-.06-.15v-.01l-3.35-8.7h.01A6.45 6.45 0 0 1 7.5 4c1.29 0 2.49.38 3.5 1.03V3.97C11 2.88 10.12 2 9.03 2h-1V0h1A3.97 3.97 0 0 1 13 3.97v1.06a6.5 6.5 0 0 1 9.62 7.63h.01z';

var apps$1 = 'M20 17a3 3 0 1 0 0 6 3 3 0 0 0 0-6m0-8a3 3 0 1 0 0 6 3 3 0 0 0 0-6m0-8a3 3 0 1 0 0 6 3 3 0 0 0 0-6m-8 16a3 3 0 1 0 0 6 3 3 0 0 0 0-6m0-8a3 3 0 1 0 0 6 3 3 0 0 0 0-6m0-8a3 3 0 1 0 0 6 3 3 0 0 0 0-6M4 17a3 3 0 1 0 0 6 3 3 0 0 0 0-6m0-8a3 3 0 1 0 0 6 3 3 0 0 0 0-6m0-8a3 3 0 1 0 0 6 3 3 0 0 0 0-6';

var arTryOn$1 = 'M11.33.16a1.5 1.5 0 0 1 1.34 0l2 1A1.5 1.5 0 0 1 13.5 3.9v.59a1.5 1.5 0 0 1-3 0V3.9a1.5 1.5 0 0 1-1.17-2.75zM7.29 4.23c.42.7.2 1.63-.52 2.06l-.55.33 1.01.57a1.5 1.5 0 1 1-1.46 2.62L5 9.38v.12a1.5 1.5 0 0 1-3 0v-3c0-.53.28-1.02.73-1.29l2.5-1.5a1.5 1.5 0 0 1 2.06.52m9.42 0a1.5 1.5 0 0 1 2.06-.52l2.5 1.5c.45.27.73.76.73 1.29v3a1.5 1.5 0 0 1-3 0v-.12l-.77.43a1.5 1.5 0 0 1-1.46-2.62l1.01-.57-.55-.33a1.5 1.5 0 0 1-.52-2.06M3.5 13c.83 0 1.5.67 1.5 1.5v.12l.77-.43a1.5 1.5 0 0 1 1.46 2.62l-1.01.57.55.33a1.5 1.5 0 1 1-1.54 2.58l-2.5-1.5A1.5 1.5 0 0 1 2 17.5v-3c0-.83.67-1.5 1.5-1.5m17 0c.83 0 1.5.67 1.5 1.5v3a1.5 1.5 0 0 1-.73 1.29l-2.5 1.5a1.5 1.5 0 1 1-1.54-2.58l.55-.33-1.01-.57a1.5 1.5 0 0 1 1.46-2.62l.77.43v-.12c0-.83.67-1.5 1.5-1.5m-5.16 7.83a1.5 1.5 0 0 1-.67 2.01l-2 1a1.5 1.5 0 0 1-1.34 0l-2-1a1.5 1.5 0 0 1 1.17-2.75v-.59a1.5 1.5 0 0 1 3 0v.59c.7-.25 1.5.05 1.84.74M12 9.7l.67-.45a1.5 1.5 0 1 1 1.66 2.5l-.83.55v1.2a1.5 1.5 0 0 1-3 0v-1.2l-.83-.55a1.5 1.5 0 0 1 1.66-2.5z';

var arrowBack$1 = 'M15.78 24a2.2 2.2 0 0 1-1.58-.66L3 12 14.2.66a2.2 2.2 0 0 1 3.15 0c.87.88.87 2.3 0 3.18L9.29 12l8.06 8.16c.87.88.87 2.3 0 3.18-.44.44-1 .66-1.57.66';

var arrowCircleBack$1 = 'M11.07 16.07a1.25 1.25 0 0 0 1.76-1.77l-1.06-1.07h3.98a1.25 1.25 0 0 0 0-2.5H11.8l1.03-1.03a1.25 1.25 0 0 0-1.77-1.77L7 12zM12 0a12 12 0 1 1 0 24 12 12 0 0 1 0-24';

var arrowCircleDown$1 = 'M0 12a12 12 0 1 0 24 0 12 12 0 0 0-24 0m10.77-3.75a1.25 1.25 0 0 1 2.5 0v3.95l1.03-1.03a1.25 1.25 0 0 1 1.77 1.77L12 17l-4.07-4.07a1.25 1.25 0 0 1 1.77-1.76l1.07 1.06z';

var arrowCircleForward$1 = 'M12.94 16.07a1.25 1.25 0 0 1-1.77-1.77l1.06-1.07H8.25a1.25 1.25 0 0 1 0-2.5h3.95L11.17 9.7a1.25 1.25 0 0 1 1.77-1.77L17 12zM12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24';

var arrowCircleUp$1 = 'M24 12a12 12 0 1 0-24 0 12 12 0 0 0 24 0m-10.77 3.75a1.25 1.25 0 0 1-2.5 0V11.8L9.7 12.83a1.25 1.25 0 0 1-1.77-1.77L12 7l4.07 4.06a1.25 1.25 0 0 1-1.77 1.77l-1.07-1.06z';

var arrowCounterClockwise$1 = 'M12 1C8.93 1 6.05 2.3 4 4.47V2.5a1.5 1.5 0 1 0-3 0v7h7.5a1.5 1.5 0 1 0 0-3H6.22A8 8 0 0 1 12 4a8 8 0 0 1 0 16c-2.57 0-5-1.25-6.5-3.33a1.5 1.5 0 0 0-2.43 1.75A11.01 11.01 0 0 0 23 12c0-6.06-4.93-11-11-11';

var arrowDoubleBack$1 = 'M13.14 18.9c.74.75.74 1.95 0 2.7a1.87 1.87 0 0 1-2.66 0L1 12l9.48-9.6a1.86 1.86 0 0 1 2.66 0c.74.75.74 1.95 0 2.7L6.32 12zm9.3 0c.74.75.74 1.95 0 2.7a1.86 1.86 0 0 1-2.65 0L10.3 12l9.48-9.6a1.86 1.86 0 0 1 2.66 0c.73.75.73 1.95 0 2.7L15.63 12z';

var arrowDoubleForward$1 = 'M10.86 5.1a1.9 1.9 0 0 1 0-2.7 1.86 1.86 0 0 1 2.66 0L23 12l-9.48 9.6c-.73.74-1.93.74-2.66 0a1.9 1.9 0 0 1 0-2.7l6.82-6.9zm-9.3 0a1.9 1.9 0 0 1 0-2.7 1.86 1.86 0 0 1 2.65 0L13.7 12l-9.48 9.6c-.73.74-1.92.74-2.66 0a1.9 1.9 0 0 1 0-2.7L8.37 12z';

var arrowDown$1 = 'M20.16 6.65 12 14.71 3.84 6.65a2.27 2.27 0 0 0-3.18 0 2.2 2.2 0 0 0 0 3.15L12 21 23.34 9.8a2.2 2.2 0 0 0 0-3.15 2.26 2.26 0 0 0-3.18 0';

var arrowEnd$1 = 'M20 0a2 2 0 0 1 2 2v20a2 2 0 0 1-4 0V2c0-1.1.9-2 2-2m-8.83 12L2.6 3.41A2 2 0 1 1 5.4.6L16.83 12 5.4 23.41a2 2 0 0 1-2.82 0 2 2 0 0 1 0-2.82z';

var arrowForward$1 = 'M6.65.66c-.87.88-.87 2.3 0 3.18L14.71 12l-8.06 8.16c-.87.88-.87 2.3 0 3.18a2.2 2.2 0 0 0 3.14 0L21 12 9.8.66a2.2 2.2 0 0 0-3.15 0';

var arrowLeftCurved$1 = 'M24 20a2 2 0 0 1-4.02 0 7.53 7.53 0 0 0-7.53-7.51h-4.8l3.14 3.13a2 2 0 1 1-2.84 2.83L0 10.52l7.94-7.93a2 2 0 1 1 2.84 2.83L7.72 8.47h4.73C18.82 8.47 24 13.64 24 20';

var arrowNested$1 = 'M17.85 7.15a1.67 1.67 0 1 0-2.36 2.36l2.32 2.32h-7.64a4.5 4.5 0 0 1-4.5-4.5V2.5a1.67 1.67 0 1 0-3.34 0v4.83a7.84 7.84 0 0 0 7.84 7.84h7.3l-1.98 1.98a1.67 1.67 0 1 0 2.36 2.36l6.17-6.18z';

var arrowStart$1 = 'M6 2v20a2 2 0 0 1-4 0V2a2 2 0 0 1 4 0m15.41 18.59a2 2 0 1 1-2.82 2.82L7.17 12 18.6.59a2 2 0 1 1 2.8 2.81L12.83 12z';

var arrowUp$1 = 'M.66 14.2a2.2 2.2 0 0 0 0 3.15c.88.87 2.3.87 3.18 0L12 9.29l8.16 8.06c.88.87 2.3.87 3.18 0a2.2 2.2 0 0 0 0-3.15L12 3z';

var arrowUpLeft$1 = 'M19.07 1a2.36 2.36 0 1 1 0 4.71H9.05L22.3 18.98a2.36 2.36 0 0 1-3.33 3.33L5.7 9.05v10.02a2.36 2.36 0 1 1-4.71 0V1z';

var arrowUpRight$1 = 'M4.93 1a2.36 2.36 0 1 0 0 4.71h10.02L1.7 18.98a2.36 2.36 0 0 0 3.33 3.33L18.3 9.05v10.02a2.36 2.36 0 1 0 4.71 0V1z';

var arrowsVertical$1 = 'm6.5 0 5.06 5.06a1.5 1.5 0 0 1-2.12 2.12L8 5.74v8.76a1.5 1.5 0 0 1-3 0V5.74L3.56 7.18a1.5 1.5 0 1 1-2.12-2.12zm13.94 16.82a1.5 1.5 0 1 1 2.12 2.12L17.51 24l-5.07-5.06a1.5 1.5 0 1 1 2.12-2.12L16 18.26V9.5a1.5 1.5 0 0 1 3 0v8.76z';

var aspectRatio$2 = 'M0 5c0-1.1.9-2 2-2h20a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2h-2V11a2 2 0 0 0-2-2H0zm13 7h4v11h-4zm-3 11H2a2 2 0 0 1-2-2v-9h10z';

var audioBars$1 = 'M15.5 4.67a1.5 1.5 0 0 1 3 0v15.78a1.5 1.5 0 0 1-3 0zM5.5 5.7a1.5 1.5 0 0 1 3 0v13.7a1.5 1.5 0 0 1-3 0zm-5 3.13a1.5 1.5 0 0 1 3 0v7.44a1.5 1.5 0 0 1-3 0zm13 0v7.44a1.5 1.5 0 0 1-3 0V8.84a1.5 1.5 0 0 1 3 0m10-1.04v9.52a1.5 1.5 0 0 1-3 0V7.8a1.5 1.5 0 0 1 3 0';

var audioMix$1 = 'M19.5 15a1.75 1.75 0 1 1-3.5 0 1.75 1.75 0 0 1 3.5 0M16 1.75v8.32a5.24 5.24 0 0 0 0 9.86v2.32a1.75 1.75 0 0 0 3.5 0v-2.32a5.24 5.24 0 0 0 0-9.86V1.75a1.75 1.75 0 0 0-3.5 0M4.5 9A1.75 1.75 0 1 1 8 9a1.75 1.75 0 0 1-3.5 0M8 22.25v-8.32a5.24 5.24 0 0 0 0-9.86V1.75a1.75 1.75 0 0 0-3.5 0v2.32a5.24 5.24 0 0 0 0 9.86v8.32a1.75 1.75 0 0 0 3.5 0';

var audioPlaying$1 = 'M22 0a2 2 0 0 0-2 2v20a2 2 0 1 0 4 0V2a2 2 0 0 0-2-2M8.67 2.67a2 2 0 0 0-2 2V22a2 2 0 1 0 4 0V4.67a2 2 0 0 0-2-2m-6.67 8a2 2 0 0 0-2 2V22a2 2 0 1 0 4 0v-9.33a2 2 0 0 0-2-2M13.33 22a2 2 0 1 0 4 0v-9.33a2 2 0 1 0-4 0z';

var bell$1 = 'M19 7v6.17A10 10 0 0 1 22 19H2a10 10 0 0 1 3-5.83V7a7 7 0 1 1 14 0m-4 14a3 3 0 1 1-6 0z';

var bellFill$1 = 'M20.54 14.24A3.15 3.15 0 0 0 23.66 17H24v2h-8v1h-.02a3.4 3.4 0 0 1-3.38 3h-1.2a3.4 3.4 0 0 1-3.38-3H8v-1H0v-2h.34a3.15 3.15 0 0 0 3.12-2.76l.8-6.41a7.8 7.8 0 0 1 15.48 0zM10 19.6c0 .77.63 1.4 1.4 1.4h1.2c.77 0 1.4-.63 1.4-1.4a.6.6 0 0 0-.6-.6h-2.8a.6.6 0 0 0-.6.6';

var birthdayCake$1 = 'M10.5 3.4c0-.88.67-2.4 1.5-2.4s1.5 1.52 1.5 2.4S12.83 5 12 5s-1.5-.72-1.5-1.6M1 9.5A3.5 3.5 0 0 1 4.5 6h15A3.5 3.5 0 0 1 23 9.5V12c0 1.13-.37 2.16-1 3v3a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4v-3c-.63-.84-1-1.87-1-3zM4.5 9a.5.5 0 0 0-.5.5V12a2 2 0 0 0 3.72 1.03 1.5 1.5 0 0 1 2.56 0 2 2 0 0 0 3.44 0 1.5 1.5 0 0 1 2.56 0A2 2 0 0 0 20 12V9.5a.5.5 0 0 0-.5-.5zM19 3.4c0 .88-.67 1.6-1.5 1.6S16 4.28 16 3.4 16.67 1 17.5 1 19 2.52 19 3.4m-14 0C5 2.52 5.67 1 6.5 1S8 2.52 8 3.4 7.33 5 6.5 5 5 4.28 5 3.4';

var board$1 = 'M5 1h5.75v22H5c-2.2 0-4-1.8-4-4V5c0-2.2 1.8-4 4-4m18 4v5.75h-9.75V1H19c2.2 0 4 1.8 4 4m-9.75 8.25H23V19c0 2.2-1.8 4-4 4h-5.75z';

var boardStickerLarge$1 = 'M5 1a4 4 0 0 0-4 4v14a4 4 0 0 0 4 4h14a4 4 0 0 0 4-4V5a4 4 0 0 0-4-4zm13.33 2.67a2 2 0 0 1 2 2V13a2 2 0 0 1-2 2H5.67a2 2 0 0 1-2-2V5.67c0-1.1.9-2 2-2z';

var boardStickerSmall$1 = 'M3.67 7.33A2.67 2.67 0 0 0 1 10v4c0 1.47 1.2 2.67 2.67 2.67h16.66c1.48 0 2.67-1.2 2.67-2.67v-4c0-1.47-1.2-2.67-2.67-2.67zm3.33 2c.74 0 1.33.6 1.33 1.34v2.66c0 .74-.6 1.34-1.33 1.34H4.33c-.73 0-1.33-.6-1.33-1.34v-2.66c0-.74.6-1.34 1.33-1.34z';

var border$1 = 'M15 7a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2H9a2 2 0 0 1-2-2V9c0-1.1.9-2 2-2zM1 5a4 4 0 0 1 4-4h14a4 4 0 0 1 4 4v14a4 4 0 0 1-4 4H5a4 4 0 0 1-4-4zm2 0v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2';

var borderShadow$1 = 'M21.85 15.03C22.92 14.5 24 13.96 24 13.2c0-.75-1.06-1.28-2.11-1.8-.9-.44-1.78-.88-2.02-1.46s.07-1.54.39-2.5c.37-1.1.73-2.22.23-2.73-.52-.5-1.65-.14-2.78.23-.95.31-1.9.62-2.45.4-.55-.24-.98-1.1-1.43-2C13.3 2.29 12.76 1.2 12 1.2c-.75 0-1.28 1.06-1.8 2.11-.44.9-.88 1.78-1.46 2.02s-1.54-.07-2.5-.4c-1.11-.36-2.22-.72-2.73-.22-.5.51-.14 1.65.23 2.78.31.95.62 1.9.4 2.45-.24.55-1.1.98-2 1.43C1.09 11.9 0 12.44 0 13.2c0 .75 1.06 1.28 2.11 1.8.9.44 1.78.88 2.02 1.46q.06.15.08.34H1a1 1 0 0 0 0 2h22a1 1 0 1 0 0-2h-3.2q0-.2.07-.34c.23-.55 1.1-.99 1.98-1.43M7.2 16.8a6 6 0 1 1 9.6 0zm-3.2 6h16a1 1 0 1 0 0-2H4a1 1 0 1 0 0 2';

var briefcase$1 = 'M6.5 7.5V5A2.5 2.5 0 0 1 9 2.5h6A2.5 2.5 0 0 1 17.5 5v2.5H21a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-11c0-1.1.9-2 2-2zm8 0v-2h-5v2z';

var buildingBusiness$1 = 'M2 9.65C1.38 8.95 1 8 1 7V4c0-1.1.9-2 2-2h18a2 2 0 0 1 2 2v3c0 1.01-.38 1.94-1 2.65v8.2c0 2.01-1.5 3.74-3.56 3.9a85 85 0 0 1-12.88 0A3.87 3.87 0 0 1 2 17.85zM5 8h1a1 1 0 0 0 1-1V5H4v2a1 1 0 0 0 1 1m14 0a1 1 0 0 0 1-1V5h-3v2a1 1 0 0 0 1 1zm-6 0a1 1 0 0 0 1-1V5h-4v2a1 1 0 0 0 1 1zm-4 7v3a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1v-3a3 3 0 1 0-6 0';

var businessHierarchy$1 = 'M6 2a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1h-4v2.02h6a2 2 0 0 1 2 2V17h1.5c.28 0 .5.22.5.5v5a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-5c0-.28.22-.5.5-.5H19v-2.98h-6V17h1.5c.28 0 .5.22.5.5v5a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-5c0-.28.22-.5.5-.5H11v-2.98H5V17h1.5c.28 0 .5.22.5.5v5a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-5c0-.28.22-.5.5-.5H3v-2.98c0-1.1.9-2 2-2h6V10H7a1 1 0 0 1-1-1z';

var calendar$1 = 'M11 11H6v5h5zm9-7h-2.5V2.5a1.5 1.5 0 1 0-3 0V4h-5V2.5a1.5 1.5 0 1 0-3 0V4H4a3 3 0 0 0-3 3v13a3 3 0 0 0 3 3h16a3 3 0 0 0 3-3V7a3 3 0 0 0-3-3M4 9h16v11H4z';

var calendarCheck$1 = 'M15.12 11.39 10.48 16l-1.6-1.59a1.26 1.26 0 0 0-1.76 0c-.49.48-.5 1.26 0 1.75l3.35 3.37 6.41-6.38c.5-.49.5-1.28 0-1.76a1.25 1.25 0 0 0-1.76 0M20 21.5H4a.5.5 0 0 1-.5-.5V9h17v12a.5.5 0 0 1-.5.5M20 4h-2.75V2.25a1.25 1.25 0 0 0-2.5 0V4h-5.5V2.25a1.25 1.25 0 0 0-2.5 0V4H4a3 3 0 0 0-3 3v14a3 3 0 0 0 3 3h16a3 3 0 0 0 3-3V7a3 3 0 0 0-3-3';

var camera$1 = 'M18 13a6 6 0 1 0-12 0 6 6 0 0 0 12 0m6-4.5v10a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4v-10a4 4 0 0 1 4-4h3l1.1-1.66a3 3 0 0 1 2.5-1.34h2.8a3 3 0 0 1 2.5 1.34L17 4.5h3a4 4 0 0 1 4 4M15.5 13a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0';

var cameraFlip$1 = 'M15.84 3.95H16c4.41 0 8 3.61 8 8.05a8.03 8.03 0 0 1-8 8.05c-.69 0-1.25-.56-1.25-1.26s.56-1.26 1.25-1.26a5.52 5.52 0 0 0 0-11.06h-.16l1.04 1.05c.5.5.5 1.29 0 1.78-.48.5-1.28.5-1.76 0l-4.07-4.1 4.07-4.08c.48-.5 1.28-.5 1.76 0 .5.49.5 1.29 0 1.78zM7.12 16.48a1.26 1.26 0 0 1 0-1.78c.48-.5 1.27-.5 1.76 0l4.07 4.1-4.07 4.08c-.49.5-1.28.5-1.76 0a1.26 1.26 0 0 1 0-1.78l1.04-1.05H8c-4.41 0-8-3.61-8-8.05a8.03 8.03 0 0 1 8-8.05c.69 0 1.25.56 1.25 1.26S8.69 6.47 8 6.47a5.52 5.52 0 0 0 0 11.06h.16z';

var cameraRoll$1 = 'M8.01 10.5a2.25 2.25 0 1 0 0-4.5 2.25 2.25 0 0 0 0 4.5M4 5a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v8.38a9.9 9.9 0 0 0-10-.03 10 10 0 0 1-6 1.3zm15-4H5a4 4 0 0 0-4 4v14a4 4 0 0 0 4 4h14a4 4 0 0 0 4-4V5a4 4 0 0 0-4-4';

var cancel$1 = 'm15.18 12 7.16-7.16a2.25 2.25 0 1 0-3.18-3.18L12 8.82 4.84 1.66a2.25 2.25 0 1 0-3.18 3.18L8.82 12l-7.16 7.16a2.25 2.25 0 1 0 3.18 3.18L12 15.18l7.16 7.16a2.24 2.24 0 0 0 3.18 0c.88-.88.88-2.3 0-3.18z';

var canonicalPin$1 = 'M19 20a1 1 0 0 1-1 1h-7.47a1 1 0 0 1-1-1v-2H14a2 2 0 0 0 2-2V8h2a1 1 0 0 1 1 1zM5.7 10a1.13 1.13 0 0 1 1.6-1.6l1.4 1.4 3-3a1.13 1.13 0 1 1 1.6 1.6L8.7 13zM18 6h-2V3a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2h2.53v2a3 3 0 0 0 3 3H18a3 3 0 0 0 3-3V9a3 3 0 0 0-3-3';

var captions$1 = 'M22.56 2.53C24.15 4.03 24 12 24 12s.15 7.97-1.44 9.47c-1.6 1.52-9.14 1.53-9.14 1.53h-2.84s-7.55-.01-9.14-1.53C-.15 19.97 0 12 0 12s-.15-7.97 1.44-9.47C3.04 1.01 10.58 1 10.58 1h2.84s7.55.01 9.14 1.53m-13.4 7.96a1.23 1.23 0 0 0 2.07-1.34A4.6 4.6 0 0 0 7.37 7a4.8 4.8 0 0 0-4.67 4.9 4.8 4.8 0 0 0 4.67 4.9c1.5 0 2.83-.74 3.67-1.87a1.23 1.23 0 1 0-1.98-1.47 2.1 2.1 0 0 1-1.7.88c-1.13 0-2.2-1.01-2.2-2.44 0-1.42 1.07-2.43 2.2-2.43.72 0 1.38.38 1.8 1.02m9.85 0a1.23 1.23 0 1 0 2.07-1.34A4.6 4.6 0 0 0 17.22 7a4.8 4.8 0 0 0-4.67 4.9 4.8 4.8 0 0 0 4.67 4.9c1.5 0 2.83-.74 3.67-1.87a1.23 1.23 0 0 0-1.98-1.47c-.42.56-1.03.88-1.7.88-1.13 0-2.2-1.01-2.2-2.44 0-1.42 1.07-2.43 2.2-2.43.72 0 1.38.38 1.8 1.02';

var captionsOutline$1 = 'M5.16 11.9c0-1.42 1.07-2.43 2.2-2.43.72 0 1.38.38 1.8 1.02a1.23 1.23 0 0 0 2.07-1.34A4.6 4.6 0 0 0 7.37 7a4.8 4.8 0 0 0-4.67 4.9 4.8 4.8 0 0 0 4.67 4.9c1.5 0 2.83-.74 3.67-1.87a1.23 1.23 0 1 0-1.98-1.47 2.1 2.1 0 0 1-1.7.88c-1.13 0-2.2-1.01-2.2-2.44m9.85 0c0-1.42 1.07-2.43 2.2-2.43.72 0 1.38.38 1.8 1.02a1.23 1.23 0 1 0 2.07-1.34A4.6 4.6 0 0 0 17.22 7a4.8 4.8 0 0 0-4.67 4.9 4.8 4.8 0 0 0 4.67 4.9c1.5 0 2.83-.74 3.67-1.87a1.23 1.23 0 0 0-1.98-1.47c-.42.56-1.03.88-1.7.88-1.13 0-2.2-1.01-2.2-2.44M24 12s.15-7.97-1.44-9.47C20.96 1.02 13.42 1 13.42 1h-2.84s-7.55.02-9.14 1.53C-.15 4.03 0 12 0 12s-.15 7.97 1.44 9.47c1.6 1.52 9.14 1.53 9.14 1.53h2.84s7.55-.01 9.14-1.53C24.15 19.97 24 12 24 12M3.13 4.39c2.42-1.15 15.22-1.16 17.74 0C22 8.02 22 16 20.87 19.6c-2.5 1.16-15.36 1.18-17.74 0C2 16 2 8 3.13 4.4';

var cardStack$1 = 'M9.62 1a3.3 3.3 0 0 1 3.24-.89l8.59 2.3A3.33 3.33 0 0 1 23.8 6.5l-4.02 15.03a3.33 3.33 0 0 1-4.09 2.36L12.4 23H4a3 3 0 0 1-3-3V4a3 3 0 0 1 3-3zm2.05 2.25L7.65 18.28c-.05.18.06.36.23.4l8.59 2.3a.3.3 0 0 0 .4-.23L20.9 5.72a.33.33 0 0 0-.23-.4l-8.59-2.3a.33.33 0 0 0-.4.23';

var check$1 = 'M9 22 .73 13.75a2.5 2.5 0 1 1 3.54-3.53L9 14.94l10.73-10.7a2.5 2.5 0 0 1 3.54 3.52z';

var checkCircle$1 = 'M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24M6.37 11.61a1.25 1.25 0 0 1 1.76 0l2.37 2.36 5.37-5.35a1.25 1.25 0 0 1 1.76 1.76L10.5 17.5l-4.13-4.13a1.25 1.25 0 0 1 0-1.76';

var checkCircleFill$1 = 'M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24M6.37 11.61a1.25 1.25 0 0 1 1.76 0l2.37 2.36 5.37-5.35a1.25 1.25 0 0 1 1.76 1.76L10.5 17.5l-4.13-4.13a1.25 1.25 0 0 1 0-1.76';

var chevronDownCircle$1 = 'M12 24a12 12 0 1 0 0-24 12 12 0 0 0 0 24m3.94-14.56a1.5 1.5 0 0 1 2.12 2.12l-5 5a1.5 1.5 0 0 1-2.12 0l-5-5a1.5 1.5 0 0 1 2.12-2.12L12 13.38z';

var chevronLeftCircle$1 = 'M12 24a12 12 0 1 0 0-24 12 12 0 0 0 0 24m2.56-8.06a1.5 1.5 0 0 1-2.12 2.12l-5-5a1.5 1.5 0 0 1 0-2.12l5-5a1.5 1.5 0 0 1 2.12 2.12L10.62 12z';

var chevronRightCircle$1 = 'M12 24a12 12 0 1 0 0-24 12 12 0 0 0 0 24M9.44 8.06a1.5 1.5 0 1 1 2.12-2.12l5 5a1.5 1.5 0 0 1 0 2.12l-5 5a1.5 1.5 0 0 1-2.12-2.12L13.38 12z';

var chevronUpCircle$1 = 'M17.63 14.62a1.23 1.23 0 0 1-1.76 0L12 10.64l-3.87 3.98c-.48.5-1.28.5-1.76 0a1.3 1.3 0 0 1 0-1.82L12 7l5.63 5.8c.5.5.5 1.32 0 1.82M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24';

var circle$1 = 'M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.6 0 12 0zm0 22.2C6.45 22.2 1.8 17.7 1.8 12 1.8 6.3 6.3 1.8 12 1.8c5.7 0 10.2 4.5 10.2 10.2 0 5.7-4.65 10.2-10.2 10.2z';

var circleEllipsis$1 = 'M12 10.5c.9 0 1.5.6 1.5 1.5s-.6 1.5-1.5 1.5-1.5-.6-1.5-1.5.6-1.5 1.5-1.5zm-4.5 0c.9 0 1.5.6 1.5 1.5s-.6 1.5-1.5 1.5S6 12.9 6 12s.6-1.5 1.5-1.5zm9 0c.9 0 1.5.6 1.5 1.5s-.6 1.5-1.5 1.5S15 12.9 15 12s.6-1.5 1.5-1.5zM12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.6 0 12 0zm0 22.2C6.45 22.2 1.8 17.7 1.8 12 1.8 6.3 6.3 1.8 12 1.8c5.7 0 10.2 4.5 10.2 10.2 0 5.7-4.65 10.2-10.2 10.2z';

var circleInformationFill$1 = 'M24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0m-11 6v-8h-3v2h1v6zm-1-9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3';

var circleInitializing$1 = 'M12.5 3q-.45 0-.9.04l-.26-3Q11.91 0 12.5 0a11.5 11.5 0 0 1 11.38 13.28l-2.97-.4q.09-.68.09-1.38C21 6.8 17.2 3 12.5 3m-2.68.34q-.88.24-1.69.61L6.87 1.23Q7.92.74 9.06.44zm-3.23 1.5a9 9 0 0 0-1.34 1.17L3.07 3.94A12 12 0 0 1 4.85 2.4zM4.19 7.4a8 8 0 0 0-.76 1.56l-2.83-1a11 11 0 0 1 1.03-2.14zm-1.14 3.24a10 10 0 0 0 .05 2.24l-2.98.4a13 13 0 0 1-.05-2.98zm-1.42 7.15a13 13 0 0 1-1.3-3.33l2.93-.68q.32 1.36.99 2.55zm22.03-3.33q-.41 1.78-1.29 3.33l-2.62-1.46q.67-1.18.99-2.55zM4.72 21.44a12 12 0 0 1-2.46-2.63l2.47-1.7a9 9 0 0 0 1.86 1.98zm17.02-2.63q-1.05 1.5-2.46 2.63l-1.87-2.35a9 9 0 0 0 1.86-1.99zM9 23.61a12 12 0 0 1-3.3-1.47l1.62-2.52a9 9 0 0 0 2.46 1.09zm9.3-1.47A12 12 0 0 1 15 23.6l-.78-2.9a9 9 0 0 0 2.46-1.1zM12 24q-.92 0-1.81-.14l.47-2.96a9 9 0 0 0 2.68 0l.47 2.96Q12.92 24 12 24';

var clear$1 = 'M15.18 16.95 12 13.77l-3.18 3.18a1.25 1.25 0 0 1-1.77-1.77L10.23 12 7.05 8.82a1.25 1.25 0 0 1 1.77-1.77L12 10.23l3.18-3.18a1.25 1.25 0 1 1 1.77 1.77L13.77 12l3.18 3.18a1.25 1.25 0 0 1-1.77 1.77M24 12a12 12 0 1 0-24 0 12 12 0 0 0 24 0';

var clips$1 = 'M11.95 11.3 8.06 8.8a.84.84 0 0 0-1.28.7v5a.84.84 0 0 0 1.28.7l3.89-2.5a.83.83 0 0 0 0-1.4M21 5v14H3V5zM2.67 2A2.67 2.67 0 0 0 0 4.67v14.66C0 20.81 1.2 22 2.67 22h18.66c1.48 0 2.67-1.2 2.67-2.67V4.67C24 3.19 22.8 2 21.33 2zM15 22.5a1.5 1.5 0 0 0 3 0v-21a1.5 1.5 0 1 0-3 0z';

var clock$1 = 'M17.06 17.06a1.5 1.5 0 0 1-2.12 0l-4.44-4.44V6a1.5 1.5 0 0 1 3 0v5.38l3.56 3.56a1.5 1.5 0 0 1 0 2.12M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24';

var clockChecked$1 = 'M11 18.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0m-2.48-1.93a.69.69 0 0 0-.97 0L4.53 19.6l-1.3-1.3a.69.69 0 1 0-.97.98l2.27 2.27 4-4a.69.69 0 0 0 0-.97M0 12a12 12 0 1 1 10.68 11.93 7.5 7.5 0 0 0 1.9-2.95 9 9 0 1 0-9.56-9.56 7.5 7.5 0 0 0-2.95 1.9C.02 12.9 0 12.45 0 12m16.31 4.31a1.5 1.5 0 0 1-2.12 0l-3.25-3.25A1.5 1.5 0 0 1 10.5 12V7.5a1.5 1.5 0 0 1 3 0v3.88l2.81 2.8a1.5 1.5 0 0 1 0 2.13';

var cloudServer$1 = 'M8.5 0a5.5 5.5 0 0 0-5.4 4.48A4 4 0 0 0 5 12h6v2H7a5 5 0 0 0-4.93 4.15 3 3 0 1 0 2.04.06A3 3 0 0 1 7 16h4v2.17a3 3 0 1 0 2 0V16h4a3 3 0 0 1 2.9 2.21 3 3 0 1 0 2.03-.06A5 5 0 0 0 17 14h-4v-2h6a4 4 0 0 0 .41-7.98 5.5 5.5 0 0 0-7.16-2.54A5.5 5.5 0 0 0 8.5 0M5.01 5.24a3.5 3.5 0 0 1 6.25-1.9l.56.73.77-.5q.84-.55 1.91-.57a3.5 3.5 0 0 1 3.3 2.33l.24.67H19a2 2 0 1 1 0 4H5a2 2 0 0 1-.66-3.89l.62-.22zM11 21a1 1 0 1 1 2 0 1 1 0 0 1-2 0m11 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0M2 21a1 1 0 1 1 2 0 1 1 0 0 1-2 0';

var code$1 = 'M11.99 17.87a.82.82 0 1 1-1.62-.28l1.64-9.31a.82.82 0 0 1 1.62.27zm-2.3-7.68c.24.38.13.9-.24 1.13L6.7 13.1l2.75 1.77a.82.82 0 1 1-.9 1.37l-3.82-2.45a.82.82 0 0 1 0-1.38l3.82-2.45a.8.8 0 0 1 1.14.24zm7.6 2.9-2.75-1.77a.82.82 0 0 1 .9-1.37l3.81 2.45a.82.82 0 0 1 0 1.38l-3.81 2.45a.82.82 0 1 1-.9-1.37zM0 3.27A3.27 3.27 0 0 1 3.27 0h17.46A3.27 3.27 0 0 1 24 3.27v17.46A3.27 3.27 0 0 1 20.73 24H3.27A3.27 3.27 0 0 1 0 20.73zm3.82 0a.55.55 0 1 0 0-1.09.55.55 0 0 0 0 1.1m16.9 2.18H3.28v15.28h17.46zM6 2.18a.55.55 0 1 0 0 1.1.55.55 0 0 0 0-1.1m2.18 1.1a.55.55 0 1 0 0-1.1.55.55 0 0 0 0 1.1';

var codeCheck$1 = 'M20 10.252V6H4v14h6.252a7.974 7.974 0 0 0 1.503 3H4a3 3 0 0 1-3-3V3.5a3 3 0 0 1 3-3h16a3 3 0 0 1 3 3v8.255a7.974 7.974 0 0 0-3-1.503zM5 3.5a.5.5 0 1 0-1 0 .5.5 0 0 0 1 0zm1 0a.5.5 0 1 0 1 0 .5.5 0 0 0-1 0zm3 0a.5.5 0 1 0-1 0 .5.5 0 0 0 1 0zm3.975 8.275a8.04 8.04 0 0 0-1.921 2.254l.956-5.439a.75.75 0 0 1 1.48.25zM9.89 10.34c.21.35.11.82-.23 1.04L7.14 13l2.52 1.62a.752.752 0 1 1-.82 1.26l-3.5-2.25a.75.75 0 0 1 0-1.26l3.5-2.25a.75.75 0 0 1 1.04.22zM24 18a6 6 0 1 1-12 0 6 6 0 0 1 12 0zm-7.056 3.311 4.354-4.354a.75.75 0 1 0-1.061-1.061l-3.293 3.293-1.414-1.414a.749.749 0 1 0-1.06 1.061z';

var cog$1 = 'M12 16.25a4.25 4.25 0 1 1 0-8.5 4.25 4.25 0 0 1 0 8.5M12 0 1.5 6v12L12 24l10.5-6V6z';

var collage$1 = 'M11 2h8a4 4 0 0 1 4 4v8a4 4 0 0 1-4 4h-8a4 4 0 0 1-1.12-.16l4.23-2.9-.88-1.25a3.7 3.7 0 0 0-5.1-.9L7 13.55V6a4 4 0 0 1 4-4m3.85 5h-.7l-.1.43a3.5 3.5 0 0 1-2.62 2.62l-.43.1v.7l.43.1a3.5 3.5 0 0 1 2.62 2.62l.1.43h.7l.1-.43a3.5 3.5 0 0 1 2.62-2.62l.43-.1v-.7l-.43-.1a3.5 3.5 0 0 1-2.62-2.62zM7 18l5.01 3.44a2.2 2.2 0 0 1-3.03.53L5 19.31l-.68.47A2.5 2.5 0 0 1 2.5 24a2.5 2.5 0 0 1-1.25-4.67l2-1.33-2-1.33a2.5 2.5 0 1 1 3.07-.45l.68.47 3.98-2.66a2.2 2.2 0 0 1 3.02.53zm-4.5 4.5a1 1 0 1 0 0-2 1 1 0 0 0 0 2m0-9a1 1 0 1 0 0 2 1 1 0 0 0 0-2';

var collapse$1 = 'M5.77 16.86a.96.96 0 0 1-1.37-1.37l2.45-2.44H.99a.96.96 0 0 1 0-1.93h5.86L4.4 8.68A.96.96 0 0 1 5.77 7.3l4.77 4.77zm13.89-1.37a.96.96 0 0 1-1.37 1.37l-4.77-4.78 4.77-4.77a.96.96 0 0 1 1.37 1.37l-2.45 2.44h5.85a.96.96 0 0 1 0 1.93h-5.85z';

var color$1 = 'M12 1a1.35 1.35 0 1 1-1.35 1.35c0-.76.58-1.35 1.35-1.35m7.51 3.12c.76 0 1.35.58 1.35 1.36 0 .72-.62 1.35-1.35 1.35s-1.35-.61-1.35-1.35.6-1.36 1.35-1.36m-15.03.02a1.35 1.35 0 1 1-1.35 1.35c0-.76.57-1.35 1.35-1.35m18.17 7.5c.72 0 1.35.62 1.35 1.35 0 .76-.58 1.35-1.35 1.35-.75 0-1.36-.6-1.36-1.35 0-.73.62-1.35 1.36-1.35m-21.3 0c.76 0 1.35.58 1.35 1.35 0 .73-.62 1.35-1.35 1.35S0 13.74 0 12.99c0-.74.6-1.35 1.35-1.35m3.13 7.51a1.35 1.35 0 0 1 0 2.7c-.75 0-1.35-.58-1.35-1.35 0-.72.62-1.35 1.35-1.35m15.02.01c.73 0 1.36.62 1.36 1.35 0 .76-.59 1.35-1.36 1.35a1.35 1.35 0 1 1 0-2.7m-6.96-6.87a1 1 0 0 1 0 1.42L9.7 16.54a1 1 0 0 1-1.42-1.42l2.83-2.83a1 1 0 0 1 1.42 0M4 13a8 8 0 1 1 16 0 8 8 0 0 1-16 0m8-6a6 6 0 1 0 0 12 6 6 0 0 0 0-12';

var colorPalette$1 = 'M12.58 20.6c.96 1.39 1.9 2.75-.58 3.4a12 12 0 1 1 12-12c0 3.1-2.98 7.48-11.2 5.29-1.47-.4-1.66.99-.8 2.43q.27.43.58.88M9.2 7.2a2 2 0 1 0 0-4 2 2 0 0 0 0 4m-4 4.8a2 2 0 1 0 0-4 2 2 0 0 0 0 4m10.4-8.8a2 2 0 1 0 0 4 2 2 0 0 0 0-4m4 8.8a2 2 0 1 0 0-4 2 2 0 0 0 0 4';

var colorPicker$1 = 'M17.33 1.97a3.32 3.32 0 1 1 4.7 4.7l-3.91 3.9.12.12a1.5 1.5 0 1 1-2.11 2.11L11.2 7.87a1.5 1.5 0 0 1 2.11-2.1l.12.11zm-15.6 20.3a2.5 2.5 0 0 1 0-3.52l8.23-8.23 3.52 3.52-8.23 8.23a2.5 2.5 0 0 1-3.52 0';

var colorSolid$1 = 'M24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0';

var colorSplit$1 = 'M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24m0 21.5A9.5 9.5 0 0 1 2.5 12h19a9.5 9.5 0 0 1-9.5 9.5';

var compass$1 = 'M12.87 12.9a1.25 1.25 0 1 0-.89.37q.52-.01.89-.37m2.27 1.13A2 2 0 0 1 14 15.16l-8.38 3.22L8.84 10a2 2 0 0 1 1.13-1.13l8.61-3.45zm5.35-10.52A12 12 0 1 0 3.52 20.48 12 12 0 0 0 20.49 3.52z';

var compose$1 = 'M2.34 19.94 8 17.96 19.27 6.72a2.5 2.5 0 0 0 0-3.55l-1.42-1.43a2.5 2.5 0 0 0-3.56 0L3.04 13l-1.98 5.67a1 1 0 0 0 1.28 1.28M22 21H2a1 1 0 0 0-1 1 1 1 0 0 0 1 1h20a1 1 0 0 0 1-1 1 1 0 0 0-1-1';

var contrast$1 = 'M12 24a12 12 0 1 0 0-24 12 12 0 0 0 0 24m9-12c0 4.96-4.04 9-9 9V3c4.96 0 9 4.04 9 9';

var conversionTag$1 = 'M14.03 4.03c.67.16 1.1.83.94 1.5l-3 13a1.25 1.25 0 0 1-2.44-.56l3-13c.16-.67.83-1.1 1.5-.94zm4.08 4.33L22 12.19l-3.88 3.94a1.25 1.25 0 1 1-1.78-1.76l2.12-2.15-2.1-2.08a1.25 1.25 0 0 1 1.75-1.78zm-10.45.01c.48.5.48 1.29-.02 1.77l-2.1 2.08 2.12 2.15a1.25 1.25 0 1 1-1.78 1.76L2 12.19l3.9-3.83a1.25 1.25 0 0 1 1.76.01z';

var copyToClipboard$1 = 'M5.5 3.25C5.5 2 6.5 1 7.75 1h13C21.99 1 23 2 23 3.25v13c0 1.24-1 2.25-2.25 2.25h-13c-1.24 0-2.25-1-2.25-2.25zM20 15.5V4H8.5v11.5zM3.5 16.75a3.75 3.75 0 0 0 3.75 3.75h8.5a1.25 1.25 0 1 1 0 2.5h-8.5A6.25 6.25 0 0 1 1 16.75v-8.5a1.25 1.25 0 0 1 2.5 0z';

var creditCard$1 = 'M6 13.75a1.25 1.25 0 1 0 0 2.5h5a1.25 1.25 0 1 0 0-2.5zM0 18a3 3 0 0 0 3 3h18a3 3 0 0 0 3-3V6a3 3 0 0 0-3-3H3a3 3 0 0 0-3 3zM21.5 6v2h-19V6c0-.28.22-.5.5-.5h18c.28 0 .5.22.5.5zM3 18.5a.5.5 0 0 1-.5-.5v-6h19v6a.5.5 0 0 1-.5.5z';

var crop$1 = 'M12 10a2 2 0 1 0 0 4 2 2 0 0 0 0-4m10.5-6H20V1.5a1.5 1.5 0 1 0-3 0V4H5.5C4.67 4 4 4.67 4 5.5V17H1.5a1.5 1.5 0 1 0 0 3H4v2.5a1.5 1.5 0 1 0 3 0V20h11.5c.83 0 1.5-.67 1.5-1.5V7h2.5a1.5 1.5 0 1 0 0-3M17 7v10H7V7z';

var cutout$1 = 'M9 1v2H5a2 2 0 0 0-2 2v4H1V5a4 4 0 0 1 4-4zm6 0h4a4 4 0 0 1 4 4v4h-2V5a2 2 0 0 0-2-2h-4zm8 18a4 4 0 0 1-4 4h-4v-2h4a2 2 0 0 0 2-2v-4h2zm-10.99 2.44a2.2 2.2 0 0 1-3.03.53L5 19.31l-.68.47A2.5 2.5 0 0 1 2.5 24a2.5 2.5 0 0 1-1.25-4.67l2-1.33-2-1.33a2.5 2.5 0 1 1 3.07-.45l.68.47 3.98-2.66a2.2 2.2 0 0 1 3.02.53L7 18zM2.5 22.5a1 1 0 1 0 0-2 1 1 0 0 0 0 2m0-9a1 1 0 1 0 0 2 1 1 0 0 0 0-2';

var dash$1 = 'M24 12a2 2 0 0 1-2 2H2a2 2 0 1 1 0-4h20a2 2 0 0 1 2 2';

var dataSource$1 = 'M12 1c5.52 0 10 1.34 10 3v2c0 1.66-4.48 3-10 3S2 7.66 2 6V4c0-1.66 4.48-3 10-3m0 10c5.52 0 10-1.34 10-3v2.5c0 1.66-4.48 3-10 3s-10-1.34-10-3V8c0 1.66 4.48 3 10 3m10 4c0 1.66-4.48 3-10 3S2 16.66 2 15v-2.5c0 1.66 4.48 3 10 3s10-1.34 10-3zm0 5c0 1.66-4.48 3-10 3S2 21.66 2 20v-3c0 1.66 4.48 3 10 3s10-1.34 10-3z';

var design$1 = 'M14.68 15.1a4.35 4.35 0 0 1 6.16.16A4.6 4.6 0 0 1 22.16 18c.14 1.23 0 2.47.86 3.25-2.46 2.39-5.17.82-6.25-1.36-.1.96.16 1.89.7 2.67a4.6 4.6 0 0 1-2.63-1.3 4.35 4.35 0 0 1-.16-6.16m7.66-9.84-5.86 5.86-3.25-3.94 5.51-5.52c.6-.6 2.18-1.12 3.45.15a2.46 2.46 0 0 1 .15 3.45M7.22 13.18l3.95 3.25-4.55 4.55-5.6 2 2-5.6zm-.6-11.2 8.7 10.57a6 6 0 0 0-2.9 2.58L2.03 6.57a3.25 3.25 0 1 1 4.6-4.6';

var desktop$1 = 'M21 1H3a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2h7.75v2.5h-3.5a1.25 1.25 0 0 0 0 2.5h9.5a1.25 1.25 0 0 0 0-2.5h-3.5V18H21a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2m-.5 14.5h-17v-12h17z';

var diagnostics$1 = 'M13.7 20.6a10.3 10.3 0 1 0-8.55-4.58L.62 20.56a2 2 0 1 0 2.83 2.82l4.53-4.53a10 10 0 0 0 5.72 1.74m-7.42-8.95h3.21c.45 0 .85-.3.98-.74l.48-1.71 1.57 6.3a1.01 1.01 0 0 0 1.93.1l1.92-5.26.16.57c.13.44.53.74.98.74h3.62a7.55 7.55 0 0 1-14.85 0m11.2-4.8c-.27-.95-1.6-1-1.93-.08l-1.87 5.12-1.7-6.8c-.25-1-1.68-1.02-1.96-.02L8.74 9.65H6.2a7.55 7.55 0 0 1 15.03 0h-2.96z';

var directionalArrowLeft$1 = 'M8.41 4.59a2 2 0 1 1 2.83 2.82L8.66 10H21a2 2 0 0 1 0 4H8.66l2.58 2.59a2 2 0 1 1-2.82 2.82L1 12z';

var directionalArrowRight$1 = 'M15.59 4.59a2 2 0 1 0-2.83 2.82L15.34 10H3a2 2 0 0 0 0 4h12.34l-2.58 2.59a2 2 0 1 0 2.83 2.82L23 12z';

var download$1 = 'm18.01 9.82-6.02 6-6-6a2 2 0 0 1 2.83-2.83l1.17 1.17V2a2 2 0 0 1 4 0v6.18l1.2-1.2A2 2 0 1 1 18 9.82M19 16a2 2 0 0 1 4 0v6a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-6a2 2 0 0 1 4 0v4h14z';

var dragDrop$1 = 'M1 10.5v10A2.5 2.5 0 0 0 3.5 23h10a2.5 2.5 0 0 0 2.5-2.5V16h4.5a2.5 2.5 0 0 0 2.5-2.5v-10A2.5 2.5 0 0 0 20.5 1h-10A2.5 2.5 0 0 0 8 3.5V8H3.5A2.5 2.5 0 0 0 1 10.5m2.5 0H8v3a2.5 2.5 0 0 0 2.5 2.5h3v4.5h-10z';

var draw$1 = 'M.65 9.9q.35-.77.78-1.5l.36-.65q.46-.88.86-1.77l.3-.67q-.32.31-.76.45c-.43.13-.9.03-1.29-.17q-.3-.15-.47-.42a1 1 0 0 1-.3-.57 1 1 0 0 1-.02-.65q0-.33.2-.62a7 7 0 0 1 1.6-2.06Q2.34.9 2.83.6 3.76.06 4.86 0q.74-.02 1.38.32.3.16.54.4.15.16.27.33l.14.2q.34.63.34 1.36-.01.6-.22 1.18-.28.74-.64 1.44l-.24.5-.5 1.08L4.9 8.96q-.29.6-.61 1.14a18 18 0 0 0-.75 1.44q.49-.41.92-.9a100 100 0 0 0 4.81-5.6l.35-.46q.67-.95 1.45-1.82.42-.47.92-.86a6 6 0 0 1 1.53-.94q.27-.13.54-.21a4 4 0 0 1 .98-.13 4 4 0 0 1 .75.14l.04.01q.23.08.44.2a2 2 0 0 1 .44.31l.09.08.3.37.08.13a3 3 0 0 1 .3 2.05l-.02.13q-.05.3-.14.6-.27.9-.67 1.75c-.4.9-.93 1.75-1.47 2.57a77 77 0 0 1-2.63 3.77q-1.26 1.74-2.46 3.52a38 38 0 0 0-2.11 3.54 8 8 0 0 0 .63-.5 41 41 0 0 0 2.63-2.43q1.3-1.27 2.56-2.58l.18-.18q1.19-1.26 2.45-2.43a9 9 0 0 1 1.66-1.3 5 5 0 0 1 2.26-.65q.5-.02.99.1a3.3 3.3 0 0 1 2.07 1.49 4 4 0 0 1 .48 1.25q.14.71.08 1.44c-.06.49-.13.97-.3 1.43a11 11 0 0 1-1.59 2.91q-.56.75-1.2 1.43-1.2 1.19-2.6 2.15-1.25.87-2.6 1.57-.6.32-1.29.17c-.43-.1-.77-.4-1-.76q-.18-.29-.2-.61-.07-.33.03-.66.08-.32.3-.56.18-.27.47-.43 1.6-.85 3.07-1.9a14 14 0 0 0 2.19-2.13q.69-.93 1.17-1.97.15-.37.22-.76v-.57l-.07-.27-.02-.02h-.24l-.33.09a4 4 0 0 0-1.12.82q-1.32 1.22-2.55 2.53l-.28.3q-1.36 1.4-2.77 2.76-1.36 1.37-2.88 2.57l-.06.05q-.71.57-1.48 1.05a6 6 0 0 1-2.34.8q-.3.02-.62-.04l-.1-.02q-.33-.06-.63-.23h-.01a2.2 2.2 0 0 1-1.07-1.17l-.03-.07q-.06-.12-.1-.27a3 3 0 0 1 0-1.32q.02-.18.08-.36.16-.48.38-.94l.03-.08a29 29 0 0 1 1.24-2.43q.94-1.63 2-3.17.97-1.4 1.98-2.8l.19-.26q1.1-1.51 2.15-3.07a22 22 0 0 0 1.76-3 10 10 0 0 0-1.02 1.18q-.82 1.1-1.68 2.19a68 68 0 0 1-3.67 4.22l-.32.35q-.47.55-1 1.05-.52.47-1.12.83a6 6 0 0 1-1.26.5H3.6a3.3 3.3 0 0 1-2.8-.73l-.1-.1-.07-.1Q.5 14 .4 13.85q-.17-.29-.27-.6-.15-.43-.13-.9.03-.5.13-.96.17-.77.52-1.47';

var dropbox$1 = 'm0 5.6 6-3.85 6 3.84-6 3.85zm6 3.84 6 3.84-6 3.85-6-3.85zm6-3.85 6-3.84 6 3.84-6 3.85 6 3.84-6 3.85-6-3.85 6-3.84zm0 16.66-6-3.84 6-3.85 6 3.85z';

var duplicate$1 = 'M19.5 9.75c0-.69-.56-1.25-1.25-1.25H15.5V5.75a1.25 1.25 0 0 0-2.5 0V8.5h-2.75a1.25 1.25 0 0 0 0 2.5H13v2.75a1.25 1.25 0 0 0 2.5 0V11h2.75c.69 0 1.25-.56 1.25-1.25m3.5-6.5v13c0 1.24-1 2.25-2.25 2.25h-13c-1.24 0-2.25-1-2.25-2.25v-13C5.5 2.01 6.5 1 7.75 1h13C21.99 1 23 2 23 3.25m-6 18.5c0 .69-.56 1.25-1.25 1.25h-8.5A6.26 6.26 0 0 1 1 16.75v-8.5a1.25 1.25 0 0 1 2.5 0v8.5a3.75 3.75 0 0 0 3.75 3.75h8.5c.69 0 1.25.56 1.25 1.25';

var edit$1 = 'M17.45 1.95a3.25 3.25 0 1 1 4.6 4.6l-2.3 2.3-4.6-4.6zM2.5 16.9 13.4 6.02l4.6 4.6L7.08 21.5 1 23z';

var ellipsis$1 = 'M12 9a3 3 0 1 0 0 6 3 3 0 0 0 0-6M3 9a3 3 0 1 0 0 6 3 3 0 0 0 0-6m18 0a3 3 0 1 0 0 6 3 3 0 0 0 0-6';

var envelope$1 = 'm19.57 12.8-6.72 4.62a1.5 1.5 0 0 1-1.7 0L4.43 12.8a1 1 0 0 1-.43-.83V10a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v1.97a1 1 0 0 1-.43.83M12.95 1.34a1.5 1.5 0 0 0-1.9 0L1.59 8.55A1.5 1.5 0 0 0 1 9.75V21c0 1.1.9 2 2 2h18a2 2 0 0 0 2-2V9.74c0-.46-.22-.9-.6-1.19z';

var erase$1 = 'M16.62 2.2a3 3 0 0 0-4.24 0L2 12.6a3.4 3.4 0 0 0 0 4.82L6.59 22c.64.64 1.5 1 2.41 1h13v-2h-9.59l9.38-9.38a3 3 0 0 0 0-4.24zM11.8 17.39 6.62 12.2a3 3 0 0 0-.83-.59l8-8a1 1 0 0 1 1.42 0l5.17 5.17a1 1 0 0 1 0 1.42l-8 8a3 3 0 0 0-.59-.83m-8-3.76a1 1 0 0 1 1.42 0l5.17 5.17a1 1 0 0 1 0 1.42l-.38.38a1.4 1.4 0 0 1-2 0L3.41 16a1.4 1.4 0 0 1 0-2l.3-.3z';

var eraseAuto$1 = 'M5.05.44a3.5 3.5 0 0 1-2.62 2.61l-.43.1v.7l.43.1a3.5 3.5 0 0 1 2.62 2.62l.1.43h.7l.1-.43a3.5 3.5 0 0 1 2.62-2.62l.43-.1v-.7l-.43-.1A3.5 3.5 0 0 1 5.95.44L5.85 0h-.7zM21.5 14a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3m-2.2 4h-.6l-.09.37a3 3 0 0 1-2.24 2.24l-.37.09v.6l.37.09a3 3 0 0 1 2.24 2.24l.09.37h.6l.09-.37a3 3 0 0 1 2.24-2.24l.37-.09v-.6l-.37-.09a3 3 0 0 1-2.24-2.24zm-7.48 3.6 9.97-9.98a3 3 0 0 0 0-4.24L16.62 2.2a3 3 0 0 0-4.24 0L2 12.59a3.4 3.4 0 0 0 0 4.82L6.59 22a3.4 3.4 0 0 0 4.82 0l.3-.3.08-.08zm-1.43-1.4-.39.39a1.4 1.4 0 0 1-2 0L3.41 16a1.4 1.4 0 0 1 0-2l.3-.3.08-.08a1 1 0 0 1 1.42 0l5.17 5.17a1 1 0 0 1 .01 1.4m1.4-2.82L6.62 12.2a3 3 0 0 0-.83-.59l8-8a1 1 0 0 1 1.42 0l5.17 5.17a1 1 0 0 1 0 1.42l-8 8a3 3 0 0 0-.59-.83';

var etsy$1 = 'M8.9 3.24c0-.3.03-.48.54-.48h6.78c1.19 0 1.84 1.02 2.32 2.93l.38 1.53h1.16c.2-4.34.38-6.22.38-6.22s-2.9.33-4.62.33H7.15L2.5 1.18v1.26l1.57.3c1.1.2 1.36.44 1.45 1.46 0 0 .1 2.99.1 7.92s-.1 7.9-.1 7.9c0 .89-.35 1.22-1.45 1.43l-1.57.3V23l4.65-.15h7.77c1.75 0 5.8.15 5.8.15.1-1.08.7-5.95.78-6.49h-1.1l-1.15 2.66c-.92 2.1-2.26 2.25-3.74 2.25H11.1c-1.49 0-2.2-.6-2.2-1.89v-6.81s3.3 0 4.36.09c.83.06 1.33.3 1.6 1.46l.36 1.56h1.27l-.09-3.92.18-3.94H15.3l-.4 1.73c-.27 1.13-.44 1.34-1.6 1.46-1.51.15-4.39.12-4.39.12z';

var expand$1 = 'M7.26 19.31a.96.96 0 0 1 1.36-1.36l2.45 2.44v-5.85a.96.96 0 0 1 1.92 0v5.85l2.45-2.44a.96.96 0 0 1 1.36 1.36l-4.77 4.77zM8.62 6.22a.96.96 0 0 1-1.36-1.36L12.03.08l4.77 4.78a.96.96 0 0 1-1.36 1.36l-2.45-2.44v5.85a.96.96 0 0 1-1.92 0V3.78z';

var eye$1 = 'M10 12a2 2 0 1 0 4 0 2 2 0 0 0-4 0m2 5a5 5 0 1 1 0-10 5 5 0 0 1 0 10m0-13.5A12.7 12.7 0 0 0 0 12a12.73 12.73 0 0 0 24 0 12.7 12.7 0 0 0-12-8.5';

var eyeHide$1 = 'M11.97 17q-1.06 0-2.05-.45l6.6-6.6A4.98 4.98 0 0 1 11.97 17m-5-5a5 5 0 0 1 7.09-4.53l-6.62 6.62A5 5 0 0 1 6.97 12m13.1-5.6L22.5 4A1.75 1.75 0 1 0 20 1.5l-3 3.03A12.73 12.73 0 0 0 0 12a13 13 0 0 0 3.93 5.6L1.5 20A1.75 1.75 0 1 0 4 22.5l3-3.03A12.73 12.73 0 0 0 24 12a13 13 0 0 0-3.93-5.6';

var faceHappy$1 = 'M12.02 20.71c-2.94 0-5.37-1.96-5.35-4.9.01-2.12 1.73-.54 5.33-.55 3.6 0 5.32-1.64 5.32.55.01 2.95-2.35 4.9-5.3 4.9m4.44-9.83a1.68 1.68 0 1 1 0-3.35 1.68 1.68 0 0 1 0 3.35M6.1 9.21a1.68 1.68 0 1 1 3.35 0 1.68 1.68 0 0 1-3.35 0M24 11.99a12 12 0 1 0 0 .01z';

var faceNeutral$1 = 'M12 0a12 12 0 0 1 12 11.99V12A12 12 0 1 1 12 0m3.82 10.75a1.67 1.67 0 1 0 1.28-3.09 1.67 1.67 0 0 0-1.28 3.1m-9.6-2.18a1.68 1.68 0 1 0 3.1 1.28 1.68 1.68 0 0 0-3.1-1.28m2.58 6.6a1.5 1.5 0 0 0 0 3h6.4a1.5 1.5 0 1 0 0-3z';

var faceSad$1 = 'M17.09 17.84a1.2 1.2 0 0 1-1.6.58q-.36-.15-.74-.22-1.1-.25-2.75-.27-1.64 0-2.75.27-.62.16-.74.22a1.2 1.2 0 1 1-1.02-2.17q.36-.18 1.23-.39 1.36-.31 3.28-.33 1.92.02 3.28.33.87.22 1.23.39c.6.28.86.99.58 1.6m-.63-6.96a1.67 1.67 0 1 1 0-3.35 1.67 1.67 0 0 1 0 3.35M6.1 9.21a1.68 1.68 0 1 1 3.35 0 1.68 1.68 0 0 1-3.35 0M24 11.99a12 12 0 1 0 0 .02z';

var faceSmiley$1 = 'M16.5 11a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m.45 5.95a6.96 6.96 0 0 1-9.9 0 1 1 0 1 1 1.42-1.41 4.97 4.97 0 0 0 7.07 0 1 1 0 0 1 1.4 1.41M6 9.5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24';

var faceSmileyOutline$1 = 'M12.03 19.29h-.06c-3.48-.03-4.92-2.31-4.98-2.41a.896.896 0 0 1 .27-1.22.82.82 0 0 1 1.17.26c.06.08 1.06 1.58 3.57 1.59 2.51-.01 3.52-1.6 3.56-1.67.25-.41.78-.54 1.18-.28.39.26.52.8.28 1.21-.06.1-1.5 2.49-4.99 2.52zM18 9.43c0 .95-.77 1.71-1.71 1.71-.95 0-1.72-.76-1.72-1.71s.77-1.72 1.72-1.72c.94 0 1.71.77 1.71 1.72zm-12 0c0-.95.77-1.72 1.71-1.72.95 0 1.72.77 1.72 1.72s-.77 1.71-1.72 1.71c-.94 0-1.71-.76-1.71-1.71zM12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.6 0 12 0zm0 22.2C6.45 22.2 1.8 17.7 1.8 12 1.8 6.3 6.3 1.8 12 1.8c5.7 0 10.2 4.5 10.2 10.2 0 5.7-4.65 10.2-10.2 10.2z';

var faceSmileyPlus$1 = 'M12 19q.52 0 1.05-.08a3.5 3.5 0 0 0 2.98 4.05l.06.32q-1.93.7-4.09.71a12 12 0 1 1 11.29-7.91l-.32-.06a3.5 3.5 0 0 0-6.74-.79 1 1 0 0 0-.7.3 4.96 4.96 0 0 1-7.06 0 1 1 0 1 0-1.42 1.41A7 7 0 0 0 12 19m6-9.5a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0M7.5 11a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3m9 7H18v-1.5a1.5 1.5 0 0 1 3 0V18h1.5a1.5 1.5 0 0 1 0 3H21v1.5a1.5 1.5 0 0 1-3 0V21h-1.5a1.5 1.5 0 0 1 0-3';

var faceTryon$1 = 'M3 12a9 9 0 0 1 9.75-8.97 1.5 1.5 0 0 0 .24-2.99Q12.5 0 12 0a12 12 0 1 0 11.96 11 1.5 1.5 0 1 0-3 .25q.04.38.04.75a9 9 0 1 1-18 0M18.8 1.16a5.3 5.3 0 0 1-3.64 3.63c-.21.06-.21.36 0 .42a5.3 5.3 0 0 1 3.63 3.63c.06.21.36.21.42 0a5.3 5.3 0 0 1 3.63-3.63c.21-.06.21-.36 0-.42a5.3 5.3 0 0 1-3.63-3.63c-.06-.21-.36-.21-.42 0M12 18.5a4.8 4.8 0 0 0 4.65-3.04c.28-.73.42-1.1.12-1.53s-.79-.43-1.77-.43H9c-.98 0-1.48 0-1.77.43-.3.44-.16.8.12 1.53A4.8 4.8 0 0 0 12 18.5M9 11a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3m6-3a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3';

var facebook$1 = 'M17.75 3.98h-2.31c-1.81 0-2.16.85-2.16 2.08V8.8h4.32l-.57 4.26h-3.76V24h-4.5V13.05H5V8.8h3.77V5.64C8.77 1.99 11.05 0 14.38 0c1.6 0 2.97.12 3.37.17z';

var fade$1 = 'M18 24h6v-6h-6zM6 24h6v-6H6zm6-6h6v-6h-6zM0 18h6v-6H0zm18-6h6V6h-6zM6 12h6V6H6zm6-6h6V0h-6zM0 6h6V0H0z';

var fileBox$1 = 'M16 12a1 1 0 0 0-1-1H9a1 1 0 0 0 0 2h6a1 1 0 0 0 1-1m7-6H1V4a3 3 0 0 1 3-3h16a3 3 0 0 1 3 3zm-4 17H5a3 3 0 0 1-3-3V8h20v12a3 3 0 0 1-3 3';

var fileUnknown$1 = 'M16.13 7H21l-6-6v4.88C15 6.5 15.5 7 16.13 7m-2.7 8.53c-.3.17-.65.74-.65 1.26 0 .42-.35.77-.78.77a.8.8 0 0 1-.78-.77c0-1.04.6-2.13 1.43-2.6a1.17 1.17 0 0 0-.65-2.15c-.65 0-1.19.52-1.19 1.17 0 .42-.35.77-.78.77a.8.8 0 0 1-.78-.77c0-1.5 1.23-2.71 2.75-2.71a2.73 2.73 0 0 1 2.75 2.7 2.7 2.7 0 0 1-1.32 2.33M12 20a.8.8 0 0 1-.82-.81.82.82 0 0 1 1.65 0c0 .45-.38.81-.83.81m4.13-11.25a2.9 2.9 0 0 1-2.88-2.87V1H5.5A2.5 2.5 0 0 0 3 3.5v17A2.5 2.5 0 0 0 5.5 23h13a2.5 2.5 0 0 0 2.5-2.5V8.75z';

var fillOpaque$1 = 'M6 18h12V6H6zm14.5 1.75c0 .41-.34.75-.75.75H4.25a.75.75 0 0 1-.75-.75V4.25c0-.41.34-.75.75-.75h15.5c.41 0 .75.34.75.75zM19.75 1H4.25A3.25 3.25 0 0 0 1 4.25v15.5C1 21.55 2.46 23 4.25 23h15.5c1.8 0 3.25-1.46 3.25-3.25V4.25C23 2.45 21.54 1 19.75 1';

var fillTransparent$1 = 'M15 15h3v3h-3zm-6 0h3v3H9zm3-3h3v3h-3zm-6 0h3v3H6zm9-3h3v3h-3zM9 9h3v3H9zm3-3h3v3h-3zM6 6h3v3H6zM4.25 3.5a.75.75 0 0 0-.75.75v15.5c0 .41.34.75.75.75h15.5c.41 0 .75-.34.75-.75V4.25a.75.75 0 0 0-.75-.75zM19.75 23H4.25A3.25 3.25 0 0 1 1 19.75V4.25C1 2.45 2.46 1 4.25 1h15.5C21.55 1 23 2.46 23 4.25v15.5c0 1.8-1.46 3.25-3.25 3.25';

var filter$1 = 'M9 19.5A1.75 1.75 0 1 1 9 16a1.75 1.75 0 0 1 0 3.5M22.25 16h-8.32a5.24 5.24 0 0 0-9.86 0H1.75a1.75 1.75 0 0 0 0 3.5h2.32a5.24 5.24 0 0 0 9.86 0h8.32a1.75 1.75 0 0 0 0-3.5M15 4.5A1.75 1.75 0 1 1 15 8a1.75 1.75 0 0 1 0-3.5M1.75 8h8.32a5.24 5.24 0 0 0 9.86 0h2.32a1.75 1.75 0 0 0 0-3.5h-2.32a5.24 5.24 0 0 0-9.86 0H1.75a1.75 1.75 0 0 0 0 3.5';

var flag$1 = 'M17 7.5 22 0H2v22a2 2 0 0 0 4 0v-7h16z';

var flame$1 = 'M12 23c-5.1 0-9.25-4.1-9.25-9.17 0-2.25.82-4.32 2.18-5.92A10 10 0 0 0 7.36 1a9.16 9.16 0 0 1 8.81 12 8 8 0 0 0 3.06-4.9 9 9 0 0 1 2.02 5.73A9.2 9.2 0 0 1 12 23';

var flash$1 = 'M17.45 0 3.5 14h6.59L6.55 24 20.5 10h-6.59z';

var flashAutomatic$1 = 'M13.8 0c-.5 0-.98.24-1.28.63L3.4 12.8A2 2 0 0 0 5 16h4.72L8.2 22.05a1.57 1.57 0 0 0 2.75 1.35l9.56-12.16A2 2 0 0 0 18.94 8H14.2l1.15-6.12A1.6 1.6 0 0 0 13.8 0M5 14l8.06-10.75L11.79 10h7.15l-8.3 10.57L12.28 14zm13.72 2-2.89 8h1.92l.55-1.7h3.23l.55 1.7H24l-2.9-8zm2.3 4.79H18.8l1.11-3.4z';

var flashSlash$1 = 'm3.1 13.64 2.85-2.85 7.27 7.27L7.5 23.8c-.5.49-1.3-.03-1.07-.68l2.92-8.39H3.56a.64.64 0 0 1-.45-1.1m19.1 6.46a1.48 1.48 0 1 1-2.1 2.1L1.8 3.9a1.48 1.48 0 1 1 2.1-2.1zm-1.47-9.58-2.68 2.7-7.27-7.27L16.5.19c.49-.48 1.3.03 1.07.68l-3.09 8.55h5.79c.57 0 .86.7.45 1.1';

var flashlight$1 = 'M19 1h-3v2h3a2 2 0 0 1 2 2v3h2V5a4 4 0 0 0-4-4m2 18a2 2 0 0 1-2 2h-3v2h3a4 4 0 0 0 4-4v-3h-2zM3 19v-3H1v3a4 4 0 0 0 4 4h3v-2H5a2 2 0 0 1-2-2M3 5c0-1.1.9-2 2-2h3V1H5a4 4 0 0 0-4 4v3h2zm6 6.5a2.5 2.5 0 1 1 5 0 2.5 2.5 0 0 1-5 0m7.5 6.5a1.5 1.5 0 0 0 1.06-2.56l-2.01-2.01q.43-.89.45-1.93a4.5 4.5 0 1 0-4.5 4.5q1.05-.02 1.93-.45l2 2.01c.3.3.69.44 1.07.44';

var flipHorizontal$1 = 'M12 4.12V20.5H3.81zm10.78 15.97L13.79 2.11A2 2 0 0 0 12 1c-.71 0-1.42.37-1.8 1.1l-8.98 18A2 2 0 0 0 3.01 23H21a2 2 0 0 0 1.78-2.9';

var flipVertical$1 = 'M19.88 12H3.5V3.81zm2.01-1.8L3.91 1.23Q3.46 1 3 1a2 2 0 0 0-2 2v18a2 2 0 0 0 2.9 1.78l18-8.99a2 2 0 0 0 0-3.58';

var folder$1 = 'M11 5v-.5A2.5 2.5 0 0 0 8.5 2h-5A2.5 2.5 0 0 0 1 4.5v15A2.5 2.5 0 0 0 3.5 22h17a2.5 2.5 0 0 0 2.5-2.5v-12A2.5 2.5 0 0 0 20.5 5z';

var folderFill$1 = 'M11 5v-.5A2.5 2.5 0 0 0 8.5 2h-5A2.5 2.5 0 0 0 1 4.5v15A2.5 2.5 0 0 0 3.5 22h17a2.5 2.5 0 0 0 2.5-2.5v-12A2.5 2.5 0 0 0 20.5 5z';

var forward$1 = 'M23.4 10.2a3 3 0 0 1 0 3.6l-6.34 9.45A2 2 0 0 1 13.5 22V2A2 2 0 0 1 17.06.75zm-11.5 0a3 3 0 0 1 0 3.6l-6.34 9.45A2 2 0 0 1 2 22V2A2 2 0 0 1 5.56.75z';

var gauge$1 = 'M11 5a1 1 0 1 1 2 0 1 1 0 0 1-2 0m-5 7a1 1 0 1 1-2 0 1 1 0 0 1 2 0m12 0a1 1 0 1 1 2 0 1 1 0 0 1-2 0m-2.94-.57a4 4 0 1 1-1.63-1.16l2.74-3.83a1 1 0 1 1 1.64 1.14zM12 16a2 2 0 1 0 0-4 2 2 0 0 0 0 4M8 7a1 1 0 1 1-2 0 1 1 0 0 1 2 0m16 5a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var ghost$1 = 'M9 6C7.9 6 7 7.12 7 8.5S7.9 11 9 11s2-1.12 2-2.5S10.1 6 9 6m6 5c1.1 0 2-1.12 2-2.5S16.1 6 15 6s-2 1.12-2 2.5.9 2.5 2 2.5m2 10 .24.16a5 5 0 0 0 2.77.84h.68a2 2 0 0 0 1.98-2.28l-.55-3.88a12 12 0 0 1-.12-1.7V10a10 10 0 1 0-20 0v4.15a12 12 0 0 1-.12 1.7l-.55 3.87A2 2 0 0 0 3.3 22h.68a5 5 0 0 0 2.77-.84L7 21l1 1.2a5 5 0 0 0 3.84 1.8h.32A5 5 0 0 0 16 22.2zM5.1 18.66a2 2 0 0 1-.63.28l.38-2.67A15 15 0 0 0 5 14.15V10a7 7 0 1 1 14 0v4.15a15 15 0 0 0 .15 2.12l.38 2.67a2 2 0 0 1-.63-.28l-2.48-1.65-2.73 3.27a2 2 0 0 1-1.53.72h-.32a2 2 0 0 1-1.53-.72l-2.73-3.27z';

var ghostFill$1 = 'M12 0A10 10 0 0 0 2 10v4.15a12 12 0 0 1-.12 1.7l-.55 3.87A2 2 0 0 0 3.3 22h.68a5 5 0 0 0 2.77-.84L7 21l1 1.2a5 5 0 0 0 3.84 1.8h.32A5 5 0 0 0 16 22.2l1-1.2.24.16a5 5 0 0 0 2.77.84h.68a2 2 0 0 0 1.98-2.28l-.55-3.88a12 12 0 0 1-.12-1.7V10A10 10 0 0 0 12 0M6 7a2 2 0 1 1 4 0 2 2 0 0 1-4 0m8 6c0 1.66-.9 3-2 3s-2-1.34-2-3 .9-3 2-3 2 1.34 2 3m0-6a2 2 0 1 1 4 0 2 2 0 0 1-4 0';

var gif$1 = 'M19.5 3h-15A4.5 4.5 0 0 0 0 7.5v9C0 18.98 2.03 21 4.5 21h15a4.5 4.5 0 0 0 4.5-4.5v-9C24 5.03 21.98 3 19.5 3m-7.4 5.08h1.58v7.8h-1.59zm9.02 0v1.34h-4v1.88h3.39v1.35h-3.4v3.23h-1.57v-7.8zM3.38 13.63A5 5 0 0 1 3.12 12q0-.98.33-1.8t.95-1.39q.48-.43 1.1-.66t1.4-.23q.74 0 1.32.19t1 .54q.41.34.67.83t.35 1.05H8.7a1.7 1.7 0 0 0-.56-.94 1.8 1.8 0 0 0-1.2-.36q-.54 0-.96.21-.4.21-.68.59t-.42.88a4 4 0 0 0 .02 2.2q.15.5.44.87.27.36.68.57.4.2.9.2a2.2 2.2 0 0 0 1.47-.55q.25-.25.4-.57.14-.3.14-.64v-.04H7.05v-1.22h3.28v4.14H9.14l-.05-1.05h-.03q-.4.68-.94.95a3 3 0 0 1-1.25.26q-.88 0-1.56-.3a3.4 3.4 0 0 1-1.93-2.11';

var gifVisual$1 = 'M17.5 16.5s1.12-1.36.98-1.87c-.15-.52-.93-.76-1.74-.56-.82.2-1.36.79-1.22 1.3.15.52 1.98 1.13 1.98 1.13M13 13a1 1 0 1 0 0 2 1 1 0 0 0 0-2m6 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2M1 19a4 4 0 0 0 4 4h14a4 4 0 0 0 4-4V5a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4zM9 5H7V3h2zm4-2v2h-2V3zm4 0v2h-2V3zm4 2h-2V3a2 2 0 0 1 2 2M3 5c0-1.1.9-2 2-2v2zm0 11V8a1 1 0 0 1 1-1h13.38L16.3 9.18l-2.1.7-2.48-1.85a1.92 1.92 0 0 0-3.04 1.09C8.37 10.42 8 12.52 8 15v2H4a1 1 0 0 1-1-1m16.27-8.31L21 9.4V16a1 1 0 0 1-1 1H10v-2c0-2.2.32-4.1.59-5.3l3.23 2.41 3.89-1.3zM21 19a2 2 0 0 1-2 2v-2zm-4 2h-2v-2h2zm-6 0v-2h2v2zm-4 0v-2h2v2zm-4-2h2v2a2 2 0 0 1-2-2';

var gift$1 = 'M3.02 7H2.5C1.67 7 1 7.67 1 8.5v6c0 .65.42 1.2 1 1.41v5.59c0 .83.67 1.5 1.5 1.5h17c.83 0 1.5-.67 1.5-1.5v-5.59c.58-.2 1-.76 1-1.41v-6c0-.83-.67-1.5-1.5-1.5h-.52q.25-.6.37-1.25a4.76 4.76 0 0 0-4.71-5.7A4.76 4.76 0 0 0 12 3.55 4.76 4.76 0 0 0 7.36.05a4.76 4.76 0 0 0-4.71 5.7q.12.65.37 1.25M7.6 7c-1.1 0-1.8-.83-2-1.84a1.8 1.8 0 1 1 3.55-.62L9.52 7zm7.25-2.46a1.8 1.8 0 1 1 3.56.62c-.2 1-.9 1.84-2 1.84h-1.93zM20 10v3h-6.5v-3zm-9.5 0v3H4v-3zm3 6H19v4h-5.5zm-3 0v4H5v-4z';

var globe$1 = 'M15.49 20.83a22 22 0 0 0 1.48-7.58h4.44a9.5 9.5 0 0 1-5.92 7.58m-12.9-7.58h4.44c.11 2.83.61 5.57 1.49 7.58a9.5 9.5 0 0 1-5.93-7.58M8.52 3.17a22 22 0 0 0-1.5 7.58H2.6a9.5 9.5 0 0 1 5.93-7.58m1 7.58c.24-5.32 1.89-8.2 2.48-8.25.68.06 2.25 3 2.47 8.25zm2.49 10.75c-.6-.04-2.25-2.93-2.48-8.25h4.94c-.22 5.24-1.8 8.19-2.46 8.25m9.4-10.75h-4.44a22 22 0 0 0-1.48-7.58 9.5 9.5 0 0 1 5.92 7.58M24 12a12.01 12.01 0 1 0-12 12c6.62 0 12-5.39 12-12';

var globeChecked$1 = 'm21.3 16.96-4.36 4.35-2.47-2.47a.75.75 0 0 1 1.06-1.07l1.41 1.42 3.3-3.3a.75.75 0 1 1 1.06 1.07M18 12a6 6 0 1 0 0 12 6 6 0 0 0 0-12M7.03 10.75H2.59a9.5 9.5 0 0 1 5.93-7.58 22 22 0 0 0-1.5 7.58m-4.44 2.5h4.44c.11 2.83.61 5.57 1.49 7.58a9.5 9.5 0 0 1-5.93-7.58M12 2.5c.68.06 2.25 3 2.47 8.25H9.53C9.76 5.43 11.4 2.55 12 2.5M10 18l.04-.71a24 24 0 0 1-.51-4.04h2.05a8 8 0 0 1 5.35-3.17 22 22 0 0 0-1.44-6.9 9.5 9.5 0 0 1 5.92 7.57h-.05a8 8 0 0 1 2.6 1.94q.04-.35.04-.69a12.01 12.01 0 1 0-12 12q.35 0 .69-.04A8 8 0 0 1 10 18';

var gmail$1 = 'M0 6a4 4 0 0 1 4-4h16a4 4 0 0 1 4 4v12a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4zm3.52-.88 7.53 6.16a1.5 1.5 0 0 0 1.9 0l7.53-6.16A1 1 0 0 0 20 5H4a1 1 0 0 0-.48.12M3 8.57V18a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V8.57l-6.15 5.04a4.5 4.5 0 0 1-5.7 0z';

var graphBar$1 = 'M13.5 1h-3a1 1 0 0 0-1 1v20a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1M22 7h-3a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1M5 10H2a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1V11a1 1 0 0 0-1-1';

var graphPie$1 = 'M10.78 13.22V0A12.03 12.03 0 1 0 24 13.22zm2.5-2.5H24A12.04 12.04 0 0 0 13.29 0z';

var hand$1 = 'M15.57 1.27a2.75 2.75 0 0 0-5 .87 2.8 2.8 0 0 0-3.65 2.51l-.3 5.95-.83-.88a3.6 3.6 0 0 0-5.3.06 1.86 1.86 0 0 0-.05 2.42l2.2 2.7q.21.25.36.55l2.07 4.04A8.3 8.3 0 0 0 12.46 24h2.1a9 9 0 0 0 9-9.47l-.47-8.88a2.8 2.8 0 0 0-3.66-2.51 2.75 2.75 0 0 0-3.86-1.87M14 2.75V13h2V3.75a.75.75 0 1 1 1.5 0V13h2V5.8a.8.8 0 0 1 1.6-.05l.46 8.88a7 7 0 0 1-7 7.37h-2.1a6.3 6.3 0 0 1-5.6-3.42l-2.08-4.04a5 5 0 0 0-.6-.9l-2.11-2.6c.63-.62 1.65-.6 2.26.05l4.05 4.3.53-10.64a.8.8 0 0 1 1.6.04V13h2V2.75a.75.75 0 1 1 1.5 0';

var handPointing$1 = 'M17.78 22.39a8.54 8.54 0 0 1-10.56-3.62q-.27-.4-.53-.86a11.5 11.5 0 0 0-4.1-4.33c-.44-.2-2-.97-1.49-1.89.28-.51 1.06-.89 1.78-.96 1.12-.25 3.02.3 4.9 1.5L4.04 3.41a1.7 1.7 0 0 1 .56-2.04l.01-.01.18-.12.03-.02.21-.1.23-.07.04-.01.2-.04h.02c.79-.08 1.56.34 1.88 1.08l2.18 5.17c.05-.64.47-1.23 1.12-1.48a1.83 1.83 0 0 1 2.37.98c.06-.62.47-1.2 1.11-1.45.93-.36 1.98.06 2.36.96l.04.1c.09-.59.49-1.12 1.1-1.36.93-.37 1.93-.04 2.3.86H20a49 49 0 0 0 2.5 6.2 8.07 8.07 0 0 1-4.72 10.32';

var handle$1 = 'M3.5 7.5a1.5 1.5 0 1 0 0 3h17a1.5 1.5 0 0 0 0-3zm0 6a1.5 1.5 0 0 0 0 3h17a1.5 1.5 0 0 0 0-3z';

var heart$1 = 'm22.18 13.58-9.13 9a1.5 1.5 0 0 1-2.1 0l-9.13-9a6.2 6.2 0 0 1 0-8.77 6.3 6.3 0 0 1 8.84 0L12 6.15l1.34-1.34a6.3 6.3 0 0 1 8.84 0 6.2 6.2 0 0 1 0 8.77';

var heartBroken$1 = 'M11.98 22.25 1.82 11.95C-.28 9.83-.65 6.4 1.18 4.03a5.763 5.763 0 0 1 8.7-.56l2.1 2.14 1.95-1.98c2.1-2.13 5.48-2.5 7.82-.65 2.8 2.23 2.99 6.35.55 8.82L11.98 22.25zM15.3 9.54c.4-.4.4-1.06 0-1.46-.4-.4-1.05-.4-1.45 0L12 9.94l-1.85-1.86c-.4-.4-1.05-.4-1.45 0-.4.4-.4 1.06 0 1.46l1.85 1.86-1.85 1.86c-.4.4-.4 1.05 0 1.45.4.4 1.05.41 1.45 0L12 12.85l1.85 1.86c.4.41 1.05.41 1.45 0 .4-.4.4-1.05 0-1.45l-1.85-1.86 1.85-1.86z';

var heartHealth$1 = 'M23.13 12.36h-6.08l-1.2-1.88a1 1 0 0 0-1.72.02l-1.98 3.3-2.22-5.17a1.01 1.01 0 0 0-1.85-.02l-1.72 3.75H.86a6.2 6.2 0 0 1 .96-7.55 6.3 6.3 0 0 1 8.84 0L12 6.15l1.34-1.34a6.3 6.3 0 0 1 8.84 0 6.2 6.2 0 0 1 .95 7.55M13.05 22.57a1.5 1.5 0 0 1-2.1 0l-8.34-8.21h4.38a1 1 0 0 0 .92-.6l1.06-2.3 2.1 4.91c.33.76 1.37.83 1.8.12l2.16-3.59.62.99c.19.29.51.47.86.47h4.88z';

var heartOutline$1 = 'M5.94 6c.92 0 1.83.37 2.49 1.02l1.48 1.44L12 10.5l2.09-2.04 1.48-1.44A3.6 3.6 0 0 1 18.06 6c.49 0 1.2.11 1.85.63a2.8 2.8 0 0 1 .23 4.23l-.07.07-.07.08c-.06.07-5.59 6.22-8 8.75-2.41-2.54-7.94-8.69-8-8.75l-.06-.08-.08-.07A2.8 2.8 0 0 1 3 8.71 2.9 2.9 0 0 1 5.94 6m12.12-3a6.6 6.6 0 0 0-4.58 1.87L12 6.31l-1.48-1.44A6.6 6.6 0 0 0 5.94 3c-1.33 0-2.65.42-3.73 1.29a5.8 5.8 0 0 0-.44 8.72s6.29 7.01 8.48 9.26c.47.49 1.11.73 1.75.73s1.28-.24 1.75-.73c2.19-2.25 8.48-9.26 8.48-9.26a5.8 5.8 0 0 0-.44-8.72A6 6 0 0 0 18.06 3';

var highlights$1 = 'M0 12a12 12 0 1 1 24 0 12 12 0 0 1-24 0m8.7-8.37q-.42.16-.81.37L12 6.37v-.89l-.02.04zM12 8.37v-.89l-.02.04-5.07-2.93q-.33.22-.64.48zm-6.5-2.6-.49.57L12 10.37v-.89l-.02.04zm6.5 6.6v-.89l-.02.04-7.56-4.37q-.2.3-.37.63zM3.63 8.7q-.14.35-.25.7L12 14.38v-.89l-.02.04zM12 16.37v-.89l-.02.04-8.84-5.1q-.07.38-.1.78zm-9-4.03q.02.45.08.88L12 18.37v-.89l-.02.04zm9 8.03v-.89l-.02.04-8.61-4.98q.16.55.39 1.08zm-7.23-3.02a9 9 0 0 0 6.22 3.6zm5.24-14.13L12 4.37V3q-1.02 0-2 .22';

var history$1 = 'M13.25 8v3.48l2.38 2.39a1.25 1.25 0 0 1-1.76 1.76l-3.12-3.11V8a1.25 1.25 0 0 1 2.5 0M23 12a11.01 11.01 0 0 1-21.86 1.74 1.5 1.5 0 0 1 2.96-.47A8 8 0 1 0 12 4c-2.22 0-4.3.94-5.78 2.5H7a1.5 1.5 0 1 1 0 3H1V4a1.5 1.5 0 1 1 3 0v.47A11.01 11.01 0 0 1 23 12';

var home$1 = 'M12 0 1 10v14h8v-7a3 3 0 1 1 6 0v7h8V10z';

var homeFill$1 = 'M9.59.92a3.63 3.63 0 0 1 4.82 0l7.25 6.44A4 4 0 0 1 23 10.35v8.46a3.9 3.9 0 0 1-3.6 3.92 106 106 0 0 1-14.8 0A3.9 3.9 0 0 1 1 18.8v-8.46a4 4 0 0 1 1.34-3zM12 16a5 5 0 0 1-3.05-1.04l-1.23 1.58a7 7 0 0 0 8.56 0l-1.23-1.58A5 5 0 0 1 12 16';

var ideaPin$1 = 'M15.25 0h-6.5a1.75 1.75 0 1 0 0 3.5h6.5c2.9 0 5.25 2.35 5.25 5.25v6.5a1.75 1.75 0 0 0 3.5 0v-6.5A8.76 8.76 0 0 0 15.25 0m-.75 6.5H3a3 3 0 0 0-3 3V21a3 3 0 0 0 3 3h11.5a3 3 0 0 0 3-3V9.5a3 3 0 0 0-3-3';

var imagePortrait$1 = 'M16 1H8a4 4 0 0 0-4 4v14a4 4 0 0 0 4 4h8a4 4 0 0 0 4-4V5a4 4 0 0 0-4-4M8 4h8a1 1 0 0 1 1 1v11.5h-.03a4.99 4.99 0 0 0-9.94 0H7V5a1 1 0 0 1 1-1m4 7.25A2.63 2.63 0 0 0 12 6a2.62 2.62 0 0 0 0 5.25';

var impressum$1 = 'M10 12a2 2 0 1 1 4 0 2 2 0 0 1-4 0m2-5a2 2 0 1 1 2-2h3a5 5 0 1 0-8.56 3.5A4.98 4.98 0 0 0 12 17a2 2 0 1 1-2 2H7a5 5 0 1 0 8.56-3.5A4.98 4.98 0 0 0 12 7';

var indent$1 = 'M22.5 5a1.5 1.5 0 0 1 0 3h-9a1.5 1.5 0 0 1 0-3zm-4 11a1.5 1.5 0 0 1 0 3h-5a1.5 1.5 0 0 1 0-3zM12 12c0-.83.67-1.5 1.5-1.5h9a1.5 1.5 0 0 1 0 3h-9A1.5 1.5 0 0 1 12 12M0 17.28V6.72a.72.72 0 0 1 1.2-.53l5.43 4.97a1.14 1.14 0 0 1 0 1.68L1.21 17.8A.72.72 0 0 1 0 17.28';

var infoCircle$1 = 'M12 9a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m1.5 7.5a1.5 1.5 0 1 1-3 0v-5a1.5 1.5 0 1 1 3 0zM12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24';

var information$1 = 'M15 3a3 3 0 1 1-6 0 3 3 0 0 1 6 0m-6 8a3 3 0 1 1 6 0v10a3 3 0 1 1-6 0z';

var insightsAudience$1 = 'M2 22.37c0-4.5 4.48-8.15 10-8.15s10 3.65 10 8.15V24H2zm16.48-16.4h-5.44V.01a6.5 6.5 0 0 1 5.44 5.96M11.04 0v6.97a1 1 0 0 0 1 1h6.28A6.5 6.5 0 1 1 11.04 0';

var insightsConversion$1 = 'M21 2.5v1.17C15.17-1.67 6.2-1.05.44 4.7a1.5 1.5 0 0 0 2.12 2.12C7.53 1.87 15.06 1.7 19.6 6.5h-2.2a1.5 1.5 0 1 0 0 3H24v-7a1.5 1.5 0 0 0-3 0M19 17a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1v-5a1 1 0 0 0-1-1zm-4-3a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1zM1 11a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1V12a1 1 0 0 0-1-1z';

var instagram$1 = 'M17.87 4.8a1.32 1.32 0 1 0 0 2.65 1.32 1.32 0 0 0 0-2.64M12 15.68a3.67 3.67 0 1 1 0-7.33 3.67 3.67 0 0 1 0 7.33m0-9.32a5.65 5.65 0 1 0 0 11.3 5.65 5.65 0 0 0 0-11.3M12 1c-2.99 0-3.36.01-4.53.07a8 8 0 0 0-2.67.5 5.4 5.4 0 0 0-1.95 1.28 5.4 5.4 0 0 0-1.27 1.94 8 8 0 0 0-.51 2.68A79 79 0 0 0 1 12c0 2.99.01 3.36.07 4.54.05 1.17.24 1.97.5 2.67a5.4 5.4 0 0 0 1.28 1.94 5.4 5.4 0 0 0 1.95 1.27c.7.27 1.5.46 2.67.51C8.64 23 9 23 12 23s3.36-.01 4.54-.07a8 8 0 0 0 2.67-.5 5.4 5.4 0 0 0 1.94-1.28 5.4 5.4 0 0 0 1.27-1.94c.27-.7.46-1.5.51-2.67.06-1.18.07-1.55.07-4.54s-.01-3.36-.07-4.53a8 8 0 0 0-.5-2.68 5.4 5.4 0 0 0-1.28-1.94 5.4 5.4 0 0 0-1.94-1.27c-.7-.27-1.5-.46-2.68-.51A78 78 0 0 0 12 1m0 1.98c2.94 0 3.29.01 4.45.07 1.07.05 1.65.22 2.04.38.51.2.88.43 1.26.82.39.38.63.75.82 1.26.16.39.33.97.38 2.05.06 1.16.07 1.5.07 4.44s-.01 3.29-.07 4.45a6 6 0 0 1-.37 2.04c-.2.51-.44.88-.83 1.26a3.4 3.4 0 0 1-1.26.83c-.39.15-.97.33-2.04.37-1.16.06-1.51.07-4.45.07s-3.28-.01-4.44-.07a6 6 0 0 1-2.05-.37c-.51-.2-.88-.44-1.26-.83a3.4 3.4 0 0 1-.82-1.26 6 6 0 0 1-.38-2.04c-.06-1.16-.07-1.51-.07-4.45s.01-3.28.07-4.44a6 6 0 0 1 .38-2.05c.2-.51.43-.88.82-1.26a3.4 3.4 0 0 1 1.26-.82 6 6 0 0 1 2.05-.38c1.16-.06 1.5-.07 4.44-.07';

var invoice$1 = 'M3 3.52A2.5 2.5 0 0 1 5.5 1h13C19.88 1 21 2.13 21 3.52v18.82a.5.5 0 0 1-.73.45l-2.1-1.11a1 1 0 0 0-.99.03l-1.82 1.14a1 1 0 0 1-1.05 0l-1.78-1.11a1 1 0 0 0-1.06 0L9.7 22.85a1 1 0 0 1-1.05 0l-1.82-1.14a1 1 0 0 0-1-.03l-2.09 1.1a.5.5 0 0 1-.73-.44zM7.25 9h9.5a1.25 1.25 0 1 0 0-2.5h-9.5a1.25 1.25 0 1 0 0 2.5m0 5h3.5a1.25 1.25 0 1 0 0-2.5h-3.5a1.25 1.25 0 1 0 0 2.5';

var kakaoTalk$1 = 'm9.46 9.66.7 1.96h-1.4zM0 10.76C0 5.53 5.37 1.3 12 1.3s12 4.23 12 9.46-5.37 9.46-12 9.46q-1.1 0-2.13-.15c-.7.5-4.7 3.3-5.07 3.35 0 0-.16.06-.29-.01-.13-.08-.1-.28-.1-.28.03-.27 1.03-3.72 1.21-4.35C2.25 17.1 0 14.14 0 10.76m4.67 2.64c0 .37.31.66.7.66s.69-.3.69-.66V9.3h1.08a.68.68 0 0 0 0-1.36H3.59a.68.68 0 0 0 0 1.36h1.08zm6.19.35q.12.3.58.3.23 0 .44-.1c.19-.08.37-.32.16-.98l-1.66-4.35a1 1 0 0 0-.92-.69c-.45.01-.8.36-.92.69l-1.66 4.36c-.2.65-.02.89.17.98q.21.1.44.1.45-.01.57-.31l.35-.9h2.1zm1.63-.42c0 .35.3.63.66.63h2.22c.37 0 .67-.28.67-.63s-.3-.64-.66-.64H13.9V8.63a.7.7 0 0 0-.7-.7.7.7 0 0 0-.71.7zm3.82.03a.7.7 0 0 0 1.38 0v-1.5l.24-.25 1.63 2.15a.7.7 0 0 0 .97.14.7.7 0 0 0 .13-.97l-1.7-2.26 1.58-1.58q.16-.17.15-.42a.7.7 0 0 0-.2-.44.7.7 0 0 0-.48-.2.5.5 0 0 0-.39.15l-1.93 1.93V8.63a.7.7 0 0 0-1.38 0z';

var key$1 = 'M6 14.5a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5m18-4.25H11.74a6 6 0 1 0 0 3.5H18V17h4v-3.25h2z';

var knoop$1 = 'M15 10.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m0 6a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m-6-6a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m0 6a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24';

var labFlask$1 = 'M18 0v2h-1a1 1 0 0 0-1 1v9.54l5.93 5.09A3.05 3.05 0 0 1 19.95 23H4.05a3.05 3.05 0 0 1-1.98-5.37L8 12.54V3a1 1 0 0 0-1-1H6V0zM9.83 2A3 3 0 0 1 10 3v10.46l-6.63 5.68A1.05 1.05 0 0 0 4.05 21h15.9a1.05 1.05 0 0 0 .68-1.86L14 13.46V10h-2V8h2V6h-2V4h2V3a3 3 0 0 1 .17-1z';

var lassoMagic$1 = 'M1.72.31a.45.45 0 0 1 .85 0l.33 1.02q.03.06.1.1l.98.34c.4.14.4.73 0 .87L3 3a.2.2 0 0 0-.1.1l-.33 1a.45.45 0 0 1-.85 0l-.34-1a.2.2 0 0 0-.1-.1L.3 2.64c-.4-.14-.4-.73 0-.87l.99-.35a.2.2 0 0 0 .1-.1zm4.55 2.02a.76.76 0 0 1 1.44 0l.88 2.63 2.56.9c.69.24.69 1.24 0 1.49l-2.56.9-.88 2.63a.76.76 0 0 1-1.44 0l-.88-2.64-2.56-.9c-.69-.24-.69-1.24 0-1.48l2.56-.9zm3.84 1.16-.2-.6q1.54-.34 3.22-.34c5.95 0 10.35 3.55 10.35 8.8a8.6 8.6 0 0 1-3.34 6.55q.1.5.1 1.03c0 1.8-.9 3.53-2.4 4.66q-.45.38-.95.37c-.7 0-1.14-.46-1.14-1.05 0-.43.28-.81.7-1.16a3.6 3.6 0 0 0 1.46-2.42 10 10 0 0 1-4.2.98q-.88 0-1.6-.24-.58.05-1.16.05c-5.34 0-9.62-2.81-9.62-7.93q.01-1.79.65-3.31.16.09.36.15l1.67.6.1.3q-.43 1.08-.44 2.33c0 3.4 2.84 5.25 6.46 5.53l-.03-.4c0-2.16 2.26-3.66 4.8-3.66 1.77 0 3.3.76 4.26 2a6.2 6.2 0 0 0 2-4.39c0-3.9-3.44-6.48-8-6.48h-.24q-.42-.52-1.14-.78zm3.55 14.54c1.27 0 2.52-.34 3.63-.93a3.1 3.1 0 0 0-2.45-1.07c-1.4 0-2.41.54-2.41 1.3 0 .48.48.7 1.23.7';

var layersStack$1 = 'M12.67.66a1.5 1.5 0 0 0-1.34 0l-10 5a1.5 1.5 0 0 0 0 2.68l10 5c.42.21.92.21 1.34 0l10-5a1.5 1.5 0 0 0 0-2.68zm-10 10a1.5 1.5 0 1 0-1.34 2.68l10 5c.42.21.92.21 1.34 0l10-5a1.5 1.5 0 1 0-1.34-2.68L12 15.32zm-1.34 7.68 10 5c.42.21.92.21 1.34 0l10-5a1.5 1.5 0 1 0-1.34-2.68L12 20.32l-9.33-4.66a1.5 1.5 0 1 0-1.34 2.68';

var layout$1 = 'M19 1H5a4 4 0 0 0-4 4v14a4 4 0 0 0 4 4h14a4 4 0 0 0 4-4V5a4 4 0 0 0-4-4m0 3a1 1 0 0 1 1 1v5.75h-6.75V4zM4 19V5a1 1 0 0 1 1-1h5.75v16H5a1 1 0 0 1-1-1m15 1h-5.75v-6.75H20V19a1 1 0 0 1-1 1';

var lightbulb$1 = 'M12 0a8 8 0 0 1 5.61 13.7h.02A5.5 5.5 0 0 0 16 17.5V19H8v-1.5a5.5 5.5 0 0 0-1.64-3.83A8 8 0 0 1 12 0M9.5 24A1.5 1.5 0 0 1 8 22.5V21h8v1.5c0 .83-.67 1.5-1.5 1.5z';

var lightningBoltCircle$1 = 'M12 0a12 12 0 1 1 0 24 12 12 0 0 1 0-24m4.42 10.92a.52.52 0 0 0-.45-.8h-3.1l.9-5.62h-1.05l-5.14 8.58c-.21.35.04.8.45.8h3.1l-.9 5.62h1.05z';

var link$1 = 'm21 7.24-4.05 4.05-1.06-1.06.67-.67a1.5 1.5 0 1 0-2.12-2.12l-.67.67-1.06-1.06L16.76 3zm-9.7 9.7L7.23 21 3 16.76l4.05-4.05 1.06 1.06-.67.67a1.5 1.5 0 0 0 2.12 2.12l.67-.67zM14.63.89l-4.05 4.05a3 3 0 0 0 0 4.24l1.06 1.06-1.42 1.42-1.06-1.06a3 3 0 0 0-4.24 0L.88 14.64a3 3 0 0 0 0 4.24l4.24 4.24a3 3 0 0 0 4.24 0l4.05-4.05a3 3 0 0 0 0-4.24l-1.06-1.06 1.42-1.42 1.06 1.06a3 3 0 0 0 4.24 0l4.05-4.05a3 3 0 0 0 0-4.24L18.88.88a3 3 0 0 0-4.24 0';

var linkBroken$1 = 'M7.5 0C8.33 0 9 .67 9 1.5v3a1.5 1.5 0 0 1-3 0v-3C6 .67 6.67 0 7.5 0m9.26 3-3.88 3.88-2.12-2.12L14.64.88a3 3 0 0 1 4.24 0l4.24 4.24a3 3 0 0 1 0 4.24l-3.88 3.88-2.12-2.12L21 7.24zm-5.64 14.12 2.12 2.12-3.88 3.88a3 3 0 0 1-4.24 0L.88 18.88a3 3 0 0 1 0-4.24l3.88-3.88 2.12 2.12L3 16.76 7.24 21zM15 19.5a1.5 1.5 0 0 1 3 0v3a1.5 1.5 0 0 1-3 0zm-9-12C6 8.33 5.33 9 4.5 9h-3a1.5 1.5 0 0 1 0-3h3C5.33 6 6 6.67 6 7.5M22.5 15a1.5 1.5 0 0 1 0 3h-3a1.5 1.5 0 0 1 0-3z';

var lips$1 = 'M12 13q-3.66-.02-7-1.01a25.3 25.3 0 0 1 14 0A25 25 0 0 1 12 13m8.55-4.85A6.47 6.47 0 0 0 12 7.18a6.47 6.47 0 0 0-8.55.97L0 12a15 15 0 0 0 24 0z';

var listNumbered$1 = 'M2.8 2.77V7h1.48V.66H2.85Q2.82 1.87 1.4 1.88v1.5c.72 0 1.22-.2 1.4-.61M.54 14.41c0 .19.02.45.06.59h4.78v-1.39H2.34q.1-.25.56-.5l1.12-.58c.86-.43 1.42-1.04 1.42-2.01 0-1.24-.86-2-2.38-2-1.46 0-2.46.72-2.52 2l1.51.37c.06-.69.43-1.07 1.02-1.07.5 0 .83.3.83.76q-.01.55-.65.85l-1.15.56A2.5 2.5 0 0 0 .53 14.4m4.86 6.54c0-1.12-.64-1.85-1.8-1.92L5.11 18v-1.34H.74V18h2.52l-1.9 1.17.55 1.04c.27-.18.57-.32.95-.32.6 0 1.01.38 1.01.95 0 .6-.4 1-1.04 1q-.84 0-1.08-.87l-1.3.64c.27 1 1.15 1.52 2.46 1.52 1.45 0 2.48-.9 2.48-2.18M7 6h17V3H7zm0 7.5h17v-3H7zM7 21h17v-3H7z';

var listNumberedRtl$1 = 'M20.3 2.77V7h1.47V.66h-1.42q-.03 1.21-1.46 1.22v1.5c.72 0 1.23-.2 1.42-.61m-1.77 11.64c0 .19.02.45.06.59h4.78v-1.39h-3.03q.09-.25.56-.5l1.12-.58c.86-.43 1.42-1.04 1.42-2.01 0-1.24-.86-2-2.38-2-1.46 0-2.47.72-2.52 2l1.51.37c.06-.69.43-1.07 1.02-1.07.5 0 .83.3.83.76q-.01.55-.65.85l-1.15.56a2.5 2.5 0 0 0-1.57 2.42m4.86 6.54c0-1.12-.64-1.85-1.8-1.92L23.11 18v-1.34h-4.38V18h2.52l-1.9 1.17.55 1.04c.27-.18.57-.32.95-.32.6 0 1.01.38 1.01.95 0 .6-.4 1-1.04 1q-.84 0-1.08-.87l-1.3.64c.27 1 1.15 1.52 2.46 1.52 1.45 0 2.48-.9 2.48-2.18M0 6h17V3H0zm17 4.5H0v3h17zm0 7.5H0v3h17z';

var location$1 = 'M12 0a8 8 0 0 1 6.92 12L12 24 5.08 12a7.95 7.95 0 0 1 1.26-9.66A8 8 0 0 1 12 0m0 10.75a2.75 2.75 0 1 0 0-5.5 2.75 2.75 0 0 0 0 5.5';

var lock$1 = 'M8 10V7a4 4 0 0 1 8 0v3zm11 .02V7A7 7 0 0 0 5 7v3.02a8.75 8.75 0 1 0 14 0';

var logoLarge$1 = 'M21.75 3.5H2.25a1.25 1.25 0 0 1 0-2.5h19.5a1.25 1.25 0 0 1 0 2.5m-3.1 7.7-3.33 2.57 1.25 4.09a.87.87 0 0 1-1.36.96L12 16.33l-3.21 2.49a.87.87 0 0 1-1.36-.96l1.25-4.1-3.34-2.56c-.66-.52-.3-1.58.53-1.58h4.08l1.22-4a.87.87 0 0 1 1.66 0l1.22 4h4.08c.83 0 1.19 1.06.53 1.58M1 21.75c0-.69.56-1.25 1.25-1.25h19.5a1.25 1.25 0 0 1 0 2.5H2.25C1.56 23 1 22.44 1 21.75';

var logoSmall$1 = 'M23 5.25C23 4.56 22.44 4 21.75 4H2.25a1.25 1.25 0 0 0 0 2.5h19.5c.69 0 1.25-.56 1.25-1.25m-7.5 5.39h-2.33l-.7-2.29a.5.5 0 0 0-.94 0l-.7 2.29H8.5c-.48 0-.68.6-.3.9l1.9 1.47-.71 2.34c-.15.46.39.84.77.54L12 14.48l1.84 1.41c.38.3.92-.08.77-.54L13.9 13l1.9-1.47c.38-.3.18-.9-.3-.9M2.25 20h19.5a1.25 1.25 0 0 0 0-2.5H2.25a1.25 1.25 0 0 0 0 2.5';

var logout$1 = 'M10 12V3a2 2 0 0 1 4 0v9a2 2 0 0 1-4 0m13 0c0 2.94-1.14 5.7-3.22 7.78A11 11 0 0 1 12 23c-2.94 0-5.7-1.14-7.78-3.22A11 11 0 0 1 1 12c0-2.94 1.14-5.7 3.22-7.78a2 2 0 0 1 2.83 2.83A7 7 0 0 0 5 12c0 1.87.73 3.63 2.05 4.95A7 7 0 0 0 12 19c1.87 0 3.63-.73 4.95-2.05A7 7 0 0 0 19 12c0-1.87-.73-3.63-2.05-4.95a2 2 0 1 1 2.83-2.83A11 11 0 0 1 23 12';

var magicPen$1 = 'm16.7 9.08-1.4-1.41a1 1 0 0 0-1.42 0L3.83 17.55a2 2 0 0 0-.5 1.93L1 21.79l2.13.71 1.6-1.61a2 2 0 0 0 1.94-.51L16.7 10.5a1 1 0 0 0 0-1.42m5.28 4.88-1.5.02-.02-1.5a1 1 0 0 0-1-.98h-.01a1 1 0 0 0-.99 1.02l.02 1.5-1.5.02a1 1 0 0 0 .02 2h.02l1.5-.02.02 1.5a1 1 0 0 0 1 .98h.02a1 1 0 0 0 .98-1.02l-.02-1.5 1.5-.02a1 1 0 0 0 .98-1.01 1 1 0 0 0-1.02-.99M7 6.04h.02l1.5-.02.02 1.5a1 1 0 0 0 1 .98h.02a1 1 0 0 0 .98-1.01l-.02-1.5 1.5-.03A1 1 0 0 0 13 4.95a1 1 0 0 0-1.02-.99l-1.5.03-.02-1.5c0-.55-.46-1.03-1.02-.99a1 1 0 0 0-.98 1.02l.02 1.5-1.5.02a1 1 0 0 0 .02 2m10 0h.02l1.5-.02.02 1.5a1 1 0 0 0 1 .98h.01a1 1 0 0 0 .99-1.02l-.02-1.5 1.5-.02A1 1 0 0 0 23 4.95a1 1 0 0 0-1.02-.99l-1.5.02-.02-1.5a1 1 0 0 0-1-.98h-.02a1 1 0 0 0-.98 1.02l.02 1.5-1.5.02a1 1 0 0 0 .02 2';

var magicWand$1 = 'M9.32 2.33h-1a1.33 1.33 0 1 0 0 2.66h1v1a1.33 1.33 0 1 0 2.66 0V5h1a1.33 1.33 0 1 0 0-2.66h-1v-1a1.33 1.33 0 1 0-2.66 0zm9.66 0h-1a1.33 1.33 0 1 0 0 2.66h1v1a1.33 1.33 0 1 0 2.66 0V5h1a1.33 1.33 0 1 0 0-2.66h-1v-1a1.33 1.33 0 0 0-2.66 0zm1.33 7.33c-.74 0-1.33.6-1.33 1.33v1h-1a1.33 1.33 0 1 0 0 2.66h1v1a1.33 1.33 0 1 0 2.66 0v-1h1a1.33 1.33 0 0 0 0-2.66h-1v-1c0-.74-.6-1.33-1.33-1.33m-3.48-2.49a2.33 2.33 0 0 0-3.3 0L.68 20.02a2.33 2.33 0 1 0 3.3 3.3l12.85-12.85c.9-.91.9-2.39 0-3.3';

var magnifyingGlassSparkle$1 = 'M19.64.62a5 5 0 0 0 3.74 3.74l.62.14v1l-.62.14a5 5 0 0 0-3.74 3.74l-.14.62h-1l-.14-.62a5 5 0 0 0-3.74-3.74L14 5.5v-1l.62-.14A5 5 0 0 0 18.36.62L18.5 0h1zM10 0q.5 0 1 .05v4.03A6.02 6.02 0 0 0 4 10a6 6 0 0 0 11.2 3h4.34q-.27.84-.67 1.62l4.26 4.26a3 3 0 0 1 0 4.24 3 3 0 0 1-4.25 0l-4.25-4.26A10 10 0 1 1 10 0';

var manageAccess$1 = 'M11 4.5V5h9.5A2.5 2.5 0 0 1 23 7.5v12a2.5 2.5 0 0 1-2.5 2.5h-17A2.5 2.5 0 0 1 1 19.5v-15A2.5 2.5 0 0 1 3.5 2h5A2.5 2.5 0 0 1 11 4.5m-3 5.83a1.67 1.67 0 1 1 0 3.34 1.67 1.67 0 0 1 0-3.34M8 8a4 4 0 1 0 3.83 5.17H16v2.16h2.67v-2.16H20v-2.34h-8.17A4 4 0 0 0 8 8';

var marginsLarge$1 = 'M13.97 15.03 12.5 16.5v-4h4l-1.47 1.47 1.5 1.5-1.06 1.06zM11.5 11.5h-4l1.47-1.47-1.5-1.5 1.06-1.06 1.5 1.5L11.5 7.5zM5.25 1h13.5C21.09 1 23 2.9 23 5.25v13.5c0 2.34-1.9 4.25-4.25 4.25H5.25A4.26 4.26 0 0 1 1 18.75V5.25C1 2.91 2.9 1 5.25 1M18.5 5.5h-13v13h13z';

var marginsMedium$1 = 'M7.97 9.03 6.5 10.5h4v-4L9.03 7.97l-1.5-1.5-1.06 1.06zm5.53 8.47 1.47-1.47 1.5 1.5 1.06-1.06-1.5-1.5 1.47-1.47h-4zm6 1.75q-.02.23-.25.25H4.75a.25.25 0 0 1-.25-.25V4.75c0-.14.11-.25.25-.25h14.5c.14 0 .25.11.25.25zM19.25 1H4.75A3.75 3.75 0 0 0 1 4.75v14.5A3.75 3.75 0 0 0 4.75 23h14.5A3.75 3.75 0 0 0 23 19.25V4.75A3.75 3.75 0 0 0 19.25 1';

var marginsSmall$1 = 'M6.97 8.03 5.5 9.5h4v-4L8.03 6.97l-1.5-1.5-1.06 1.06zM14.5 18.5l1.47-1.47 1.5 1.5 1.06-1.06-1.5-1.5 1.47-1.47h-4zm6 1.25c0 .41-.34.75-.75.75H4.25a.75.75 0 0 1-.75-.75V4.25c0-.41.34-.75.75-.75h15.5c.41 0 .75.34.75.75zM19.75 1H4.25A3.25 3.25 0 0 0 1 4.25v15.5C1 21.55 2.46 23 4.25 23h15.5c1.8 0 3.25-1.46 3.25-3.25V4.25C23 2.45 21.54 1 19.75 1';

var maximize$1 = 'M9.75 1a1.25 1.25 0 0 1 0 2.5H5.27l5.36 5.37a1.25 1.25 0 0 1-1.76 1.76L3.5 5.27v4.48a1.25 1.25 0 0 1-2.5 0V1zM20.5 14.25a1.25 1.25 0 0 1 2.5 0V23h-8.75a1.25 1.25 0 0 1 0-2.5h4.48l-5.36-5.37a1.25 1.25 0 0 1 1.76-1.76l5.37 5.36z';

var megaphone$1 = 'M14.5 18a2.5 2.5 0 0 1-5 0v-1h5zm9.47-2.28L21.04 1.78c-.17-.65-.9-.98-1.48-.65L.53 11.48a1 1 0 0 0-.51 1.1l.7 3.59c.1.48.52.83 1 .83H7v1a5 5 0 0 0 10 0v-1h5.98c.66 0 1.15-.63.99-1.28';

var menu$1 = 'M2.5 6.5h19A2.5 2.5 0 0 0 24 4a2.5 2.5 0 0 0-2.5-2.5h-19A2.5 2.5 0 0 0 0 4a2.5 2.5 0 0 0 2.5 2.5m19 3h-19A2.5 2.5 0 0 0 0 12a2.5 2.5 0 0 0 2.5 2.5h19A2.5 2.5 0 0 0 24 12a2.5 2.5 0 0 0-2.5-2.5M0 20a2.5 2.5 0 0 0 2.5 2.5h19A2.5 2.5 0 0 0 24 20a2.5 2.5 0 0 0-2.5-2.5h-19A2.5 2.5 0 0 0 0 20';

var messenger$1 = 'm13 15-3-3-6 3 7-7 3 3 6-3zM12 0C5.37 0 0 4.93 0 11c0 3.47 1.76 6.56 4.5 8.58V24l4.32-2.4q1.53.39 3.18.4c6.63 0 12-4.92 12-11S18.63 0 12 0';

var microphone$1 = 'M12 0a6 6 0 0 0-6 6v4a6 6 0 1 0 12 0V6a6 6 0 0 0-6-6M5 9.5a1.5 1.5 0 0 0-3 0v1a9.5 9.5 0 0 0 8.5 9.45v2.55a1.5 1.5 0 1 0 3 0v-2.55A9.5 9.5 0 0 0 22 10.5v-1a1.5 1.5 0 1 0-3 0v1a6.5 6.5 0 0 1-6.5 6.5h-1A6.5 6.5 0 0 1 5 10.5z';

var minimize$1 = 'M2.25 11a1.25 1.25 0 0 1 0-2.5h4.48L1.37 3.13a1.25 1.25 0 0 1 1.76-1.76L8.5 6.73V2.25a1.25 1.25 0 0 1 2.5 0V11zM15.5 21.75a1.25 1.25 0 0 1-2.5 0V13h8.75a1.25 1.25 0 0 1 0 2.5h-4.48l5.36 5.37a1.25 1.25 0 0 1-1.76 1.76l-5.37-5.36z';

var mobile$1 = 'M17.5 3.5v17h-11v-17zM18 1H6a2 2 0 0 0-2 2v18c0 1.1.9 2 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2';

var moon$1 = 'M15.33.47c.43.12.45.71.05.92a12 12 0 0 0 0 21.22c.4.2.38.8-.05.92a12 12 0 1 1 0-23.06';

var movePin$1 = 'M23 5v14a4 4 0 0 1-4 4H5a4 4 0 0 1-4-4v-5.5h10.26l-1.94 1.94a1.5 1.5 0 0 0 2.12 2.12L17 12l-5.56-5.56a1.5 1.5 0 0 0-2.12 2.12l1.94 1.94H1V5a4 4 0 0 1 4-4h14a4 4 0 0 1 4 4';

var musicOff$1 = 'M18.8.5h-8.01Q9.7.51 8.83.99l2.82 2.82h7.14c.58 0 1.05.46 1.05 1.04v7.14l3.13 3.14V4.68A4.2 4.2 0 0 0 18.79.5M9.73 18.42v-6.16L6.61 9.13v4.91A4.86 4.86 0 0 0 0 18.6a4.87 4.87 0 1 0 9.74-.18zm9.37 3.2-5.78-5.78a4.9 4.9 0 0 0 5.78 5.78m2.07-.75c.63.63 1.67.62 2.32-.03s.67-1.69.03-2.32L6 .98A1.64 1.64 0 0 0 3.67 1a1.64 1.64 0 0 0-.03 2.32z';

var musicOn$1 = 'M10.18 18.9V4.56c0-.6.49-1.1 1.1-1.1h8.36c.6 0 1.09.5 1.09 1.1v7.78a5.08 5.08 0 0 0-6.91 4.76 5.1 5.1 0 0 0 10.13.73H24V4.36A4.36 4.36 0 0 0 19.64 0h-8.37a4.36 4.36 0 0 0-4.36 4.36v9.8A5.07 5.07 0 0 0 0 18.9a5.1 5.1 0 0 0 10.18 0';

var mute$1 = 'M2 7.94h3v.02L12 1v22l-7-6.1v.04H2a2 2 0 0 1-2-2v-5c0-1.1.9-2 2-2M21.52 12l2.11 2.12a1.25 1.25 0 0 1-1.76 1.76l-2.12-2.11-2.12 2.11a1.25 1.25 0 0 1-1.76-1.76L17.98 12l-2.11-2.12a1.25 1.25 0 0 1 1.76-1.76l2.12 2.11 2.11-2.11a1.25 1.25 0 0 1 1.77 1.76z';

var muteFill$1 = 'M2 7.94h3v.02L12 1v22l-7-6.1v.04H2a2 2 0 0 1-2-2v-5c0-1.1.9-2 2-2M21.52 12l2.11 2.12a1.25 1.25 0 0 1-1.76 1.76l-2.12-2.11-2.12 2.11a1.25 1.25 0 0 1-1.76-1.76L17.98 12l-2.11-2.12a1.25 1.25 0 0 1 1.76-1.76l2.12 2.11 2.11-2.11a1.25 1.25 0 0 1 1.77 1.76z';

var orientationLandscape$1 = 'M21.1 7.63V6.1c0-.73-.59-1.32-1.32-1.32h-1.52l.34.33a.95.95 0 1 1-1.34 1.34l-2.6-2.6 2.6-2.58a.95.95 0 0 1 1.34 1.34l-.28.27h1.46A3.2 3.2 0 0 1 23 6.11v1.52a.95.95 0 0 1-1.9 0M1 3c0-1.1.9-2 2-2h7.83a2 2 0 0 1 2 2v8.17H21a2 2 0 0 1 2 2V21a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2M3.5 3.5v7.67h6.83V3.5z';

var orientationPortrait$1 = 'M3 1a2 2 0 0 0-2 2v18a2 2 0 0 0 .04.4A2 2 0 0 0 3 23h18a2 2 0 0 0 2-2v-7.83a2 2 0 0 0-2-2h-8.17V3a2 2 0 0 0-2-2zm9.83 19.5v-6.83h7.67v6.83zm3.44-17.6h1.51c.74 0 1.33.59 1.33 1.32v1.51l-.33-.33a.95.95 0 1 0-1.34 1.34l2.59 2.6 2.6-2.6a.95.95 0 0 0-1.35-1.34l-.28.28V4.22A3.2 3.2 0 0 0 17.78 1h-1.51a.95.95 0 0 0 0 1.9';

var outdent$1 = 'M13.5 5a1.5 1.5 0 0 0 0 3h9a1.5 1.5 0 0 0 0-3zm0 11a1.5 1.5 0 0 0 0 3h5a1.5 1.5 0 0 0 0-3zM24 12c0-.83-.67-1.5-1.5-1.5h-9a1.5 1.5 0 0 0 0 3h9c.83 0 1.5-.67 1.5-1.5M6.28 18c.4 0 .72-.32.72-.72V6.72a.72.72 0 0 0-1.2-.53L.36 11.16a1.14 1.14 0 0 0 0 1.68l5.42 4.97q.21.19.49.19';

var outlook$1 = 'M7.58 9.59q-.71 0-1.12.66a3 3 0 0 0-.42 1.74q0 1.1.42 1.74.41.64 1.09.64.7 0 1.1-.62.42-.63.42-1.73a3.4 3.4 0 0 0-.4-1.8 1.2 1.2 0 0 0-1.09-.63M23 8.29s-6.65 4.37-6.41 4.23c0 0-.24.14-.43 0l-1.4-.94v5.84h7.06c.62 0 1.18-.36 1.18-1.22zM7.62 8.15q1.29 0 2.07 1.04.8 1.04.8 2.74a4.5 4.5 0 0 1-.82 2.81 2.6 2.6 0 0 1-2.15 1.07q-1.27 0-2.1-1.03a4.3 4.3 0 0 1-.8-2.7q0-1.76.82-2.84a2.6 2.6 0 0 1 2.18-1.09m7.15-2.49v4.3l1.52.95c.04.02.12.02.16 0L23 6.55c0-.52-.49-.89-.76-.89zM13.95 1 1 3.48v16.84L13.95 23z';

var overlayText$1 = 'M12 9.15 9.8 14.1h4.4zM20 1H4a3 3 0 0 0-3 3v16a3 3 0 0 0 3 3h16a3 3 0 0 0 3-3V4a3 3 0 0 0-3-3m-1.12 16.73a1.4 1.4 0 0 1-1.28 1.97 1.4 1.4 0 0 1-1.28-.83l-.88-1.97H8.56l-.87 1.97a1.4 1.4 0 0 1-2.57-1.14l5.6-12.6a1.4 1.4 0 0 1 2.56 0z';

var overlayTextOutline$1 = 'M20 1H4a3 3 0 0 0-3 3v16a3 3 0 0 0 3 3h16a3 3 0 0 0 3-3V4a3 3 0 0 0-3-3m.5 19a.5.5 0 0 1-.5.5H4a.5.5 0 0 1-.5-.5V4c0-.28.22-.5.5-.5h16c.28 0 .5.22.5.5zM13.1 6.2c-.19-.43-.62-.7-1.1-.7s-.91.28-1.1.7L6.1 16.84c-.27.6 0 1.29.61 1.56.61.26 1.32 0 1.59-.6l.75-1.66h5.9l.75 1.66a1.23 1.23 0 0 0 1.59.6c.61-.26.88-.96.61-1.56zm-2.98 7.57L12 9.6l1.88 4.17z';

var overview$1 = 'M2 1a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zm12 10a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V12a1 1 0 0 0-1-1zM1 22a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-5a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1zM14 1a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1z';

var paperClip$1 = 'M19.04 3.46a2.9 2.9 0 0 0-4.08 0L4.7 13.7a4.66 4.66 0 1 0 6.58 6.58l9-9 1.42 1.42-9 9a6.66 6.66 0 0 1-9.42-9.42L13.54 2.04a4.89 4.89 0 1 1 6.92 6.92l-9.84 9.83a3 3 0 0 1-4.24 0l-.17-.17a3 3 0 0 1 0-4.24l8.58-8.59 1.42 1.42-8.59 8.58a1 1 0 0 0 0 1.42l.17.17a1 1 0 0 0 1.42 0l9.83-9.84a2.9 2.9 0 0 0 0-4.08';

var paperLinesPlus$1 = 'M6 22h6v2H6a4 4 0 0 1-4-4V7.24a4 4 0 0 1 1.17-2.83L7.1.5A1.7 1.7 0 0 1 10 1.7V4a4 4 0 0 1-4 4H5a1 1 0 0 0-1 1v11c0 1.1.9 2 2 2M8 4V2.41L4.59 5.83 4.43 6H6a2 2 0 0 0 2-2m14 8h-2V4a2 2 0 0 0-2-2h-6V0h6a4 4 0 0 1 4 4zM8 10h8v2H8zm4 6H8v-2h4zm8 8h-2v-4h-4v-2h4v-4h2v4h4v2h-4z';

var pause$1 = 'M4 3a3 3 0 0 1 3-3 3 3 0 0 1 3 3v18a3 3 0 0 1-3 3 3 3 0 0 1-3-3zm10 0a3 3 0 0 1 3-3 3 3 0 0 1 3 3v18a3 3 0 0 1-3 3 3 3 0 0 1-3-3z';

var pen$1 = 'M8.81 7 10.78.7a1 1 0 0 1 .96-.7h.52a1 1 0 0 1 .96.7L15.19 7a2 2 0 0 1 1.95 1.6l2.84 14.2-1.96.4L15.18 9H8.82L5.98 23.2l-1.96-.4L6.86 8.6A2 2 0 0 1 8.8 7';

var penAuto$1 = 'M2.61.37A3 3 0 0 1 .37 2.61L0 2.7v.6l.37.09a3 3 0 0 1 2.24 2.24L2.7 6h.6l.09-.37a3 3 0 0 1 2.24-2.24L6 3.3v-.6l-.37-.09A3 3 0 0 1 3.39.37L3.3 0h-.6zm8.17.33L8.81 7a2 2 0 0 0-1.95 1.6L4.02 22.8l1.96.4L8.82 9h6.36l.94 4.7 1.96-.4-.94-4.7A2 2 0 0 0 15.2 7L13.22.7a1 1 0 0 0-.96-.7h-.52a1 1 0 0 0-.96.7M21.5 17a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3m-2.2 1h-.6l-.09.37a3 3 0 0 1-2.24 2.24l-.37.09v.6l.37.09a3 3 0 0 1 2.24 2.24l.09.37h.6l.09-.37a3 3 0 0 1 2.24-2.24l.37-.09v-.6l-.37-.09a3 3 0 0 1-2.24-2.24z';

var people$1 = 'M8 11a4.5 4.5 0 1 0 0-9 4.5 4.5 0 0 0 0 9m10 3c-1.36 0-2.6.46-3.61 1.23A8 8 0 0 0 8 12c-4.42 0-8 3.62-8 8.08V22h24v-1.94A6.03 6.03 0 0 0 18 14m0-7.5a3.25 3.25 0 1 0 0 6.5 3.25 3.25 0 0 0 0-6.5';

var performancePlus$1 = 'M12 24a12 12 0 1 0 0-24 12 12 0 0 0 0 24m4.79-18.9a3.1 3.1 0 0 0 2.11 2.1c.12.04.12.21 0 .25a3.1 3.1 0 0 0-2.12 2.11.13.13 0 0 1-.25 0 3.1 3.1 0 0 0-2.12-2.11.13.13 0 0 1 0-.25 3.1 3.1 0 0 0 2.12-2.12.13.13 0 0 1 .25 0M10.8 18.75a8.2 8.2 0 0 0-5.56-5.56.34.34 0 0 1 0-.65A8.2 8.2 0 0 0 10.8 7c.1-.32.55-.32.65 0A8.2 8.2 0 0 0 17 12.55c.32.1.32.55 0 .65a8.2 8.2 0 0 0-5.56 5.56.34.34 0 0 1-.65 0';

var person$1 = 'M17.5 5.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0M2 22a10 10 0 1 1 20 0v2H2z';

var personAdd$1 = 'M16.5 11a4 4 0 1 0 0-8 4 4 0 0 0 0 8m0 1A7.5 7.5 0 0 0 9 19.5V21h15v-1.5a7.5 7.5 0 0 0-7.5-7.5M9.25 9.5H6.5V6.75a1.25 1.25 0 0 0-2.5 0V9.5H1.25a1.25 1.25 0 0 0 0 2.5H4v2.75a1.25 1.25 0 0 0 2.5 0V12h2.75a1.25 1.25 0 0 0 0-2.5';

var personFill$1 = 'M17.5 5.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0M2 22a10 10 0 0 1 20 0 1 1 0 0 1-1 1H3a1 1 0 0 1-1-1';

var personMagnifyingGlass$1 = 'M12 11a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11M8.5 5.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0M3 23h9v-2H4.06a8 8 0 0 1 8.83-6.95l.22-1.99A10 10 0 0 0 2 22a1 1 0 0 0 1 1m15-1q1.13-.01 2.03-.55l2.26 2.26 1.42-1.42-2.26-2.26q.54-.91.55-2.03a4 4 0 1 0-4 4m-2-4a2 2 0 1 1 4 0 2 2 0 0 1-4 0';

var phone$1 = 'M21.68 21.69a4.5 4.5 0 0 1-4.08 1.22A20.3 20.3 0 0 1 1.11 6.5 4.49 4.49 0 0 1 8.7 2.31a4.5 4.5 0 0 1-1.84 7.46 16 16 0 0 0 7.38 7.38 4.45 4.45 0 0 1 7.45-1.83 4.5 4.5 0 0 1 0 6.36';

var pin$1 = 'M18 14a6 6 0 0 0-2.75-5.04V2.37A2.5 2.5 0 0 0 17 0H7a2.5 2.5 0 0 0 1.75 2.37v6.6A6 6 0 0 0 6 14h5v7.56c0 .95.38 1.8 1 2.44.62-.63 1-1.5 1-2.44V14z';

var pinHide$1 = 'M9.13 6.37c.49.48.49 1.27 0 1.76l-2.61 2.62 2.61 2.62c.49.48.49 1.27 0 1.76-.48.49-1.27.49-1.76 0l-2.62-2.61-2.62 2.61c-.48.49-1.28.49-1.76 0-.49-.49-.49-1.28 0-1.76l2.61-2.62L.37 8.13c-.49-.49-.49-1.28 0-1.76.48-.49 1.28-.49 1.76 0l2.62 2.61 2.62-2.61c.49-.49 1.28-.49 1.76 0zM20.5 8.69c1.49.87 2.5 2.46 2.5 4.31h-4v7.96L18 23l-1-2.04V13h-4c0-1.85 1.01-3.44 2.5-4.31V2.93c-.86-.22-1.5-1-1.5-1.93h8c0 .93-.64 1.71-1.5 1.93v5.76z';

var pincode$1 = 'M13.5 1.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0M7 4a3 3 0 1 1-6 0 3 3 0 0 1 6 0m12 8a7 7 0 1 1-14 0 7 7 0 0 1 14 0M1 20a3 3 0 1 1 6 0 3 3 0 0 1-6 0m12.5 2.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m-12-12a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3m21 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3M23 4a3 3 0 1 1-6 0 3 3 0 0 1 6 0m-6 16a3 3 0 1 1 6 0 3 3 0 0 1-6 0';

var pinterest$1 = 'M7.55 23.12c-.15-1.36-.04-2.67.25-3.93L9 14.02a7 7 0 0 1-.34-2.07c0-1.68.8-2.88 2.08-2.88.88 0 1.53.62 1.53 1.8q0 .57-.22 1.28l-.53 1.73q-.15.5-.15.91c0 1.2.92 1.88 2.09 1.88 2.08 0 3.57-2.16 3.57-4.96 0-3.12-2.04-5.11-5.06-5.11-3.36 0-5.49 2.19-5.49 5.23 0 1.23.38 2.37 1.11 3.15-.24.4-.5.48-.88.48-1.2 0-2.34-1.7-2.34-4 0-3.99 3.2-7.16 7.68-7.16 4.7 0 7.66 3.28 7.66 7.33 0 4.07-2.88 7.13-5.98 7.13a3.8 3.8 0 0 1-3.07-1.47l-.61 2.5c-.33 1.28-.83 2.5-1.62 3.67A12 12 0 0 0 24 11.99 12 12 0 1 0 7.55 23.12';

var play$1 = 'M22.62 9.48 8.63.48A3 3 0 0 0 4 3v18a3 3 0 0 0 4.63 2.52l14-9a3 3 0 0 0 0-5.04';

var protect$1 = 'M12 24A21.6 21.6 0 0 0 23.97 3.54 22 22 0 0 0 12 0 22 22 0 0 0 .03 3.54 21.6 21.6 0 0 0 12 24M6.37 10.1a1.25 1.25 0 0 1 1.76 0l2.37 2.36 5.37-5.35a1.25 1.25 0 0 1 1.76 1.76L10.5 16l-4.13-4.13a1.25 1.25 0 0 1 0-1.76z';

var questionMark$1 = 'M14.5 21.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0m4.25-14.75a6.7 6.7 0 0 1-3.26 5.78c-.46.26-1.14 1.33-1.14 2.34a2.35 2.35 0 1 1-4.7 0c0-2.55 1.47-5.25 3.5-6.41.45-.26.9-.93.9-1.71a2.06 2.06 0 0 0-4.1 0 2.35 2.35 0 1 1-4.7 0 6.76 6.76 0 0 1 13.5 0';

var recordLimit$1 = 'M14 8a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-4c0-1.1.9-2 2-2zm10 4a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var recordLimit5$1 = 'M11.94 0H12a12 12 0 0 1 8.53 3.56 1 1 0 1 1-1.48 1.35 10 10 0 0 0-7-2.91h-.1a1 1 0 0 1 0-2M8.76 1.44a1 1 0 0 1-.54 1.3l-.1.04A1 1 0 1 1 7.36.93l.1-.04a1 1 0 0 1 1.31.55m-3.8 2.04a1 1 0 0 1 0 1.42l-.07.06a1 1 0 1 1-1.43-1.4l.09-.09a1 1 0 0 1 1.41.01m16.79 3.34a1 1 0 0 1 1.3.53l.05.1a1 1 0 1 1-1.89.68 1 1 0 0 1 .54-1.31m-19.52 0a1 1 0 0 1 .54 1.3l-.04.1a1 1 0 0 1-1.85-.76l.04-.1a1 1 0 0 1 1.31-.54M1 10.95a1 1 0 0 1 1 1v.1a1 1 0 0 1-2 0v-.11a1 1 0 0 1 1-1m22 0a1 1 0 0 1 1 1v.11a1 1 0 1 1-2-.01v-.1a1 1 0 0 1 1-1m-.44 4.29c.52.2.76.79.55 1.3l-.03.06-.01.05a1 1 0 1 1-1.85-.78l.02-.04.02-.05a1 1 0 0 1 1.3-.54m-21.12 0a1 1 0 0 1 1.3.54l.04.1a1 1 0 0 1-1.85.77l-.04-.1a1 1 0 0 1 .55-1.31m19.08 3.79a1 1 0 0 1 0 1.41l-.08.09a1 1 0 0 1-1.4-1.43l.02-.02.04-.04a1 1 0 0 1 1.42-.01m-17.04 0a1 1 0 0 1 1.42 0l.06.07a1 1 0 1 1-1.4 1.43l-.09-.09a1 1 0 0 1 .01-1.41m3.34 2.73a1 1 0 0 1 1.3-.54l.1.04a1 1 0 0 1-.76 1.85l-.1-.04a1 1 0 0 1-.54-1.31m10.36 0a1 1 0 0 1-.53 1.3l-.1.05a1 1 0 1 1-.77-1.85l.1-.04a1 1 0 0 1 1.3.54M10.95 23a1 1 0 0 1 1-1h.1a1 1 0 0 1 0 2h-.11a1 1 0 0 1-1-1m1.4-12.08c1.44 0 2.46.95 2.46 2.52 0 1.65-1.21 2.71-2.94 2.71-1.4 0-2.5-.68-2.8-1.73l1.44-.65q.3.94 1.32.95c.82 0 1.32-.48 1.32-1.27 0-.8-.45-1.27-1.23-1.27-.6 0-1.03.29-1.24.67l-1.3-.51.73-4.1h4.25v1.49H11.3l-.33 1.64c.3-.3.8-.45 1.38-.45';

var recordLimit10$1 = 'M11.94 0H12a12 12 0 0 1 11.02 7.24l.05.11.04.1a1 1 0 1 1-1.89.68l-.03-.1A10 10 0 0 0 12.04 2h-.1a1 1 0 0 1 0-2M8.76 1.44a1 1 0 0 1-.54 1.3l-.1.04A1 1 0 1 1 7.36.93l.1-.04a1 1 0 0 1 1.31.55m-3.8 2.04a1 1 0 0 1 0 1.42l-.07.06a1 1 0 1 1-1.43-1.4l.09-.09a1 1 0 0 1 1.41.01M2.24 6.82a1 1 0 0 1 .54 1.3l-.04.1a1 1 0 0 1-1.85-.76l.04-.1a1 1 0 0 1 1.31-.54M1 10.95a1 1 0 0 1 1 1v.1a1 1 0 0 1-2 0v-.11a1 1 0 0 1 1-1m22 0a1 1 0 0 1 1 1v.11a1 1 0 1 1-2-.01v-.1a1 1 0 0 1 1-1m-.44 4.29c.52.2.76.79.55 1.3l-.03.06-.01.05a1 1 0 1 1-1.85-.78l.02-.04.02-.05a1 1 0 0 1 1.3-.54m-21.12 0a1 1 0 0 1 1.3.54l.04.1a1 1 0 0 1-1.85.77l-.04-.1a1 1 0 0 1 .55-1.31m19.08 3.79a1 1 0 0 1 0 1.41l-.08.09a1 1 0 0 1-1.4-1.43l.02-.02.04-.04a1 1 0 0 1 1.42-.01m-17.04 0a1 1 0 0 1 1.42 0l.06.07a1 1 0 1 1-1.4 1.43l-.09-.09a1 1 0 0 1 .01-1.41m3.34 2.73a1 1 0 0 1 1.3-.54l.1.04a1 1 0 0 1-.76 1.85l-.1-.04a1 1 0 0 1-.54-1.31m10.36 0a1 1 0 0 1-.53 1.3l-.1.05a1 1 0 1 1-.77-1.85l.1-.04a1 1 0 0 1 1.3.54M10.95 23a1 1 0 0 1 1-1h.1a1 1 0 0 1 0 2h-.11a1 1 0 0 1-1-1M8.06 8.25H9.6V16H8.01v-5.36c-.28.48-.9.69-1.73.69V9.72c1.14 0 1.77-.48 1.78-1.47m6.27 7.9c-2.01 0-3.22-1.5-3.22-4.03 0-2.52 1.21-4.03 3.22-4.03 2.03 0 3.23 1.5 3.23 4.03s-1.2 4.03-3.23 4.03m0-1.48c.98 0 1.58-.95 1.58-2.55s-.6-2.54-1.58-2.54-1.56.94-1.56 2.54.58 2.55 1.56 2.55';

var recordLimit15$1 = 'M11.94 0H12a12 12 0 0 1 12 11.94v.12a1 1 0 1 1-2-.01v-.1a10 10 0 0 0-2.92-7.02l-.03-.02a10 10 0 0 0-7-2.91h-.1a1 1 0 0 1 0-2M8.76 1.44a1 1 0 0 1-.54 1.3l-.1.04A1 1 0 1 1 7.36.93l.1-.04a1 1 0 0 1 1.31.55m-3.8 2.04a1 1 0 0 1 0 1.42l-.07.06a1 1 0 1 1-1.43-1.4l.09-.09a1 1 0 0 1 1.41.01M2.24 6.82a1 1 0 0 1 .54 1.3l-.04.1a1 1 0 0 1-1.85-.76l.04-.1a1 1 0 0 1 1.31-.54M1 10.95a1 1 0 0 1 1 1v.1a1 1 0 0 1-2 0v-.11a1 1 0 0 1 1-1m21.56 4.29c.52.2.76.79.55 1.3l-.03.06-.01.05a1 1 0 1 1-1.85-.78l.02-.04.02-.05a1 1 0 0 1 1.3-.54m-21.12 0a1 1 0 0 1 1.3.54l.04.1a1 1 0 0 1-1.85.77l-.04-.1a1 1 0 0 1 .55-1.31m19.08 3.79a1 1 0 0 1 0 1.41l-.08.09a1 1 0 0 1-1.4-1.43l.02-.02.04-.04a1 1 0 0 1 1.42-.01m-17.04 0a1 1 0 0 1 1.42 0l.06.07a1 1 0 1 1-1.4 1.43l-.09-.09a1 1 0 0 1 .01-1.41m3.34 2.73a1 1 0 0 1 1.3-.54l.1.04a1 1 0 0 1-.76 1.85l-.1-.04a1 1 0 0 1-.54-1.31m10.36 0a1 1 0 0 1-.53 1.3l-.1.05a1 1 0 1 1-.77-1.85l.1-.04a1 1 0 0 1 1.3.54M10.95 23a1 1 0 0 1 1-1h.1a1 1 0 0 1 0 2h-.11a1 1 0 0 1-1-1m-.78-7H8.58v-5.36c-.27.48-.89.69-1.72.69V9.72c1.13 0 1.77-.48 1.78-1.47h1.53zm4.03.15c-1.4 0-2.5-.68-2.8-1.73l1.44-.65q.3.94 1.32.95c.82 0 1.32-.48 1.32-1.27 0-.8-.45-1.27-1.23-1.27-.6 0-1.03.29-1.23.67l-1.3-.51.72-4.1h4.25v1.49h-3.05l-.33 1.64c.3-.3.8-.45 1.38-.45 1.43 0 2.45.95 2.45 2.52 0 1.65-1.21 2.71-2.94 2.71';

var recordLimit30$1 = 'M11.95 2H12a10 10 0 0 1 0 20h-.05a1 1 0 0 0 0 2H12a12 12 0 0 0 0-24h-.06a1 1 0 1 0 .01 2m-3.19-.56a1 1 0 0 0-1.3-.55l-.1.04a1 1 0 1 0 .77 1.85l.09-.04a1 1 0 0 0 .54-1.3M4.97 3.48a1 1 0 0 0-1.41 0l-.09.08a1 1 0 0 0 1.43 1.4l.06-.06a1 1 0 0 0 .01-1.42M2.24 6.82a1 1 0 0 0-1.3.53l-.05.1a1 1 0 1 0 1.85.77l.02-.06.01-.03a1 1 0 0 0-.53-1.31M1 10.95a1 1 0 0 0-1 1v.11a1 1 0 1 0 2-.01v-.1a1 1 0 0 0-1-1m.44 4.29a1 1 0 0 0-.55 1.3l.04.1a1 1 0 1 0 1.81-.86 1 1 0 0 0-1.3-.54m2.04 3.79a1 1 0 0 0 0 1.41l.08.09a1 1 0 1 0 1.4-1.43l-.06-.06a1 1 0 0 0-1.42-.01m3.34 2.73a1 1 0 0 0 .53 1.3l.1.05a1 1 0 1 0 .68-1.89 1 1 0 0 0-1.31.54m1.96-10.63 2.02-1.49v-1.4H5.55v1.49h3.1l-2.3 1.6.56 1.13c.37-.23.74-.33 1.2-.33.8 0 1.34.52 1.34 1.27 0 .82-.55 1.32-1.4 1.32q-1.1 0-1.4-1.07l-1.48.66c.29 1.17 1.37 1.84 2.98 1.84 1.7 0 2.95-1.1 2.95-2.61 0-1.48-.86-2.36-2.32-2.41m3.28.99c0 2.53 1.2 4.03 3.22 4.03s3.22-1.5 3.22-4.03c0-2.52-1.2-4.03-3.22-4.03-2.01 0-3.22 1.5-3.22 4.03m4.8 0c0 1.6-.6 2.55-1.58 2.55s-1.56-.95-1.56-2.55.58-2.54 1.56-2.54 1.57.94 1.57 2.54';

var recordLimit60$1 = 'M8.43 16.15c-1.94 0-3.15-1.5-3.15-3.97 0-2.64 1.4-4.09 3.37-4.09 1.24 0 2.29.52 2.71 1.29l-1.3.98c-.32-.49-.8-.8-1.42-.8q-1.6.01-1.72 2.31c.3-.6.95-.96 1.84-.96 1.46 0 2.58.99 2.58 2.55 0 1.52-1.14 2.7-2.91 2.7m-.07-3.88c-.76 0-1.33.5-1.33 1.27 0 .76.57 1.25 1.33 1.25s1.33-.5 1.33-1.25c0-.77-.57-1.27-1.33-1.27M15.5 8.1c2.02 0 3.22 1.5 3.22 4.03s-1.2 4.03-3.22 4.03c-2.01 0-3.22-1.5-3.22-4.03 0-2.52 1.2-4.03 3.22-4.03m0 1.49c-.98 0-1.56.94-1.56 2.54s.58 2.55 1.56 2.55 1.57-.95 1.57-2.55-.6-2.54-1.57-2.54M24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var redo$1 = 'M14.44 1.44a1.5 1.5 0 0 0 0 2.12L17.88 7H8a7 7 0 1 0 0 14h4a1.5 1.5 0 0 0 0-3H8a4 4 0 1 1 0-8h9.88l-3.44 3.44a1.5 1.5 0 0 0 2.12 2.12l6-6a1.5 1.5 0 0 0 0-2.12l-6-6a1.5 1.5 0 0 0-2.12 0';

var refresh$1 = 'M4.47 4H2.5a1.5 1.5 0 1 1 0-3h7v7.5a1.5 1.5 0 1 1-3 0V6.22A8 8 0 0 0 4 12a8 8 0 1 0 8.84-7.96 1.5 1.5 0 0 1 .32-2.98A11.01 11.01 0 1 1 1 12c0-3.07 1.3-5.95 3.47-8';

var remove$1 = 'M17.75 13.25H6.25a1.25 1.25 0 0 1 0-2.5h11.5a1.25 1.25 0 0 1 0 2.5M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24';

var reorderImages$1 = 'M22 4.25a1.25 1.25 0 0 0-2.5 0v1.62C17.47 3.47 14.5 2 11.3 2 7.6 2 4.2 3.89 2.2 7.05c-.38.6-.2 1.38.38 1.77.58.38 1.36.21 1.73-.38a8.3 8.3 0 0 1 6.99-3.88c2.43 0 4.7 1.12 6.26 2.94h-1.31a1.25 1.25 0 0 0 0 2.5H22zM19 12a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1v-7a1 1 0 0 0-1-1zm-8 0a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1v-7a1 1 0 0 0-1-1zm-4-1H1a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1';

var replace$1 = 'M11 21.75c0 .69-.56 1.25-1.25 1.25h-2a4.26 4.26 0 0 1-4.25-4.25v-.93l-.37.37a1.25 1.25 0 0 1-1.76-1.77L4.79 13l3.41 3.42a1.25 1.25 0 0 1-1.76 1.77L6 17.75v1c0 .97.78 1.75 1.75 1.75h2c.69 0 1.25.56 1.25 1.25m2-19.5c0-.69.56-1.25 1.25-1.25h2c2.34 0 4.25 1.9 4.25 4.25v.93l.37-.37a1.25 1.25 0 0 1 1.76 1.77L19.21 11 15.8 7.58a1.25 1.25 0 0 1 1.77-1.77l.44.44v-1c0-.96-.79-1.75-1.75-1.75h-2c-.69 0-1.25-.56-1.25-1.25m2.5 18.25h5v-5h-5zM23 15v6a2 2 0 0 1-2 2h-6a2 2 0 0 1-2-2v-6c0-1.1.9-2 2-2h6a2 2 0 0 1 2 2M11 3v6a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3c0-1.1.9-2 2-2h6a2 2 0 0 1 2 2';

var report$1 = 'M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24M3.25 12a8.77 8.77 0 0 1 13.7-7.21L4.97 17.19A8.7 8.7 0 0 1 3.25 12M12 20.75a8.7 8.7 0 0 1-4.65-1.35L19.24 7.09A8.77 8.77 0 0 1 12 20.75';

var rewind$1 = 'M6.94.75A2 2 0 0 1 10.5 2v20a2 2 0 0 1-3.56 1.25L.6 13.8a3 3 0 0 1 0-3.6zm11.5 0A2 2 0 0 1 22 2v20a2 2 0 0 1-3.56 1.25L12.1 13.8a3 3 0 0 1 0-3.6z';

var ribbon$1 = 'M12 12a3 3 0 1 0 0-6 3 3 0 0 0 0 6m7.96 1.21a9 9 0 1 0-15.91 0L2.32 19.6a2.27 2.27 0 0 0 2.91 2.74l1.76-.6 1.07 1.3a2.26 2.26 0 0 0 3.92-.84l.01-.04.01.04a2.26 2.26 0 0 0 3.92.85l1.07-1.3 1.76.59a2.27 2.27 0 0 0 2.9-2.74zm-2.35 2.83.8 3.02-2.41-.8-1.47 1.77-.6-2.24q2.07-.46 3.68-1.75m-7.55 1.75-.6 2.24L8 18.25l-2.42.8.81-3.01a9 9 0 0 0 3.67 1.75M6 9a6 6 0 1 1 12 0A6 6 0 0 1 6 9';

var rocketship$1 = 'M15.57 19.55a1 1 0 0 1-.83.45H9.26a1 1 0 0 1-.83-.45L8 18.9l-.07-.1-2.75 1.64a2.5 2.5 0 0 1-3.78-1.99l-.31-4.97a3.5 3.5 0 0 1 2.07-3.42l2.97-1.31a12 12 0 0 1 2.31-5.5L10.31.8A2 2 0 0 1 11.9 0h.19a2 2 0 0 1 1.6.8l1.86 2.45a12 12 0 0 1 2.31 5.5l2.97 1.31a3.5 3.5 0 0 1 2.07 3.42l-.31 4.97a2.5 2.5 0 0 1-3.78 1.99l-2.75-1.65-.07.1zm1.8-3.47 2.29 1.36.26-4.15a.5.5 0 0 0-.3-.48L18 12.09v.18a12 12 0 0 1-.62 3.8m-11.37-4-1.62.73a.5.5 0 0 0-.3.48l.26 4.15 2.28-1.36a12 12 0 0 1-.63-3.8zm6-.08a2 2 0 1 0 0-4 2 2 0 0 0 0 4m2.5 9a1.5 1.5 0 0 1 0 3h-5a1.5 1.5 0 0 1 0-3z';

var rotate$1 = 'M21.87 11.83a1.25 1.25 0 0 1 1.76 0c.5.5.5 1.28 0 1.78l-3.88 3.9-3.88-3.9a1.26 1.26 0 0 1 0-1.78 1.25 1.25 0 0 1 1.77 0l.87.87V7.27a3.76 3.76 0 0 0-3.76-3.76h-7.5a1.25 1.25 0 0 1 0-2.51h7.5a6.27 6.27 0 0 1 6.26 6.27v5.42zM2 9.96h9a2 2 0 0 1 2 2V21a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-9.03a2 2 0 0 1 2-2.01';

var saturation$1 = 'M6.67 16c0-.54.16-1.4.57-2.6.4-1.15.96-2.46 1.63-3.82a74 74 0 0 1 3.15-5.68 72 72 0 0 1 3.14 5.68 33 33 0 0 1 1.62 3.82q.59 1.79.57 2.6a5.34 5.34 0 0 1-10.68 0m5.34 8a8 8 0 0 0 8-8c0-3.86-4.23-11.25-6.92-15.41a1.27 1.27 0 0 0-2.15 0C8.28 4.72 4 12.15 4 16a8 8 0 0 0 8 8';

var saveOutline$1 = 'M6 19.65V4h12v15.65l-6-3.67zm6-.15 5.96 3.64a2 2 0 0 0 3.04-1.7V4a3 3 0 0 0-3-3H6a3 3 0 0 0-3 3v17.43a2 2 0 0 0 3.04 1.71z';

var saved$1 = 'M3 4a3 3 0 0 1 3-3h12a3 3 0 0 1 3 3v17.43a2 2 0 0 1-3.04 1.71L12 19.5l-5.96 3.64A2 2 0 0 1 3 21.44z';

var scale$1 = 'M20.5 6.75V5.27L13.77 12l6.73 6.73v-1.48a1.25 1.25 0 0 1 2.5 0V23h-5.75a1.25 1.25 0 0 1 0-2.5h1.48L12 13.77 5.27 20.5h1.48a1.25 1.25 0 0 1 0 2.5H1v-5.75a1.25 1.25 0 0 1 2.5 0v1.48L10.23 12 3.5 5.27v1.48a1.25 1.25 0 0 1-2.5 0V1h5.75a1.25 1.25 0 0 1 0 2.5H5.27L12 10.23l6.73-6.73h-1.48a1.25 1.25 0 0 1 0-2.5H23v5.75a1.25 1.25 0 0 1-2.5 0';

var scissors$1 = 'M23 5.69a4 4 0 0 0-5.55-.97l-7.02 4.87-1.58-1.1A4.5 4.5 0 0 0 5.5 1l-.31.01a4.5 4.5 0 0 0-2.16 8.24L3 9.26 6.95 12 3 14.74l.03.01a4.5 4.5 0 1 0 5.81.75l1.58-1.09 7.02 4.87a4 4 0 0 0 5.55-.97L13.91 12zM5.36 3.51l.14-.01a2 2 0 0 1 .13 3.99l-.13.01a2 2 0 0 1-1.99-1.86 2 2 0 0 1 1.85-2.13M5.5 20.5l-.14-.01a2 2 0 0 1-1.86-2.13 2 2 0 0 1 2.13-1.85 2 2 0 0 1-.13 3.99';

var search$1 = 'M10 16a6 6 0 1 1 .01-12.01A6 6 0 0 1 10 16m13.12 2.88-4.26-4.26a10 10 0 1 0-4.24 4.24l4.26 4.26a3 3 0 1 0 4.24-4.24';

var searchByImage$1 = 'M1 5a4 4 0 0 1 4-4h4v2H5a2 2 0 0 0-2 2v4H1zm22 4h-2V5a2 2 0 0 0-2-2h-4V1h4a4 4 0 0 1 4 4zM5 23a4 4 0 0 1-4-4v-4h2v4c0 1.1.9 2 2 2h4v2zm18-4a4 4 0 0 1-4 4h-4v-2h4a2 2 0 0 0 2-2v-4h2zm-6-7a5 5 0 1 1-10 0 5 5 0 0 1 10 0m-5-3a3 3 0 1 0 0 6 3 3 0 0 0 0-6';

var searchFill$1 = 'M16.51 19.34a10 10 0 1 1 2.83-2.83l4.58 4.58-2.83 2.83zM11 5a6 6 0 1 0 0 12 6 6 0 0 0 0-12';

var security$1 = 'M21 9.59A14.5 14.5 0 0 1 12 23 14.5 14.5 0 0 1 3 9.59V3c0-1.1.9-2 2-2h14a2 2 0 0 1 2 2z';

var select$1 = 'M1 5a4 4 0 0 1 4-4h4v2H5a2 2 0 0 0-2 2v4H1zm18-2h-4V1h4a4 4 0 0 1 4 4v4h-2V5a2 2 0 0 0-2-2M1 19v-4h2v4c0 1.1.9 2 2 2h4v2H5a4 4 0 0 1-4-4m20 0v-4h2v4a4 4 0 0 1-4 4h-4v-2h4a2 2 0 0 0 2-2';

var send$1 = 'm.46 2.43-.03.03c-.4.42-.58 1.06-.28 1.68L3 10.5 16 12 3 13.5.15 19.86c-.3.62-.13 1.26.27 1.67l.05.05c.4.38 1 .56 1.62.3l20.99-8.5q.28-.12.47-.3l.04-.04c.68-.71.51-2-.51-2.42L2.09 2.12Q1.79 2 1.49 2q-.61.01-1.03.43';

var shadows$1 = 'M12 24a12 12 0 1 0 0-24 12 12 0 0 0 0 24m.5-20.11 7.73 4.46q.23.52.4 1.08l-8.13-4.7zm0 2.85v-.85l8.41 4.86q.06.44.08.89zm8.47 6.04-.1.78-8.37-4.82v-.85zm-8.47-2.04v-.85l8.12 4.7-.24.7zm7.46 5.46q-.16.32-.37.63l-7.09-4.1v-.84zm-7.46-1.46v-.85l6.5 3.76q-.22.3-.48.56zm5.25 4.18q-.3.25-.63.48l-4.62-2.66v-.85zm-5.25-.18v-.85l3.64 2.1q-.4.2-.82.38zm1.53 2.03a9 9 0 0 1-1.53.22v-1.1zM19.2 6.61l-6.14-3.55a9 9 0 0 1 6.14 3.55M3 12a9 9 0 0 1 8.5-8.99V21A9 9 0 0 1 3 12';

var shapes$1 = 'M13.99 10.4a4.9 4.9 0 0 0-5.75-2.72 6 6 0 1 1 8.16 3.82h-2.04q-.13-.57-.37-1.1M9.47 9a3.4 3.4 0 0 1 3.15 2.03q.17.35.26.73A2.5 2.5 0 0 0 11.5 14v2.43a19 19 0 0 1-4.1 3.02h-.02l-.18.12-.6.37a.2.2 0 0 1-.2 0l-.6-.37-.19-.11-.01-.01c-1.67-1.02-3.25-1.98-4.4-3.36a4.9 4.9 0 0 1-.82-5.06 3.4 3.4 0 0 1 3.15-2.02c1.29 0 2.17.78 2.77 1.9.09.16.31.16.4 0 .6-1.12 1.48-1.9 2.77-1.9M13 14a1 1 0 0 1 1-1h9a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1h-9a1 1 0 0 1-1-1z';

var share$1 = 'M7.44 5.44a1.5 1.5 0 1 0 2.12 2.12l.94-.94v6.88a1.5 1.5 0 0 0 3 0V6.62l.94.94a1.5 1.5 0 0 0 2.12-2.12l-3.5-3.5a1.5 1.5 0 0 0-2.12 0zM5 13.5a1.5 1.5 0 0 0-3 0v5A3.5 3.5 0 0 0 5.5 22h13a3.5 3.5 0 0 0 3.5-3.5v-5a1.5 1.5 0 0 0-3 0v5a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5z';

var shoppingBag$1 = 'M12.25.25a6 6 0 0 0-6 6V7H2.5L1.01 17.13A6 6 0 0 0 6.95 24h10.1A6 6 0 0 0 23 17.13L21.5 7h-3.25v-.75a6 6 0 0 0-6-6M9.75 7v-.75a2.5 2.5 0 1 1 5 0V7z';

var shrink$1 = 'M16.8 18.35a.96.96 0 0 1-1.36 1.36l-2.45-2.44v5.85a.96.96 0 0 1-1.92 0v-5.85L8.62 19.7a.96.96 0 0 1-1.36-1.36l4.77-4.78zm-1.36-13.9a.96.96 0 0 1 1.36 1.37l-4.77 4.77-4.77-4.77a.96.96 0 0 1 1.36-1.36l2.45 2.44V1.05a.96.96 0 0 1 1.92 0V6.9z';

var shuffles$1 = 'M21.03 1 1.53 3.4l.65 5.33v6.55h9.94L2.17 16.5l.8 6.5 19.5-2.4-.64-5.32V8.73h-9.98l9.98-1.23z';

var skintone$1 = 'M10.95 10.91H0C.46 5.11 5.1.5 10.95 0zm13.05.18H13V.1a12 12 0 0 1 11 11M10.95 24A12 12 0 0 1 0 13.1h10.95zM24 13.15A12 12 0 0 1 13 24V13.14z';

var slide$1 = 'm12 .09-4.7 4.7 1.4 1.42L11 3.9V11H3.91l2.3-2.3-1.42-1.4L.1 12l4.7 4.7 1.42-1.4L3.9 13H11v7.09l-2.3-2.3-1.4 1.42 4.7 4.7 4.7-4.7-1.4-1.42-2.3 2.3V13h7.09l-2.3 2.3 1.42 1.4 4.7-4.7-4.7-4.7-1.42 1.4 2.3 2.3H13V3.91l2.3 2.3 1.4-1.42z';

var smiley$1 = 'M12.03 19.29h-.06c-3.48-.03-4.92-2.31-4.98-2.41a.896.896 0 0 1 .27-1.22.82.82 0 0 1 1.17.26c.06.08 1.06 1.58 3.57 1.59 2.51-.01 3.52-1.6 3.56-1.67.25-.41.78-.54 1.18-.28.39.26.52.8.28 1.21-.06.1-1.5 2.49-4.99 2.52zM18 9.43c0 .95-.77 1.71-1.71 1.71-.95 0-1.72-.76-1.72-1.71s.77-1.72 1.72-1.72c.94 0 1.71.77 1.71 1.72zm-12 0c0-.95.77-1.72 1.71-1.72.95 0 1.72.77 1.72 1.72s-.77 1.71-1.72 1.71c-.94 0-1.71-.76-1.71-1.71z';

var snapchat$1 = 'M11.99 1.73c3.22 0 5.9 2.68 5.9 5.91q0 1.13.07 2.1a.74.74 0 0 0 .9.66l1.02-.23a.57.57 0 0 1 .67.42.74.74 0 0 1-.48.86l-1.53.62a.8.8 0 0 0-.48.98c1.23 4.54 4.66 4.07 4.66 4.66 0 .74-2.59.85-2.82 1.08-.24.23-.01 1.37-.53 1.59q-.15.05-.41.05c-.4 0-.95-.07-1.54-.07-.5 0-1.04.05-1.5.27-1.24.57-2.44 1.64-3.92 1.64s-2.68-1.07-3.91-1.64a4 4 0 0 0-1.51-.27c-.59 0-1.14.07-1.54.07q-.25 0-.4-.05c-.53-.22-.3-1.36-.54-1.59-.23-.23-2.82-.34-2.82-1.08 0-.6 3.43-.12 4.66-4.66a.8.8 0 0 0-.48-.98l-1.53-.62a.74.74 0 0 1-.48-.86.56.56 0 0 1 .67-.42l1.01.23a.74.74 0 0 0 .9-.67q.07-.95.07-2.09A5.95 5.95 0 0 1 12 1.73m0-1.28a7 7 0 0 0-5.06 2.12 7.3 7.3 0 0 0-2.1 5.07q0 .7-.04 1.37l-.37-.09a1.85 1.85 0 0 0-2.22 1.39c-.22.99.32 1.98 1.27 2.33l1.12.46c-.74 2.28-2.12 2.72-3.04 3.02q-.37.1-.66.24a1.5 1.5 0 0 0-.89 1.35c0 .52.25 1 .7 1.34q.33.25.84.43c.47.16 1.01.26 1.46.34q.03.25.1.52a1.8 1.8 0 0 0 1.04 1.22c.33.14.67.15.9.15l.72-.03q.4-.04.82-.04.63 0 .97.15.46.23.99.55c.97.57 2.07 1.21 3.46 1.21s2.49-.64 3.46-1.21q.52-.31 1-.55.32-.15.96-.15.42 0 .82.04l.72.03c.23 0 .57-.01.9-.15a1.8 1.8 0 0 0 1.04-1.22q.07-.27.1-.52c.45-.08 1-.18 1.46-.34q.52-.18.85-.43.68-.54.69-1.34c0-.27-.09-.95-.89-1.35q-.3-.14-.66-.24c-.92-.3-2.3-.74-3.04-3.02l1.12-.46a2 2 0 0 0 1.27-2.33 1.83 1.83 0 0 0-2.22-1.4l-.37.1q-.03-.66-.03-1.37a7 7 0 0 0-2.12-5.07A7.3 7.3 0 0 0 11.99.45';

var sortAscending$1 = 'M4.59 8.41a2 2 0 1 0 2.82 2.83L10 8.66V21a2 2 0 0 0 4 0V8.66l2.59 2.58a2 2 0 1 0 2.82-2.83L12 1z';

var sortDescending$1 = 'M4.59 15.58a2 2 0 1 1 2.82-2.82L10 15.34V3a2 2 0 0 1 4 0v12.34l2.59-2.58a2 2 0 1 1 2.82 2.82L12 23z';

var sound$1 = 'M5 7.94H2a2 2 0 0 0-2 2v5c0 1.1.9 2 2 2h3v-.03L12 23V1L5 7.96zM20.48 3.5a1.25 1.25 0 0 0-1.77 1.77A9.4 9.4 0 0 1 21.5 12c0 2.54-.99 4.92-2.78 6.72a1.25 1.25 0 1 0 1.77 1.76A12 12 0 0 0 24 12c0-3.2-1.25-6.22-3.52-8.49m-5.3 5.3a4.47 4.47 0 0 1 0 6.37 1.25 1.25 0 0 0 1.77 1.77A7 7 0 0 0 19 12c0-1.87-.73-3.63-2.05-4.95a1.25 1.25 0 0 0-1.77 1.77';

var soundFill$1 = 'M5 7.94H2a2 2 0 0 0-2 2v5c0 1.1.9 2 2 2h3v-.03L12 23V1L5 7.96zM20.48 3.5a1.25 1.25 0 0 0-1.77 1.77A9.4 9.4 0 0 1 21.5 12c0 2.54-.99 4.92-2.78 6.72a1.25 1.25 0 1 0 1.77 1.76A12 12 0 0 0 24 12c0-3.2-1.25-6.22-3.52-8.49m-5.3 5.3a4.47 4.47 0 0 1 0 6.37 1.25 1.25 0 0 0 1.77 1.77A7 7 0 0 0 19 12c0-1.87-.73-3.63-2.05-4.95a1.25 1.25 0 0 0-1.77 1.77';

var soundSlash$1 = 'M2 7.94h.85L12 17.09V23l-7-6.1v.04H2a2 2 0 0 1-2-2v-5c0-1.1.9-2 2-2M24 12c0 1.97-.47 3.86-1.36 5.55l-1.88-1.87a9.5 9.5 0 0 0-2.05-10.4 1.25 1.25 0 0 1 1.77-1.77A12 12 0 0 1 24 12m-2.45 7.3c.61.6.6 1.6-.03 2.22-.62.63-1.62.64-2.23.03L2.45 4.71c-.61-.61-.6-1.6.03-2.23a1.6 1.6 0 0 1 2.23-.03zM19 12q0 .87-.2 1.7l-2.34-2.33a4.5 4.5 0 0 0-1.28-2.55 1.25 1.25 0 0 1 1.77-1.77A7 7 0 0 1 19 12M12 1v5.91L9.04 3.95z';

var soundSlashFill$1 = 'M2 7.94h.85L12 17.09V23l-7-6.1v.04H2a2 2 0 0 1-2-2v-5c0-1.1.9-2 2-2M24 12c0 1.97-.47 3.86-1.36 5.55l-1.88-1.87a9.5 9.5 0 0 0-2.05-10.4 1.25 1.25 0 0 1 1.77-1.77A12 12 0 0 1 24 12m-2.45 7.3c.61.6.6 1.6-.03 2.22-.62.63-1.62.64-2.23.03L2.45 4.71c-.61-.61-.6-1.6.03-2.23a1.6 1.6 0 0 1 2.23-.03zM19 12q0 .87-.2 1.7l-2.34-2.33a4.5 4.5 0 0 0-1.28-2.55 1.25 1.25 0 0 1 1.77-1.77A7 7 0 0 1 19 12M12 1v5.91L9.04 3.95z';

var sparkle$1 = 'M23.84 4.21a5.3 5.3 0 0 0-3.63 3.63c-.06.21-.36.21-.42 0a5.3 5.3 0 0 0-3.63-3.63c-.21-.06-.21-.36 0-.42A5.3 5.3 0 0 0 19.79.16c.06-.21.36-.21.42 0a5.3 5.3 0 0 0 3.63 3.63c.21.06.21.36 0 .42m-3.25 9.84a14 14 0 0 0-9.54 9.54c-.16.55-.94.55-1.1 0A14 14 0 0 0 .4 14.05c-.55-.16-.55-.94 0-1.1A14 14 0 0 0 9.95 3.4c.16-.55.94-.55 1.1 0a14 14 0 0 0 9.54 9.54c.55.16.55.94 0 1.1';

var speech$1 = 'M12 0a11 11 0 0 0-8.52 17.95l-1.46 5.43a.5.5 0 0 0 .73.55l5.08-2.75A10.98 10.98 0 0 0 23 11 11 11 0 0 0 12 0';

var speechEllipsis$1 = 'M18 12.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m-6 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m-6-3a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3M12 0a11 11 0 0 0-8.52 17.95l-1.46 5.43a.5.5 0 0 0 .73.55l5.08-2.75A10.98 10.98 0 0 0 23 11 11 11 0 0 0 12 0';

var speechEllipsisFill$1 = 'M17 22.35A11.5 11.5 0 1 1 22.36 17l.64 3.7a2 2 0 0 1-2.3 2.3zM7 10.5a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3m5 3a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3m5-3a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3';

var speechExclamationPoint$1 = 'm14.18 6.82-1.7 5.82c-.14.48-.82.48-.96 0l-1.7-5.82h.01a2.25 2.25 0 1 1 4.34 0zM12 18a1.75 1.75 0 1 1 0-3.5 1.75 1.75 0 0 1 0 3.5m0-18a11 11 0 0 0-8.52 17.95l-1.46 5.43a.5.5 0 0 0 .73.55l5.08-2.75A11 11 0 1 0 12 0';

var speechHeart$1 = 'M1 11a11 11 0 1 1 6.83 10.18l-5.08 2.75a.5.5 0 0 1-.73-.55l1.46-5.43A11 11 0 0 1 1 11m11.44 4.4 3.8-3.74a2.6 2.6 0 0 0 0-3.66c-1.02-1-2.66-1-3.68 0l-.56.56-.56-.56c-1.02-1-2.66-1-3.68 0a2.6 2.6 0 0 0 0 3.66l3.8 3.75c.25.23.63.23.88 0';

var speechOutline$1 = 'M12 3.5a8.5 8.5 0 0 0-7.24 12.95l.32.52-.63 2.79 3.08-.51.45.24A8.5 8.5 0 1 0 12 3.5M.5 12a11.5 11.5 0 1 1 6.53 10.37l-5.46.9a.7.7 0 0 1-.8-.84l1.12-4.95A11.5 11.5 0 0 1 .5 12';

var speed$1 = 'M12 0c2.19 0 4.24.58 6 1.6l-1 1.74A10 10 0 1 0 20.66 7l1.73-1A12 12 0 1 1 12 0M9.88 10.59c1.3-1.3 4.52-2.61 6.13-3.2.39-.15.75.21.6.6-.59 1.6-1.9 4.83-3.2 6.13a2.5 2.5 0 1 1-3.53-3.53';

var speedThirdX$1 = 'M21.66 14.59A10.02 10.02 0 0 0 12 2a10 10 0 0 0-5 18.66L6 22.4a12 12 0 1 1 17.6-7.28zm-8.25-.47a2.5 2.5 0 1 1-3.53-3.53c1.3-1.3 4.52-2.61 6.13-3.2.39-.15.75.21.6.6-.59 1.6-1.9 4.83-3.2 6.13M10.11 22c.53 0 .92.41.92.95a.9.9 0 0 1-.93.94.9.9 0 0 1-.94-.94c0-.54.4-.95.94-.95m7.59-.63c0 1.51-1.25 2.61-2.95 2.61-1.62 0-2.7-.67-2.98-1.84l1.48-.66q.3 1.07 1.4 1.07c.85 0 1.4-.5 1.4-1.32 0-.76-.55-1.27-1.34-1.27-.47 0-.83.1-1.2.33l-.56-1.14 2.3-1.59h-3.1v-1.48h5.25v1.4l-2.02 1.48c1.46.05 2.32.93 2.32 2.4m4.42 2.46L21 22.09l-1.16 1.74h-1.77l1.98-2.75-1.76-2.47h1.77l.94 1.48.97-1.49h1.76l-1.8 2.52 1.96 2.71z';

var speedFifthX$1 = 'M21.66 14.59A10.02 10.02 0 0 0 12 2a10 10 0 0 0-5 18.66L6 22.4a12 12 0 1 1 17.6-7.28zm-8.25-.47a2.5 2.5 0 1 1-3.53-3.53c1.3-1.3 4.52-2.61 6.13-3.2.39-.15.75.21.6.6-.59 1.6-1.9 4.83-3.2 6.13M10.16 22c.54 0 .92.41.92.95a.9.9 0 0 1-.92.94.9.9 0 0 1-.95-.94c0-.54.4-.95.95-.95m4.51 1.98c-1.4 0-2.5-.68-2.8-1.73l1.44-.65q.3.94 1.32.95c.82 0 1.32-.48 1.32-1.27 0-.8-.45-1.27-1.23-1.27-.6 0-1.03.29-1.24.67l-1.3-.51.73-4.1h4.25v1.49H14.1l-.33 1.64c.3-.3.8-.45 1.38-.45 1.43 0 2.45.96 2.45 2.52 0 1.65-1.21 2.71-2.94 2.71m7.45-.15L21 22.09l-1.16 1.74h-1.77l1.98-2.75-1.76-2.47h1.77l.94 1.48.97-1.49h1.76l-1.8 2.52 1.96 2.71z';

var speed1X$1 = 'M12 22a10 10 0 1 1 9.66-7.41l1.93.52A12.02 12.02 0 0 0 12 0a12 12 0 1 0 0 24zm4.61-14.01a.47.47 0 0 0-.6-.6c-1.6.59-4.83 1.9-6.13 3.2a2.5 2.5 0 1 0 3.53 3.53c1.3-1.3 2.61-4.52 3.2-6.13m.33 8.08h-1.53c0 1-.65 1.48-1.78 1.48v1.6c.84 0 1.45-.2 1.73-.68v5.36h1.58zm6.94 7.76-1.96-2.7 1.8-2.53h-1.76l-.97 1.49-.94-1.49h-1.77l1.76 2.48-1.98 2.75h1.77L21 22.09l1.13 1.74z';

var speedDoubleX$1 = 'M21.66 14.59A10.02 10.02 0 0 0 12 2a10 10 0 0 0-2.59 19.66L8.9 23.6a12 12 0 1 1 14.7-8.48zm-8.25-.47a2.5 2.5 0 1 1-3.53-3.53c1.3-1.3 4.52-2.61 6.13-3.2.39-.15.75.21.6.6-.59 1.6-1.9 4.83-3.2 6.13m.17 8.2h3.82v1.51h-5.65a3 3 0 0 1-.06-.65c0-1.35.68-2.33 1.85-2.92l1.44-.74c.47-.24.8-.6.8-1.12 0-.64-.45-1.07-1.15-1.07-.8 0-1.27.52-1.33 1.39l-1.63-.41c.09-1.49 1.23-2.39 2.95-2.39 1.8 0 2.82.9 2.82 2.4 0 1.03-.62 1.87-1.68 2.44l-1.34.73c-.5.27-.75.53-.84.83m8.54 1.51L21 22.09l-1.16 1.74h-1.77l1.98-2.75-1.76-2.47h1.77l.94 1.48.97-1.49h1.76l-1.8 2.52 1.96 2.71z';

var speedTripleX$1 = 'M21.66 14.59A10.02 10.02 0 0 0 12 2a10 10 0 0 0-2.59 19.66L8.9 23.6a12 12 0 1 1 14.7-8.48zm-8.25-.47a2.5 2.5 0 1 1-3.53-3.53c1.3-1.3 4.52-2.61 6.13-3.2.39-.15.75.21.6.6-.59 1.6-1.9 4.83-3.2 6.13m4.29 7.25c0 1.51-1.25 2.61-2.95 2.61-1.62 0-2.7-.67-2.98-1.84l1.48-.66q.3 1.07 1.4 1.07c.85 0 1.4-.5 1.4-1.32 0-.76-.55-1.27-1.34-1.27-.47 0-.83.1-1.2.33l-.56-1.14 2.3-1.59h-3.1v-1.48h5.25v1.4l-2.02 1.48c1.46.05 2.32.93 2.32 2.4m4.42 2.46L21 22.09l-1.16 1.74h-1.77l1.98-2.75-1.76-2.47h1.77l.94 1.48.97-1.49h1.76l-1.8 2.52 1.96 2.71z';

var spread$1 = 'M4.8 7.31a.96.96 0 0 1 1.37 1.37l-2.45 2.44h5.85a.96.96 0 0 1 0 1.93H3.72l2.45 2.44a.96.96 0 0 1-1.37 1.37L.03 12.08zm13.1 1.37a.96.96 0 0 1 1.36-1.37l4.77 4.77-4.77 4.78a.96.96 0 0 1-1.37-1.37l2.45-2.44h-5.86a.96.96 0 0 1 0-1.93h5.86z';

var star$1 = 'M10.09 2.24a2.1 2.1 0 0 1 3.82 0l2.2 4.63q.05.09.15.12l4.91.74c1.75.26 2.45 2.5 1.18 3.79l-3.55 3.6a.2.2 0 0 0-.06.18l.84 5.1c.3 1.81-1.53 3.2-3.1 2.34l-4.38-2.4a.2.2 0 0 0-.2 0l-4.39 2.4c-1.56.86-3.39-.53-3.1-2.34l.85-5.1a.2.2 0 0 0-.06-.17l-3.55-3.61c-1.27-1.29-.57-3.53 1.18-3.8L7.73 7a.2.2 0 0 0 .16-.12z';

var starHalf$1 = 'M12 1a2.1 2.1 0 0 0-1.91 1.24l-2.2 4.63a.2.2 0 0 1-.15.12l-4.91.74c-1.75.26-2.45 2.5-1.18 3.79l3.55 3.6a.2.2 0 0 1 .06.18l-.84 5.1c-.3 1.81 1.53 3.2 3.1 2.34l4.38-2.4.1-.03z';

var starOutline$1 = 'M22.36 11.52c1.26-1.3.57-3.53-1.18-3.8L16.27 7a.2.2 0 0 1-.16-.12l-2.2-4.63a2.1 2.1 0 0 0-3.82 0l-2.2 4.63a.2.2 0 0 1-.15.12l-4.91.74c-1.75.26-2.45 2.5-1.18 3.79l3.56 3.6s.06.12.05.18l-.84 5.1c-.3 1.8 1.53 3.2 3.1 2.34l4.39-2.4a.2.2 0 0 1 .19 0l4.39 2.4c1.57.86 3.39-.53 3.1-2.34l-.85-5.1q-.02-.1.06-.17zm-5.7 1.5a3.2 3.2 0 0 0-.88 2.77l.57 3.46-2.81-1.54a3.2 3.2 0 0 0-3.07 0l-2.82 1.54.57-3.46a3.2 3.2 0 0 0-.87-2.77l-2.53-2.56 3.37-.51a3.2 3.2 0 0 0 2.4-1.8L12 5.22l1.4 2.95a3.2 3.2 0 0 0 2.43 1.79l3.36.5z';

var sticker$1 = 'M19 23a4 4 0 0 0 4-4V5a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v14a4 4 0 0 0 4 4zM4 19V5a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v9h-1.12c-1.23 0-2.37.46-3.23 1.22l-.28-1.65a.8.8 0 0 1 .22-.68l1.98-1.93a.76.76 0 0 0-.42-1.3l-2.74-.4a.8.8 0 0 1-.58-.42l-1.22-2.48a.76.76 0 0 0-1.37 0L10 8.84a.8.8 0 0 1-.57.42l-2.74.4a.76.76 0 0 0-.42 1.3l1.98 1.93q.27.29.22.68L8 16.3a.76.76 0 0 0 1.1.8l2.46-1.28a.8.8 0 0 1 .7 0l2.13 1.11q-.4.9-.4 1.95V20H5a1 1 0 0 1-1-1';

var stickerImage$1 = 'M6 2a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2zm1.5 18a1.5 1.5 0 0 0 0 3h9a1.5 1.5 0 0 0 0-3z';

var sun$1 = 'M13.5 3.5a1.5 1.5 0 0 1-3 0v-2a1.5 1.5 0 0 1 3 0zm-9.98 0a1.5 1.5 0 0 1 2.12.01l1.41 1.42a1.5 1.5 0 0 1-2.12 2.12L3.52 5.63a1.5 1.5 0 0 1 0-2.12m-.02 7a1.5 1.5 0 0 1 0 3h-2a1.5 1.5 0 0 1 0-3zm3.55 6.45a1.5 1.5 0 0 1 0 2.12L5.63 20.5a1.5 1.5 0 1 1-2.12-2.12l1.42-1.42a1.5 1.5 0 0 1 2.12 0M12 19c.83 0 1.5.67 1.5 1.5v2a1.5 1.5 0 0 1-3 0v-2c0-.83.67-1.5 1.5-1.5m8.5-15.48a1.5 1.5 0 0 1-.01 2.12l-1.42 1.41a1.5 1.5 0 1 1-2.12-2.12l1.42-1.41a1.5 1.5 0 0 1 2.12 0m2 6.98a1.5 1.5 0 0 1 0 3h-2a1.5 1.5 0 0 1 0-3zm-5.55 6.45a1.5 1.5 0 0 1 2.12 0l1.42 1.4a1.5 1.5 0 1 1-2.12 2.13l-1.42-1.4a1.5 1.5 0 0 1 0-2.13M17 12a5 5 0 1 1-10 0 5 5 0 0 1 10 0';

var swap$1 = 'M5.54 5.35a8.88 8.88 0 0 1 15.15 6.02 1.37 1.37 0 1 0 2.75-.08A11.63 11.63 0 0 0 3.61 3.4l-.46-.53a1 1 0 0 0-1.73.47l-.59 3.2a1 1 0 0 0 1.03 1.18l3.25-.13a1 1 0 0 0 .71-1.66l-.4-.46zm12.32 13.08a8.88 8.88 0 0 1-15.11-6.07 1.38 1.38 0 1 0-2.75.08 11.63 11.63 0 0 0 19.66 8.07l.49.56a1 1 0 0 0 1.74-.48l.58-3.2a1 1 0 0 0-1.02-1.18l-3.26.13a1 1 0 0 0-.71 1.66z';

var switchAccount$1 = 'M5.06 22.56 0 17.51l5.06-5.07a1.5 1.5 0 1 1 2.12 2.12L5.74 16h8.76a1.5 1.5 0 0 1 0 3H5.74l1.44 1.44a1.5 1.5 0 1 1-2.12 2.12m11.76-11a1.5 1.5 0 0 1 0-2.12L18.26 8H9.5a1.5 1.5 0 0 1 0-3h8.76l-1.44-1.44a1.5 1.5 0 0 1 0-2.12 1.5 1.5 0 0 1 2.12 0L24 6.49l-5.06 5.07a1.5 1.5 0 0 1-2.12 0';

var table$1 = 'M1 3c0-1.1.9-2 2-2h18a2 2 0 0 1 2 2v18a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2zm19 5V4H4v4zM4 10v4h4v-4zm6 0v4h4v-4zm6 0v4h4v-4zm-2 6h-4v4h4zm6 4v-4h-4v4zM8 20v-4H4v4z';

var tag$1 = 'M18 8a2 2 0 1 1 0-4 2 2 0 0 1 0 4m-7.36-6.2L1.8 10.64a2.73 2.73 0 0 0 0 3.85l7.7 7.71a2.73 2.73 0 0 0 3.86 0l8.84-8.84c.51-.5.8-1.2.8-1.92V3.73A2.73 2.73 0 0 0 20.27 1h-7.7c-.73 0-1.42.29-1.93.8';

var tagStar$1 = 'M10.64 1.8 1.8 10.64a2.73 2.73 0 0 0 0 3.85l7.7 7.71a2.73 2.73 0 0 0 3.86 0l.6-.6.1-.59-.8-.8c-1.6-1.63-.83-4.6 1.62-4.97l1.04-.15.48-1.01a2.87 2.87 0 0 1 5.17-.08l.63-.64c.51-.5.8-1.2.8-1.92V3.73A2.73 2.73 0 0 0 20.27 1h-7.7c-.73 0-1.42.29-1.93.8M18 8a2 2 0 1 1 0-4 2 2 0 0 1 0 4m1.8 6.93a.87.87 0 0 0-1.6 0l-.9 1.9a.2.2 0 0 1-.12.09l-2 .3c-.73.11-1.02 1.04-.5 1.58l1.46 1.47q.06.07.04.15l-.34 2.08c-.12.76.64 1.33 1.3.97l1.78-.97a.2.2 0 0 1 .16 0l1.79.97c.65.36 1.41-.21 1.29-.97l-.34-2.08q-.02-.09.04-.15l1.45-1.47c.53-.54.24-1.47-.49-1.58l-2-.3a.2.2 0 0 1-.13-.1z';

var target$1 = 'M12 0a12 12 0 1 1 0 24 12 12 0 0 1 0-24m0 4a8 8 0 0 0 0 16 8 8 0 0 0 0-16m4 8a4 4 0 1 1-8 0 4 4 0 0 1 8 0';

var telegram$1 = 'M24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12.43 8.86q-1.75.73-7 3.01-.85.34-.9.67c-.04.36.42.5 1.04.7l.27.08c.6.2 1.43.44 1.86.45q.58 0 1.3-.48 4.9-3.32 5.06-3.35.13-.05.25.02c.07.07.07.18.06.22-.05.19-1.84 1.86-2.77 2.72l-.54.5-.28.28c-.57.55-1 .96.02 1.64.5.32.89.59 1.28.85.42.3.85.58 1.4.95q.21.13.4.28c.5.35.95.67 1.5.62.32-.03.65-.33.82-1.23.4-2.13 1.18-6.73 1.36-8.63.02-.17 0-.38-.02-.47a.5.5 0 0 0-.17-.33 1 1 0 0 0-.46-.14c-.45.01-1.15.25-4.48 1.64';

var template$1 = 'M2.47 4.5c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v15a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2zm11.06 2a4 4 0 1 1 8 0 4 4 0 0 1-8 0m6 7a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-4c0-1.1.9-2 2-2z';

var terms$1 = 'M21 18H11a2 2 0 1 0 0 4h10a2 2 0 1 0 0-4M4 17a3 3 0 1 0 0 6 3 3 0 0 0 0-6m17-7H11a2 2 0 1 0 0 4h10a2 2 0 1 0 0-4M4 9a3 3 0 1 0 0 6 3 3 0 0 0 0-6m7-3h10a2 2 0 1 0 0-4H11a2 2 0 1 0 0 4M4 1a3 3 0 1 0 0 6 3 3 0 0 0 0-6';

var text$1 = 'M2 3.26C2 2.56 2.58 2 3.3 2h17.4c.72 0 1.3.57 1.3 1.26v4.36c0 .7-.58 1.26-1.3 1.26h-.5c-.71 0-1.3-.56-1.3-1.26v-1.4a1.5 1.5 0 0 0-1.52-1.49h-2.23c-.85 0-1.54.67-1.54 1.5v11.56c0 .82.68 1.48 1.52 1.48.71 0 1.29.56 1.29 1.25v.22c0 .7-.58 1.26-1.3 1.26H8.88c-.72 0-1.3-.57-1.3-1.26v-.22c0-.7.58-1.25 1.29-1.25a1.5 1.5 0 0 0 1.52-1.48V6.23c0-.83-.7-1.5-1.54-1.5H6.61c-.85 0-1.53.67-1.53 1.5v1.39c0 .7-.58 1.26-1.3 1.26H3.3c-.72 0-1.3-.56-1.3-1.26z';

var textAlignCenter$1 = 'M0 4.5h24v-3H0zm3 6h18v-3H3zm-3 6h24v-3H0zm3 6h18v-3H3z';

var textAlignLeft$1 = 'M0 4.5h24v-3H0zm0 6h18v-3H0zm0 6h24v-3H0zm0 6h18v-3H0z';

var textAlignRight$1 = 'M24 4.5H0v-3h24zm0 6H6v-3h18zm0 6H0v-3h24zm0 6H6v-3h18z';

var textAllCaps$1 = 'm16.77 13.7 1.73-4 1.73 4.01zm7.13 2.95L19.5 6.43a1.1 1.1 0 0 0-1-.68c-.44 0-.83.27-1 .68l-4.4 10.22c-.25.58 0 1.25.56 1.5q.22.1.44.1c.42 0 .83-.25 1.01-.68l.69-1.6h5.4l.7 1.6c.24.58.89.84 1.44.58.56-.25.81-.92.56-1.5M3.77 13.7l1.73-4 1.73 4.01zm2.74-7.27a1.1 1.1 0 0 0-1-.68c-.45 0-.84.27-1.02.68L.1 16.65c-.24.58.01 1.25.57 1.5q.22.1.44.1c.42 0 .83-.25 1.01-.68l.69-1.6h5.4l.7 1.6c.24.58.89.84 1.44.58.56-.25.81-.92.56-1.5z';

var textExtraSmall$1 = 'M21.75 11.5H2.25a1.25 1.25 0 0 1 0-2.5h19.5a1.25 1.25 0 0 1 0 2.5m-19.5 9h19.5a1.25 1.25 0 0 1 0 2.5H2.25a1.25 1.25 0 0 1 0-2.5m10.25-7.18 2.2 4.91a.54.54 0 0 1-.5.77.6.6 0 0 1-.5-.32l-.35-.77h-2.7l-.35.77a.55.55 0 0 1-.72.27.54.54 0 0 1-.28-.72l2.2-4.9a.55.55 0 0 1 1 0M12 14.9l-.86 1.93h1.72z';

var textInvert$1 = 'M14.2 14.1H12v2.8H8.56l-.87 1.97a1.4 1.4 0 0 1-2.57-1.14l5.6-12.6c.22-.5.73-.83 1.28-.83v4.86zM12 9.16 9.8 14.1H12zM1 4a3 3 0 0 1 .16-.97v-.01A3 3 0 0 1 4 1h16.01a3 3 0 0 1 3 3v16a3 3 0 0 1-3 3H4a3 3 0 0 1-3-3zm11-1H4a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1h8v-4.1h3.44l.88 1.97a1.4 1.4 0 0 0 2.56-1.14l-5.6-12.6A1.4 1.4 0 0 0 12 4.3z';

var textLarge$1 = 'M23 2.25C23 1.56 22.44 1 21.75 1H2.25a1.25 1.25 0 0 0 0 2.5h19.5c.69 0 1.25-.56 1.25-1.25M1 21.75c0 .69.56 1.25 1.25 1.25h19.5a1.25 1.25 0 0 0 0-2.5H2.25c-.69 0-1.25.56-1.25 1.25M12 5c-.5 0-.97.3-1.18.76L5.7 17.2a1.29 1.29 0 0 0 2.35 1.03l.8-1.79h6.31l.8 1.8a1.3 1.3 0 0 0 1.7.64c.65-.28.94-1.04.66-1.68L13.17 5.76C12.97 5.3 12.51 5 12 5m2.01 8.9H10l2-4.48z';

var textLineHeight$1 = 'm16 9-4-4-4 4h2.5v6H8l4 4 4-4h-2.5V9zm5.75 11.5H2.25a1.25 1.25 0 0 0 0 2.5h19.5a1.25 1.25 0 0 0 0-2.5m-19.5-17h19.5a1.25 1.25 0 0 0 0-2.5H2.25a1.25 1.25 0 0 0 0 2.5';

var textMedium$1 = 'M23 5.25C23 4.56 22.44 4 21.75 4H2.25a1.25 1.25 0 0 0 0 2.5h19.5c.69 0 1.25-.56 1.25-1.25M2.25 20.5a1.25 1.25 0 0 0 0 2.5h19.5a1.25 1.25 0 0 0 0-2.5zM12 8a1 1 0 0 0-.92.6l-4.03 9a1 1 0 0 0 .51 1.31c.5.23 1.1 0 1.33-.5L9.52 17h4.96l.63 1.4a1 1 0 0 0 1.33.51 1 1 0 0 0 .51-1.32l-4.03-9A1 1 0 0 0 12 8m1.58 7h-3.16L12 11.47z';

var textSentenceCase$1 = 'M19.8 16.03h-2.77a.83.83 0 0 1-.82-.84c0-.46.37-.83.82-.83h2.76zm-.84-7.78h-3.3c-.61 0-1.1.5-1.1 1.11s.49 1.11 1.1 1.11h3.3c.46 0 .83.38.83.84v.83h-2.76A3.05 3.05 0 0 0 14 15.2a3.05 3.05 0 0 0 3.03 3.05h3.87c.6 0 1.1-.5 1.1-1.11V11.3a3.05 3.05 0 0 0-3.03-3.06M5.78 13.71 7.5 9.69l1.73 4.02zm7.14 2.94L8.5 6.43a1.1 1.1 0 0 0-1.01-.68c-.44 0-.83.26-1 .68L2.1 16.65c-.25.58 0 1.25.56 1.5q.22.1.44.1c.42 0 .83-.25 1.01-.68l.69-1.6h5.4l.69 1.6c.25.58.9.84 1.45.58.56-.25.81-.92.57-1.5';

var textSize$1 = 'm2.92 16.55 1.33-3.06 1.33 3.06zM5.02 11a.85.85 0 0 0-1.55 0l-3.4 7.8c-.19.43 0 .94.44 1.14.43.19.93 0 1.12-.44l.53-1.22h4.18l.53 1.22a.85.85 0 0 0 1.12.44c.43-.2.63-.7.44-1.14zm9.45 3.17 2.28-5.14 2.28 5.14zm9.4 3.77-5.8-13.08a1.45 1.45 0 0 0-2.65 0l-5.8 13.08a1.46 1.46 0 0 0 2.66 1.18l.9-2.04h7.13l.9 2.04a1.45 1.45 0 1 0 2.66-1.18';

var textSmall$1 = 'M21.75 9.5H2.25a1.25 1.25 0 0 1 0-2.5h19.5a1.25 1.25 0 0 1 0 2.5m-19.5 11h19.5a1.25 1.25 0 0 1 0 2.5H2.25a1.25 1.25 0 0 1 0-2.5m10.42-9.07 2.93 6.55a.72.72 0 0 1-.67 1.02.7.7 0 0 1-.67-.43l-.46-1.03h-3.6l-.46 1.03a.74.74 0 0 1-.97.37.73.73 0 0 1-.37-.96l2.93-6.55a.73.73 0 0 1 1.34 0m-.67 2.1-1.15 2.56h2.3z';

var textSpacing$1 = 'M20 17.5H4V15l-4 4 4 4v-2.5h16V23l4-4-4-4zM5.5 4.78l1.73 3.86H3.77zM.66 12.91q.22.09.44.09c.42 0 .83-.24 1.01-.65l.69-1.53h5.4l.69 1.53c.25.55.9.8 1.45.56.56-.25.81-.9.56-1.44L6.5 1.65a1.1 1.1 0 0 0-2 0L.1 11.47c-.25.55 0 1.2.56 1.44m15.52-4.82h4.27a1.36 1.36 0 0 1 0 2.73h-4.27zm0-4.9h3.73a1.37 1.37 0 0 1 0 2.72h-3.73zM15.1 13h5.36a3.55 3.55 0 0 0 2.25-6.28A3.55 3.55 0 0 0 19.9 1h-4.8c-.61 0-1.1.49-1.1 1.1v9.8c0 .61.49 1.1 1.1 1.1';

var textSticker$1 = 'M17.17 21H21L16.73 3h-4.27L3 21h4.14l2.02-4.11h7.18zm-6.44-7.3 3.46-7.1 1.47 7.1z';

var thumbsDown$1 = 'M19 12.5a2 2 0 0 1 0 4h-7.5c.65 1.74 1 3.6 1 5.5a2 2 0 0 1-4 0c0-3.03-1.14-5.9-3.21-8.12A7.5 7.5 0 0 1 10.5 1h6.25a1.75 1.75 0 1 1 0 3.5H19a2 2 0 0 1 0 4 2 2 0 0 1 0 4';

var thumbsUp$1 = 'M21 13.5a2 2 0 0 1-2 2 2 2 0 0 1 0 4h-2.25a1.75 1.75 0 1 1 0 3.5H10.5a7.5 7.5 0 0 1-5.21-12.88A11.8 11.8 0 0 0 8.5 2a2 2 0 1 1 4 0c0 1.9-.35 3.76-1 5.5H19a2 2 0 0 1 0 4 2 2 0 0 1 2 2';

var timer$1 = 'M13 5v7.41l-3.3 3.3-1.4-1.42 2.7-2.7V5zm2-3.59q2.27.66 4.04 2.14l1.25-1.26 1.42 1.42-1.26 1.25A11 11 0 1 1 9 1.41V0h6zM12 21a9 9 0 1 0 0-18 9 9 0 0 0 0 18';

var timer3$1 = 'M15 0v1.41q2.27.66 4.04 2.14l1.25-1.26 1.42 1.42-1.26 1.25a11 11 0 0 1 1.63 11.44l-1.83-.8Q21 13.93 21 12a9 9 0 1 0-9 9v2A11 11 0 0 1 9 1.41V0zm-2 12.41-3.3 3.3-1.4-1.42 2.7-2.7V5h2zm6.61 8.96c0 1.31-1.07 2.26-2.54 2.26-1.4 0-2.33-.58-2.58-1.6l1.29-.56q.25.92 1.2.93c.73 0 1.2-.44 1.2-1.14 0-.66-.47-1.1-1.15-1.1-.4 0-.71.08-1.04.28l-.48-.98 2-1.38h-2.7V16.8h4.55V18l-1.75 1.3c1.26.04 2 .8 2 2.07';

var timer10$1 = 'M1 12A11 11 0 0 1 9 1.41V0h6v1.41q2.27.66 4.04 2.14l1.25-1.26 1.42 1.42-1.26 1.25a11 11 0 0 1 1.63 11.44l-1.83-.8q.73-1.67.75-3.6a9 9 0 1 0-9 9v2A11 11 0 0 1 1 12m12 .41-3.3 3.3-1.4-1.42 2.7-2.7V5h2zm2.69 11.09h-1.37v-4.63c-.24.41-.77.6-1.49.6v-1.4c.98 0 1.53-.41 1.54-1.27h1.32zm4.1-6.83c1.74 0 2.78 1.3 2.78 3.48s-1.04 3.48-2.79 3.48c-1.74 0-2.78-1.3-2.78-3.48s1.04-3.48 2.78-3.48m0 1.28c-.85 0-1.36.82-1.36 2.2s.5 2.2 1.35 2.2 1.36-.82 1.36-2.2-.51-2.2-1.36-2.2';

var trashCan$1 = 'M4.88 22.12a2 2 0 0 0 2 1.88H17.1a2 2 0 0 0 2-1.88L20 7H4zM20.5 2h-6V1a1 1 0 0 0-1-1h-3a1 1 0 0 0-1 1v1h-6a1.5 1.5 0 0 0 0 3h17a1.5 1.5 0 1 0 0-3';

var trending$1 = 'M15.74 4.5a1.5 1.5 0 1 0 0 3h3.31l-6.49 6.13-4.31-4.26-7.8 7.56a1.5 1.5 0 0 0-.02 2.12c.58.59 1.53.6 2.12.02l5.68-5.5 4.28 4.24L21 9.79v2.38a1.5 1.5 0 0 0 3 0V4.5z';

var undo$1 = 'M9.56 1.44a1.5 1.5 0 0 1 0 2.12L6.12 7H16a7 7 0 1 1 0 14h-4a1.5 1.5 0 0 1 0-3h4a4 4 0 1 0 0-8H6.12l3.44 3.44a1.5 1.5 0 0 1-2.12 2.12l-6-6a1.5 1.5 0 0 1 0-2.12l6-6a1.5 1.5 0 0 1 2.12 0';

var unlock$1 = 'M8 7v3h11v.02a8.75 8.75 0 1 1-14 0V7a7 7 0 0 1 13.93-1h-3.06A4 4 0 0 0 8 7';

var uploadFeed$1 = 'M21 16h-3V9.62q-.01-.62-.44-1.06l-4.12-4.12A1.5 1.5 0 0 0 12.38 4H10V2h7v3a1 1 0 0 0 1 1h3zm-5 4h-4.21q.2-.72.21-1.5a5.5 5.5 0 0 0-7-5.29V6h7v3a1 1 0 0 0 1 1h3zm-6.97-1.16c-.3.3-.77.3-1.06 0l-.72-.72V21a.75.75 0 0 1-1.5 0v-2.88l-.72.72a.75.75 0 1 1-1.06-1.06l2.53-2.53 2.53 2.53c.3.3.3.77 0 1.06M17.38 0H10a2 2 0 0 0-2 2v2H5a2 2 0 0 0-2 2v8.26A5.5 5.5 0 1 0 10.74 22H16a2 2 0 0 0 2-2v-2h3a2 2 0 0 0 2-2V5.62q-.01-.62-.44-1.06L18.44.44A1.5 1.5 0 0 0 17.38 0';

var viber$1 = 'M12.52 8.69c0 .16.14.28.3.27a1.35 1.35 0 0 1 1.42 1.46.29.29 0 1 0 .57.05A1.93 1.93 0 0 0 12.8 8.4a.3.3 0 0 0-.27.3m-.11-1.84a.29.29 0 0 0-.02.57c.93.03 1.81.4 2.47 1.07a3.3 3.3 0 0 1 .85 2.42.29.29 0 0 0 .57.03 4 4 0 0 0-1-2.84V8.1a4.2 4.2 0 0 0-2.87-1.24m-.83-1.2c0 .16.13.29.29.28a5.3 5.3 0 0 1 3.8 1.5 5.5 5.5 0 0 1 1.55 4.1.29.29 0 1 0 .58.02 6 6 0 0 0-1.71-4.52h-.01a5.8 5.8 0 0 0-4.22-1.68.3.3 0 0 0-.28.3m1.62 8.6a1 1 0 0 1-.33.05 5.6 5.6 0 0 1-3.74-3.76.8.8 0 0 1 .23-.62l.54-.42a.94.94 0 0 0 .16-1.18l-.1-.18c-.17-.27-.4-.65-.58-.88l-.79-.98a.8.8 0 0 0-1.06-.17q-.57.45-.97 1.05-.35.38-.44.9v.13q0 .2.07.38a13 13 0 0 0 1.13 2.46 15 15 0 0 0 2.2 3h.03q.44.45.93.82.98.78 2.06 1.38 1.17.69 2.47 1.14.19.06.37.05h.13q.52-.08.9-.43.53-.47.88-1.08a.8.8 0 0 0-.17-1.06 12 12 0 0 0-2.03-1.48.9.9 0 0 0-1.18.16l-.42.53a1 1 0 0 1-.29.19M20.36 3.5c-.56-.53-2.85-2.18-7.93-2.2 0 0-5.99-.37-8.93 2.31-1.63 1.63-2.2 4.01-2.26 6.96s-.14 8.47 5.19 9.97v2.3s0 .92.57 1.1c.61.2 1.02-.26 1.54-.85l.34-.38c.39-.42.92-1.03 1.32-1.5q3.42.32 6.76-.49l.28-.08c1.18-.3 4.69-1.19 5.3-6.22.73-5.7-.31-9.3-2.18-10.92m.62 10.51c-.52 4.15-3.3 4.8-4.31 5.04l-.26.06c-1.9.47-3.87.64-5.82.5 0 0-2.31 2.75-3.04 3.51a.4.4 0 0 1-.33.14q-.17-.06-.15-.4v-3.8c-4.37-1.21-4.26-5.66-4.2-8.18v-.24c.06-2.46.52-4.48 1.9-5.84 2.46-2.23 7.55-1.9 7.55-1.9 4.3 0 6.36 1.31 6.84 1.74 1.6 1.36 2.4 4.6 1.82 9.37';

var videoAdvance10Seconds$1 = 'M15.22 12a1.75 1.75 0 1 0-3.5 0 1.75 1.75 0 0 0 3.5 0m1.75 0a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0M7.85 8.5c.48 0 .87.39.87.87v5.26c0 .48-.4.87-.87.87h-.01a.87.87 0 0 1-.87-.87V9.37c0-.48.39-.87.87-.87zm12.58 11.97a12 12 0 0 1-8.46 3.5A11.98 11.98 0 0 1 3.5 3.54a12 12 0 0 1 14.96-1.59v-.7a1.25 1.25 0 0 1 2.5 0v5h-5a1.25 1.25 0 0 1 0-2.5h.74A9.54 9.54 0 0 0 5.23 5.26 9.54 9.54 0 0 0 18.7 18.74a9.6 9.6 0 0 0 2.47-9.2 1.22 1.22 0 1 1 2.36-.63 12 12 0 0 1-3.1 11.55';

var videoCamera$1 = 'M23 8v8a.5.5 0 0 1-.82.38l-3.68-3.26a1.5 1.5 0 0 1 0-2.24l3.68-3.26A.5.5 0 0 1 23 8m-7 0v8a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8c0-1.1.9-2 2-2h11a2 2 0 0 1 2 2';

var videoRewind10Seconds$1 = 'M13.5 13.77a1.76 1.76 0 1 0 0-3.51 1.76 1.76 0 0 0 0 3.51m0 1.75a3.5 3.5 0 1 1 0-7.01 3.5 3.5 0 0 1 0 7.01m-5.64 0a.87.87 0 0 1-.87-.87V9.38c0-.48.39-.87.87-.87h.01c.48 0 .87.4.87.87v5.27c0 .48-.39.87-.87.87zm12.63 4.97A12 12 0 0 1 12 24 11.97 11.97 0 0 1 .4 8.92a1.23 1.23 0 0 1 2.37.63 9.6 9.6 0 0 0 2.47 9.21 9.54 9.54 0 1 0 2-15H8a1.25 1.25 0 1 1 0 2.5H2.98v-5a1.25 1.25 0 0 1 2.5 0v.7a11.99 11.99 0 0 1 15 18.54';

var viewTypeDefault$1 = 'M10.5 10.5H0V0h10.5zM24 24H13.5V13.5H24zM13.5 0H24v10.5H13.5zm-3 24H0V13.5h10.5z';

var viewTypeDense$1 = 'M6 0H0v6h6zm18 18h-6v6h6zM15 0H9v6h6zm3 6h6V0h-6zM6 9H0v6h6zm3 6h6V9H9zm15-6h-6v6h6zM0 24h6v-6H0zm15-6H9v6h6z';

var viewTypeList$1 = 'M0 6h24V3H0zm0 7.5h24v-3H0zM24 18H0v3h24z';

var viewTypeSparse$1 = 'M2 22h20V2H2z';

var visit$1 = 'M20.97 12a2 2 0 0 1-1.99-2V7.81l-7.07 7.1a2 2 0 1 1-2.83-2.83L16.16 5h-2.17a2 2 0 0 1 0-4H23l-.03 9a2 2 0 0 1-2 2M6.75 4a1.25 1.25 0 0 1 0 2.5H3.5v14h14v-3.26a1.25 1.25 0 1 1 2.5 0v4.51c0 .7-.56 1.25-1.25 1.25H2.25C1.56 23 1 22.44 1 21.75V5.25C1 4.56 1.56 4 2.25 4z';

var warmth$1 = 'M12.33 0a4 4 0 0 0-4 4v6.52a7.33 7.33 0 1 0 8 0V4a4 4 0 0 0-4-4M9.88 12.9l1.29-.85V6.17h2.33v5.88l1.29.84a4.5 4.5 0 1 1-4.9 0';

var wave$1 = 'M12 7.28q.96 0 1.63-.23a5 5 0 0 0 1.14-.57q.5-.34.88-.67.39-.35.78-.58.39-.24.9-.23t.9.23.77.58q.39.33.89.67a5 5 0 0 0 3.03.8H23q.41 0 .7-.29.3-.3.3-.72 0-.4-.3-.7a1 1 0 0 0-.7-.3h-.08q-.78 0-1.35-.28-.57-.3-1.23-.78-.55-.4-1.3-.8a3.4 3.4 0 0 0-1.7-.41 3.5 3.5 0 0 0-1.76.42q-.75.42-1.3.83-.57.45-1.08.74-.5.28-1.2.28T10.8 5t-1.08-.74q-.55-.4-1.3-.83A3.5 3.5 0 0 0 6.69 3q-.99 0-1.72.41-.74.4-1.29.8-.67.48-1.24.78-.57.28-1.35.28H1q-.42 0-.72.3t-.29.7Q0 6.7.29 7q.3.3.72.3h.07q1.07 0 1.8-.24.74-.24 1.23-.57.5-.34.88-.67.39-.35.78-.58.39-.24.9-.23.53 0 .9.23.4.23.8.58.38.33.86.67.48.33 1.15.57t1.62.23m0 6.69q.96 0 1.63-.23t1.14-.57q.5-.34.88-.68.39-.34.78-.57.39-.24.9-.24t.9.24q.4.22.77.57.39.34.89.68a5 5 0 0 0 3.03.8H23q.41 0 .7-.29.3-.3.3-.71 0-.42-.3-.7a1 1 0 0 0-.7-.3h-.08q-.78 0-1.35-.3-.57-.29-1.23-.77-.55-.4-1.3-.8a3.4 3.4 0 0 0-1.7-.41q-1.02 0-1.76.43-.75.42-1.3.82-.57.45-1.08.73-.5.3-1.2.3t-1.2-.3-1.08-.73q-.55-.4-1.3-.82a3.4 3.4 0 0 0-1.74-.43q-.99 0-1.72.4-.74.42-1.29.8-.67.5-1.24.78-.57.3-1.35.3H1q-.42 0-.72.3-.3.27-.29.7a1 1 0 0 0 1 1h.08q1.07 0 1.8-.23.74-.24 1.23-.57.5-.34.88-.68.39-.35.78-.57.39-.24.9-.24.53 0 .9.24.4.22.8.57.38.34.86.68.48.33 1.15.57t1.62.23m0 6.69q.96 0 1.63-.24.66-.21 1.14-.56.5-.35.88-.68.39-.35.78-.56.39-.24.9-.24t.9.24q.4.21.77.56.39.33.89.68.51.35 1.23.56.72.24 1.8.24H23q.41 0 .7-.3.3-.3.3-.7 0-.41-.3-.7a1 1 0 0 0-.7-.3h-.08q-.78 0-1.35-.29-.57-.3-1.23-.77-.55-.4-1.3-.81a3.4 3.4 0 0 0-1.7-.41q-1.02 0-1.76.43-.75.42-1.3.82-.57.45-1.08.74-.5.3-1.2.29-.7 0-1.2-.29-.51-.3-1.08-.74-.55-.4-1.3-.82a3.4 3.4 0 0 0-1.74-.43q-.99 0-1.72.4-.74.42-1.29.82-.67.47-1.24.77t-1.35.29H1q-.42 0-.72.3-.3.29-.29.7 0 .4.29.7.3.3.72.3h.07q1.07 0 1.8-.24.74-.21 1.23-.56.5-.35.88-.68.39-.35.78-.56.39-.24.9-.24.53 0 .9.24.4.21.8.56.38.33.86.68t1.15.56q.66.24 1.62.24';

var whatsapp$1 = 'M18.75 16.8c-.29.83-1.43 1.5-2.32 1.69-.62.12-1.42.23-4.14-.9-3.48-1.45-5.71-5-5.89-5.24-.17-.23-1.4-1.88-1.4-3.59 0-1.7.86-2.54 1.21-2.9.29-.3.76-.42 1.21-.42h.4c.35.02.52.04.75.6.29.68.98 2.4 1.07 2.57.08.18.16.42.05.65s-.21.34-.38.54-.34.36-.52.58c-.16.19-.33.39-.14.74.2.34.9 1.48 1.92 2.4 1.32 1.19 2.4 1.56 2.77 1.72.29.11.62.1.83-.14.27-.29.6-.76.93-1.23.23-.34.54-.38.84-.26.32.12 2.02.96 2.36 1.13.35.17.58.25.67.4.06.17.06.86-.22 1.67M12 0A12 12 0 0 0 1.97 18.58L0 24l5.5-1.88-.09-.1A12 12 0 1 0 12 0';

var wifiNo$1 = 'M10.71 8.27q0 .18.05.33l.97 3.33c.08.27.46.27.54 0l.98-3.33h-.01q.05-.15.05-.33a1.29 1.29 0 0 0-2.58 0M12 13a1 1 0 1 0 0 2 1 1 0 0 0 0-2m0 5.57L2.42 8.58a14.6 14.6 0 0 1 19.16 0zM23.7 7.84a16.6 16.6 0 0 0-23.4 0 1 1 0 0 0-.02 1.4l11 11.45a1 1 0 0 0 1.44 0l11-11.45a1 1 0 0 0-.01-1.4';

var workflowStatusAll$1 = 'M6 1a5 5 0 1 0 0 10A5 5 0 0 0 6 1m12 10a5 5 0 1 0 0-10 5 5 0 0 0 0 10M6 13a5 5 0 1 0 0 10 5 5 0 0 0 0-10m12 0a5 5 0 1 0 0 10 5 5 0 0 0 0-10';

var workflowStatusCanceled$1 = 'M9 10.5h6a1.5 1.5 0 1 1 0 3H9a1.5 1.5 0 1 1 0-3m13.5-3.02v9.04c0 1.06-.56 2.03-1.46 2.58l-7.5 4.47c-.95.57-2.13.57-3.08 0l-7.5-4.47a3 3 0 0 1-1.46-2.58V7.48c0-1.06.56-2.03 1.46-2.58l7.5-4.47a3 3 0 0 1 3.08 0l7.5 4.47c.9.54 1.46 1.52 1.46 2.58m-3 0L12 3.01 4.5 7.48v9.05l7.5 4.46 7.5-4.47z';

var workflowStatusHalted$1 = 'M10.5 9v6a1.5 1.5 0 1 1-3 0V9a1.5 1.5 0 1 1 3 0m6 0v6a1.5 1.5 0 1 1-3 0V9a1.5 1.5 0 1 1 3 0m7.5 3a12 12 0 1 1-24 0 12 12 0 0 1 24 0m-3 0c0-4.96-4.04-9-9-9s-9 4.04-9 9 4.04 9 9 9 9-4.04 9-9';

var workflowStatusInProgress$1 = 'M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24M3 12c0-4.96 4.04-9 9-9v18c-4.96 0-9-4.04-9-9';

var workflowStatusOk$1 = 'M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24m5.56 10.06-6 6a1.5 1.5 0 0 1-2.12 0l-3-3a1.5 1.5 0 0 1 0-2.12 1.5 1.5 0 0 1 2.12 0l1.94 1.94 4.94-4.94a1.5 1.5 0 0 1 2.12 0 1.5 1.5 0 0 1 0 2.12';

var workflowStatusProblem$1 = 'M23.6 18.5 14.63 2.53a3 3 0 0 0-5.24 0L.4 18.5A3.02 3.02 0 0 0 3 23h18a3 3 0 0 0 2.6-4.5m-7.54-1.06a1.5 1.5 0 0 1 0 2.12 1.5 1.5 0 0 1-2.12 0L12 17.62l-1.95 1.94a1.5 1.5 0 0 1-2.12 0 1.5 1.5 0 0 1 0-2.12l1.94-1.94-1.94-1.94a1.5 1.5 0 0 1 0-2.12 1.5 1.5 0 0 1 2.12 0L12 13.38l1.94-1.94a1.5 1.5 0 0 1 2.12 0 1.5 1.5 0 0 1 0 2.12l-1.94 1.94z';

var workflowStatusQueued$1 = 'M1 1.5C1 .67 1.67 0 2.5 0h19a1.5 1.5 0 0 1 0 3h-1.96Q20 4.02 20 5.45c0 2.47-2.73 4.29-5 5.37v1.45c2.27 1.18 5 3.15 5 5.82q0 1.75-.57 2.91h2.07a1.5 1.5 0 0 1 0 3h-19a1.5 1.5 0 0 1 0-3h2.07A7 7 0 0 1 4 18.1c0-2.68 2.73-4.65 5-5.83v-1.45c-2.27-1.08-5-2.9-5-5.37Q4 4.02 4.46 3H2.5A1.5 1.5 0 0 1 1 1.5m16 16.6c0-.22-.08-.57-.53-1.1a8 8 0 0 0-2.01-1.6A18 18 0 0 0 12 14.2l-.11.04c-.66.27-1.51.66-2.34 1.16A8 8 0 0 0 7.53 17c-.45.53-.53.88-.53 1.1 0 1.55.45 1.95.76 2.16.6.4 1.84.74 4.24.74s3.64-.35 4.24-.74c.31-.21.76-.6.76-2.17';

var workflowStatusUnstarted$1 = 'M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24m0 21c-4.96 0-9-4.04-9-9s4.04-9 9-9 9 4.04 9 9-4.04 9-9 9m0-10.75c-.97 0-1.75.78-1.75 1.75s.78 1.75 1.75 1.75 1.75-.78 1.75-1.75-.78-1.75-1.75-1.75';

var workflowStatusWarning$1 = 'm23.12 9.87-9-9a3 3 0 0 0-4.25 0l-9 9a3 3 0 0 0 0 4.26l9 9a3 3 0 0 0 4.26 0l9-9a3 3 0 0 0 0-4.26M12 19.01a1.56 1.56 0 1 1 0-3.13 1.56 1.56 0 0 1 0 3.13m1.57-6.22a1.56 1.56 0 0 1-3.13 0V6.55a1.56 1.56 0 0 1 3.13 0z';

var xSocial$1 = 'M13.8 10.31 21.81 1h-1.9l-6.95 8.08L7.41 1H1l8.4 12.23L1 22.99h1.9l7.34-8.54L16.11 23h6.4zm-2.6 3.02-.85-1.21-6.77-9.7H6.5l5.46 7.83.85 1.21 7.1 10.16h-2.9z';

var yahoo$1 = 'm21.56 17.45.83.04-.23 1.51-.78-.06-.73-.06v-1.54zm-.7-7.63c.32.07 2.86.3 3.14.31l-1.67 6.31-1.44-.11zm.76-1.48h-1.73l-.56.12c-.59.15-5.96 4.2-6.31 5.2-.08.34 0 3.67.08 4.17.36.08 2.91 0 3.38.09l-.06 1.02c-.45-.03-3.7-.02-5.56-.02-.94 0-3.96.1-4.9.07l.18-.98c.51-.03 2.62.1 3.09-.38.23-.24.16-3.4.08-3.94-.2-.57-4.9-6.31-6.14-7.25H0V5h10.7v.1h.03l-.03.24v1.1H7.47c1.44 2.04 3.5 4.51 4.38 5.7l4.3-3.8H13.6l-.36-1.44h9.38l-.08.1h.04l-.67.95h-.02z';

var youtube$1 = 'M9.75 15.27V8.73L15.5 12zm12.79-8.6c-.25-.95-1-1.7-1.94-1.96-1.72-.46-8.6-.46-8.6-.46s-6.88 0-8.6.46c-.94.26-1.69 1-1.94 1.96C1 8.4 1 12 1 12s0 3.6.46 5.33c.25.95 1 1.7 1.94 1.96 1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46c.94-.26 1.69-1 1.94-1.96C23 15.6 23 12 23 12s0-3.6-.46-5.33';

const icons$2 = Object.freeze({
    '360': threeSixty$1,
    '3d': threeD$1,
    '3d-move': threeDMove$1,
    'accessibility': accessibility$1,
    'ad': ad$1,
    'ad-group': adGroup$1,
    'add': add$1,
    'add-circle': addCircle$1,
    'add-layout': addLayout$1,
    'add-pin': addPin$1,
    'add-section': addSection$1,
    'ads-overview': adsOverview$1,
    'ads-stats': adsStats$1,
    'alert': alert$1,
    'align-bottom': alignBottom$1,
    'align-bottom-center': alignBottomCenter$1,
    'align-bottom-left': alignBottomLeft$1,
    'align-bottom-right': alignBottomRight$1,
    'align-middle': alignMiddle$1,
    'align-top': alignTop$1,
    'align-top-center': alignTopCenter$1,
    'align-top-left': alignTopLeft$1,
    'align-top-right': alignTopRight$1,
    'alphabetical': alphabetical$1,
    'android-share': androidShare$1,
    'angled-pin': angledPin$1,
    'animate': animate$1,
    'api': api$1,
    'apple': apple$1,
    'apps': apps$1,
    'ar-try-on': arTryOn$1,
    'arrow-back': arrowBack$1,
    'arrow-circle-back': arrowCircleBack$1,
    'arrow-circle-down': arrowCircleDown$1,
    'arrow-circle-forward': arrowCircleForward$1,
    'arrow-circle-up': arrowCircleUp$1,
    'arrow-counter-clockwise': arrowCounterClockwise$1,
    'arrow-double-back': arrowDoubleBack$1,
    'arrow-double-forward': arrowDoubleForward$1,
    'arrow-down': arrowDown$1,
    'arrow-end': arrowEnd$1,
    'arrow-forward': arrowForward$1,
    'arrow-left-curved': arrowLeftCurved$1,
    'arrow-nested': arrowNested$1,
    'arrow-start': arrowStart$1,
    'arrow-up': arrowUp$1,
    'arrow-up-left': arrowUpLeft$1,
    'arrow-up-right': arrowUpRight$1,
    'arrows-vertical': arrowsVertical$1,
    'aspect-ratio': aspectRatio$2,
    'audio-bars': audioBars$1,
    'audio-mix': audioMix$1,
    'audio-playing': audioPlaying$1,
    'bell': bell$1,
    'bell-fill': bellFill$1,
    'birthday-cake': birthdayCake$1,
    'board': board$1,
    'board-sticker-large': boardStickerLarge$1,
    'board-sticker-small': boardStickerSmall$1,
    'border': border$1,
    'border-shadow': borderShadow$1,
    'briefcase': briefcase$1,
    'building-business': buildingBusiness$1,
    'business-hierarchy': businessHierarchy$1,
    'calendar': calendar$1,
    'calendar-check': calendarCheck$1,
    'camera': camera$1,
    'camera-flip': cameraFlip$1,
    'camera-roll': cameraRoll$1,
    'cancel': cancel$1,
    'canonical-pin': canonicalPin$1,
    'captions': captions$1,
    'captions-outline': captionsOutline$1,
    'card-stack': cardStack$1,
    'check': check$1,
    'check-circle': checkCircle$1,
    'check-circle-fill': checkCircleFill$1,
    'chevron-down-circle': chevronDownCircle$1,
    'chevron-left-circle': chevronLeftCircle$1,
    'chevron-right-circle': chevronRightCircle$1,
    'chevron-up-circle': chevronUpCircle$1,
    'circle': circle$1,
    'circle-ellipsis': circleEllipsis$1,
    'circle-information-fill': circleInformationFill$1,
    'circle-initializing': circleInitializing$1,
    'clear': clear$1,
    'clips': clips$1,
    'clock': clock$1,
    'clock-checked': clockChecked$1,
    'cloud-server': cloudServer$1,
    'code': code$1,
    'code-check': codeCheck$1,
    'cog': cog$1,
    'collage': collage$1,
    'collapse': collapse$1,
    'color': color$1,
    'color-palette': colorPalette$1,
    'color-picker': colorPicker$1,
    'color-solid': colorSolid$1,
    'color-split': colorSplit$1,
    'compass': compass$1,
    'compose': compose$1,
    'contrast': contrast$1,
    'conversion-tag': conversionTag$1,
    'copy-to-clipboard': copyToClipboard$1,
    'credit-card': creditCard$1,
    'crop': crop$1,
    'cutout': cutout$1,
    'dash': dash$1,
    'data-source': dataSource$1,
    'design': design$1,
    'desktop': desktop$1,
    'diagnostics': diagnostics$1,
    'directional-arrow-left': directionalArrowLeft$1,
    'directional-arrow-right': directionalArrowRight$1,
    'download': download$1,
    'drag-drop': dragDrop$1,
    'draw': draw$1,
    'dropbox': dropbox$1,
    'duplicate': duplicate$1,
    'edit': edit$1,
    'ellipsis': ellipsis$1,
    'envelope': envelope$1,
    'erase': erase$1,
    'erase-auto': eraseAuto$1,
    'etsy': etsy$1,
    'expand': expand$1,
    'eye': eye$1,
    'eye-hide': eyeHide$1,
    'face-happy': faceHappy$1,
    'face-neutral': faceNeutral$1,
    'face-sad': faceSad$1,
    'face-smiley': faceSmiley$1,
    'face-smiley-outline': faceSmileyOutline$1,
    'face-smiley-plus': faceSmileyPlus$1,
    'face-tryon': faceTryon$1,
    'facebook': facebook$1,
    'fade': fade$1,
    'file-box': fileBox$1,
    'file-unknown': fileUnknown$1,
    'fill-opaque': fillOpaque$1,
    'fill-transparent': fillTransparent$1,
    'filter': filter$1,
    'flag': flag$1,
    'flame': flame$1,
    'flash': flash$1,
    'flash-automatic': flashAutomatic$1,
    'flash-slash': flashSlash$1,
    'flashlight': flashlight$1,
    'flip-horizontal': flipHorizontal$1,
    'flip-vertical': flipVertical$1,
    'folder': folder$1,
    'folder-fill': folderFill$1,
    'forward': forward$1,
    'gauge': gauge$1,
    'ghost': ghost$1,
    'ghost-fill': ghostFill$1,
    'gif': gif$1,
    'gif-visual': gifVisual$1,
    'gift': gift$1,
    'globe': globe$1,
    'globe-checked': globeChecked$1,
    'gmail': gmail$1,
    'graph-bar': graphBar$1,
    'graph-pie': graphPie$1,
    'hand': hand$1,
    'hand-pointing': handPointing$1,
    'handle': handle$1,
    'heart': heart$1,
    'heart-broken': heartBroken$1,
    'heart-health': heartHealth$1,
    'heart-outline': heartOutline$1,
    'highlights': highlights$1,
    'history': history$1,
    'home': home$1,
    'home-fill': homeFill$1,
    'idea-pin': ideaPin$1,
    'image-portrait': imagePortrait$1,
    'impressum': impressum$1,
    'indent': indent$1,
    'info-circle': infoCircle$1,
    'information': information$1,
    'insights-audience': insightsAudience$1,
    'insights-conversion': insightsConversion$1,
    'instagram': instagram$1,
    'invoice': invoice$1,
    'kakao-talk': kakaoTalk$1,
    'key': key$1,
    'knoop': knoop$1,
    'lab-flask': labFlask$1,
    'lasso-magic': lassoMagic$1,
    'layers-stack': layersStack$1,
    'layout': layout$1,
    'lightbulb': lightbulb$1,
    'lightning-bolt-circle': lightningBoltCircle$1,
    'link': link$1,
    'link-broken': linkBroken$1,
    'lips': lips$1,
    'list-numbered': listNumbered$1,
    'list-numbered-rtl': listNumberedRtl$1,
    'location': location$1,
    'lock': lock$1,
    'logo-large': logoLarge$1,
    'logo-small': logoSmall$1,
    'logout': logout$1,
    'magic-pen': magicPen$1,
    'magic-wand': magicWand$1,
    'magnifying-glass-sparkle': magnifyingGlassSparkle$1,
    'manage-access': manageAccess$1,
    'margins-large': marginsLarge$1,
    'margins-medium': marginsMedium$1,
    'margins-small': marginsSmall$1,
    'maximize': maximize$1,
    'megaphone': megaphone$1,
    'menu': menu$1,
    'messenger': messenger$1,
    'microphone': microphone$1,
    'minimize': minimize$1,
    'mobile': mobile$1,
    'moon': moon$1,
    'move-pin': movePin$1,
    'music-off': musicOff$1,
    'music-on': musicOn$1,
    'mute': mute$1,
    'mute-fill': muteFill$1,
    'orientation-landscape': orientationLandscape$1,
    'orientation-portrait': orientationPortrait$1,
    'outdent': outdent$1,
    'outlook': outlook$1,
    'overlay-text': overlayText$1,
    'overlay-text-outline': overlayTextOutline$1,
    'overview': overview$1,
    'paper-clip': paperClip$1,
    'paper-lines-plus': paperLinesPlus$1,
    'pause': pause$1,
    'pen': pen$1,
    'pen-auto': penAuto$1,
    'people': people$1,
    'performance-plus': performancePlus$1,
    'person': person$1,
    'person-add': personAdd$1,
    'person-fill': personFill$1,
    'person-magnifying-glass': personMagnifyingGlass$1,
    'phone': phone$1,
    'pin': pin$1,
    'pin-hide': pinHide$1,
    'pincode': pincode$1,
    'pinterest': pinterest$1,
    'play': play$1,
    'protect': protect$1,
    'question-mark': questionMark$1,
    'record-limit': recordLimit$1,
    'record-limit-10': recordLimit10$1,
    'record-limit-15': recordLimit15$1,
    'record-limit-30': recordLimit30$1,
    'record-limit-5': recordLimit5$1,
    'record-limit-60': recordLimit60$1,
    'redo': redo$1,
    'refresh': refresh$1,
    'remove': remove$1,
    'reorder-images': reorderImages$1,
    'replace': replace$1,
    'report': report$1,
    'rewind': rewind$1,
    'ribbon': ribbon$1,
    'rocketship': rocketship$1,
    'rotate': rotate$1,
    'saturation': saturation$1,
    'save-outline': saveOutline$1,
    'saved': saved$1,
    'scale': scale$1,
    'scissors': scissors$1,
    'search': search$1,
    'search-by-image': searchByImage$1,
    'search-fill': searchFill$1,
    'security': security$1,
    'select': select$1,
    'send': send$1,
    'shadows': shadows$1,
    'shapes': shapes$1,
    'share': share$1,
    'shopping-bag': shoppingBag$1,
    'shrink': shrink$1,
    'shuffles': shuffles$1,
    'skintone': skintone$1,
    'slide': slide$1,
    'smiley': smiley$1,
    'snapchat': snapchat$1,
    'sort-ascending': sortAscending$1,
    'sort-descending': sortDescending$1,
    'sound': sound$1,
    'sound-fill': soundFill$1,
    'sound-slash': soundSlash$1,
    'sound-slash-fill': soundSlashFill$1,
    'sparkle': sparkle$1,
    'speech': speech$1,
    'speech-ellipsis': speechEllipsis$1,
    'speech-ellipsis-fill': speechEllipsisFill$1,
    'speech-exclamation-point': speechExclamationPoint$1,
    'speech-heart': speechHeart$1,
    'speech-outline': speechOutline$1,
    'speed': speed$1,
    'speed-.3x': speedThirdX$1,
    'speed-.5x': speedFifthX$1,
    'speed-1x': speed1X$1,
    'speed-2x': speedDoubleX$1,
    'speed-3x': speedTripleX$1,
    'spread': spread$1,
    'star': star$1,
    'star-half': starHalf$1,
    'star-outline': starOutline$1,
    'sticker': sticker$1,
    'sticker-image': stickerImage$1,
    'sun': sun$1,
    'swap': swap$1,
    'switch-account': switchAccount$1,
    'table': table$1,
    'tag': tag$1,
    'tag-star': tagStar$1,
    'target': target$1,
    'telegram': telegram$1,
    'template': template$1,
    'terms': terms$1,
    'text': text$1,
    'text-align-center': textAlignCenter$1,
    'text-align-left': textAlignLeft$1,
    'text-align-right': textAlignRight$1,
    'text-all-caps': textAllCaps$1,
    'text-extra-small': textExtraSmall$1,
    'text-invert': textInvert$1,
    'text-large': textLarge$1,
    'text-line-height': textLineHeight$1,
    'text-medium': textMedium$1,
    'text-sentence-case': textSentenceCase$1,
    'text-size': textSize$1,
    'text-small': textSmall$1,
    'text-spacing': textSpacing$1,
    'text-sticker': textSticker$1,
    'thumbs-down': thumbsDown$1,
    'thumbs-up': thumbsUp$1,
    'timer': timer$1,
    'timer-10': timer10$1,
    'timer-3': timer3$1,
    'trash-can': trashCan$1,
    'trending': trending$1,
    'undo': undo$1,
    'unlock': unlock$1,
    'upload-feed': uploadFeed$1,
    'viber': viber$1,
    'video-advance-10-seconds': videoAdvance10Seconds$1,
    'video-camera': videoCamera$1,
    'video-rewind-10-seconds': videoRewind10Seconds$1,
    'view-type-default': viewTypeDefault$1,
    'view-type-dense': viewTypeDense$1,
    'view-type-list': viewTypeList$1,
    'view-type-sparse': viewTypeSparse$1,
    'visit': visit$1,
    'warmth': warmth$1,
    'wave': wave$1,
    'whatsapp': whatsapp$1,
    'wifi-no': wifiNo$1,
    'workflow-status-all': workflowStatusAll$1,
    'workflow-status-canceled': workflowStatusCanceled$1,
    'workflow-status-halted': workflowStatusHalted$1,
    'workflow-status-in-progress': workflowStatusInProgress$1,
    'workflow-status-ok': workflowStatusOk$1,
    'workflow-status-problem': workflowStatusProblem$1,
    'workflow-status-queued': workflowStatusQueued$1,
    'workflow-status-unstarted': workflowStatusUnstarted$1,
    'workflow-status-warning': workflowStatusWarning$1,
    'x-social': xSocial$1,
    'yahoo': yahoo$1,
    'youtube': youtube$1,
});

var compactAdd = 'M7 9v6h2V9h6V7H9V1H7v6H1v2z';

var compactArrowUpRight = 'M14 2v9h-2V5.41l-8.3 8.3-1.4-1.42L10.58 4H5V2z';

var compactCancel = 'm8 9.41 5.3 5.3 1.4-1.42L9.42 8l5.3-5.3-1.42-1.4L8 6.58l-5.3-5.3L1.3 2.7 6.58 8l-5.3 5.3 1.42 1.4z';

var compactCheck = 'm16 3.41-10 10-6-6L1.41 6 6 10.59 14.59 2z';

var compactCheckCircleFill = 'M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14m-1-3.94L3.97 8.03l1.06-1.06L7 8.94l3.97-3.97 1.06 1.06z';

var compactChevronDown = 'm8 9.59 4.3-4.3 1.4 1.42L8 12.4 2.3 6.7l1.4-1.42z';

var compactChevronLeft = 'm6.41 8 4.3 4.3-1.42 1.4L3.6 8l5.7-5.7 1.42 1.4z';

var compactChevronRight = 'm9.59 8-4.3-4.3 1.42-1.4L12.4 8l-5.7 5.7-1.42-1.4z';

var compactChevronUp = 'm8 6.41-4.3 4.3-1.4-1.42L8 3.6l5.7 5.7-1.4 1.42z';

var compactDash = 'M14 9H2V7h12z';

var compactInfoCircleFill = 'M15 8A7 7 0 1 1 1 8a7 7 0 0 1 14 0m-7.5 4H9V6.5H7V8h.5zM8 6a1 1 0 1 0 0-2 1 1 0 0 0 0 2';

var compactLock = 'M4 5H3a2 2 0 0 0-2 2v6c0 1.1.9 2 2 2h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-1V4a4 4 0 0 0-8 0zm1.5-1a2.5 2.5 0 0 1 5 0v1h-5zm3.25 4v4h-1.5V8z';

var compactWorkflowStatusProblem = 'M9.71 2.86a2 2 0 0 0-3.42 0L.82 11.97A2 2 0 0 0 2.53 15h10.94a2 2 0 0 0 1.71-3.03zM6.03 6.97 8 8.94l1.97-1.97 1.06 1.06L9.06 10l1.97 1.97-1.06 1.06L8 11.06l-1.97 1.97-1.06-1.06L6.94 10 4.97 8.03z';

var compactWorkflowStatusWarning = 'M9.6 1.66a2.27 2.27 0 0 0-3.2 0L1.66 6.4a2.27 2.27 0 0 0 0 3.2l4.74 4.74c.88.88 2.32.88 3.2 0l4.74-4.74c.88-.88.88-2.32 0-3.2zm-.24 3.98-.57 3.04a.8.8 0 0 1-1.58 0l-.57-3.04a1.38 1.38 0 1 1 2.72 0M9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0';

const icons$1 = Object.freeze({
    'compact-add': compactAdd,
    'compact-arrow-up-right': compactArrowUpRight,
    'compact-cancel': compactCancel,
    'compact-check': compactCheck,
    'compact-check-circle-fill': compactCheckCircleFill,
    'compact-chevron-down': compactChevronDown,
    'compact-chevron-left': compactChevronLeft,
    'compact-chevron-right': compactChevronRight,
    'compact-chevron-up': compactChevronUp,
    'compact-dash': compactDash,
    'compact-info-circle-fill': compactInfoCircleFill,
    'compact-lock': compactLock,
    'compact-workflow-status-problem': compactWorkflowStatusProblem,
    'compact-workflow-status-warning': compactWorkflowStatusWarning,
});

var threeD = 'M5.8 10.02c2.73 0 4.6 1.69 4.6 4.56 0 2.85-2.1 4.8-5.15 4.8C2.45 19.38.55 18.1 0 16l1.91-.87q.64 2.43 3.34 2.42c1.85 0 3.1-1.18 3.1-2.95 0-1.93-1.19-3.05-3.02-3.05-.91 0-1.77.26-2.46.67l-.67-1.53 4.7-4.1H.65V4.74H9.8v1.42l-4.46 3.9q.23-.05.47-.05m6.01 9.08V4.75h4.9c4.32 0 7.29 2.87 7.29 7.22 0 4.3-2.97 7.13-7.29 7.13zm1.93-12.56v10.79h2.93c3.02 0 5.3-1.94 5.3-5.36 0-3.46-2.28-5.43-5.3-5.43z';

var threeDMove = 'M18 4a10 10 0 0 0-16 8H0a12 12 0 0 1 19-9.75V0h2v6h-6V4zM6 20a10 10 0 0 0 16-8h2a12 12 0 0 1-19 9.75V24H3v-6h6v2zm5.33-6.46c0 1.51-1.25 2.61-2.95 2.61-1.62 0-2.7-.67-2.98-1.84l1.48-.66q.29 1.07 1.4 1.07c.85 0 1.4-.5 1.4-1.32 0-.76-.55-1.27-1.34-1.27-.47 0-.83.1-1.2.33l-.56-1.14 2.3-1.59h-3.1V8.24h5.25v1.4l-2.02 1.49c1.46.05 2.32.93 2.32 2.4m4.14-5.3c2.3 0 3.86 1.58 3.86 3.91 0 2.3-1.56 3.85-3.86 3.85h-2.91V8.24zm-.1 6.3c1.43 0 2.36-.94 2.36-2.39 0-1.48-.93-2.45-2.36-2.45H14.1v4.85z';

var threeSixty = 'M8.5 13.76c0 1.38-1.13 2.38-2.68 2.38-1.47 0-2.45-.61-2.7-1.68l1.34-.6q.26.98 1.27.98c.77 0 1.27-.46 1.27-1.2 0-.69-.5-1.16-1.22-1.16-.42 0-.75.09-1.09.3l-.5-1.03 2.1-1.45H3.44V8.95h4.78v1.27L6.4 11.57c1.33.05 2.11.85 2.11 2.19m3.23 2.38c-1.76 0-2.86-1.37-2.86-3.61 0-2.4 1.27-3.72 3.06-3.72 1.13 0 2.08.47 2.47 1.17l-1.19.89a1.5 1.5 0 0 0-1.29-.73q-1.46.01-1.56 2.11c.28-.55.86-.88 1.67-.88 1.33 0 2.35.9 2.35 2.32 0 1.38-1.04 2.45-2.65 2.45m-.06-3.53c-.69 0-1.2.45-1.2 1.15 0 .69.51 1.14 1.2 1.14.7 0 1.21-.45 1.21-1.14 0-.7-.52-1.15-1.2-1.15m5.99-3.8c1.84 0 2.93 1.37 2.93 3.66s-1.1 3.67-2.93 3.67-2.93-1.37-2.93-3.67 1.1-3.66 2.93-3.66m0 1.35c-.9 0-1.42.86-1.42 2.31s.53 2.32 1.42 2.32 1.43-.86 1.43-2.32c0-1.45-.54-2.31-1.43-2.31M0 7a4 4 0 0 1 4-4h16a4 4 0 0 1 4 4v10a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4zm2 0v10c0 1.1.9 2 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2';

var accessibility = 'M12 6a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5m-1.78 9.3a1.87 1.87 0 0 1 3.56 0l2.25 6.92 1.94-.44-3.39-11.67c-.17-.62.26-1.23.89-1.3 3.51-.41 6-1.35 7.03-1.94l-1-1.74C20.51 5.7 17.05 7 12 7S3.49 5.7 2.5 5.13l-1 1.74c1.03.59 3.52 1.53 7.03 1.93.63.08 1.06.7.89 1.3l-3.4 11.68 1.95.44z';

var ad = 'M7 0a4 4 0 0 0-4 4v10a4 4 0 0 0 4 4h10a4 4 0 0 0 4-4V4a4 4 0 0 0-4-4zm12 4v10a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V4c0-1.1.9-2 2-2h10a2 2 0 0 1 2 2m1 17H9v2h11zM5 24a2 2 0 1 0 0-4 2 2 0 0 0 0 4';

var adGroup = 'M14 0a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V2c0-1.1.9-2 2-2zm0 2h-4v7h4zM9 13a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7c0-1.1.9-2 2-2zm0 2H5v7h4zm4 0c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2zm2 7h4v-7h-4z';

var add = 'M11 13v10h2V13h10v-2H13V1h-2v10H1v2z';

var addCircle = 'M11 17v-4H7v-2h4V7h2v4h4v2h-4v4zm13-5a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var addLayout = 'M3 19v-6h20V5a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v14a4 4 0 0 0 4 4h8v-2H5a2 2 0 0 1-2-2M5 3h6v8H3V5c0-1.1.9-2 2-2m14 0a2 2 0 0 1 2 2v6h-8V3zm1 21v-4h4v-2h-4v-4h-2v4h-4v2h4v4z';

var addPin = 'm21.3 10.7 1 1 1.4-1.4-1-1v-.01l-9-9-1.4 1.42 1 1c.7.72.7 1.87 0 2.58l-1.9 1.89-.52-.4a5 5 0 0 0-6.54.47L2.79 8.79a1 1 0 0 0 0 1.42L7.6 15l-1.94 1.93a22 22 0 0 0-3.3 4.24l-.2.33.35.35.33-.2a22 22 0 0 0 4.23-3.3L9 16.4l2.04 2.05 1.42-1.42L4.9 9.5l.84-.84a3 3 0 0 1 3.93-.28l1.91 1.44 3.12-3.11q.7-.72.96-1.62l3.24 3.24q-.9.26-1.62.96l-3.2 3.21 1.41 1.41 3.2-3.2a1.83 1.83 0 0 1 2.59 0zM20 24v-4h4v-2h-4v-4h-2v4h-4v2h4v4z';

var addSection = 'M13 17v-4h4v-2h-4V7h-2v4H7v2h4v4zM12 3l-1.83-1.83A4 4 0 0 0 7.34 0H4a4 4 0 0 0-4 4v13a4 4 0 0 0 4 4h16a4 4 0 0 0 4-4V7a4 4 0 0 0-4-4zm-.83 2H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4c0-1.1.9-2 2-2h3.34a2 2 0 0 1 1.42.59z';

var adsOverview = 'M5 3a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2zm0 2H3v4h2zm8-2a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2zm0 2h-2v4h2zm4 0c0-1.1.9-2 2-2h2a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2zm2 4h2V5h-2zm3 7H6v-2h16zM6 18h16v2H6zm-2-3a1 1 0 1 1-2 0 1 1 0 0 1 2 0m-2 4a1 1 0 1 1 2 0 1 1 0 0 1-2 0';

var adsStats = 'M16.59 3H14V1h6v6h-2V4.41l-5.3 5.3a1 1 0 0 1-1.4 0L9 7.4l-4.3 4.3-1.4-1.42 5-5a1 1 0 0 1 1.4 0L12 7.6zM5 14a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-5c0-1.1.9-2 2-2zm0 2H3v5h2zm8-2a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2v-5c0-1.1.9-2 2-2zm-2 2v5h2v-5zm6 0c0-1.1.9-2 2-2h2a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2zm4 5v-5h-2v5z';

var alert = 'm14.04 8.46-.86 4.56a1.2 1.2 0 0 1-2.36 0l-.86-4.56a2.07 2.07 0 1 1 4.08 0m-.54 8.04a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0M24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var alignBottom = 'M1 5a4 4 0 0 1 4-4h14a4 4 0 0 1 4 4v14a4 4 0 0 1-4 4H5a4 4 0 0 1-4-4zm2 0v10h18V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2';

var alignBottomCenter = 'M1 5a4 4 0 0 1 4-4h14a4 4 0 0 1 4 4v14a4 4 0 0 1-4 4H5a4 4 0 0 1-4-4zm2 0v14c0 1.1.9 2 2 2h4v-6h6v6h4a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2';

var alignBottomLeft = 'M1 5a4 4 0 0 1 4-4h14a4 4 0 0 1 4 4v14a4 4 0 0 1-4 4H5a4 4 0 0 1-4-4zm2 0v10h6v6h10a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2';

var alignBottomRight = 'M23 5a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v14a4 4 0 0 0 4 4h14a4 4 0 0 0 4-4zm-2 0v10h-6v6H5a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h14a2 2 0 0 1 2 2';

var alignMiddle = 'M1 19a4 4 0 0 0 4 4h14a4 4 0 0 0 4-4V5a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4zm2 0v-4h18v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2M3 9V5c0-1.1.9-2 2-2h14a2 2 0 0 1 2 2v4z';

var alignTop = 'M1 19a4 4 0 0 0 4 4h14a4 4 0 0 0 4-4V5a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4zm2 0V9h18v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2';

var alignTopCenter = 'M1 19a4 4 0 0 0 4 4h14a4 4 0 0 0 4-4V5a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4zm2 0V5c0-1.1.9-2 2-2h4v6h6V3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2';

var alignTopLeft = 'M1 19a4 4 0 0 0 4 4h14a4 4 0 0 0 4-4V5a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4zm2 0V9h6V3h10a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2';

var alignTopRight = 'M23 19a4 4 0 0 1-4 4H5a4 4 0 0 1-4-4V5a4 4 0 0 1 4-4h14a4 4 0 0 1 4 4zm-2 0V9h-6V3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2';

var alphabetical = 'M7.7 16.29 5.5 22H2.54l8.12-19.74h2.66L21.43 22H18.5l-2.21-5.71zM12 5.23l-3.36 8.65h6.72z';

var androidShare = 'M23 5a4 4 0 0 1-7.09 2.54l-7.98 3.73a4 4 0 0 0-.84-1.81l7.98-3.73A4.02 4.02 0 0 1 19 1a4 4 0 0 1 4 4m-4-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4m4 16a4 4 0 1 1-7.93-.73l-7.98-3.73c.42-.5.72-1.13.84-1.8l7.98 3.72A4 4 0 0 1 23 19m-4-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4M0 12a4 4 0 1 1 8 0 4 4 0 0 1-8 0m4 2a2 2 0 1 0 0-4 2 2 0 0 0 0 4';

var angledPin = 'm22.3 11.7-1-1h-.01a1.83 1.83 0 0 0-2.58 0l-1.89 1.9.4.52a5 5 0 0 1-.47 6.54l-1.54 1.55a1 1 0 0 1-1.42 0L9 16.4l-1.94 1.94a22 22 0 0 1-4.23 3.3l-.33.2-.35-.35.2-.33a22 22 0 0 1 3.3-4.24L7.6 15l-4.8-4.8a1 1 0 0 1 0-1.4l1.55-1.55a5 5 0 0 1 6.54-.47l.53.4 1.88-1.89c.72-.71.72-1.86 0-2.58l-1-1L13.71.29l9 9 1 1zm-5-2.4a4 4 0 0 1 1.61-.97l-3.24-3.24q-.26.9-.96 1.62l-3.12 3.11-1.91-1.44a3 3 0 0 0-3.93.28l-.84.84 9.59 9.59.84-.84a3 3 0 0 0 .28-3.93l-1.44-1.91z';

var animate = 'M16 15a7 7 0 1 1 2.53-.47 7 7 0 0 1-4 4 7 7 0 1 1-9.06-9.06 7 7 0 0 1 4-4Q9.01 6.66 9 8a5 5 0 1 0 7 7m0-12a5 5 0 1 0 0 10 5 5 0 0 0 0-10M8 21a5 5 0 0 0 4-2 7 7 0 0 1-7-7 5 5 0 0 0 3 9';

var api = 'M14 5H6v2h8zm3 2a1 1 0 1 0 0-2 1 1 0 0 0 0 2M7 0a5 5 0 0 0-5 5v2a5 5 0 0 0 5 5h4v2H7a5 5 0 0 0-4.93 4.15 3 3 0 1 0 2.04.06A3 3 0 0 1 7 16h4v2.17a3 3 0 1 0 2 0V16h4a3 3 0 0 1 2.9 2.21 3 3 0 1 0 2.03-.06A5 5 0 0 0 17 14h-4v-2h4a5 5 0 0 0 5-5V5a5 5 0 0 0-5-5zM4 5a3 3 0 0 1 3-3h10a3 3 0 0 1 3 3v2a3 3 0 0 1-3 3H7a3 3 0 0 1-3-3zm7 16a1 1 0 1 1 2 0 1 1 0 0 1-2 0m11 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0M2 21a1 1 0 1 1 2 0 1 1 0 0 1-2 0';

var apple = 'M21.3 18.7q-.55 1.26-1.3 2.32-1.02 1.45-1.66 2.01-1 .91-2.14.94-.81 0-1.97-.47a6 6 0 0 0-2.12-.47q-1.02 0-2.19.47-1.16.48-1.89.5-1.09.04-2.18-.97-.69-.6-1.74-2.08a14 14 0 0 1-1.84-3.65q-.77-2.25-.77-4.35 0-2.42 1.04-4.16a6.1 6.1 0 0 1 5.14-3.04q.87 0 2.29.53 1.41.53 1.81.53.3 0 2.01-.63a7 7 0 0 1 2.74-.48q3.03.24 4.54 2.39a5.1 5.1 0 0 0-2.68 4.6q.03 2.29 1.66 3.81.75.7 1.67 1.1-.2.57-.43 1.1M16.65.48q0 1.8-1.31 3.36c-1.06 1.23-2.33 1.94-3.72 1.83l-.02-.45c0-1.16.5-2.39 1.39-3.4A5 5 0 0 1 14.7.55 5 5 0 0 1 16.64 0z';

var apps = 'M4 7a3 3 0 1 0 0-6 3 3 0 0 0 0 6M3 4a1 1 0 1 1 2 0 1 1 0 0 1-2 0m1 11a3 3 0 1 0 0-6 3 3 0 0 0 0 6m-1-3a1 1 0 1 1 2 0 1 1 0 0 1-2 0m1 5a3 3 0 1 0 0 6 3 3 0 0 0 0-6m1 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0m7-13a3 3 0 1 0 0-6 3 3 0 0 0 0 6m-1-3a1 1 0 1 1 2 0 1 1 0 0 1-2 0m1 5a3 3 0 1 0 0 6 3 3 0 0 0 0-6m1 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0m-1 11a3 3 0 1 0 0-6 3 3 0 0 0 0 6m-1-3a1 1 0 1 1 2 0 1 1 0 0 1-2 0m9-19a3 3 0 1 0 0 6 3 3 0 0 0 0-6m1 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0m-1 11a3 3 0 1 0 0-6 3 3 0 0 0 0 6m-1-3a1 1 0 1 1 2 0 1 1 0 0 1-2 0m1 5a3 3 0 1 0 0 6 3 3 0 0 0 0-6m1 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0';

var arTryOn = 'M12.52.15a1 1 0 0 0-1.04 0L8.5 1.95l1 1.74L11 2.8V5h2V2.78l1.49.91 1-1.73zm6.38 3.9-1 1.73 1.1.67-2.26 1.16.91 1.78L20 8.18V10h2V6.5a1 1 0 0 0-.48-.85zM22 14h-2v1.82l-2.35-1.2-.91 1.77 2.25 1.16-1.09.67 1 1.73 2.62-1.6a1 1 0 0 0 .48-.85zm-6.51 8.04-1-1.73-1.49.9V19h-2v2.22l-1.49-.91-1 1.73 2.97 1.81a1 1 0 0 0 1.04 0zm-10.4-2.09 1-1.73-1.08-.67 2.25-1.16-.91-1.78L4 15.82V14H2v3.5a1 1 0 0 0 .48.85zM2 10h2V8.18l2.35 1.2.91-1.77-2.25-1.16 1.09-.67-1-1.73-2.62 1.6A1 1 0 0 0 2 6.5zm13.02-1.53L12 10.1 8.98 8.47l-.96 1.75L11 11.84V15h2v-3.16l2.98-1.62z';

var arrowBack = 'm6.41 12 10.3-10.3L15.29.3 3.6 12l11.7 11.7 1.42-1.4z';

var arrowCircleBack = 'M11.3 16.7 6.58 12l4.7-4.7 1.42 1.4-2.3 2.3H17v2h-6.59l2.3 2.3zM24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var arrowCircleDown = 'M16.7 12.7 12 17.42l-4.7-4.7 1.4-1.42 2.3 2.3V7h2v6.59l2.3-2.3zM24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var arrowCircleForward = 'm12.7 7.3 4.71 4.7-4.7 4.7-1.42-1.4 2.3-2.3H7v-2h6.59l-2.3-2.3zM24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var arrowCircleUp = 'M15.3 12.7 13 10.42V17h-2v-6.59l-2.3 2.3-1.4-1.42L12 6.6l4.7 4.7zM24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var arrowCounterClockwise = 'M3.34 7a10 10 0 1 1 1.62 12.1l-1.41 1.42A12 12 0 1 0 2 5.37V1H0v8h8V7z';

var arrowDoubleBack = 'M12.7 20.3 4.42 12l8.3-8.3-1.42-1.4L1.6 12l9.7 9.7zm8 0L12.42 12l8.3-8.3-1.42-1.4L9.6 12l9.7 9.7z';

var arrowDoubleForward = 'm3.3 20.8 8.29-8.3-8.3-8.3 1.42-1.4 9.7 9.7-9.7 9.7zm8 0 8.29-8.3-8.3-8.3 1.42-1.4 9.7 9.7-9.7 9.7z';

var arrowDown = 'M23.7 8.7 12 20.42.3 8.71l1.4-1.42L12 17.6 22.3 7.3z';

var arrowEnd = 'M21 0v24h-2V0zM2.3 22.3 12.58 12 2.29 1.7 3.71.3 15.4 12 3.71 23.7z';

var arrowForward = 'M8.7.3 20.42 12 8.71 23.7l-1.42-1.4L17.6 12 7.29 1.7z';

var arrowLeftCurved = 'm4.41 11 4.3 4.3-1.42 1.4L.6 10l6.7-6.7 1.42 1.4L4.4 9H18a5 5 0 0 1 5 5v6h-2v-6a3 3 0 0 0-3-3z';

var arrowNested = 'M3 4v6a3 3 0 0 0 3 3h13.59l-4.3-4.3 1.42-1.4 6.7 6.7-6.7 6.7-1.42-1.4 4.3-4.3H6a5 5 0 0 1-5-5V4z';

var arrowStart = 'M3 0v24h2V0zm18.7 22.3L11.42 12l10.3-10.3L20.29.3 8.6 12l11.7 11.7z';

var arrowUp = 'm12 3.59 11.7 11.7-1.4 1.42L12 6.4 1.7 16.71.3 15.29z';

var arrowUpLeft = 'M1 1v13h2V4.41l18.3 18.3 1.4-1.42L4.42 3H14V1z';

var arrowUpRight = 'M23 1v13h-2V4.41L2.7 22.71l-1.4-1.42L19.58 3H10V1z';

var arrowsVertical = 'M21.3 16.3 18 19.58V8h-2v11.59l-3.3-3.3-1.4 1.42 5.7 5.7 5.7-5.7zM2.7 7.7 6 4.42V16h2V4.4l3.3 3.3 1.4-1.42L7 .6 1.3 6.3z';

var aspectRatio$1 = 'M20 21a4 4 0 0 0 4-4V7a4 4 0 0 0-4-4H4a4 4 0 0 0-4 4v11a3 3 0 0 0 3 3zm2-14v10a2 2 0 0 1-2 2h-2v-7a3 3 0 0 0-3-3H2V7c0-1.1.9-2 2-2h16a2 2 0 0 1 2 2M10 19H4a2 2 0 0 1-2-2v-6h8zm2-8h3a1 1 0 0 1 1 1v7h-4z';

var audioBars = 'M18 20V4a1 1 0 1 0-2 0v16a1 1 0 1 0 2 0M7 5a1 1 0 0 0-1 1v12a1 1 0 1 0 2 0V6a1 1 0 0 0-1-1m6 4a1 1 0 1 0-2 0v6a1 1 0 1 0 2 0zm8-2v10a1 1 0 1 0 2 0V7a1 1 0 1 0-2 0M2 9a1 1 0 0 0-1 1v4a1 1 0 1 0 2 0v-4a1 1 0 0 0-1-1';

var audioMix = 'M11 8a4 4 0 0 1-3 3.87V24H6V11.87a4 4 0 0 1 0-7.74V0h2v4.13A4 4 0 0 1 11 8M5 8a2 2 0 1 0 4 0 2 2 0 0 0-4 0m11-8h2v12.13a4 4 0 0 1 0 7.74V24h-2v-4.13a4 4 0 0 1 0-7.74zm-1 16a2 2 0 1 0 4 0 2 2 0 0 0-4 0';

var audioPlaying = 'M18 20V4a1 1 0 1 0-2 0v16a1 1 0 1 0 2 0M7 7a1 1 0 0 0-1 1v12a1 1 0 1 0 2 0V8a1 1 0 0 0-1-1m6 7a1 1 0 1 0-2 0v6a1 1 0 1 0 2 0zm8-4v10a1 1 0 1 0 2 0V10a1 1 0 1 0-2 0M2 15a1 1 0 0 0-1 1v4a1 1 0 1 0 2 0v-4a1 1 0 0 0-1-1';

var bell = 'M16 19h8v-2h-.34a3.15 3.15 0 0 1-3.12-2.76l-.8-6.41a7.8 7.8 0 0 0-15.48 0l-.8 6.41A3.15 3.15 0 0 1 .34 17H0v2h8v1h.02a3.4 3.4 0 0 0 3.38 3h1.2a3.4 3.4 0 0 0 3.38-3H16zm1.75-10.92.8 6.4c.12.95.5 1.81 1.04 2.52H4.4c.55-.7.92-1.57 1.04-2.51l.8-6.41a5.8 5.8 0 0 1 11.5 0M13.4 19c.33 0 .6.27.6.6 0 .77-.63 1.4-1.4 1.4h-1.2a1.4 1.4 0 0 1-1.4-1.4c0-.33.27-.6.6-.6z';

var bellFill = 'M20.54 14.24A3.15 3.15 0 0 0 23.66 17H24v2h-8v1h-.02a3.4 3.4 0 0 1-3.38 3h-1.2a3.4 3.4 0 0 1-3.38-3H8v-1H0v-2h.34a3.15 3.15 0 0 0 3.12-2.76l.8-6.41a7.8 7.8 0 0 1 15.48 0zM10 19.6c0 .77.63 1.4 1.4 1.4h1.2c.77 0 1.4-.63 1.4-1.4a.6.6 0 0 0-.6-.6h-2.8a.6.6 0 0 0-.6.6';

var birthdayCake = 'M10.5 3.4c0-.88.67-2.4 1.5-2.4s1.5 1.52 1.5 2.4S12.83 5 12 5s-1.5-.72-1.5-1.6M1 9a3 3 0 0 1 3-3h16a3 3 0 0 1 3 3v2.5c0 1.07-.37 2.06-1 2.83V18a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4v-3.67c-.63-.77-1-1.76-1-2.83zm19 9v-1a1 1 0 0 0-1-1h-.5a4.5 4.5 0 0 1-3.25-1.39 4.5 4.5 0 0 1-6.5 0A4.5 4.5 0 0 1 5.5 16H5a1 1 0 0 0-1 1v1c0 1.1.9 2 2 2h12a2 2 0 0 0 2-2m-1.5-4a2.5 2.5 0 0 0 2.5-2.5V9a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v2.5a2.5 2.5 0 0 0 4.82.93 1 1 0 0 1 1.86 0 2.5 2.5 0 0 0 4.64 0 1 1 0 0 1 1.86 0A2.5 2.5 0 0 0 18.5 14M19 3.4c0 .88-.67 1.6-1.5 1.6S16 4.28 16 3.4 16.67 1 17.5 1 19 2.52 19 3.4m-14 0C5 2.52 5.67 1 6.5 1S8 2.52 8 3.4 7.33 5 6.5 5 5 4.28 5 3.4';

var board = 'M23 5a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v14a4 4 0 0 0 4 4h14a4 4 0 0 0 4-4zm-10 6V3h6a2 2 0 0 1 2 2v6zm8 8a2 2 0 0 1-2 2h-6v-8h8zM5 3h6v18H5a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2';

var boardStickerLarge = 'M1 5a4 4 0 0 1 4-4h14a4 4 0 0 1 4 4v7.76a4 4 0 0 1-1.17 2.83l-6.24 6.24A4 4 0 0 1 12.76 23H12v-7q0-.52.13-1H7a2 2 0 0 1-2-2V7c0-1.1.9-2 2-2h10a2 2 0 0 1 2 2v5h1a1 1 0 0 0 1-1V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h5v2H5a4 4 0 0 1-4-4zm16 7V7H7v6h6.35A4 4 0 0 1 16 12zm-1 2a2 2 0 0 0-2 2v4.57l.17-.16 6.24-6.24.16-.17zm-6 5H5v-2h5z';

var boardStickerSmall = 'M4 4a4 4 0 0 0-4 4v8a4 4 0 0 0 4 4h9v-2H4a2 2 0 0 1-2-2V8c0-1.1.9-2 2-2h16a2 2 0 0 1 2 2v2a1 1 0 0 1-1 1h-2a4 4 0 0 0-4 4v5h1.17a3 3 0 0 0 2.12-.88l4.83-4.83a3 3 0 0 0 .88-2.12V8a4 4 0 0 0-4-4zm13 13.59V15c0-1.1.9-2 2-2h2.59zM4 15a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1zm2-1v-4h4v4z';

var border = 'M15 7a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2H9a2 2 0 0 1-2-2V9c0-1.1.9-2 2-2zM1 5a4 4 0 0 1 4-4h14a4 4 0 0 1 4 4v14a4 4 0 0 1-4 4H5a4 4 0 0 1-4-4zm2 0v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2';

var borderShadow = 'm12.84 7.04.41-3.98a12 12 0 0 0-2.5 0l.41 3.98a8 8 0 0 1 1.68 0m-5.72-3q-1.16.51-2.17 1.25L7.3 8.53q.67-.5 1.45-.84zm11.94 1.25q-1.02-.74-2.18-1.25l-1.63 3.65a8 8 0 0 1 1.45.84zM2.29 7.94q-.74 1.01-1.25 2.18l3.65 1.63q.34-.78.84-1.45zm20.67 2.18a12 12 0 0 0-1.25-2.18l-3.24 2.36q.5.67.84 1.45zM12 9a6 6 0 0 0-6 6H0v2h24v-2h-6a6 6 0 0 0-6-6m4 6H8a4 4 0 0 1 8 0M3 21h18v-2H3z';

var briefcase = 'M9 11h6v2H9zM7 4c0-1.1.9-2 2-2h6a2 2 0 0 1 2 2v2h4a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8c0-1.1.9-2 2-2h4zM3 8v4.75c0 .4.22.7.51.82C5.79 14.45 8.75 15 12 15s6.21-.55 8.49-1.43c.29-.11.51-.42.51-.82V8zm0 7.51V20h18v-4.49A26 26 0 0 1 12 17a26 26 0 0 1-9-1.49M15 6V4H9v2z';

var buildingBusiness = 'M2 8.65v9.2c0 2.01 1.5 3.74 3.56 3.9A87 87 0 0 0 11 22h2l.25-.01a87 87 0 0 0 5.2-.24 3.87 3.87 0 0 0 3.55-3.9v-9.2A4 4 0 0 0 23 6V4a2 2 0 0 0-2-2H3a2 2 0 0 0-2 2v2c0 1.01.38 1.94 1 2.65M7.5 6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a1 1 0 0 1 1-1h2.5a1 1 0 0 1 1 1zm11 2a2 2 0 0 1-2-2V5a1 1 0 0 1 1-1H20a1 1 0 0 1 1 1v1a2 2 0 0 1-2 2zm.5 2a1 1 0 0 1 1 1v6.85c0 1.02-.75 1.83-1.71 1.9L16 19.9V16a4 4 0 0 0-8 0v3.9q-1.28-.07-2.29-.15A1.87 1.87 0 0 1 4 17.85V11a1 1 0 0 1 1-1h.5c1.2 0 2.27-.52 3-1.35.73.83 1.8 1.35 3 1.35h1c1.2 0 2.27-.52 3-1.35.73.83 1.8 1.35 3 1.35zm-9 9v-3a2 2 0 1 1 4 0v3a1 1 0 0 1-.87 1h-2.26a1 1 0 0 1-.87-1m3.5-15a1 1 0 0 1 1 1v1a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2V5a1 1 0 0 1 1-1z';

var businessHierarchy = 'M7 0a5 5 0 0 0-5 5v2a5 5 0 0 0 5 5h4v2H7a5 5 0 0 0-4.93 4.15 3 3 0 1 0 2.04.06A3 3 0 0 1 7 16h4v2.17a3 3 0 1 0 2 0V16h4a3 3 0 0 1 2.9 2.21 3 3 0 1 0 2.03-.06A5 5 0 0 0 17 14h-4v-2h4a5 5 0 0 0 5-5V5a5 5 0 0 0-5-5zM4 5a3 3 0 0 1 3-3h10a3 3 0 0 1 3 3v2a3 3 0 0 1-3 3H7a3 3 0 0 1-3-3zm7 16a1 1 0 1 1 2 0 1 1 0 0 1-2 0m11 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0M2 21a1 1 0 1 1 2 0 1 1 0 0 1-2 0';

var calendar = 'M7 1v3h10V1h2v3a4 4 0 0 1 4 4v11a4 4 0 0 1-4 4H5a4 4 0 0 1-4-4V8a4 4 0 0 1 4-4V1zm14 8V8a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v1zm0 3a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v7c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2z';

var calendarCheck = 'm16.2 14.2-1.4-1.4-3.8 3.79-1.8-1.8-1.4 1.42 3.2 3.2zM7 4V1H5v3a4 4 0 0 0-4 4v11a4 4 0 0 0 4 4h14a4 4 0 0 0 4-4V8a4 4 0 0 0-4-4V1h-2v3zm14 5H3V8c0-1.1.9-2 2-2h14a2 2 0 0 1 2 2zm0 3v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7a1 1 0 0 1 1-1h16a1 1 0 0 1 1 1';

var camera = 'M12 18a5 5 0 1 0 0-10 5 5 0 0 0 0 10m-3-5a3 3 0 1 1 6 0 3 3 0 0 1-6 0m10-3a1 1 0 1 0 0-2 1 1 0 0 0 0 2m-2.05-8.34A3 3 0 0 0 14.26 0H9.74a3 3 0 0 0-2.69 1.66L5.88 4H4a4 4 0 0 0-4 4v10a4 4 0 0 0 4 4h16a4 4 0 0 0 4-4V8a4 4 0 0 0-4-4h-1.88zM14.26 2a1 1 0 0 1 .9.55L16.88 6H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8c0-1.1.9-2 2-2h3.12l1.72-3.45a1 1 0 0 1 .9-.55z';

var cameraFlip = 'm13.41 6 2.3 2.3-1.42 1.4L9.6 5 14.3.3l1.42 1.4L13.4 4H19a5 5 0 0 1 5 5v6a5 5 0 0 1-5 5h-2v-2h2a3 3 0 0 0 3-3V9a3 3 0 0 0-3-3zM5 6a3 3 0 0 0-3 3v6a3 3 0 0 0 3 3h5.59l-2.3-2.3 1.42-1.4 4.7 4.7-4.7 4.7-1.42-1.4 2.3-2.3H5a5 5 0 0 1-5-5V9a5 5 0 0 1 5-5h2v2z';

var cameraRoll = 'M18 8a2 2 0 1 0-4 0 2 2 0 0 0 4 0M5 1a4 4 0 0 0-4 4v14a4 4 0 0 0 4 4h14a4 4 0 0 0 4-4V5a4 4 0 0 0-4-4zm16 4v9h-4.17a5.8 5.8 0 0 1-4.12-1.7l-.24-.24A7.04 7.04 0 0 0 3 11.63V5c0-1.1.9-2 2-2h14a2 2 0 0 1 2 2M3 19v-4.59l.94-.94a5.04 5.04 0 0 1 7.12 0l.23.24A7.8 7.8 0 0 0 16.83 16H21v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2';

var cancel = 'm12 13.41 8.3 8.3 1.4-1.42L13.42 12l8.3-8.3-1.42-1.4-8.3 8.28-8.3-8.3L2.3 3.7l8.28 8.3-8.3 8.3 1.42 1.4z';

var canonicalPin = 'm18.7 8.2-1.4-1.4-4.8 4.79-1.8-1.8-1.4 1.42 3.2 3.2zM9 1a4 4 0 0 0-4 4 4 4 0 0 0-4 4v10a4 4 0 0 0 4 4h10a4 4 0 0 0 4-4 4 4 0 0 0 4-4V5a4 4 0 0 0-4-4zm12 4v10a2 2 0 0 1-2 2H9a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h10a2 2 0 0 1 2 2M3 9c0-1.1.9-2 2-2v8a4 4 0 0 0 4 4h8a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z';

var captions = 'M4 3a4 4 0 0 0-4 4v10a4 4 0 0 0 4 4h16a4 4 0 0 0 4-4V7a4 4 0 0 0-4-4zm4.07 4.37c1.75 0 3.13.76 3.67 2.21l-1.6.82c-.34-.94-1.06-1.38-2.08-1.38-1.59 0-2.6 1.08-2.6 2.74s1.03 2.76 2.61 2.76c.94 0 1.72-.38 2.09-1.38l1.58.8c-.54 1.46-1.92 2.23-3.66 2.23a4.2 4.2 0 0 1-4.38-4.4c0-2.65 1.8-4.4 4.37-4.4m8.67 0c1.75 0 3.13.76 3.67 2.21l-1.6.82q-.53-1.4-2.08-1.38c-1.58 0-2.6 1.08-2.6 2.74s1.03 2.76 2.61 2.76c.94 0 1.72-.38 2.1-1.38l1.57.8c-.54 1.46-1.92 2.23-3.66 2.23a4.2 4.2 0 0 1-4.38-4.4c0-2.65 1.8-4.4 4.37-4.4';

var captionsOutline = 'M8.07 7.37c1.75 0 3.13.76 3.67 2.21l-1.6.82c-.34-.94-1.06-1.38-2.08-1.38-1.59 0-2.6 1.08-2.6 2.74s1.03 2.76 2.61 2.76c.94 0 1.72-.38 2.09-1.38l1.58.8c-.54 1.46-1.92 2.23-3.66 2.23a4.2 4.2 0 0 1-4.38-4.4c0-2.65 1.8-4.4 4.37-4.4m8.67 0c1.75 0 3.13.76 3.67 2.21l-1.6.82q-.53-1.4-2.08-1.38c-1.58 0-2.6 1.08-2.6 2.74s1.03 2.76 2.61 2.76c.94 0 1.72-.38 2.1-1.38l1.57.8c-.54 1.46-1.92 2.23-3.66 2.23a4.2 4.2 0 0 1-4.38-4.4c0-2.65 1.8-4.4 4.37-4.4M0 7a4 4 0 0 1 4-4h16a4 4 0 0 1 4 4v10a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4zm2 0v10c0 1.1.9 2 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2';

var cardStack = 'M9.82 1H5a4 4 0 0 0-4 4v14a4 4 0 0 0 4 4h7.84l2.45.66a4 4 0 0 0 4.9-2.83l3.63-13.52a4 4 0 0 0-2.83-4.9L13.26.34A4 4 0 0 0 9.82 1M8.41 3l-.05.17-3.62 13.52A4 4 0 0 0 6.3 21H5a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2zm1.88.68a2 2 0 0 1 2.45-1.41l7.73 2.07a2 2 0 0 1 1.41 2.45L18.26 20.3a2 2 0 0 1-2.45 1.42l-7.73-2.07a2 2 0 0 1-1.41-2.45z';

var check = 'M22.7 5.7 9 19.42l-7.7-7.7 1.4-1.42L9 16.6 21.3 4.3z';

var checkCircle = 'm10 17.41-4.7-4.7 1.4-1.42 3.3 3.3 7.3-7.3 1.4 1.42zM24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var checkCircleFill = 'M12 24a12 12 0 1 0 0-24 12 12 0 0 0 0 24m-2-6.59-4.7-4.7 1.4-1.42 3.3 3.3 7.3-7.3 1.4 1.42z';

var chevronDownCircle = 'M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20m12 10a12 12 0 1 1-24 0 12 12 0 0 1 24 0m-6.3-1.3L12 16.42l-5.7-5.7L7.7 9.3l4.3 4.3 4.3-4.3z';

var chevronLeftCircle = 'M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20m12 10a12 12 0 1 1-24 0 12 12 0 0 1 24 0m-10.7 5.7L7.58 12l5.7-5.7 1.42 1.4-4.3 4.3 4.3 4.3z';

var chevronRightCircle = 'M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20m12 10a12 12 0 1 1-24 0 12 12 0 0 1 24 0M10.7 6.3l5.71 5.7-5.7 5.7-1.42-1.4 4.3-4.3-4.3-4.3z';

var chevronUpCircle = 'm12 10.41-4.3 4.3-1.4-1.42L12 7.6l5.7 5.7-1.4 1.42z';

var circle = 'M12 24a12 12 0 1 0 0-24 12 12 0 0 0 0 24M2 12a10 10 0 1 1 20 0 10 10 0 0 1-20 0';

var circleEllipsis = 'M10 12a2 2 0 1 1 4 0 2 2 0 0 1-4 0m10 0a2 2 0 1 1-4 0 2 2 0 0 1 4 0M4 12a2 2 0 1 1 4 0 2 2 0 0 1-4 0m20 0a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var circleInformationFill = 'M24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0m-11 6v-8h-3v2h1v6zm-1-9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3';

var circleInitializing = 'M12 2q-.5 0-.98.05l-.2-2Q11.41 0 12 0a12 12 0 0 1 11.87 13.76l-1.98-.3q.1-.7.11-1.46A10 10 0 0 0 12 2m-2.9.43q-.96.29-1.81.75l-.95-1.76Q7.38.86 8.52.52zM5.66 4.27q-.76.63-1.4 1.39L2.73 4.39q.75-.92 1.67-1.67zM3.18 7.29q-.46.86-.75 1.8L.5 8.53q.35-1.15.9-2.18zm-1.13 3.73a10 10 0 0 0 .06 2.45l-1.98.29a12 12 0 0 1-.07-2.94zm21.6 3.9a12 12 0 0 1-1.36 3.25l-1.71-1.03q.75-1.25 1.12-2.7zM1.7 18.17Q.8 16.66.36 14.92l1.94-.49q.37 1.46 1.12 2.71zm19.93.98q-1.05 1.43-2.5 2.49l-1.18-1.6q1.2-.9 2.07-2.08zM4.85 21.64q-1.43-1.05-2.49-2.5l1.6-1.18q.9 1.2 2.08 2.07zm4.23 2a12 12 0 0 1-3.25-1.35l1.03-1.71q1.25.75 2.7 1.12zm9.1-1.35q-1.51.9-3.26 1.35l-.49-1.94a10 10 0 0 0 2.71-1.12zM12 24q-.9 0-1.76-.13l.3-1.98a10 10 0 0 0 2.93 0l.29 1.98Q12.9 24 12 24';

var clear = 'M16.3 17.7 12 13.42l-4.3 4.3-1.4-1.42 4.28-4.3-4.3-4.3L7.7 6.3l4.3 4.28 4.3-4.3 1.4 1.42-4.28 4.3 4.3 4.3zM24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var clips = 'm8.3 14.96 3.2-2.13a1 1 0 0 0 0-1.66L8.3 9.04a1 1 0 0 0-1.55.83v4.26a1 1 0 0 0 1.55.83M15 21v2h2v-2h3a4 4 0 0 0 4-4V7a4 4 0 0 0-4-4h-3V1h-2v2H4a4 4 0 0 0-4 4v10a4 4 0 0 0 4 4zm2-16h3a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-3zm-2 0v14H4a2 2 0 0 1-2-2V7c0-1.1.9-2 2-2z';

var clock = 'M13 5v6.59l2.7 2.7-1.4 1.42-3.3-3.3V5zm11 7a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var clockChecked = 'M12 2a10 10 0 1 0 2.27 19.74l.46 1.95q-1.33.3-2.73.31a12 12 0 1 1 12-12h-2A10 10 0 0 0 12 2m-1 3h2v6.59l2.7 2.7-1.4 1.42-3.3-3.3zm6.5 17.41-3.2-3.2 1.4-1.42 1.8 1.8 4.8-4.8 1.4 1.42z';

var cloudServer = 'M8.5 0a5.5 5.5 0 0 0-5.4 4.48A4 4 0 0 0 5 12h6v2H7a5 5 0 0 0-4.93 4.15 3 3 0 1 0 2.04.06A3 3 0 0 1 7 16h4v2.17a3 3 0 1 0 2 0V16h4a3 3 0 0 1 2.9 2.21 3 3 0 1 0 2.03-.06A5 5 0 0 0 17 14h-4v-2h6a4 4 0 0 0 .41-7.98 5.5 5.5 0 0 0-7.16-2.54A5.5 5.5 0 0 0 8.5 0M5.01 5.24a3.5 3.5 0 0 1 6.25-1.9l.56.73.77-.5q.84-.55 1.91-.57a3.5 3.5 0 0 1 3.3 2.33l.24.67H19a2 2 0 1 1 0 4H5a2 2 0 0 1-.66-3.89l.62-.22zM11 21a1 1 0 1 1 2 0 1 1 0 0 1-2 0m11 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0M2 21a1 1 0 1 1 2 0 1 1 0 0 1-2 0';

var code = 'M9.7 9.7 7.42 12l2.3 2.3-1.42 1.4L4.6 12l3.7-3.7zm9.71 2.3-3.7 3.7-1.42-1.4 2.3-2.3-2.3-2.3 1.42-1.4zm-9.4 5.84 2-12 1.98.32-2 12zM1 5a4 4 0 0 1 4-4h14a4 4 0 0 1 4 4v14a4 4 0 0 1-4 4H5a4 4 0 0 1-4-4zm2 0v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2';

var codeCheck = 'M5 3h14a2 2 0 0 1 2 2v7h2V5a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v14a4 4 0 0 0 4 4h7v-2H5a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2m3.3 5.3L4.58 12l3.7 3.7 1.42-1.4L7.4 12l2.3-2.3zm7.4 0-1.4 1.4 2.29 2.3-2.3 2.3 1.42 1.4 3.7-3.7zM12 18.15l2-12-2-.31-2 12zm10.72-2.95-1.42-1.42-4.79 4.8-1.8-1.8-1.4 1.42 3.2 3.2z';

var cog = 'M12 7a5 5 0 1 0 0 10 5 5 0 0 0 0-10m3 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0m1.13-10.29A2 2 0 0 0 14.7.31a12 12 0 0 0-5.4 0c-.73.17-1.26.74-1.43 1.4l-.58 2.14-2.14-.57a2 2 0 0 0-1.93.54 12 12 0 0 0-2.7 4.67c-.22.72.01 1.46.5 1.95L2.59 12l-1.57 1.56a2 2 0 0 0-.5 1.95 12 12 0 0 0 2.7 4.68c.51.54 1.27.72 1.93.54l2.14-.58.58 2.14c.17.67.7 1.24 1.43 1.4a12 12 0 0 0 5.4 0 2 2 0 0 0 1.43-1.4l.58-2.14 2.13.58c.67.18 1.43 0 1.94-.55a12 12 0 0 0 2.7-4.67 2 2 0 0 0-.5-1.94L21.4 12l1.57-1.56c.49-.5.71-1.23.5-1.95a12 12 0 0 0-2.7-4.67 2 2 0 0 0-1.93-.54l-2.14.57zm-6.34.54a10 10 0 0 1 4.42 0l.56 2.12a2 2 0 0 0 2.45 1.41l2.13-.57a10 10 0 0 1 2.2 3.83L20 10.59a2 2 0 0 0 0 2.83l1.55 1.55a10 10 0 0 1-2.2 3.82l-2.13-.57a2 2 0 0 0-2.44 1.42l-.57 2.12a10 10 0 0 1-4.42 0l-.57-2.12a2 2 0 0 0-2.45-1.42l-2.12.57a10 10 0 0 1-2.2-3.82L4 13.42a2 2 0 0 0 0-2.83L2.45 9.03a10 10 0 0 1 2.2-3.82l2.13.57a2 2 0 0 0 2.44-1.41z';

var collage = 'M6 6a4 4 0 0 1 4-4h9a4 4 0 0 1 4 4v9a4 4 0 0 1-4 4h-5v-2h5a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-9a2 2 0 0 0-2 2v5H6zm8.15 1h.7l.1.43a3.5 3.5 0 0 0 2.62 2.62l.43.1v.7l-.43.1a3.5 3.5 0 0 0-2.62 2.62l-.1.43h-.7l-.1-.43a3.5 3.5 0 0 0-2.62-2.62l-.43-.1v-.7l.43-.1a3.5 3.5 0 0 0 2.62-2.62zm-2.14 14.44a2.2 2.2 0 0 1-3.03.53L5 19.31l-.68.47A2.5 2.5 0 0 1 2.5 24a2.5 2.5 0 0 1-1.25-4.67l2-1.33-2-1.33a2.5 2.5 0 1 1 3.07-.45l.68.47 3.98-2.66a2.2 2.2 0 0 1 3.02.53L7 18zM2.5 22.5a1 1 0 1 0 0-2 1 1 0 0 0 0 2m0-9a1 1 0 1 0 0 2 1 1 0 0 0 0-2';

var collapse = 'M18.3 16.7 13.58 12l4.7-4.7 1.42 1.4-2.3 2.3H24v2h-6.59l2.3 2.3zm-14-1.4L6.58 13H0v-2h6.59l-2.3-2.3 1.42-1.4 4.7 4.7-4.7 4.7z';

var color = 'M12 1a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3m-.7 11.3-3 3 1.4 1.4 3-3zM12 21a8 8 0 1 0 0-16 8 8 0 0 0 0 16m-6-8a6 6 0 1 1 12 0 6 6 0 0 1-12 0m-.36-6.36A1.5 1.5 0 1 0 3.5 4.52a1.5 1.5 0 0 0 2.13 2.12M24 13a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0m-5.64-6.36A1.5 1.5 0 1 0 20.5 4.5a1.5 1.5 0 0 0-2.13 2.13m0 12.72a1.5 1.5 0 1 0 2.13 2.12 1.5 1.5 0 0 0-2.13-2.12M0 13a1.5 1.5 0 1 0 3 0 1.5 1.5 0 0 0-3 0m5.64 6.36a1.5 1.5 0 1 0-2.13 2.12 1.5 1.5 0 0 0 2.13-2.12';

var colorPalette = 'M2 12a10 10 0 1 1 20 0 3.7 3.7 0 0 1-1.64 2.98c-1.15.78-3.3 1.38-7.04.38a3.3 3.3 0 0 0-2.22.12 2.7 2.7 0 0 0-1.5 1.84 4.7 4.7 0 0 0 .68 3.42q.32.55.64.97l.01.02.16.23A10 10 0 0 1 2 12m10 12c2.48-.65 1.54-2.01.58-3.4l-.58-.88c-.86-1.44-.67-2.82.8-2.43C21.02 19.49 24 15.09 24 12a12 12 0 1 0-12 12m0-17a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3m5.66 1.46a1.5 1.5 0 1 0-2.12-2.12 1.5 1.5 0 0 0 2.12 2.12M5.5 13.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3m.84-7.16a1.5 1.5 0 1 0 2.12 2.12 1.5 1.5 0 0 0-2.12-2.12';

var colorPicker = 'M18.7 13.3a1.1 1.1 0 0 1 0-1.6l3.5-3.5a4.54 4.54 0 0 0-6.4-6.4l-3.5 3.5a1.1 1.1 0 0 1-1.6 0l-1-1-1.4 1.4 2.08 2.1a1 1 0 0 1 0 1.4l-5.94 5.95a2 2 0 0 0-.44.67l-.1.23a3.5 3.5 0 1 0 4.05 4.05l.23-.1a2 2 0 0 0 .67-.44l5.94-5.94a1 1 0 0 1 1.42 0l1.08 1.09 1 1 1.42-1.42zm2.1-6.5-3.5 3.5q-.43.42-.65.93l-3.88-3.88q.52-.22.94-.64l3.5-3.5a2.54 2.54 0 0 1 3.58 3.58m-7.42 5.4-5.94 5.95-1.47.58.03.71v.06A1.5 1.5 0 1 1 4.56 18l.7.03.6-1.47 5.93-5.94a3 3 0 0 0 .59-.83l1.83 1.83a3 3 0 0 0-.83.59';

var colorSolid = 'M24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0';

var colorSplit = 'M0 12a12 12 0 1 1 24 0 12 12 0 0 1-24 0m2 0a10 10 0 1 0 20 0z';

var compass = 'M12 14a2 2 0 1 0 0-4 2 2 0 0 0 0 4M9.42 7.24a3 3 0 0 0-2.18 2.18L5.7 15.57a2.25 2.25 0 0 0 2.73 2.73l6.15-1.54a3 3 0 0 0 2.18-2.18l1.54-6.15a2.25 2.25 0 0 0-2.73-2.73zm6.94.7-1.54 6.15a1 1 0 0 1-.73.73l-6.15 1.54a.25.25 0 0 1-.3-.3L9.18 9.9a1 1 0 0 1 .73-.73l6.15-1.54a.25.25 0 0 1 .3.3M12 24a12 12 0 1 0 0-24 12 12 0 0 0 0 24M2 12a10 10 0 1 1 20 0 10 10 0 0 1-20 0';

var compose = 'M12.53 1.06a3.5 3.5 0 0 1 4.94 0l1.47 1.46a3.5 3.5 0 0 1 0 4.95l-.82.82-.03.03-9.16 9.16a2 2 0 0 1-1.08.56l-4.3.72a2 2 0 0 1-2.3-2.3l.71-4.3a2 2 0 0 1 .56-1.1zM11 5.41l-7.07 7.07-.71 4.3 4.3-.71L14.59 9l-.68-.68-.03-.03-2.17-2.17-.03-.03zm4.31 1.48a1 1 0 0 0 1.38 0l.84-.83a1.5 1.5 0 0 0 0-2.12l-1.47-1.47a1.5 1.5 0 0 0-2.12 0l-.82.82a1 1 0 0 0-.01 1.4zM23 22H1v-2h22z';

var contrast = 'M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24m0 22V2a10 10 0 0 1 0 20';

var conversionTag = 'm10.98 22.2 4-20-1.96-.4-4 20zM.58 12l5.71 5.7 1.42-1.4L3.4 12l4.3-4.3-1.42-1.4zm17.13-5.7-1.42 1.4 4.3 4.3-4.3 4.3 1.42 1.4 5.7-5.7z';

var copyToClipboard = 'M5 5a4 4 0 0 1 4-4h10a4 4 0 0 1 4 4v10a4 4 0 0 1-4 4H9a4 4 0 0 1-4-4zm2 0v10c0 1.1.9 2 2 2h10a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2m1 16h9v2H8a7 7 0 0 1-7-7V7h2v9a5 5 0 0 0 5 5';

var creditCard = 'M4 16h6v-2H4zM4 3a4 4 0 0 0-4 4v10a4 4 0 0 0 4 4h16a4 4 0 0 0 4-4V7a4 4 0 0 0-4-4zm18 4v1H2V7c0-1.1.9-2 2-2h16a2 2 0 0 1 2 2M2 17v-7h20v7a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2';

var crop = 'M10 12a2 2 0 1 1 4 0 2 2 0 0 1-4 0M6 4h12V1h2v3h3v2h-3v12a2 2 0 0 1-2 2H6v3H4v-3H1v-2h3V6c0-1.1.9-2 2-2m0 14h12V6H6z';

var cutout = 'M9 1v2H5a2 2 0 0 0-2 2v4H1V5a4 4 0 0 1 4-4zm6 0h4a4 4 0 0 1 4 4v4h-2V5a2 2 0 0 0-2-2h-4zm8 18a4 4 0 0 1-4 4h-4v-2h4a2 2 0 0 0 2-2v-4h2zm-10.99 2.44a2.2 2.2 0 0 1-3.03.53L5 19.31l-.68.47A2.5 2.5 0 0 1 2.5 24a2.5 2.5 0 0 1-1.25-4.67l2-1.33-2-1.33a2.5 2.5 0 1 1 3.07-.45l.68.47 3.98-2.66a2.2 2.2 0 0 1 3.02.53L7 18zM2.5 22.5a1 1 0 1 0 0-2 1 1 0 0 0 0 2m0-9a1 1 0 1 0 0 2 1 1 0 0 0 0-2';

var dash = 'M24 13H0v-2h24z';

var dataSource = 'M22 4.5c0-.86-.45-1.57-1.03-2.1a7 7 0 0 0-2.24-1.3A19 19 0 0 0 12 0C9.42 0 7.04.4 5.27 1.1c-.88.34-1.66.77-2.24 1.3A3 3 0 0 0 2 4.5V20c0 .85.52 1.5 1.09 1.95.58.46 1.36.83 2.23 1.12 1.76.59 4.12.93 6.68.93s4.92-.34 6.68-.93c.87-.3 1.65-.66 2.23-1.12.57-.45 1.09-1.1 1.09-1.95zM6 2.96C7.48 2.38 9.6 2 12 2s4.51.38 6 .96q1.12.44 1.62.91c.33.3.38.52.38.63s-.05.32-.38.63q-.5.46-1.62.91c-1.48.58-3.6.96-6 .96s-4.52-.38-6-.96a5 5 0 0 1-1.62-.91C4.05 4.83 4 4.6 4 4.5s.05-.32.38-.63q.5-.46 1.62-.91M20 10v.02l-.04.06q-.05.1-.29.3-.5.4-1.62.8c-1.5.5-3.64.82-6.05.82s-4.55-.33-6.05-.83a6 6 0 0 1-1.62-.79 1 1 0 0 1-.3-.3L4 10.02V7.3a9 9 0 0 0 1.27.6C7.04 8.6 9.42 9 12 9s4.96-.4 6.73-1.1q.68-.25 1.27-.6zm0 5v.02l-.04.06q-.05.1-.29.3-.5.4-1.62.8c-1.5.5-3.64.82-6.05.82s-4.55-.33-6.05-.83a6 6 0 0 1-1.62-.79 1 1 0 0 1-.3-.3L4 15.02v-2.49q.6.3 1.32.54c1.76.59 4.12.93 6.68.93s4.92-.34 6.68-.93q.71-.24 1.32-.54zm0 5v.02l-.04.06q-.05.1-.29.3-.5.4-1.62.8c-1.5.5-3.64.82-6.05.82s-4.55-.33-6.05-.83a6 6 0 0 1-1.62-.79 1 1 0 0 1-.3-.3L4 20.02v-2.49q.6.3 1.32.54c1.76.59 4.12.93 6.68.93s4.92-.34 6.68-.93q.71-.24 1.32-.54z';

var design = 'M15.01 19.2a3.6 3.6 0 0 1-3.13-1.33l-.15-.18-3.8 3.8a2 2 0 0 1-1.03.55l-3.97.8a1.5 1.5 0 0 1-1.76-1.77l.79-3.97a2 2 0 0 1 .55-1.02l4.34-4.35L1.1 4.7a2.51 2.51 0 0 1 3.66-3.42l6.5 6.07 5.63-5.63a3 3 0 0 1 4.24 0l1.17 1.17a3 3 0 0 1 0 4.24L21.12 8.3l-4.28 4.29.35.32c.88.83 1.26 2 1.12 3.1h.25a3.53 3.53 0 0 1 3.55 3.5v1.13q0 .18.05.37v.02a1.5 1.5 0 0 0 .4.67l.26.25a.62.62 0 0 1-.44 1.06h-3.82A3.53 3.53 0 0 1 15 19.2m5.87-13.5a1 1 0 0 0 0-1.4L19.7 3.11a1 1 0 0 0-1.42 0L17.12 4.3a1 1 0 0 0 0 1.42l1.17 1.17a1 1 0 0 0 1.42 0zM15.7 7.13l-.71-.7L3.92 17.48l-.65 3.24 3.24-.65L17.59 9zM9.83 8.76 3.38 2.73a.51.51 0 0 0-.74.7l5.63 6.88zm3.32 7.5.27.34a1.64 1.64 0 1 0 2.4-2.24l-.4-.37zM17 19.5c0 .8.67 1.5 1.56 1.5h1.57l-.02-.37V19.5c0-.8-.67-1.5-1.55-1.5-.9 0-1.56.7-1.56 1.5';

var desktop = 'M5 2a4 4 0 0 0-4 4v8a4 4 0 0 0 4 4h6v2a1 1 0 0 1-1 1H8v2h8v-2h-2a1 1 0 0 1-1-1v-2h6a4 4 0 0 0 4-4V6a4 4 0 0 0-4-4zM3 6c0-1.1.9-2 2-2h14a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z';

var diagnostics = 'M11 21c2.4 0 4.6-.85 6.33-2.26l4.71 4.72 1.42-1.42-4.72-4.71A10 10 0 1 0 11 21m0-2a8 8 0 0 1-7.75-6H5a1 1 0 0 0 .9-.55l.56-1.14 2.13 4.6a1 1 0 0 0 1.82.01l2.62-5.62 1.08 2.15A1 1 0 0 0 15 13h3.75A8 8 0 0 1 11 19m4.62-8-1.73-3.45a1 1 0 0 0-1.8.03l-2.58 5.54-2.1-4.54a1 1 0 0 0-1.8-.03L4.38 11H3a8 8 0 1 1 16 0z';

var directionalArrowLeft = 'm4.41 13 6.3 6.3-1.42 1.4L.6 12l8.7-8.7 1.42 1.4L4.4 11H24v2z';

var directionalArrowRight = 'm14.7 3.3 8.71 8.7-8.7 8.7-1.42-1.4 6.3-6.3H0v-2h19.59l-6.3-6.3z';

var download = 'M16.3 7.8 13 11.08V0h-2v11.09l-3.3-3.3-1.4 1.42 5.7 5.7 5.7-5.7zM2 18v-5H0v5a4 4 0 0 0 4 4h16a4 4 0 0 0 4-4v-5h-2v5a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2';

var dragDrop = 'M14.95.26a3.2 3.2 0 0 0-4.08 2.08L9.24 7.56 6.57 6.53a2.7 2.7 0 0 0-3.2.87c-.46.62-1.02 1.5-1.48 2.55-.53 1.2-.84 3.11-.73 5.18a13 13 0 0 0 2 6.42l.3.45H22v-2c-.9 0-1.55-.4-2.06-1.12a7 7 0 0 1-1.06-3.02q-.13-.98-.1-1.91v-.65a3.3 3.3 0 0 0-2.03-2.85l-2.26-.87 2.34-4.9A3.2 3.2 0 0 0 14.95.26M4.43 12.02l11.15 4.18.05.02 1.37.51A8.5 8.5 0 0 0 18.28 20h-7.96c-.4-.3-.93-.8-1.38-1.44A4.5 4.5 0 0 1 8 16H6a6.4 6.4 0 0 0 1.51 4H4.55c-.9-1.54-1.3-3.32-1.4-4.98-.07-1.31.06-2.5.28-3.37l.94.35zm10.6-8.2-3.27 6.85 4.27 1.64c.4.16.72.6.76 1.18v.17l-.01.22q-.01.24-.2.39-.16.11-.29.06l-11.2-4.2a1 1 0 0 1-.5-.5.6.6 0 0 1 .06-.57l.32-.47c.17-.22.5-.34.88-.19l4.66 1.8 2.27-7.26a1.2 1.2 0 1 1 2.24.88M21.3 5h-.6l-.09.37a3 3 0 0 1-2.24 2.24L18 7.7v.6l.37.09a3 3 0 0 1 2.24 2.24l.09.37h.6l.09-.37a3 3 0 0 1 2.24-2.24L24 8.3v-.6l-.37-.09a3 3 0 0 1-2.24-2.24z';

var draw = 'M3.85 2.7c-.8.47-1.6 1.3-2.05 1.9L.2 3.4A10 10 0 0 1 2.84.97a4 4 0 0 1 1.92-.6c.76 0 1.48.33 2.02 1 .46.58.56 1.25.47 1.87a5 5 0 0 1-.64 1.72c-.52.93-1.3 1.94-2.04 2.88q-.15.22-.31.4a14 14 0 0 0-1.87 2.86c-.15.38-.16.6-.14.73.02.07.06.18.28.32.19.12.4.15.73.03q.57-.2 1.42-1a37 37 0 0 0 3.67-4.49l.05-.06a35 35 0 0 1 3.78-4.59 5.5 5.5 0 0 1 2.07-1.3 2.5 2.5 0 0 1 2.4.5c.81.7.92 1.68.74 2.55a9 9 0 0 1-1.18 2.7c-1.08 1.77-2.76 3.84-4.39 5.85l-.23.29a52 52 0 0 0-4.36 5.9q-.73 1.29-.81 2c-.06.43.05.57.18.67.17.12.35.17.66.08q.55-.15 1.45-.88c1.19-1 2.52-2.56 3.97-4.25v-.01a41 41 0 0 1 4.38-4.64 8 8 0 0 1 2.29-1.43c.8-.3 1.7-.37 2.56.02q1.13.5 1.61 1.55c.32.66.4 1.4.33 2.13a10.5 10.5 0 0 1-1.77 4.5 16 16 0 0 1-3.59 3.92C17.14 23.23 15.56 24 14 24v-2c.94 0 2.09-.49 3.28-1.4 1.17-.9 2.28-2.13 3.12-3.43a8.5 8.5 0 0 0 1.45-3.58 2 2 0 0 0-.13-1.1q-.15-.35-.63-.58c-.26-.11-.59-.13-1.05.04q-.73.27-1.7 1.08a39 39 0 0 0-4.13 4.4l-.1.12a38 38 0 0 1-4.13 4.39 6 6 0 0 1-2.16 1.26c-.8.23-1.66.17-2.42-.4-.87-.65-1.09-1.6-.97-2.53.12-.87.54-1.81 1.07-2.74a53 53 0 0 1 4.53-6.16l.19-.23a60 60 0 0 0 4.28-5.7q.78-1.28.93-2.04c.1-.47-.02-.59-.08-.64-.17-.15-.3-.17-.53-.1q-.45.1-1.28.85a34 34 0 0 0-3.58 4.37l-.04.06a38 38 0 0 1-3.86 4.7 7 7 0 0 1-2.11 1.42c-.8.3-1.67.3-2.48-.21A2.5 2.5 0 0 1 .29 12.2c-.12-.65.02-1.3.24-1.85a16 16 0 0 1 2.15-3.33q.15-.22.32-.42c.74-.96 1.43-1.84 1.86-2.62q.37-.67.41-1.03.03-.28-.05-.34c-.16-.2-.3-.24-.46-.24q-.3-.01-.91.32';

var dropbox = 'm0 5.6 6-3.85 6 3.84-6 3.85zm6 3.84 6 3.84-6 3.85-6-3.85zm6-3.85 6-3.84 6 3.84-6 3.85 6 3.84-6 3.85-6-3.85 6-3.84zm0 16.66-6-3.84 6-3.85 6 3.85z';

var duplicate = 'M13 9V6h2v3h3v2h-3v3h-2v-3h-3V9zM5 5a4 4 0 0 1 4-4h10a4 4 0 0 1 4 4v10a4 4 0 0 1-4 4H9a4 4 0 0 1-4-4zm2 0v10c0 1.1.9 2 2 2h10a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2m1 16h9v2H8a7 7 0 0 1-7-7V7h2v9a5 5 0 0 0 5 5';

var edit = 'M22.7 8.7a4 4 0 0 0-.11-5.53l-1.76-1.76a4 4 0 0 0-5.53-.11l-.08.07-.05.04L2.53 14.06a2 2 0 0 0-.57 1.13l-.76 5.35a2 2 0 0 0 2.26 2.26l5.35-.76a2 2 0 0 0 1.13-.57L22.08 9.33l.04-.04zm-3.4-.8-3.2-3.2a1 1 0 0 1 .02-1.4l.5-.5a2 2 0 0 1 2.8.03l1.75 1.76a2 2 0 0 1 0 2.82l-.49.5a1 1 0 0 1-1.37-.02M14.7 6.1l.02.02 3.17 3.17.02.02.69.69L8.53 20.06l-5.35.76.76-5.35L14 5.41z';

var ellipsis = 'M3 10a2 2 0 1 0 0 4 2 2 0 0 0 0-4m9 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4m9 4a2 2 0 1 0 0-4 2 2 0 0 0 0 4';

var envelope = 'M0 7a4 4 0 0 1 4-4h16a4 4 0 0 1 4 4v10a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4zm2 0c0 .25.14.48.36.6L12 12.86l9.64-5.26A.7.7 0 0 0 22 7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2m10 8.14L2 9.68V17c0 1.1.9 2 2 2h16a2 2 0 0 0 2-2V9.68z';

var erase = 'M16.62 2.2a3 3 0 0 0-4.24 0L2 12.6a3.4 3.4 0 0 0 0 4.82L6.59 22c.64.64 1.5 1 2.41 1h13v-2h-9.59l9.38-9.38a3 3 0 0 0 0-4.24zM11.8 17.39 6.62 12.2a3 3 0 0 0-.83-.59l8-8a1 1 0 0 1 1.42 0l5.17 5.17a1 1 0 0 1 0 1.42l-8 8a3 3 0 0 0-.59-.83m-8-3.76a1 1 0 0 1 1.42 0l5.17 5.17a1 1 0 0 1 0 1.42l-.38.38a1.4 1.4 0 0 1-2 0L3.41 16a1.4 1.4 0 0 1 0-2l.3-.3z';

var eraseAuto = 'M5.05.44a3.5 3.5 0 0 1-2.62 2.6L2 3.16v.7l.43.1a3.5 3.5 0 0 1 2.62 2.62l.1.43h.7l.1-.43a3.5 3.5 0 0 1 2.62-2.62l.43-.1v-.7l-.43-.1A3.5 3.5 0 0 1 5.95.44L5.85 0h-.7zM21.5 14a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3m-2.2 4h-.6l-.09.37a3 3 0 0 1-2.24 2.24l-.37.09v.6l.37.09a3 3 0 0 1 2.24 2.24l.09.37h.6l.09-.37a3 3 0 0 1 2.24-2.24l.37-.09v-.6l-.37-.09a3 3 0 0 1-2.24-2.24zm-7.48 3.6 9.97-9.98a3 3 0 0 0 0-4.24L16.62 2.2a3 3 0 0 0-4.24 0L2 12.59a3.4 3.4 0 0 0 0 4.82L6.59 22a3.4 3.4 0 0 0 4.82 0l.3-.3.08-.08zm-1.43-1.4-.39.39a1.4 1.4 0 0 1-2 0L3.41 16a1.4 1.4 0 0 1 0-2l.3-.3.08-.08a1 1 0 0 1 1.42 0l5.17 5.17a1 1 0 0 1 .01 1.4m1.4-2.82L6.62 12.2a3 3 0 0 0-.83-.59l8-8a1 1 0 0 1 1.42 0l5.17 5.17a1 1 0 0 1 0 1.42l-8 8a3 3 0 0 0-.59-.83';

var etsy = 'M8.9 3.24c0-.3.03-.48.54-.48h6.78c1.19 0 1.84 1.02 2.32 2.93l.38 1.53h1.16c.2-4.34.38-6.22.38-6.22s-2.9.33-4.62.33H7.15L2.5 1.18v1.26l1.57.3c1.1.2 1.36.44 1.45 1.46 0 0 .1 2.99.1 7.92s-.1 7.9-.1 7.9c0 .89-.35 1.22-1.45 1.43l-1.57.3V23l4.65-.15h7.77c1.75 0 5.8.15 5.8.15.1-1.08.7-5.95.78-6.49h-1.1l-1.15 2.66c-.92 2.1-2.26 2.25-3.74 2.25H11.1c-1.49 0-2.2-.6-2.2-1.89v-6.81s3.3 0 4.36.09c.83.06 1.33.3 1.6 1.46l.36 1.56h1.27l-.09-3.92.18-3.94H15.3l-.4 1.73c-.27 1.13-.44 1.34-1.6 1.46-1.51.15-4.39.12-4.39.12z';

var expand = 'M15.3 6.7 13 4.42V11h-2V4.41l-2.3 2.3-1.4-1.42L12 .6l4.7 4.7zm1.4 12L12 23.42l-4.7-4.7 1.4-1.42 2.3 2.3V13h2v6.59l2.3-2.3z';

var eye = 'M12 9a3 3 0 1 0 0 6 3 3 0 0 0 0-6m11.8 3.4a.9.9 0 0 0 0-.8c-.21-.43-.63-1.19-1.23-2.08C20.77 6.86 17.24 3 12 3 6.65 3 3.1 7.02 1.32 9.69.78 10.5.4 11.19.19 11.6a.9.9 0 0 0 0 .8 23 23 0 0 0 1.24 2.08C3.23 17.14 6.76 21 12 21c5.35 0 8.9-4.02 10.68-6.69m-1.66-1.11a17 17 0 0 1-3.25 3.63A9.2 9.2 0 0 1 12 19a9.2 9.2 0 0 1-5.77-2.17q-.54-.43-1.02-.9c-.93-.92-1.68-1.9-2.23-2.73a2.1 2.1 0 0 1 0-2.4 17 17 0 0 1 3.25-3.63A9.2 9.2 0 0 1 12 5c2.28 0 4.21.92 5.77 2.17q.54.43 1.02.9c.93.92 1.68 1.9 2.23 2.73.49.74.49 1.66 0 2.4';

var eyeHide = 'm.3 1.7 22 22 1.4-1.4-22-22zm23.5 10.7a.9.9 0 0 0 0-.8c-.21-.43-.63-1.19-1.23-2.08C20.77 6.86 17.24 3 12 3c-1.46 0-2.78.3-3.97.79L9.6 5.35A8 8 0 0 1 12 5c2.28 0 4.21.92 5.77 2.17q.54.43 1.02.9c.93.92 1.68 1.9 2.23 2.73.49.74.49 1.66 0 2.4a17 17 0 0 1-1.56 2.02l1.42 1.42c.73-.8 1.33-1.62 1.8-2.33zM2.99 10.8c.41-.62.93-1.32 1.56-2.02L3.12 7.36A20 20 0 0 0 .2 11.6a.9.9 0 0 0 0 .8 23 23 0 0 0 1.24 2.08C3.23 17.14 6.76 21 12 21c1.46 0 2.78-.3 3.97-.79l-1.57-1.56q-1.12.34-2.4.35a9.2 9.2 0 0 1-5.77-2.17q-.54-.43-1.02-.9c-.93-.92-1.68-1.9-2.23-2.73a2.1 2.1 0 0 1 0-2.4';

var faceHappy = 'M7 8.5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0m10 0a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m-.38 5.41A5 5 0 0 1 7.1 13c-.11-.54.35-.99.9-.99h8c.55 0 1.01.45.9 1a5 5 0 0 1-.28.91M24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var faceNeutral = 'M7 10.5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0m10 0a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m-.2 3.52.4 1.96a26 26 0 0 1-10.4 0l.4-1.96a24 24 0 0 0 9.6 0M24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var faceSad = 'M7 10.5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0m10 0a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m-.64 6.27A6.8 6.8 0 0 0 12 15q-2.18-.02-4.36 1.77l-1.28-1.54A8.8 8.8 0 0 1 12 13c2 0 3.91.8 5.64 2.23zM24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var faceSmiley = 'M7 8.5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0m10 0a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m.64 4.27A8.8 8.8 0 0 1 12 15c-2 0-3.91-.8-5.64-2.23l1.28-1.54A6.8 6.8 0 0 0 12 13q2.18.02 4.36-1.77zM24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var faceSmileyOutline = 'M7 8.5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0m10 0a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m.64 4.27A8.8 8.8 0 0 1 12 15c-2 0-3.91-.8-5.64-2.23l1.28-1.54A6.8 6.8 0 0 0 12 13q2.18.02 4.36-1.77zM24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var faceSmileyPlus = 'M12 2a10 10 0 1 0 2.5 19.69l.49 1.93A12.02 12.02 0 0 1 0 12a12 12 0 1 1 23.62 2.99l-1.93-.5A10.02 10.02 0 0 0 12 2m-2 6.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m4 0a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0M16 21v-2h3v-3h2v3h3v2h-3v3h-2v-3zm1.64-8.23A8.8 8.8 0 0 1 12 15c-2 0-3.91-.8-5.64-2.23l1.28-1.54A6.8 6.8 0 0 0 12 13q2.18.02 4.36-1.77z';

var faceTryon = 'M12 2a10 10 0 1 0 2.5 19.69l.49 1.93A12.02 12.02 0 0 1 0 12a12 12 0 1 1 23.62 2.99l-1.93-.5A10.02 10.02 0 0 0 12 2m-2 6.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m4 0a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0m4.6 6.5h.8l.12.5a4 4 0 0 0 2.98 2.98l.5.12v.8l-.5.12a4 4 0 0 0-2.98 2.98l-.12.5h-.8l-.12-.5a4 4 0 0 0-2.98-2.98l-.5-.12v-.8l.5-.12a4 4 0 0 0 2.98-2.98zm-.96-2.23A8.8 8.8 0 0 1 12 15c-2 0-3.91-.8-5.64-2.23l1.28-1.54A6.8 6.8 0 0 0 12 13q2.18.02 4.36-1.77z';

var facebook = 'M0 12a12.1 12.1 0 0 0 10.02 11.88l.07-.06h-.01v-8.46h-3V12h3V9.36c0-3 1.92-4.68 4.68-4.68.84 0 1.8.12 2.64.24v3.06h-1.56c-1.44 0-1.8.72-1.8 1.68V12h3.18l-.54 3.36h-2.64v8.46l-.11.02.05.04A12.1 12.1 0 0 0 24 12c0-6.6-5.4-12-12-12S0 5.4 0 12';

var fade = 'M2 6h4V2H2zm8 0H6v4H2v4h4v4H2v4h4v-4h4v4h4v-4h4v4h4v-4h-4v-4h4v-4h-4V6h4V2h-4v4h-4V2h-4zm0 4V6h4v4zm0 4H6v-4h4zm4 0v4h-4v-4zm0 0v-4h4v4z';

var fileBox = 'M8 14h8v-2H8zM5 2a4 4 0 0 0-4 4v2a2 2 0 0 0 1.02 1.74L2 10v8a4 4 0 0 0 4 4h12a4 4 0 0 0 4-4v-8l-.02-.26A2 2 0 0 0 23 8V6a4 4 0 0 0-4-4zM3 8V6c0-1.1.9-2 2-2h14a2 2 0 0 1 2 2v2zm16 2a1 1 0 0 1 1 1v7a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-7a1 1 0 0 1 1-1z';

var fileUnknown = 'M22 20a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4V7.24a4 4 0 0 1 1.17-2.83L7.1.5A1.7 1.7 0 0 1 10 1.7V4a4 4 0 0 1-4 4H5a1 1 0 0 0-1 1v11c0 1.1.9 2 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-6V0h6a4 4 0 0 1 4 4zM8 4V2.41L4.59 5.83 4.43 6H6a2 2 0 0 0 2-2m3.33 11.83c0-1.04.4-1.65 1.28-2.26l.22-.16c.64-.43.87-.73.87-1.18 0-.59-.48-.95-1.24-.95-.88 0-1.41.5-1.5 1.5l-1.82-.36c.14-1.74 1.4-2.77 3.38-2.77 1.96 0 3.13.85 3.13 2.34 0 .87-.33 1.64-1.38 2.36l-.22.15c-.78.52-.96.8-.96 1.47v.1h-1.76zm.94 1.01c.64 0 1.1.48 1.1 1.12s-.46 1.1-1.1 1.1-1.1-.46-1.1-1.1.46-1.12 1.1-1.12';

var fillOpaque = 'M18 5a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1zM1 5a4 4 0 0 1 4-4h14a4 4 0 0 1 4 4v14a4 4 0 0 1-4 4H5a4 4 0 0 1-4-4zm2 0v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2';

var fillTransparent = 'M6 6h3v3H6zm6 0h3v3h3v3h-3v3h3v3h-3v-3h-3v3H9v-3H6v-3h3V9h3zm0 6h3V9h-3zm-3 0v3h3v-3zM1 5a4 4 0 0 1 4-4h14a4 4 0 0 1 4 4v14a4 4 0 0 1-4 4H5a4 4 0 0 1-4-4zm2 0v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2';

var filter = 'M19.87 8H24V6h-4.13a4 4 0 0 0-7.74 0H0v2h12.13a4 4 0 0 0 7.74 0M18 7a2 2 0 1 1-4 0 2 2 0 0 1 4 0m-6.13 9a4 4 0 0 0-7.74 0H0v2h4.13a4 4 0 0 0 7.74 0H24v-2zM10 17a2 2 0 1 1-4 0 2 2 0 0 1 4 0';

var flag = 'M4 1v1.82l.5-.08L8.85 2l3.67-.6A3 3 0 0 1 16 4.35v.2l6.78-1.54a1 1 0 0 1 1.06 1.53l-3.59 5.44 3.5 4a1 1 0 0 1-.57 1.65l-10.65 1.92A3 3 0 0 1 9 14.6v-.22l-5 .95V22H2V1zm7 12.2v1.4a1 1 0 0 0 1.18 1l8.9-1.62-3.33-3.82 3.05-4.63L14 7.07v-2.7a1 1 0 0 0-1.16-1l-8 1.34a1 1 0 0 0-.84.98v6.41a1 1 0 0 0 1.19.98l4.62-.88 1.19-.23z';

var flame = 'm4.09 6.59-.04.03-.03.03C2.54 8.27 1 10.73 1 13.5 1 19.3 6.02 24 12 24s11-4.7 11-10.5c0-.99-.19-2.17-.46-3.23-.27-1-.68-2.19-1.29-3a2.35 2.35 0 0 0-3.5-.4A11.1 11.1 0 0 0 8.41.06C6.45-.14 5.17 1.5 5.15 3.04Q5.14 5.53 4.1 6.59m11.46 14.7A6 6 0 0 0 16 19c0-2.76-1.8-5-4-5s-4 2.24-4 5a6 6 0 0 0 .45 2.3A8.6 8.6 0 0 1 3 13.5C3 11.45 4.17 9.45 5.5 8c1.25-1.25 1.64-3.1 1.66-4.93 0-.58.47-1.07 1.05-1 4.83.5 7.66 3.95 8.18 7.38.18 1.2.07 2.4-.33 3.47a7 7 0 0 0 2.38-3.16 10 10 0 0 0 .36-.98c.13-.45.56-.71.84-.33q.22.29.4.71a8 8 0 0 1 .39 1.02c.34 1.1.57 2.39.57 3.32a8.6 8.6 0 0 1-5.45 7.8M14 19c0 2.1-1.29 3-2 3s-2-.9-2-3 1.29-3 2-3 2 .9 2 3';

var flash = 'M13.06 3.25 5 14h7.28l-1.64 6.57L18.94 10H11.8zM12.52.63a1.59 1.59 0 0 1 2.83 1.25L14.2 8h4.74a2 2 0 0 1 1.57 3.24L10.96 23.4a1.57 1.57 0 0 1-2.75-1.35L9.7 16H5a2 2 0 0 1-1.6-3.2z';

var flashAutomatic = 'M13.8 0c-.5 0-.98.24-1.28.63L3.4 12.8A2 2 0 0 0 5 16h4.72L8.2 22.05a1.57 1.57 0 0 0 2.75 1.35l9.56-12.16A2 2 0 0 0 18.94 8H14.2l1.15-6.12A1.6 1.6 0 0 0 13.8 0M5 14l8.06-10.75L11.79 10h7.15l-8.3 10.57L12.28 14zm13.72 2-2.89 8h1.92l.55-1.7h3.23l.55 1.7H24l-2.9-8zm2.3 4.79H18.8l1.11-3.4z';

var flashSlash = 'M18.94 8H14.2l1.15-6.12A1.59 1.59 0 0 0 12.52.63L9.25 5l1.42 1.43 2.39-3.18-.88 4.69L14.24 10h4.7l-2.07 2.63 1.43 1.43 2.21-2.82A2 2 0 0 0 18.94 8m-8.3 12.57 1.14-4.55L9.76 14H5l2.04-2.72L5.6 9.85 3.4 12.8A2 2 0 0 0 5 16h4.72L8.2 22.05a1.57 1.57 0 0 0 2.75 1.35l3.6-4.6-1.42-1.42zM.29 1.7l22 22 1.42-1.42-22-22z';

var flashlight = 'M5 1a4 4 0 0 0-4 4v4h2V5c0-1.1.9-2 2-2h4V1zm10 0v2h4a2 2 0 0 1 2 2v4h2V5a4 4 0 0 0-4-4zM1 19a4 4 0 0 0 4 4h4v-2H5a2 2 0 0 1-2-2v-4H1zm18 4a4 4 0 0 0 4-4v-4h-2v4a2 2 0 0 1-2 2h-4v2zm-3.1-8.52a6 6 0 1 0-1.41 1.41l2.8 2.82 1.42-1.42zM7 11a4 4 0 1 1 8 0 4 4 0 0 1-8 0';

var flipHorizontal = 'M5.37 23a4 4 0 0 1-3.6-5.73L8.4 3.49a4 4 0 0 1 7.2 0l6.63 13.78a4 4 0 0 1-3.6 5.73zM12 21V3.23c-.72 0-1.44.37-1.8 1.13L3.57 18.13A2 2 0 0 0 5.37 21z';

var flipVertical = 'M1 5.37a4 4 0 0 1 5.73-3.6l13.78 6.62a4 4 0 0 1 0 7.21L6.73 22.23A4 4 0 0 1 1 18.63zM3 12h17.77c0-.72-.37-1.44-1.13-1.8L5.87 3.57A2 2 0 0 0 3 5.37z';

var folder = 'M11.17 5 8.76 2.59l1.41-1.42L12 3h8a4 4 0 0 1 4 4v10a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4h3.34a4 4 0 0 1 2.83 1.17L8.76 2.6A2 2 0 0 0 7.34 2H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2z';

var folderFill = 'M7.34 1H4a4 4 0 0 0-4 4v13a4 4 0 0 0 4 4h16a4 4 0 0 0 4-4V8a4 4 0 0 0-4-4h-8l-1.83-1.83A4 4 0 0 0 7.34 1';

var forward = 'M2 4.99v14.02c0 .8.81 1.27 1.41.81l9.2-7c.52-.4.52-1.24 0-1.63l-9.2-7.01c-.6-.46-1.41.01-1.41.81m12.41-.81c-.6-.46-1.41.01-1.41.81v14.02c0 .8.81 1.27 1.41.81l9.2-7c.52-.4.52-1.24 0-1.63z';

var gauge = 'M11 5a1 1 0 1 1 2 0 1 1 0 0 1-2 0m-5 7a1 1 0 1 1-2 0 1 1 0 0 1 2 0m12 0a1 1 0 1 1 2 0 1 1 0 0 1-2 0m-2.94-.57a4 4 0 1 1-1.63-1.16l2.74-3.83a1 1 0 1 1 1.64 1.14zM12 16a2 2 0 1 0 0-4 2 2 0 0 0 0 4M8 7a1 1 0 1 1-2 0 1 1 0 0 1 2 0m16 5a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var ghost = 'M8.5 6C7.67 6 7 7.12 7 8.5S7.67 11 8.5 11 10 9.88 10 8.5 9.33 6 8.5 6m7 5c.83 0 1.5-1.12 1.5-2.5S16.33 6 15.5 6 14 7.12 14 8.5s.67 2.5 1.5 2.5M17 21l.24.16a5 5 0 0 0 2.77.84h.68a2 2 0 0 0 1.98-2.28l-.55-3.88a12 12 0 0 1-.12-1.7V10a10 10 0 1 0-20 0v4.15a12 12 0 0 1-.12 1.7l-.55 3.87A2 2 0 0 0 3.3 22h.68a5 5 0 0 0 2.77-.84L7 21l1 1.2a5 5 0 0 0 3.84 1.8h.32A5 5 0 0 0 16 22.2zM5.65 19.5a3 3 0 0 1-1.66.5H3.3l.55-3.87A14 14 0 0 0 4 14.15V10a8 8 0 1 1 16 0v4.15a14 14 0 0 0 .14 1.98L20.7 20h-.68a3 3 0 0 1-1.66-.5l-1.74-1.16-2.15 2.58a3 3 0 0 1-2.3 1.08h-.32a3 3 0 0 1-2.3-1.08L7.4 18.34z';

var ghostFill = 'M12 0A10 10 0 0 0 2 10v4.15a12 12 0 0 1-.12 1.7l-.55 3.87A2 2 0 0 0 3.3 22h.68a5 5 0 0 0 2.77-.84L7 21l1 1.2a5 5 0 0 0 3.84 1.8h.32A5 5 0 0 0 16 22.2l1-1.2.24.16a5 5 0 0 0 2.77.84h.68a2 2 0 0 0 1.98-2.28l-.55-3.88a12 12 0 0 1-.12-1.7V10A10 10 0 0 0 12 0M7 7.5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0m7 5c0 1.38-.9 2.5-2 2.5s-2-1.12-2-2.5.9-2.5 2-2.5 2 1.12 2 2.5m0-5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0';

var gif = 'M7.25 11.79h3.82V16H9.75v-1.14c-.38.89-1.29 1.3-2.45 1.3-2.08 0-3.6-1.65-3.6-4.08 0-2.34 1.65-3.99 3.88-3.99 1.69 0 2.94.7 3.45 1.93l-1.47.72q-.5-1.18-1.93-1.2c-1.35 0-2.32.87-2.32 2.54 0 1.64.84 2.68 2.29 2.68 1.2 0 1.87-.63 1.96-1.55h-2.3zm5.28-3.54h1.54V16h-1.54zm4.64 1.45v1.93h2.59v1.42h-2.59V16h-1.54V8.25h4.89V9.7zM0 7a4 4 0 0 1 4-4h16a4 4 0 0 1 4 4v10a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4zm2 0v10c0 1.1.9 2 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2';

var gifVisual = 'M17.5 16.5s1.12-1.36.98-1.87c-.15-.52-.93-.76-1.74-.56-.82.2-1.36.79-1.22 1.3.15.52 1.98 1.13 1.98 1.13M13 13a1 1 0 1 0 0 2 1 1 0 0 0 0-2m6 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2M1 19a4 4 0 0 0 4 4h14a4 4 0 0 0 4-4V5a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4zM9 5H7V3h2zm4-2v2h-2V3zm4 0v2h-2V3zm4 2h-2V3a2 2 0 0 1 2 2M3 5c0-1.1.9-2 2-2v2zm0 11V8a1 1 0 0 1 1-1h13.38L16.3 9.18l-2.1.7-2.48-1.85a1.92 1.92 0 0 0-3.04 1.09C8.37 10.42 8 12.52 8 15v2H4a1 1 0 0 1-1-1m16.27-8.31L21 9.4V16a1 1 0 0 1-1 1H10v-2c0-2.2.32-4.1.59-5.3l3.23 2.41 3.89-1.3zM21 19a2 2 0 0 1-2 2v-2zm-4 2h-2v-2h2zm-6 0v-2h2v2zm-4 0v-2h2v2zm-4-2h2v2a2 2 0 0 1-2-2';

var gift = 'M3.87 7H3a2 2 0 0 0-2 2v3a2 2 0 0 0 1.02 1.74L2 14v5a4 4 0 0 0 4 4h12a4 4 0 0 0 4-4v-5l-.02-.26A2 2 0 0 0 23 12V9a2 2 0 0 0-2-2h-.87q.5-.76.68-1.65a4.35 4.35 0 0 0-4.29-5.3 4.35 4.35 0 0 0-4.28 3.39L12 4.5l-.24-1.06A4.35 4.35 0 0 0 7.48.05a4.35 4.35 0 0 0-4.3 5.3q.2.88.69 1.65M7.6 7c-3.16 0-3.39-4.95-.13-4.95 1.12 0 2.09.73 2.33 1.82L10.5 7zm6.58-3.13a2.35 2.35 0 0 1 2.33-1.82c3.26 0 3.03 4.95-.13 4.95h-2.9zM21 9v3h-8V9zM11 9v3H3V9zm2 5h6a1 1 0 0 1 1 1v4a2 2 0 0 1-2 2h-5zm-2 0v7H6a2 2 0 0 1-2-2v-4a1 1 0 0 1 1-1z';

var globe = 'M24 12a12 12 0 1 0-24 0 12 12 0 0 0 24 0m-9.55 7.6C13.47 21.54 12.5 22 12 22s-1.47-.45-2.45-2.4A17 17 0 0 1 8.02 13h7.96a17 17 0 0 1-1.53 6.6m1.53-8.6H8.02c.12-2.65.7-4.95 1.53-6.6C10.53 2.46 11.5 2 12 2s1.47.45 2.45 2.4a17 17 0 0 1 1.53 6.6m5.97 2a10 10 0 0 1-6.12 8.24c1.2-2 2.01-4.93 2.15-8.24zm0-2h-3.97c-.14-3.31-.95-6.24-2.15-8.24A10 10 0 0 1 21.95 11m-19.9 0a10 10 0 0 1 6.12-8.24c-1.2 2-2.01 4.93-2.15 8.24zm3.97 2c.14 3.31.95 6.24 2.15 8.24A10 10 0 0 1 2.05 13z';

var globeChecked = 'M9.37 19.36A18 18 0 0 1 8.02 13h7.96q-.06 1.35-.26 2.58l1.97.32q.23-1.39.29-2.9h4.98l1 .09Q24 12.55 24 12a12 12 0 1 0-9.82 11.8l-.36-1.96q-.89.15-1.82.16c-.75 0-1.75-.71-2.63-2.64m5.26-14.72A18 18 0 0 1 15.98 11H8.02c.1-2.52.62-4.74 1.35-6.36C10.25 2.7 11.25 2 12 2s1.75.71 2.63 2.64M7.55 3.8A20 20 0 0 0 6.02 11H2.05a10 10 0 0 1 6.03-8.2q-.3.48-.53 1m0 16.38q.24.53.53 1.01A10 10 0 0 1 2.05 13h3.97c.1 2.76.66 5.27 1.53 7.2m14.4-9.2h-3.97a20 20 0 0 0-1.53-7.2q-.24-.51-.53-1a10 10 0 0 1 6.03 8.2m1.76 5.2-1.42-1.4-4.79 4.79-1.8-1.8-1.4 1.42 3.2 3.2z';

var gmail = 'M0 7a4 4 0 0 1 4-4h16a4 4 0 0 1 4 4v10a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4zm2 0c0 .25.14.48.36.6L12 12.86l9.64-5.26A.7.7 0 0 0 22 7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2m10 8.14L2 9.68V17c0 1.1.9 2 2 2h16a2 2 0 0 0 2-2V9.68z';

var graphBar = 'M9 3c0-1.1.9-2 2-2h2a2 2 0 0 1 2 2v18a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2zm4 0h-2v18h2zm4 6c0-1.1.9-2 2-2h2a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2zm4 0h-2v12h2zM1 13c0-1.1.9-2 2-2h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2zm4 0H3v8h2z';

var graphPie = 'M10 14V2.2A10 10 0 1 0 21.8 14zm12-2c1.1 0 2.02.9 1.83 2A12 12 0 1 1 10.01.16C11.1-.02 12 .9 12 2v10zm-.25-4A8 8 0 0 0 16 2.25V8zm2.05 0c.22 1.1-.7 2-1.8 2h-8V2c0-1.1.9-2.02 1.99-1.8A10 10 0 0 1 23.8 8';

var hand = 'M15.57 1.27a2.75 2.75 0 0 0-5 .87 2.8 2.8 0 0 0-3.65 2.51l-.3 5.95-.83-.88a3.6 3.6 0 0 0-5.3.06 1.86 1.86 0 0 0-.05 2.42l2.2 2.7q.21.25.36.55l2.07 4.04A8.3 8.3 0 0 0 12.46 24h2.1a9 9 0 0 0 9-9.47l-.47-8.88a2.8 2.8 0 0 0-3.66-2.51 2.75 2.75 0 0 0-3.86-1.87M14 2.75V13h2V3.75a.75.75 0 0 1 1.5 0V13h2V5.8a.8.8 0 0 1 1.6-.05l.46 8.88a7 7 0 0 1-7 7.37h-2.1a6.3 6.3 0 0 1-5.6-3.42l-2.08-4.04a5 5 0 0 0-.6-.9l-2.11-2.6c.63-.62 1.65-.6 2.26.05l4.05 4.3.53-10.64a.8.8 0 0 1 1.59.04V13h2V2.75a.75.75 0 0 1 1.5 0';

var handPointing = 'M5.4 3.18a.9.9 0 0 0-.36 1.2l5.19 10-5.8.14c-.94.03-1.76.67-2 1.58l-.06.23q0 .03.03.05l3.77.74q.71.15 1.36.48l3.65 1.88a6.3 6.3 0 0 0 6.04-.14l1.62-.94h.02v-.01l.86-.5a4.2 4.2 0 0 0 1.77-5.29l-1.45-3.44-.3-.54a1.45 1.45 0 0 0-1.82-.61l-.67.27-.47-.54a1.6 1.6 0 0 0-2.46.04l-.51.63-.73-.37a1.6 1.6 0 0 0-1.9.3l-.9.93-3.67-5.8a.9.9 0 0 0-1.22-.3M3.26 5.3A2.9 2.9 0 0 1 8.3 2.4l2.43 3.83a3.6 3.6 0 0 1 2.58-.25 3.6 3.6 0 0 1 4.49-.02c1.41-.28 2.9.35 3.66 1.66l.37.64 1.5 3.57a6.2 6.2 0 0 1-2.61 7.8l-.86.49-.02.01-1.62.94a8.3 8.3 0 0 1-7.95.19l-3.65-1.88a3 3 0 0 0-.84-.3l-3.77-.74a2.04 2.04 0 0 1-1.57-2.53l.06-.23a4.1 4.1 0 0 1 3.88-3.06l2.6-.06z';

var handle = 'M1 10h22V8H1zm0 6h22v-2H1z';

var heart = 'M0 9c0 6.18 8.97 11.59 11.07 12.76q.43.24.93.24t.93-.24C15.03 20.6 24 15.18 24 9v-.53a6.47 6.47 0 0 0-11.44-4.14L12 5l-.56-.67A6.47 6.47 0 0 0 0 8.47z';

var heartBroken = 'M12 8.12 9.9 5.61A4.47 4.47 0 0 0 2 8.47V9c0 2.18 1.65 4.56 4.1 6.78a32 32 0 0 0 3.64 2.82L8.3 20.04C4.9 17.7 0 13.57 0 9v-.53a6.47 6.47 0 0 1 11.44-4.14L12 5l.56-.67A6.47 6.47 0 0 1 24 8.47V9q-.02 1.38-.54 2.69l-1.6-1.6q.15-.54.14-1.09v-.53a4.47 4.47 0 0 0-7.9-2.86zm10.3 15.59L19 20.4l-3.3 3.3-1.4-1.42L17.58 19l-3.3-3.3 1.42-1.4 3.3 3.28 3.3-3.3 1.4 1.42-3.28 3.3 3.3 3.3z';

var heartHealth = 'M6.47 2a6.5 6.5 0 0 1 4.97 2.33L12 5l.56-.67A6.47 6.47 0 0 1 24 8.47V9c0 6.18-8.97 11.59-11.07 12.76Q12.5 22 12 22t-.93-.24C8.97 20.6 0 15.18 0 9v-.53C0 4.9 2.9 2 6.47 2M9.9 5.6A4.47 4.47 0 0 0 2 8.48V9q0 .98.42 2h2.96l1.7-3.41a1.5 1.5 0 0 1 2.76.15l2.27 6.16 2.05-4.39a1.5 1.5 0 0 1 2.7-.03l.76 1.52h3.96Q22 9.98 22 9v-.53a4.47 4.47 0 0 0-7.9-2.86L12 8.12zM3.55 13q1.03 1.41 2.54 2.78A34 34 0 0 0 12 19.99c1.03-.58 3.6-2.12 5.9-4.21q1.52-1.36 2.55-2.78H17.3a1.5 1.5 0 0 1-1.34-.83l-.44-.87-2.12 4.54a1.5 1.5 0 0 1-2.76-.12l-2.29-6.2-1.33 2.65c-.25.5-.77.83-1.34.83z';

var heartOutline = 'M14.1 5.6A4.47 4.47 0 0 1 22 8.48V9c0 2.18-1.65 4.56-4.1 6.78a35 35 0 0 1-5.9 4.21 35 35 0 0 1-5.9-4.21C3.64 13.56 2 11.18 2 9v-.53a4.47 4.47 0 0 1 7.9-2.86L12 8.12zm-3.47-2.08A6.47 6.47 0 0 0 0 8.47V9c0 6.18 8.97 11.59 11.07 12.76q.43.24.93.24t.93-.24C15.03 20.6 24 15.18 24 9v-.53a6.47 6.47 0 0 0-11.44-4.14L12 5l-.56-.67q-.38-.45-.8-.81';

var highlights = 'M12 0a12 12 0 0 1 8.48 3.5l.01.02a11.96 11.96 0 0 1 .04 16.92l-.04.05-.05.04A12 12 0 1 1 12 0M7.64 21q1.55.76 3.36.95V21zM11 19v-2H3.34q.63 1.1 1.52 2zm-8.54-4H11v-2H2.05q.1 1.04.4 2m-.41-4H11V9H2.46q-.3.96-.41 2m1.29-4H11V5H4.86q-.89.9-1.52 2m4.3-4H11v-.95q-1.8.19-3.36.95';

var history = 'M12 2a10 10 0 0 0-8.66 5H8v2H0V1h2v4.36A11.99 11.99 0 0 1 24 12a12 12 0 0 1-20.45 8.52l1.4-1.42A10 10 0 1 0 12 2m1 3v6.59l2.7 2.7-1.4 1.42-3.3-3.3V5z';

var home = 'M4.6 22.73A107 107 0 0 0 11 23h2.22c2.43-.04 4.6-.16 6.18-.27A3.9 3.9 0 0 0 23 18.8v-8.46a4 4 0 0 0-1.34-3L14.4.93a3.63 3.63 0 0 0-4.82 0L2.34 7.36A4 4 0 0 0 1 10.35v8.46a3.9 3.9 0 0 0 3.6 3.92M13.08 2.4l7.25 6.44a2 2 0 0 1 .67 1.5v8.46a1.9 1.9 0 0 1-1.74 1.92q-1.39.11-3.26.19V16a4 4 0 0 0-8 0v4.92q-1.87-.08-3.26-.19A1.9 1.9 0 0 1 3 18.81v-8.46a2 2 0 0 1 .67-1.5l7.25-6.44a1.63 1.63 0 0 1 2.16 0M13.12 21h-2.24a1 1 0 0 1-.88-1v-4a2 2 0 1 1 4 0v4a1 1 0 0 1-.88 1';

var homeFill = 'M9.59.92a3.63 3.63 0 0 1 4.82 0l7.25 6.44A4 4 0 0 1 23 10.35v8.46a3.9 3.9 0 0 1-3.6 3.92 106 106 0 0 1-14.8 0A3.9 3.9 0 0 1 1 18.8v-8.46a4 4 0 0 1 1.34-3zM12 16a5 5 0 0 1-3.05-1.04l-1.23 1.58a7 7 0 0 0 8.56 0l-1.23-1.58A5 5 0 0 1 12 16';

var ideaPin = 'M19 19a4 4 0 0 1-4 4H5a4 4 0 0 1-4-4V9a4 4 0 0 1 4-4h10a4 4 0 0 1 4 4zm-2 0V9a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v10c0 1.1.9 2 2 2h10a2 2 0 0 0 2-2M16 3H7V1h9a7 7 0 0 1 7 7v9h-2V8a5 5 0 0 0-5-5';

var imagePortrait = 'M8 9a4 4 0 1 1 8 0 4 4 0 0 1-8 0m4 2a2 2 0 1 0 0-4 2 2 0 0 0 0 4M3 4a4 4 0 0 1 4-4h10a4 4 0 0 1 4 4v16a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4zm4-2a2 2 0 0 0-2 2v14.12a8 8 0 0 1 14 0V4a2 2 0 0 0-2-2zm11 19.74a6 6 0 0 0-12 0q.45.25 1 .26h10q.54-.01 1-.26';

var impressum = 'M7.23 3.13A4.6 4.6 0 0 1 11.58 0H12c2.22 0 4.2 1.42 4.9 3.53l.05.15-1.9.64-.05-.16A3.2 3.2 0 0 0 12 2h-.42a2.58 2.58 0 0 0-.96 4.97l5.1 2.04a4.27 4.27 0 0 1 .78 7.52l-.35.24A4.57 4.57 0 0 1 12.42 24H12a5.2 5.2 0 0 1-4.9-3.53l-.05-.15 1.9-.64.05.16A3.2 3.2 0 0 0 12 22h.42a2.58 2.58 0 0 0 .96-4.97l-5.1-2.04a4.27 4.27 0 0 1-.78-7.52l.35-.24a4.6 4.6 0 0 1-.62-4.1m.62 7.2a2.14 2.14 0 0 0 1.18 2.77l4.34 1.76a2.14 2.14 0 1 0 1.6-3.96l-4.34-1.76a2.14 2.14 0 0 0-2.78 1.18';

var indent = 'M7.63 12.84a1.15 1.15 0 0 0 0-1.68L1.21 5.19A.72.72 0 0 0 0 5.72v12.56a.72.72 0 0 0 1.2.53zM5.6 12 2 15.34V8.66zM24 5H12v2h12zm-4 12h-8v2h8zm-8-4h12v-2H12z';

var infoCircle = 'M13 18v-8h-3v2h1v6zm-1-9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3m0 15a12 12 0 1 0 0-24 12 12 0 0 0 0 24M2 12a10 10 0 1 1 20 0 10 10 0 0 1-20 0';

var information = 'M13 18v-8h-3v2h1v6zm-1-9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3m0 15a12 12 0 1 0 0-24 12 12 0 0 0 0 24M2 12a10 10 0 1 1 20 0 10 10 0 0 1-20 0';

var insightsAudience = 'M17.92 5c.09.55-.37 1-.92 1h-4a1 1 0 0 1-1-1V1c0-.55.45-1 1-.92A6 6 0 0 1 17.92 5M16.9 8A5.5 5.5 0 1 1 10 .37v2.26A3.5 3.5 0 1 0 14.45 8zM2 22a10 10 0 0 1 20 0 1 1 0 0 1-1 1H3a1 1 0 0 1-1-1m17.94-1a8 8 0 0 0-15.88 0z';

var insightsConversion = 'M4.01 8.47A8.5 8.5 0 0 1 17.98 7H15v2h6V3h-2v2.15A10.5 10.5 0 0 0 2.25 7.52zM3 10a2 2 0 0 0-2 2v8c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2v-8a2 2 0 0 0-2-2zm2 10H3v-8h2zm14-6a2 2 0 0 0-2 2v4c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2zm2 2v4h-2v-4zM9 20c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2zm2-6h2v6h-2z';

var instagram = 'M12 1c-2.99 0-3.36.01-4.53.07a8 8 0 0 0-2.67.5c-.73.29-1.34.66-1.95 1.28a5.4 5.4 0 0 0-1.27 1.94 8 8 0 0 0-.51 2.67A79 79 0 0 0 1 12c0 2.99.01 3.36.07 4.53.05 1.18.24 1.98.5 2.67.29.73.66 1.34 1.28 1.95.6.61 1.22 1 1.94 1.27.7.27 1.5.46 2.67.51C8.64 23 9.01 23 12 23s3.36-.01 4.53-.07a8 8 0 0 0 2.68-.5 5 5 0 0 0 1.94-1.28 5.4 5.4 0 0 0 1.27-1.95c.27-.7.46-1.5.51-2.67C23 15.36 23 15 23 12s-.01-3.36-.07-4.54a8 8 0 0 0-.5-2.67 5.4 5.4 0 0 0-1.28-1.94 5 5 0 0 0-1.95-1.27 8 8 0 0 0-2.67-.51A78 78 0 0 0 12 1m-.99 1.98h1c2.93 0 3.28.01 4.44.07a6 6 0 0 1 2.04.37c.51.2.88.44 1.26.83.39.38.63.75.83 1.26.15.39.33.97.37 2.04.06 1.16.07 1.51.07 4.45 0 2.93-.01 3.28-.07 4.44a6 6 0 0 1-.37 2.04c-.2.52-.44.88-.83 1.27a3.4 3.4 0 0 1-1.26.82c-.39.15-.97.33-2.04.38-1.16.05-1.51.06-4.45.06s-3.28 0-4.44-.06a6 6 0 0 1-2.05-.38 3.4 3.4 0 0 1-1.26-.82 3.4 3.4 0 0 1-.82-1.27 6 6 0 0 1-.38-2.04 77 77 0 0 1-.07-4.45c0-2.93.01-3.28.07-4.44.05-1.07.22-1.65.38-2.04.2-.51.43-.88.82-1.27.38-.38.75-.62 1.26-.82.4-.15.97-.33 2.05-.38C8.57 3 8.96 2.98 11 2.98zm6.86 1.83a1.32 1.32 0 1 0 0 2.64 1.32 1.32 0 0 0 0-2.64M12 6.35a5.65 5.65 0 1 0 0 11.3 5.65 5.65 0 0 0 0-11.3m0 1.98a3.67 3.67 0 1 1 0 7.34 3.67 3.67 0 0 1 0-7.34';

var invoice = 'M22 20a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4V7.24a4 4 0 0 1 1.17-2.83L7.1.5A1.7 1.7 0 0 1 10 1.7V4a4 4 0 0 1-4 4H5a1 1 0 0 0-1 1v11c0 1.1.9 2 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-6V0h6a4 4 0 0 1 4 4zM8 4V2.41L4.59 5.83 4.43 6H6a2 2 0 0 0 2-2m9 6v2H7v-2zM7 16v-2h10v2zm5 2h5v2h-5z';

var kakaoTalk = 'm9.46 9.66.7 1.96h-1.4zM0 10.76C0 5.53 5.37 1.3 12 1.3s12 4.23 12 9.46-5.37 9.46-12 9.46q-1.1 0-2.13-.15c-.7.5-4.7 3.3-5.07 3.35 0 0-.16.06-.29-.01-.13-.08-.1-.28-.1-.28.03-.27 1.03-3.72 1.21-4.35C2.25 17.1 0 14.14 0 10.76m4.67 2.64c0 .37.31.66.7.66s.69-.3.69-.66V9.3h1.08a.68.68 0 0 0 0-1.36H3.59a.68.68 0 0 0 0 1.36h1.08zm6.19.35q.12.3.58.3.23 0 .44-.1c.19-.08.37-.32.16-.98l-1.66-4.35a1 1 0 0 0-.92-.69c-.45.01-.8.36-.92.69l-1.66 4.36c-.2.65-.02.9.17.98q.21.1.44.1.45-.01.57-.31l.35-.9h2.1zm1.63-.42c0 .35.3.63.66.63h2.22c.37 0 .67-.28.67-.63s-.3-.64-.66-.64H13.9V8.63a.7.7 0 0 0-.7-.7.7.7 0 0 0-.71.7zm3.82.03a.7.7 0 0 0 1.38 0v-1.5l.24-.25 1.63 2.15a.7.7 0 0 0 .97.14.7.7 0 0 0 .13-.97l-1.7-2.26 1.58-1.58q.16-.17.15-.42a.7.7 0 0 0-.2-.44.7.7 0 0 0-.48-.2.5.5 0 0 0-.39.15l-1.93 1.93V8.63a.7.7 0 0 0-1.38 0z';

var key = 'M22.7 2.7 20.42 5l3.3 3.3-1.42 1.4L19 6.42 16.41 9l3.3 3.3-1.42 1.4L15 10.42l-3.1 3.11a6 6 0 1 1-1.41-1.41L21.29 1.3zM7 13a4 4 0 1 0 0 8 4 4 0 0 0 0-8';

var knoop = 'M24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0m-9-5a2 2 0 1 0 0 4 2 2 0 0 0 0-4m0 10a2 2 0 1 0 0-4 2 2 0 0 0 0 4M9 7a2 2 0 1 0 0 4 2 2 0 0 0 0-4m0 10a2 2 0 1 0 0-4 2 2 0 0 0 0 4';

var labFlask = 'M18 0v2h-1a1 1 0 0 0-1 1v9.54l5.93 5.09A3.05 3.05 0 0 1 19.95 23H4.05a3.05 3.05 0 0 1-1.98-5.37L8 12.54V3a1 1 0 0 0-1-1H6V0zM9.83 2A3 3 0 0 1 10 3v10.46l-6.63 5.68A1.05 1.05 0 0 0 4.05 21h15.9a1.05 1.05 0 0 0 .68-1.86L14 13.46V10h-2V8h2V6h-2V4h2V3a3 3 0 0 1 .17-1z';

var lassoMagic = 'M21 1.5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0m-3.4.5h.8l.12.5a4 4 0 0 0 2.99 2.98l.5.12v.8l-.5.12a4 4 0 0 0-3 2.98l-.1.5h-.8l-.12-.5a4 4 0 0 0-3-2.98L14 6.4v-.8l.5-.12a4 4 0 0 0 2.99-2.98zm-5.2 2.08A12.3 12.3 0 0 0 5.53 5.2c-1.85.95-3.06 2.36-3.42 4-.44 2.02.5 4.22 2.58 5.95A5.6 5.6 0 0 1 9.5 12a5 5 0 0 1 3.52 1.5c.9.96 1.34 2.34.82 3.83q-.13.36-.3.66c1.78-.05 3.41-.45 4.76-1.11 1.94-.95 3.21-2.4 3.58-4.07q.29-1.33-.17-2.66l1.9-.64q.62 1.81.23 3.73c-.54 2.43-2.33 4.3-4.66 5.44a14.5 14.5 0 0 1-8.14 1.19c-.97.22-2 .12-2.93-.13A9 9 0 0 1 6.2 19q.09.27.21.52a4 4 0 0 0 1.5 1.62l-1 1.74a6 6 0 0 1-2.29-2.48 5.6 5.6 0 0 1-.55-3.1l-.15-.2C1.13 15-.54 11.94.16 8.76.68 6.4 2.38 4.57 4.6 3.42a14.3 14.3 0 0 1 8-1.33zM6.34 16.35l-.1.3.19.13c.6.43 1.4.82 2.2 1.03.83.22 1.58.24 2.14.06.52-.16.95-.5 1.2-1.2a1.7 1.7 0 0 0-.4-1.8A3 3 0 0 0 9.5 14c-1.22 0-2.64.96-3.16 2.35';

var layersStack = 'M12.45 1.1a1 1 0 0 0-.9 0l-10 5a1 1 0 0 0 0 1.8l10 5a1 1 0 0 0 .9 0l10-5a1 1 0 0 0 0-1.8zM12 10.89 4.24 7 12 3.12 19.76 7zM1.55 12.9l10 5a1 1 0 0 0 .9 0l10-5-.9-1.78L12 15.88l-9.55-4.77zm0 5 10 5a1 1 0 0 0 .9 0l10-5-.9-1.78L12 20.88l-9.55-4.77z';

var layout = 'M1 19a4 4 0 0 0 4 4h14a4 4 0 0 0 4-4V5a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4zM5 3h6v8H3V5c0-1.1.9-2 2-2m14 0a2 2 0 0 1 2 2v6h-8V3zM3 19v-6h18v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2';

var lightbulb = 'M12 0a10 10 0 0 0-6.72 17.4l.36 1.36A3 3 0 0 0 8.54 21h6.92a3 3 0 0 0 2.9-2.24l.36-1.35A10 10 0 0 0 12 0M4 10a8 8 0 1 1 13.18 6.1l-.24.2-.51 1.95a1 1 0 0 1-.97.75H13v-4h1a3 3 0 1 0-2-5.24A3 3 0 1 0 10 15h1v4H8.54a1 1 0 0 1-.97-.75l-.51-1.95-.24-.2A8 8 0 0 1 4 10m10 3h-1v-1a1 1 0 1 1 1 1m-4-2a1 1 0 0 1 1 1v1h-1a1 1 0 1 1 0-2M8 22v2h8v-2z';

var lightningBoltCircle = 'M13 10h3.08a1 1 0 0 1 .82 1.57l-5.72 8.18a.59.59 0 0 1-1.07-.43L11 14H7.84A1 1 0 0 1 7 12.45l5.32-8.17a.61.61 0 0 1 1.12.38zm11 2a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var link = 'M19.83 2.41a4 4 0 0 0-5.66 0l-2.26 2.26a4 4 0 0 0-.48 5.07l1.47-1.47a2 2 0 0 1 .43-2.18l2.26-2.26a2 2 0 0 1 2.82 0l1.76 1.76a2 2 0 0 1 0 2.82l-2.26 2.26a2 2 0 0 1-2.18.43l-1.47 1.47a4 4 0 0 0 5.07-.48l2.26-2.26a4 4 0 0 0 0-5.66zM2.4 14.17a4 4 0 0 0 0 5.66l1.76 1.76a4 4 0 0 0 5.66 0l2.26-2.26a4 4 0 0 0 .48-5.07l-1.47 1.47a2 2 0 0 1-.43 2.18L8.4 20.17a2 2 0 0 1-2.82 0l-1.76-1.76a2 2 0 0 1 0-2.82l2.26-2.26a2 2 0 0 1 2.18-.43l1.47-1.47a4 4 0 0 0-5.07.48zm6.3 2.54 8-8-1.42-1.42-8 8z';

var linkBroken = 'M7 5V1h2v4zm7.17-2.59a4 4 0 0 1 5.66 0l1.76 1.76a4 4 0 0 1 0 5.66l-2.26 2.26q-.33.31-.7.55l-1.48-1.5a2 2 0 0 0 .76-.47l2.26-2.26a2 2 0 0 0 0-2.82l-1.76-1.76a2 2 0 0 0-2.82 0l-2.26 2.26a2 2 0 0 0-.48.76l-1.49-1.49q.24-.37.55-.69zM6.85 12.85a2 2 0 0 0-.76.48l-2.26 2.26a2 2 0 0 0 0 2.82l1.76 1.76a2 2 0 0 0 2.82 0l2.26-2.26a2 2 0 0 0 .48-.76l1.49 1.49q-.24.36-.55.69l-2.26 2.26a4 4 0 0 1-5.66 0l-1.76-1.76a4 4 0 0 1 0-5.66l2.26-2.26q.32-.32.7-.55zM15 23v-4h2v4zM1 7h4v2H1zm18 8h4v2h-4z';

var lips = 'M12 6.38c2.64-2.17 6.32-1.77 8.55 1.13l3.02 3.93c.26.34.28.8.04 1.14C20.85 16.5 16.68 19 12 19S3.15 16.5.4 12.58a1 1 0 0 1 .03-1.14l3.02-3.93c2.23-2.9 5.91-3.3 8.55-1.13M5.03 8.73l-1.57 2.05 4.26-.6a4 4 0 0 1 2.79.62l.38.26a2 2 0 0 0 2.22 0l.38-.26a4 4 0 0 1 2.79-.63l4.26.61-1.57-2.05C17.4 6.7 15 6.5 13.27 7.93L12 8.96l-1.27-1.05C9 6.5 6.6 6.7 5.03 8.73m-1.87 4.12A12 12 0 0 0 12 17c3.36 0 6.48-1.54 8.84-4.15l-4.85-.7a2 2 0 0 0-1.39.32l-.38.25a4 4 0 0 1-4.44 0l-.38-.25a2 2 0 0 0-1.4-.32z';

var listNumbered = 'M1.9 3.38v-1.5Q3.32 1.87 3.35.66h1.43V7H3.3V2.77c-.2.41-.7.61-1.41.61M9 3h14v2H9zm14 10H9v-2h14zm0 8H9v-2h14zM1.59 15c-.04-.14-.06-.4-.06-.6a2.5 2.5 0 0 1 1.57-2.41l1.15-.56q.64-.3.65-.85c0-.46-.33-.75-.83-.75q-.91.01-1.02 1.06l-1.5-.36c.04-1.29 1.05-2 2.51-2 1.52 0 2.38.75 2.38 1.99 0 .97-.56 1.58-1.42 2.01l-1.12.59c-.33.17-.49.31-.56.5h3.03V15zm1.16 5.98q.24.86 1.08.86c.64 0 1.04-.4 1.04-1 0-.57-.4-.94-1-.94q-.58.02-.96.31l-.55-1.03L4.26 18H1.74v-1.35h4.38v1.33l-1.54 1.04c1.17.07 1.81.8 1.81 1.92 0 1.29-1.03 2.18-2.48 2.18-1.3 0-2.19-.53-2.47-1.52z';

var listNumberedRtl = 'M17.9 3.38v-1.5q1.41-.01 1.45-1.22h1.42V7h-1.46V2.77c-.2.41-.7.61-1.41.61m1.2 8.6 1.15-.55q.64-.3.65-.85c0-.46-.33-.75-.83-.75q-.91.01-1.02 1.06l-1.5-.36c.04-1.29 1.05-2 2.51-2 1.52 0 2.38.75 2.38 1.99 0 .97-.56 1.58-1.42 2.01l-1.12.59q-.47.23-.56.5h3.03V15H17.6c-.04-.14-.06-.4-.06-.6 0-1.16.57-1.94 1.57-2.42m.8 11.15c-1.3 0-2.18-.53-2.46-1.52l1.3-.63q.25.86 1.1.86c.63 0 1.03-.4 1.03-1 0-.57-.4-.94-1-.94q-.58.02-.96.31l-.55-1.03 1.9-1.17h-2.52v-1.35h4.38v1.33l-1.54 1.04c1.17.07 1.81.8 1.81 1.92 0 1.29-1.03 2.18-2.48 2.18M1 3h14v2H1zm14 10H1v-2h14zm0 8H1v-2h14z';

var location = 'M16 10a4 4 0 1 1-8 0 4 4 0 0 1 8 0m-4-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4m10 2c0 6.14-7.31 12.28-9.1 13.7q-.4.3-.9.3t-.9-.3C9.32 22.28 2 16.14 2 10a10 10 0 1 1 20 0M7.42 17.34A34 34 0 0 0 12 21.85c1-.81 2.88-2.45 4.58-4.5 1.98-2.4 3.42-5 3.42-7.35a8 8 0 1 0-16 0c0 2.34 1.44 4.95 3.42 7.34';

var lock = 'M11 12v6h2v-6zm7-5V6A6 6 0 0 0 6 6v1a4 4 0 0 0-4 4v8a4 4 0 0 0 4 4h12a4 4 0 0 0 4-4v-8a4 4 0 0 0-4-4M8 6a4 4 0 1 1 8 0v1H8zm10 3a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-8c0-1.1.9-2 2-2z';

var logoLarge = 'M22 2H2v2h20zm0 18H2v2h20zM12.64 6.46a.67.67 0 0 0-1.28 0l-1.17 3.6H6.4a.67.67 0 0 0-.4 1.22l3.07 2.23-1.17 3.6a.67.67 0 0 0 1.03.76L12 15.64l3.07 2.23a.67.67 0 0 0 1.03-.75l-1.17-3.6L18 11.27a.67.67 0 0 0-.4-1.21h-3.79z';

var logoSmall = 'M22 6H2V4h20zm0 14H2v-2h20zm-8.8-9.29h2.53c.44 0 .62.56.27.81l-2.05 1.49.78 2.4a.45.45 0 0 1-.69.5L12 14.43 9.96 15.9a.45.45 0 0 1-.7-.5l.79-2.4L8 11.52a.45.45 0 0 1 .27-.8h2.52l.78-2.41a.45.45 0 0 1 .86 0z';

var logout = 'M13 12V1h-2v11zm-8.07 7.07a10 10 0 0 1 0-14.14L3.5 3.52a12 12 0 1 0 16.97 0l-1.41 1.41A10 10 0 1 1 4.93 19.07';

var magicPen = 'M5.95.43a3.5 3.5 0 0 0 2.62 2.62l.43.1v.7l-.43.1a3.5 3.5 0 0 0-2.62 2.62l-.1.43h-.7l-.1-.43a3.5 3.5 0 0 0-2.62-2.62L2 3.85v-.7l.43-.1A3.5 3.5 0 0 0 5.05.43l.1-.43h.7zM19.4 18.37a3 3 0 0 0 2.24 2.24l.37.09v.6l-.37.09a3 3 0 0 0-2.24 2.24l-.09.37h-.6l-.09-.37a3 3 0 0 0-2.24-2.24L16 21.3v-.6l.37-.09a3 3 0 0 0 2.24-2.24l.09-.37h.6zM23 15.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m-.41-12.33a4 4 0 0 1 .11 5.53l-.58.6-.04.03L9.94 21.47a2 2 0 0 1-1.13.57l-5.35.76a2 2 0 0 1-2.26-2.26l.76-5.35a2 2 0 0 1 .57-1.13L15.17 1.4l.05-.04.07-.08a4 4 0 0 1 5.54.12zM16.1 4.7l3.2 3.2a1 1 0 0 0 1.37.01l.5-.49a2 2 0 0 0 0-2.82L19.4 2.83a2 2 0 0 0-2.8-.03l-.49.5a1 1 0 0 0-.01 1.4m-1.4 1.43-.02-.02-.69-.69L3.94 15.47l-.76 5.35 5.35-.76L18.59 10l-.69-.69-.02-.02z';

var magicWand = 'M5.85 0h-.7l-.1.43a3.5 3.5 0 0 1-2.62 2.62l-.43.1v.7l.43.1a3.5 3.5 0 0 1 2.62 2.62l.1.43h.7l.1-.43a3.5 3.5 0 0 1 2.62-2.62l.43-.1v-.7l-.43-.1A3.5 3.5 0 0 1 5.95.43zm13.54 18.37L19.3 18h-.6l-.09.37a3 3 0 0 1-2.24 2.24l-.37.09v.6l.37.09a3 3 0 0 1 2.24 2.24l.09.37h.6l.09-.37a3 3 0 0 1 2.24-2.24l.37-.09v-.6l-.37-.09a3 3 0 0 1-2.24-2.24M21.5 14a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3M20.41 2a2 2 0 0 0-2.82 0L2 17.59a2 2 0 0 0 0 2.82L3.59 22a2 2 0 0 0 2.82 0L22 6.41a2 2 0 0 0 0-2.82zM17.6 8 5 20.59 3.41 19 16 6.41zM19 3.41 20.59 5l-.88.88a1 1 0 0 1-1.42 0l-.17-.17a1 1 0 0 1 0-1.42z';

var magnifyingGlassSparkle = 'M19.64.62a5 5 0 0 0 3.74 3.74l.62.14v1l-.62.14a5 5 0 0 0-3.74 3.74l-.14.62h-1l-.14-.62a5 5 0 0 0-3.74-3.74L14 5.5v-1l.62-.14A5 5 0 0 0 18.36.62L18.5 0h1zM11 19a8 8 0 0 0 7.94-7h2.01c-.2 2.01-1 3.85-2.2 5.33l4.46 4.47-1.41 1.41-4.47-4.47a10 10 0 1 1-2.25-16.88l-3 1.21Q11.53 3 11 3a8 8 0 1 0 0 16';

var manageAccess = 'M16 13v2h2v-2h2v-2h-8.13a4 4 0 1 0 0 2zm-6-1a2 2 0 1 1-4 0 2 2 0 0 1 4 0m2-9-1.83-1.83A4 4 0 0 0 7.34 0H4a4 4 0 0 0-4 4v13a4 4 0 0 0 4 4h16a4 4 0 0 0 4-4V7a4 4 0 0 0-4-4zm-.83 2H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4c0-1.1.9-2 2-2h3.34a2 2 0 0 1 1.42.59z';

var marginsLarge = 'M11 11H6V9h1.59l-2.3-2.3 1.42-1.4L9 7.58V6h2zm2 2h5v2h-1.59l2.3 2.3-1.42 1.4L15 16.42V18h-2zM1 5a4 4 0 0 1 4-4h14a4 4 0 0 1 4 4v14a4 4 0 0 1-4 4H5a4 4 0 0 1-4-4zm3 0v14a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1';

var marginsMedium = 'M11 11H6V9h1.59l-2.3-2.3 1.42-1.4L9 7.58V6h2zm2 2h5v2h-1.59l2.3 2.3-1.42 1.4L15 16.42V18h-2zM1 5a4 4 0 0 1 4-4h14a4 4 0 0 1 4 4v14a4 4 0 0 1-4 4H5a4 4 0 0 1-4-4zm2 0v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2';

var marginsSmall = 'M11 11H6V9h1.59l-2.3-2.3 1.42-1.4L9 7.58V6h2zm2 2h5v2h-1.59l2.3 2.3-1.42 1.4L15 16.42V18h-2zM1 5a4 4 0 0 1 4-4h14a4 4 0 0 1 4 4v14a4 4 0 0 1-4 4H5a4 4 0 0 1-4-4zm1.5 0v14A2.5 2.5 0 0 0 5 21.5h14a2.5 2.5 0 0 0 2.5-2.5V5A2.5 2.5 0 0 0 19 2.5H5A2.5 2.5 0 0 0 2.5 5';

var maximize = 'M23 1v9h-2V4.41l-6.3 6.3-1.4-1.42L19.58 3H14V1zM1 23v-9h2v5.59l6.3-6.3 1.4 1.42L4.42 21H10v2z';

var megaphone = 'm5 18.54-.7-.12A4 4 0 0 1 1 14.48V9.52a4 4 0 0 1 3.3-3.94l11.57-2.04A2.6 2.6 0 0 0 18 1h2v6q.8 0 1.53.38.74.38 1.3 1.08t.87 1.63a6 6 0 0 1 0 3.82q-.3.92-.87 1.63-.56.7-1.3 1.08Q20.8 17 20 17v6h-2c0-1.25-.9-2.32-2.13-2.54l-3.59-.63-.6 1.35a3 3 0 0 1-3.8 1.6l-.93-.36A3 3 0 0 1 5 19.62zM18 4.78q-.79.54-1.78.73L7 7.13v9.74l9.22 1.62q1 .19 1.78.73zM5 16.51V7.5l-.35.06A2 2 0 0 0 3 9.52v4.96a2 2 0 0 0 1.65 1.97zm2 2.39v.71a1 1 0 0 0 .65.94l.94.35a1 1 0 0 0 1.26-.53l.4-.9zm13.77-9.67c-.38-.24-.77.13-.77.58v4.38c0 .45.39.82.77.58q.37-.23.64-.65.29-.42.44-.97a4.3 4.3 0 0 0 0-2.3q-.15-.55-.44-.97-.27-.42-.64-.65';

var menu = 'M22 4H2v2h20zm0 7H2v2h20zM2 20h20v-2H2z';

var messenger = 'M0 11.64C0 4.95 5.24 0 12 0s12 4.96 12 11.64-5.24 11.64-12 11.64q-1.83 0-3.47-.46a1 1 0 0 0-.65.05L5.5 23.92a.96.96 0 0 1-1.35-.85l-.06-2.14a1 1 0 0 0-.32-.68A11.4 11.4 0 0 1 0 11.64m8.32-2.19-3.53 5.6c-.33.53.32 1.13.83.75l3.78-2.87a.7.7 0 0 1 .87 0l2.8 2.1a1.8 1.8 0 0 0 2.61-.48l3.53-5.6c.33-.53-.33-1.14-.83-.75l-3.79 2.87a.7.7 0 0 1-.86 0l-2.8-2.1a1.8 1.8 0 0 0-2.61.48';

var microphone = 'M12 0a5 5 0 0 0-5 5v6a5 5 0 0 0 10 0V5a5 5 0 0 0-5-5m0 14a3 3 0 0 1-3-3V5a3 3 0 1 1 6 0v6a3 3 0 0 1-3 3M3 9v2a9 9 0 0 0 8 8.95V24h2v-4.05A9 9 0 0 0 21 11V9h-2v2a7 7 0 1 1-14 0V9z';

var minimize = 'M21.3 1.3 15 7.58V2h-2v9h9V9h-5.59l6.3-6.3zM2 13v2h5.6l-6.3 6.3 1.42 1.4L9 16.42V22h2v-9z';

var mobile = 'M20 20a4 4 0 0 1-4 4H8a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4h8a4 4 0 0 1 4 4zM16 2H8a2 2 0 0 0-2 2h12a2 2 0 0 0-2-2M6 20c0 1.1.9 2 2 2h8a2 2 0 0 0 2-2zM7 6a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1z';

var moon = 'M22.1 18.5c.43-.69-.2-1.5-1-1.5H21a10 10 0 0 1-8.35-15.51C13.05.88 12.73 0 12 0a12 12 0 1 0 10.1 18.5M9 7a12 12 0 0 0 10.26 11.88A10 10 0 1 1 10 2.2c-.64 1.46-1 3.09-1 4.79m10.3-2h-.6l-.09.37a3 3 0 0 1-2.24 2.24l-.37.1v.6l.37.09a3 3 0 0 1 2.24 2.24l.09.37h.6l.09-.37a3 3 0 0 1 2.24-2.24L22 8.3v-.6l-.37-.09a3 3 0 0 1-2.24-2.24z';

var movePin = 'm19.59 11-4.3 4.3 1.42 1.4 6.7-6.7-6.7-6.7-1.42 1.4L19.6 9H6a5 5 0 0 0-5 5v6h2v-6a3 3 0 0 1 3-3z';

var musicOff = 'm1.7.3 22 22-1.4 1.4-22-22zM23 16q-.02 1.2-.62 2.14l-1.49-1.5a2 2 0 0 0-2.54-2.53l-1.49-1.5a4 4 0 0 1 4.14-.07v-4.4q-.35.17-.75.26l-6.27 1.34-1.68-1.68 7.53-1.62A1.5 1.5 0 0 0 21 5v-.53a1 1 0 0 0-1.21-.97l-8.42 1.8a3 3 0 0 0-1.24.59L8.71 4.47a5 5 0 0 1 2.24-1.13l8.42-1.8A3 3 0 0 1 23 4.47zM9 19a4 4 0 1 1-2-3.46v-4.3l2 2zm-6 0a2 2 0 1 0 4 0 2 2 0 0 0-4 0';

var musicOn = 'M23 4.47a3 3 0 0 0-3.63-2.93l-8.42 1.8A5 5 0 0 0 7 8.24v7.3A4 4 0 1 0 9 19v-6.57a2 2 0 0 1 1.58-1.96l9.67-2.07q.4-.09.75-.25v4.39A4 4 0 1 0 23 16zM21 5c0 .7-.49 1.3-1.17 1.44l-9.67 2.07A4 4 0 0 0 9 8.96v-.73a3 3 0 0 1 2.37-2.93l8.42-1.8a1 1 0 0 1 1.21.97zM5 17a2 2 0 1 1 0 4 2 2 0 0 1 0-4m14-3a2 2 0 1 1 0 4 2 2 0 0 1 0-4';

var mute = 'M2.5 17H5l6.48 4.63a2 2 0 0 0 1.16.37H13a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1h-.36a2 2 0 0 0-1.16.37L5 7H2.5A2.5 2.5 0 0 0 0 9.5v5A2.5 2.5 0 0 0 2.5 17M7 9.06a2 2 0 0 1 .84-1.63L12 4.46v15.08l-4.16-2.97A2 2 0 0 1 7 14.94zM2.5 15a.5.5 0 0 1-.5-.5v-5c0-.28.22-.5.5-.5H4a1 1 0 0 1 1 1v4a1 1 0 0 1-1 1zm13.8-5.3 2.29 2.3-2.3 2.3 1.42 1.4L20 13.42l2.3 2.3 1.4-1.42-2.28-2.3 2.3-2.3-1.42-1.4-2.3 2.28-2.3-2.3z';

var muteFill = 'M2.5 17H5l6.48 4.63a2 2 0 0 0 1.16.37H13a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1h-.36a2 2 0 0 0-1.16.37L5 7H2.5A2.5 2.5 0 0 0 0 9.5v5A2.5 2.5 0 0 0 2.5 17m13.8-7.3 2.29 2.3-2.3 2.3 1.42 1.4L20 13.42l2.3 2.3 1.4-1.42-2.28-2.3 2.3-2.3-1.42-1.4-2.3 2.28-2.3-2.3z';

var orientationLandscape = 'M23 21a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3c0-1.1.9-2 2-2h6a2 2 0 0 1 2 2v10h10a2 2 0 0 1 2 2zM3 13h6V3H3zm9.59-8 3.7-3.7 1.42 1.4L16.4 4H18a4 4 0 0 1 4 4v3h-2V8a2 2 0 0 0-2-2h-1.59l1.3 1.3-1.42 1.4z';

var orientationPortrait = 'M3 1a2 2 0 0 0-2 2v18c0 1.1.9 2 2 2h18a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2H11V3a2 2 0 0 0-2-2zm8 20v-6h10v6zm8-9.59 3.7-3.7-1.4-1.42L20 7.6V6a4 4 0 0 0-4-4h-3v2h3a2 2 0 0 1 2 2v1.59l-1.3-1.3-1.4 1.42z';

var outdent = 'M12 5h12v2H12zm0 12h8v2h-8zm12-4H12v-2h12zM.37 12.84a1.15 1.15 0 0 1 0-1.68l6.42-5.97A.72.72 0 0 1 8 5.72v12.56a.72.72 0 0 1-1.2.53zM2.4 12 6 15.34V8.66z';

var outlook = 'M7.58 9.59q-.71 0-1.12.66a3 3 0 0 0-.42 1.74q0 1.1.42 1.74.41.64 1.09.64.7 0 1.1-.62.42-.63.42-1.73a3.4 3.4 0 0 0-.4-1.8 1.2 1.2 0 0 0-1.09-.63M23 8.29s-6.65 4.37-6.41 4.23c0 0-.24.14-.43 0l-1.4-.94v5.84h7.06c.62 0 1.18-.36 1.18-1.22zM7.62 8.15q1.29 0 2.07 1.04.8 1.04.8 2.74a4.5 4.5 0 0 1-.82 2.81 2.6 2.6 0 0 1-2.15 1.07q-1.27 0-2.1-1.03a4.3 4.3 0 0 1-.8-2.7q0-1.76.82-2.84a2.6 2.6 0 0 1 2.18-1.09m7.15-2.49v4.3l1.52.95c.04.02.12.02.16 0L23 6.55c0-.52-.49-.89-.76-.89zM13.95 1 1 3.48v16.84L13.95 23z';

var overlayText = 'M14.4 13.2 12 7.02 9.6 13.2zM4 1a3 3 0 0 0-3 3v16a3 3 0 0 0 3 3h16a3 3 0 0 0 3-3V4a3 3 0 0 0-3-3zm1.25 18 5.8-14.1h1.9L18.73 19h-2.08l-1.58-4.08H8.93L7.35 19z';

var overlayTextOutline = 'm5.25 19 5.8-14.1h1.9L18.73 19h-2.08l-1.58-4.08H8.93L7.35 19zm9.14-5.8L12 7.02 9.6 13.2zM1 4a3 3 0 0 1 3-3h16a3 3 0 0 1 3 3v16a3 3 0 0 1-3 3H4a3 3 0 0 1-3-3zm2 0v16a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1';

var overview = 'M8 1a3 3 0 0 1 3 3v6a3 3 0 0 1-3 3H4a3 3 0 0 1-3-3V4a3 3 0 0 1 3-3zm-5 9a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1zm13 13a3 3 0 0 1-3-3v-6a3 3 0 0 1 3-3h4a3 3 0 0 1 3 3v6a3 3 0 0 1-3 3zm-1-3a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1v-6a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1zM1 18a3 3 0 0 1 3-3h4a3 3 0 0 1 3 3v2a3 3 0 0 1-3 3H4a3 3 0 0 1-3-3zm3-1a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1zm12-8a3 3 0 0 1-3-3V4a3 3 0 0 1 3-3h4a3 3 0 0 1 3 3v2a3 3 0 0 1-3 3zm-1-3a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1z';

var paperClip = 'M19.04 3.46a2.9 2.9 0 0 0-4.08 0L4.7 13.7a4.66 4.66 0 0 0 6.58 6.58l9-9 1.42 1.42-9 9a6.66 6.66 0 1 1-9.42-9.42L13.54 2.04a4.89 4.89 0 1 1 6.92 6.92l-9.84 9.83a3 3 0 0 1-4.24 0l-.17-.17a3 3 0 0 1 0-4.24l8.58-8.59 1.42 1.42-8.59 8.58a1 1 0 0 0 0 1.42l.17.17a1 1 0 0 0 1.42 0l9.83-9.84a2.9 2.9 0 0 0 0-4.08';

var paperLinesPlus = 'M6 22h6v2H6a4 4 0 0 1-4-4V7.24a4 4 0 0 1 1.17-2.83L7.1.5A1.7 1.7 0 0 1 10 1.7V4a4 4 0 0 1-4 4H5a1 1 0 0 0-1 1v11c0 1.1.9 2 2 2M8 4V2.41L4.59 5.83 4.43 6H6a2 2 0 0 0 2-2m14 8h-2V4a2 2 0 0 0-2-2h-6V0h6a4 4 0 0 1 4 4zM8 10h8v2H8zm4 6H8v-2h4zm8 8h-2v-4h-4v-2h4v-4h2v4h4v2h-4z';

var pause = 'M5 1a2 2 0 0 0-2 2v18c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2zm12 0a2 2 0 0 0-2 2v18c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2z';

var pen = 'M8.81 7 10.78.7a1 1 0 0 1 .96-.7h.52a1 1 0 0 1 .96.7L15.19 7a2 2 0 0 1 1.95 1.6l2.84 14.2-1.96.4L15.18 9H8.82L5.98 23.2l-1.96-.4L6.86 8.6A2 2 0 0 1 8.8 7';

var penAuto = 'M2.61.37A3 3 0 0 1 .37 2.61L0 2.7v.6l.37.09a3 3 0 0 1 2.24 2.24L2.7 6h.6l.09-.37a3 3 0 0 1 2.24-2.24L6 3.3v-.6l-.37-.09A3 3 0 0 1 3.39.37L3.3 0h-.6zm8.17.33L8.81 7a2 2 0 0 0-1.95 1.6L4.02 22.8l1.96.4L8.82 9h6.36l.94 4.7 1.96-.4-.94-4.7A2 2 0 0 0 15.2 7L13.22.7a1 1 0 0 0-.96-.7h-.52a1 1 0 0 0-.96.7M21.5 17a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3m-2.2 1h-.6l-.09.37a3 3 0 0 1-2.24 2.24l-.37.09v.6l.37.09a3 3 0 0 1 2.24 2.24l.09.37h.6l.09-.37a3 3 0 0 1 2.24-2.24l.37-.09v-.6l-.37-.09a3 3 0 0 1-2.24-2.24z';

var people = 'M13 6.5a4.5 4.5 0 1 1-9 0 4.5 4.5 0 0 1 9 0M8.5 4a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5M20 7a3 3 0 1 1-6 0 3 3 0 0 1 6 0m-3-1a1 1 0 1 0 0 2 1 1 0 0 0 0-2M0 21c0-4.9 3.75-9 8.5-9s8.5 4.1 8.5 9a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1m14.93-1c-.45-3.44-3.2-6-6.43-6s-5.98 2.56-6.43 6zm3.76-1.68q-.17-.68-.4-1.32h3.61a5 5 0 0 0-6.06-3.86 11 11 0 0 0-1.8-1.49Q15.4 11.01 17 11a7 7 0 0 1 7 7 1 1 0 0 1-1 1h-4.2a5 5 0 0 0-.11-.68';

var performancePlus = 'M12 24a12 12 0 1 0 0-24 12 12 0 0 0 0 24m4.79-18.9a3.1 3.1 0 0 0 2.11 2.1c.12.04.12.21 0 .25a3.1 3.1 0 0 0-2.12 2.11.13.13 0 0 1-.25 0 3.1 3.1 0 0 0-2.12-2.11.13.13 0 0 1 0-.25 3.1 3.1 0 0 0 2.12-2.12.13.13 0 0 1 .25 0M10.8 18.75a8.2 8.2 0 0 0-5.56-5.56.34.34 0 0 1 0-.65A8.2 8.2 0 0 0 10.8 7c.1-.32.55-.32.65 0A8.2 8.2 0 0 0 17 12.55c.32.1.32.55 0 .65a8.2 8.2 0 0 0-5.56 5.56.34.34 0 0 1-.65 0';

var person = 'M12 0a5.5 5.5 0 1 0 0 11 5.5 5.5 0 0 0 0-11m3.5 5.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0M12 12A10 10 0 0 0 2 22a1 1 0 0 0 1 1h18a1 1 0 0 0 1-1 10 10 0 0 0-10-10m0 2a8 8 0 0 1 7.94 7H4.06A8 8 0 0 1 12 14';

var personAdd = 'M12 11a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11M8.5 5.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0M3 23h9v-2H4.06a8 8 0 0 1 11.05-6.37l.78-1.85A10 10 0 0 0 2 22a1 1 0 0 0 1 1m17-3h4v-2h-4v-4h-2v4h-4v2h4v4h2z';

var personFill = 'M17.5 5.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0M2 22a10 10 0 0 1 20 0 1 1 0 0 1-1 1H3a1 1 0 0 1-1-1';

var personMagnifyingGlass = 'M12 11a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11M8.5 5.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0M3 23h9v-2H4.06a8 8 0 0 1 8.83-6.95l.22-1.99A10 10 0 0 0 2 22a1 1 0 0 0 1 1m15-1q1.13-.01 2.03-.55l2.26 2.26 1.42-1.42-2.26-2.26q.54-.91.55-2.03a4 4 0 1 0-4 4m-2-4a2 2 0 1 1 4 0 2 2 0 0 1-4 0';

var phone = 'M7.33 3A4.4 4.4 0 0 0 3 7.4v.31C3 15.05 8.95 21 16.29 21h.37c2.37 0 4.3-1.9 4.34-4.26l-4.98-1.54-1.46 2.9-.72-.11A9.5 9.5 0 0 1 6 10.16l-.11-.68 3.34-1.91zM1 7.4A6.4 6.4 0 0 1 7.4 1c.77 0 1.46.46 1.75 1.17l1.93 4.63a2 2 0 0 1-.85 2.5l-2.1 1.2a7.5 7.5 0 0 0 5.32 5.36l.78-1.55a2 2 0 0 1 2.37-1.02l5.07 1.56c.79.24 1.33.98 1.33 1.8A6.34 6.34 0 0 1 16.66 23h-.37A15.3 15.3 0 0 1 1 7.71z';

var pin = 'M5 3h2a1 1 0 0 1 1 1v3.69l-.92.2a5 5 0 0 0-3.97 4.66l-.1 2.4A1 1 0 0 0 4 16h7v2.3q0 2.7.66 5.33l.09.37h.5l.1-.37a22 22 0 0 0 .65-5.34V16h7a1 1 0 0 0 1-1.1l-.24-2.58a5 5 0 0 0-3.9-4.43l-.86-.2V4a1 1 0 0 1 1-1h2V1H5zm5 1a3 3 0 0 0-.17-1h4.34A3 3 0 0 0 14 4v5.3l2.43.54a3 3 0 0 1 2.34 2.66l.13 1.5H5.05l.06-1.36a3 3 0 0 1 2.38-2.8L10 9.31z';

var pinHide = 'm.3 1.7 22 22 1.4-1.4-22-22zM21 14.92l-.24-2.6a5 5 0 0 0-3.9-4.42L16 7.7V4a1 1 0 0 1 1-1h2V1H5.24l2.04 2.04a1 1 0 0 1 .68.68L10 5.76V4a3 3 0 0 0-.17-1h4.34A3 3 0 0 0 14 4v5.3l2.43.54a3 3 0 0 1 2.34 2.66l.13 1.5h-.66l1.98 1.98A1 1 0 0 0 21 14.9M5.1 12.64a3 3 0 0 1 1.1-2.19L4.8 9.03a5 5 0 0 0-1.68 3.52l-.1 2.4A1 1 0 0 0 4 16h7v2.3q0 2.7.66 5.33l.09.37h.5l.1-.37a22 22 0 0 0 .65-5.34v-1.05L9.76 14H5.05z';

var pincode = 'M12 0a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3M4 7a3 3 0 1 0 0-6 3 3 0 0 0 0 6M3 4a1 1 0 1 1 2 0 1 1 0 0 1-2 0m9 15a7 7 0 1 0 0-14 7 7 0 0 0 0 14m-5-7a5 5 0 1 1 10 0 5 5 0 0 1-10 0m-3 5a3 3 0 1 0 0 6 3 3 0 0 0 0-6m1 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0m7 1a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3M0 12a1.5 1.5 0 1 0 3 0 1.5 1.5 0 0 0-3 0m21 0a1.5 1.5 0 1 0 3 0 1.5 1.5 0 0 0-3 0m-1-5a3 3 0 1 0 0-6 3 3 0 0 0 0 6m-1-3a1 1 0 1 1 2 0 1 1 0 0 1-2 0m1 13a3 3 0 1 0 0 6 3 3 0 0 0 0-6m1 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0';

var pinterest = 'M7.54 23.15q-.2-2.05.26-3.93L9 14.04a7 7 0 0 1-.35-2.07c0-1.68.81-2.88 2.09-2.88.88 0 1.53.62 1.53 1.8q0 .57-.23 1.28l-.52 1.72q-.15.5-.15.92c0 1.2.91 1.87 2.08 1.87 2.09 0 3.57-2.16 3.57-4.96 0-3.12-2.04-5.12-5.05-5.12-3.36 0-5.49 2.19-5.49 5.24 0 1.22.38 2.36 1.11 3.14-.24.41-.5.48-.88.48-1.2 0-2.34-1.69-2.34-4 0-4 3.2-7.17 7.68-7.17 4.7 0 7.66 3.29 7.66 7.33s-2.88 7.15-5.98 7.15a3.8 3.8 0 0 1-3.06-1.48l-.62 2.5a11 11 0 0 1-1.62 3.67 12 12 0 1 0-.89-.31';

var play = 'M4 21.33V2.67C4 .67 6.23-.52 7.89.6l13.99 9.33a2.5 2.5 0 0 1 0 4.16l-14 9.33A2.5 2.5 0 0 1 4 21.33';

var protect = 'm10.5 15.41-3.21-3.2 1.41-1.42 1.8 1.8 4.8-4.8 1.4 1.42zM.43 7.28a4 4 0 0 1 2.7-4.33L11.05.32a3 3 0 0 1 1.9 0l7.91 2.63a4 4 0 0 1 2.7 4.33l-.74 5.57a12 12 0 0 1-6.3 9.04l-3.58 1.88a2 2 0 0 1-1.88 0l-3.58-1.88a12 12 0 0 1-6.3-9.04zm19.8-2.43-7.92-2.64a1 1 0 0 0-.63 0L3.77 4.85a2 2 0 0 0-1.35 2.16l.74 5.58a10 10 0 0 0 5.26 7.53L11.99 22H12l3.57-1.88a10 10 0 0 0 5.26-7.53l.74-5.58a2 2 0 0 0-1.35-2.16';

var questionMark = 'M12 16a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3m1.05-2.52c.18-.3.5-.54 1.05-.91h.01l.42-.3c1.43-.97 2.15-2.26 2.15-3.65a3.3 3.3 0 0 0-1.23-2.67 5.3 5.3 0 0 0-3.3-.95c-1.4 0-2.59.41-3.44 1.15a4 4 0 0 0-1.4 3.03v.18l2.23.39.02-.23q.07-1.2.72-1.8.63-.62 1.83-.63 1.09.01 1.66.48.57.45.58 1.26 0 .64-.27 1.04-.28.41-.97.86l-.48.33a5 5 0 0 0-1.52 1.45c-.34.56-.49 1.2-.49 2v.56h2.19v-.35c0-.6.06-.96.24-1.24M12 24a12 12 0 1 0 0-24 12 12 0 0 0 0 24M2 12a10 10 0 1 1 20 0 10 10 0 0 1-20 0';

var recordLimit = 'M14 8a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-4c0-1.1.9-2 2-2zm10 4a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var recordLimit5 = 'M11.94 0H12a12 12 0 0 1 8.53 3.56 1 1 0 1 1-1.48 1.35 10 10 0 0 0-7-2.91h-.1a1 1 0 0 1 0-2M8.76 1.44a1 1 0 0 1-.54 1.3l-.1.04A1 1 0 1 1 7.36.93l.1-.04a1 1 0 0 1 1.31.55m-3.8 2.04a1 1 0 0 1 0 1.42l-.07.06a1 1 0 1 1-1.43-1.4l.09-.09a1 1 0 0 1 1.41.01m16.79 3.34a1 1 0 0 1 1.3.53l.05.1a1 1 0 1 1-1.89.68 1 1 0 0 1 .54-1.31m-19.52 0a1 1 0 0 1 .54 1.3l-.04.1a1 1 0 0 1-1.85-.76l.04-.1a1 1 0 0 1 1.31-.54M1 10.95a1 1 0 0 1 1 1v.1a1 1 0 0 1-2 0v-.11a1 1 0 0 1 1-1m22 0a1 1 0 0 1 1 1v.11a1 1 0 1 1-2-.01v-.1a1 1 0 0 1 1-1m-.44 4.29c.52.2.76.79.55 1.3l-.03.06-.01.05a1 1 0 1 1-1.85-.78l.02-.04.02-.05a1 1 0 0 1 1.3-.54m-21.12 0a1 1 0 0 1 1.3.54l.04.1a1 1 0 0 1-1.85.77l-.04-.1a1 1 0 0 1 .55-1.31m19.08 3.79a1 1 0 0 1 0 1.41l-.08.09a1 1 0 0 1-1.4-1.43l.02-.02.04-.04a1 1 0 0 1 1.42-.01m-17.04 0a1 1 0 0 1 1.42 0l.06.07a1 1 0 1 1-1.4 1.43l-.09-.09a1 1 0 0 1 .01-1.41m3.34 2.73a1 1 0 0 1 1.3-.54l.1.04a1 1 0 0 1-.76 1.85l-.1-.04a1 1 0 0 1-.54-1.31m10.36 0a1 1 0 0 1-.53 1.3l-.1.05a1 1 0 1 1-.77-1.85l.1-.04a1 1 0 0 1 1.3.54M10.95 23a1 1 0 0 1 1-1h.1a1 1 0 0 1 0 2h-.11a1 1 0 0 1-1-1m1.4-12.08c1.44 0 2.46.95 2.46 2.52 0 1.65-1.21 2.71-2.94 2.71-1.4 0-2.5-.68-2.8-1.73l1.44-.65q.3.94 1.32.95c.82 0 1.32-.48 1.32-1.27 0-.8-.45-1.27-1.23-1.27-.6 0-1.03.29-1.24.67l-1.3-.51.73-4.1h4.25v1.49H11.3l-.33 1.64c.3-.3.8-.45 1.38-.45';

var recordLimit10 = 'M11.94 0H12a12 12 0 0 1 11.02 7.24l.05.11.04.1a1 1 0 1 1-1.89.68l-.03-.1A10 10 0 0 0 12.04 2h-.1a1 1 0 0 1 0-2M8.76 1.44a1 1 0 0 1-.54 1.3l-.1.04A1 1 0 1 1 7.36.93l.1-.04a1 1 0 0 1 1.31.55m-3.8 2.04a1 1 0 0 1 0 1.42l-.07.06a1 1 0 1 1-1.43-1.4l.09-.09a1 1 0 0 1 1.41.01M2.24 6.82a1 1 0 0 1 .54 1.3l-.04.1a1 1 0 0 1-1.85-.76l.04-.1a1 1 0 0 1 1.31-.54M1 10.95a1 1 0 0 1 1 1v.1a1 1 0 0 1-2 0v-.11a1 1 0 0 1 1-1m22 0a1 1 0 0 1 1 1v.11a1 1 0 1 1-2-.01v-.1a1 1 0 0 1 1-1m-.44 4.29c.52.2.76.79.55 1.3l-.03.06-.01.05a1 1 0 1 1-1.85-.78l.02-.04.02-.05a1 1 0 0 1 1.3-.54m-21.12 0a1 1 0 0 1 1.3.54l.04.1a1 1 0 0 1-1.85.77l-.04-.1a1 1 0 0 1 .55-1.31m19.08 3.79a1 1 0 0 1 0 1.41l-.08.09a1 1 0 0 1-1.4-1.43l.02-.02.04-.04a1 1 0 0 1 1.42-.01m-17.04 0a1 1 0 0 1 1.42 0l.06.07a1 1 0 1 1-1.4 1.43l-.09-.09a1 1 0 0 1 .01-1.41m3.34 2.73a1 1 0 0 1 1.3-.54l.1.04a1 1 0 0 1-.76 1.85l-.1-.04a1 1 0 0 1-.54-1.31m10.36 0a1 1 0 0 1-.53 1.3l-.1.05a1 1 0 1 1-.77-1.85l.1-.04a1 1 0 0 1 1.3.54M10.95 23a1 1 0 0 1 1-1h.1a1 1 0 0 1 0 2h-.11a1 1 0 0 1-1-1M8.06 8.25H9.6V16H8.01v-5.36c-.28.48-.9.69-1.73.69V9.72c1.14 0 1.77-.48 1.78-1.47m6.27 7.9c-2.01 0-3.22-1.5-3.22-4.03 0-2.52 1.21-4.03 3.22-4.03 2.03 0 3.23 1.5 3.23 4.03s-1.2 4.03-3.23 4.03m0-1.48c.98 0 1.58-.95 1.58-2.55s-.6-2.54-1.58-2.54-1.56.94-1.56 2.54.58 2.55 1.56 2.55';

var recordLimit15 = 'M11.94 0H12a12 12 0 0 1 12 11.94v.12a1 1 0 1 1-2-.01v-.1a10 10 0 0 0-2.92-7.02l-.03-.02a10 10 0 0 0-7-2.91h-.1a1 1 0 0 1 0-2M8.76 1.44a1 1 0 0 1-.54 1.3l-.1.04A1 1 0 1 1 7.36.93l.1-.04a1 1 0 0 1 1.31.55m-3.8 2.04a1 1 0 0 1 0 1.42l-.07.06a1 1 0 1 1-1.43-1.4l.09-.09a1 1 0 0 1 1.41.01M2.24 6.82a1 1 0 0 1 .54 1.3l-.04.1a1 1 0 0 1-1.85-.76l.04-.1a1 1 0 0 1 1.31-.54M1 10.95a1 1 0 0 1 1 1v.1a1 1 0 0 1-2 0v-.11a1 1 0 0 1 1-1m21.56 4.29c.52.2.76.79.55 1.3l-.03.06-.01.05a1 1 0 1 1-1.85-.78l.02-.04.02-.05a1 1 0 0 1 1.3-.54m-21.12 0a1 1 0 0 1 1.3.54l.04.1a1 1 0 0 1-1.85.77l-.04-.1a1 1 0 0 1 .55-1.31m19.08 3.79a1 1 0 0 1 0 1.41l-.08.09a1 1 0 0 1-1.4-1.43l.02-.02.04-.04a1 1 0 0 1 1.42-.01m-17.04 0a1 1 0 0 1 1.42 0l.06.07a1 1 0 1 1-1.4 1.43l-.09-.09a1 1 0 0 1 .01-1.41m3.34 2.73a1 1 0 0 1 1.3-.54l.1.04a1 1 0 0 1-.76 1.85l-.1-.04a1 1 0 0 1-.54-1.31m10.36 0a1 1 0 0 1-.53 1.3l-.1.05a1 1 0 1 1-.77-1.85l.1-.04a1 1 0 0 1 1.3.54M10.95 23a1 1 0 0 1 1-1h.1a1 1 0 0 1 0 2h-.11a1 1 0 0 1-1-1m-.78-7H8.58v-5.36c-.27.48-.89.69-1.72.69V9.72c1.13 0 1.77-.48 1.78-1.47h1.53zm4.03.15c-1.4 0-2.5-.68-2.8-1.73l1.44-.65q.3.94 1.32.95c.82 0 1.32-.48 1.32-1.27 0-.8-.45-1.27-1.23-1.27-.6 0-1.03.29-1.23.67l-1.3-.51.72-4.1h4.25v1.49h-3.05l-.33 1.64c.3-.3.8-.45 1.38-.45 1.43 0 2.45.95 2.45 2.52 0 1.65-1.21 2.71-2.94 2.71';

var recordLimit30 = 'M11.95 2H12a10 10 0 1 1 0 20h-.05a1 1 0 1 0 0 2H12a12 12 0 0 0 0-24h-.06a1 1 0 1 0 .01 2m-3.19-.56a1 1 0 0 0-1.3-.55l-.1.04a1 1 0 1 0 .77 1.85l.09-.04a1 1 0 0 0 .54-1.3M4.97 3.48a1 1 0 0 0-1.41 0l-.09.08a1 1 0 1 0 1.43 1.4l.06-.06a1 1 0 0 0 .01-1.42M2.24 6.82a1 1 0 0 0-1.3.53l-.05.1a1 1 0 1 0 1.85.77l.02-.06.01-.03a1 1 0 0 0-.53-1.31M1 10.95a1 1 0 0 0-1 1v.11a1 1 0 1 0 2-.01v-.1a1 1 0 0 0-1-1m.44 4.29a1 1 0 0 0-.55 1.3l.04.1a1 1 0 0 0 1.85-.77l-.04-.09a1 1 0 0 0-1.3-.54m2.04 3.79a1 1 0 0 0 0 1.41l.08.09a1 1 0 1 0 1.34-1.5 1 1 0 0 0-1.42 0m3.34 2.73a1 1 0 0 0 .53 1.3l.1.05a1 1 0 0 0 .77-1.85l-.1-.04a1 1 0 0 0-1.3.54m1.96-10.63 2.02-1.49v-1.4H5.55v1.49h3.1l-2.3 1.6.56 1.13c.37-.23.74-.33 1.2-.33.8 0 1.34.51 1.34 1.27 0 .82-.55 1.32-1.4 1.32q-1.1 0-1.4-1.07l-1.48.66c.29 1.17 1.37 1.84 2.98 1.84 1.7 0 2.95-1.1 2.95-2.61 0-1.48-.86-2.36-2.32-2.41m3.28.99c0 2.53 1.2 4.03 3.22 4.03s3.22-1.5 3.22-4.03c0-2.52-1.2-4.03-3.22-4.03s-3.23 1.5-3.23 4.03m4.8 0c0 1.6-.6 2.55-1.58 2.55s-1.56-.95-1.56-2.55.58-2.54 1.56-2.54 1.57.94 1.57 2.54';

var recordLimit60 = 'M8.43 16.15c-1.94 0-3.15-1.5-3.15-3.97 0-2.64 1.4-4.09 3.37-4.09 1.24 0 2.29.52 2.71 1.29l-1.3.98c-.32-.49-.8-.8-1.42-.8q-1.6.01-1.72 2.31c.3-.6.95-.96 1.84-.96 1.46 0 2.58.99 2.58 2.55 0 1.52-1.14 2.7-2.91 2.7m-.07-3.88c-.76 0-1.33.5-1.33 1.27 0 .76.57 1.25 1.33 1.25s1.33-.5 1.33-1.25c0-.77-.57-1.27-1.33-1.27M15.5 8.1c2.02 0 3.22 1.5 3.22 4.03s-1.2 4.03-3.22 4.03c-2.01 0-3.22-1.5-3.22-4.03 0-2.52 1.2-4.03 3.22-4.03m0 1.49c-.98 0-1.56.94-1.56 2.54s.58 2.55 1.56 2.55 1.57-.95 1.57-2.55-.6-2.54-1.57-2.54M24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var redo = 'm19.59 10-4.3 4.3 1.42 1.4L23.4 9l-6.7-6.7-1.42 1.4L19.6 8H7a6 6 0 1 0 0 12h5v-2H7a4 4 0 1 1 0-8z';

var refresh = 'M24 9V1h-2v4.36A11.99 11.99 0 0 0 0 12a12 12 0 0 0 20.45 8.52l-1.4-1.42A10 10 0 1 1 20.66 7H16v2z';

var remove = 'M6 11h12v2H6zm18 1a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var reorderImages = 'M4.01 9.47A8.5 8.5 0 0 1 17.98 8H15v2h6V4h-2v2.15A10.5 10.5 0 0 0 2.25 8.52zM3 11a2 2 0 0 0-2 2v6c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2zm2 8H3v-6h2zm14-7a2 2 0 0 0-2 2v4c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2zm2 2v4h-2v-4zM9 18c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2zm2-4h2v4h-2z';

var replace = 'M1 3c0-1.1.9-2 2-2h6a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2zm2 6h6V3H3zm10 6c0-1.1.9-2 2-2h6a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-6a2 2 0 0 1-2-2zm2 0v6h6v-6zm.3-7.3 1.4-1.4L18 7.58V6a2 2 0 0 0-2-2h-3V2h3a4 4 0 0 1 4 4v1.59l1.3-1.3 1.4 1.42-3.7 3.7zm-8 10L6 16.42V18c0 1.1.9 2 2 2h3v2H8a4 4 0 0 1-4-4v-1.59l-1.3 1.3-1.4-1.42L5 12.6l3.7 3.7z';

var report = 'M20.49 3.51q-.36-.35-.74-.67a12 12 0 1 0 .74.67M4.26 18.33A10 10 0 0 1 18.33 4.26zm1.41 1.41L19.74 5.67A10 10 0 0 1 5.67 19.74';

var rewind = 'M22 4.99v14.02c0 .8-.81 1.27-1.41.81l-9.2-7a1.05 1.05 0 0 1 0-1.63l9.2-7.01c.6-.46 1.41.01 1.41.81M9.59 4.18c.6-.46 1.41.01 1.41.81v14.02c0 .8-.81 1.27-1.41.81l-9.2-7a1.05 1.05 0 0 1 0-1.63z';

var ribbon = 'M12 14a5 5 0 1 0 0-10 5 5 0 0 0 0 10M9 9a3 3 0 1 1 6 0 3 3 0 0 1-6 0m10.48 5a9 9 0 1 0-14.97 0l-1.7 6.4a1.7 1.7 0 0 0 2.5 1.92l1.94-1.12 1.12 1.95a1.7 1.7 0 0 0 3.12-.42l.51-1.88.5 1.88a1.7 1.7 0 0 0 3.13.42l1.12-1.95 1.95 1.12a1.7 1.7 0 0 0 2.5-1.92zM5 9a7 7 0 1 1 14 0A7 7 0 0 1 5 9m14.08 11.24-3.06-1.77-1.77 3.06-.97-3.62c1.75-.25 3.34-1 4.61-2.1zm-9.33 1.3-1.77-3.07-3.06 1.77L6.1 15.8a9 9 0 0 0 4.6 2.1z';

var rocketship = 'M9 10a3 3 0 1 1 6 0 3 3 0 0 1-6 0m3-1a1 1 0 1 0 0 2 1 1 0 0 0 0-2M9.63 1.08A3 3 0 0 1 11.93 0h.13a3 3 0 0 1 2.3 1.08l1.74 2.08a12.5 12.5 0 0 1 2.77 6.18l2.04 1.17a3 3 0 0 1 1.51 2.8l-.32 5.11q0 .15-.03.27a2 2 0 0 1-3 1.32l-1.55-.93-.92-.55-.1.14-.4.53a2 2 0 0 1-1.6.8h-5a2 2 0 0 1-1.6-.8l-.4-.53-.1-.14L4.92 20q-.23.15-.5.22a2 2 0 0 1-2.52-1.8l-.32-5.12a3 3 0 0 1 1.5-2.8l2.05-1.17A12.5 12.5 0 0 1 7.9 3.16zM9.1 17.47l.4.53h5l.4-.53a11 11 0 0 0 1.36-2.45q.5-1.38.64-2.86.02-.21.08-.43a10.5 10.5 0 0 0-2.41-7.29l-1.74-2.08a1 1 0 0 0-.77-.36h-.12a1 1 0 0 0-.77.36L9.43 4.44a10.5 10.5 0 0 0-2.41 7.3q.05.2.08.42a11 11 0 0 0 .71 3.06q.5 1.2 1.3 2.25m10.94-5.14-.11-.08-.5-.28q-.12-.07-.3.02l-.17.17a13 13 0 0 1-.89 3.73c-.17.64.07 1.22.48 1.47l1.55.94.32-5.12a1 1 0 0 0-.38-.85m-16.39.4a1 1 0 0 0-.07.45l.32 5.12 1.55-.94c.41-.24.65-.83.48-1.47a13 13 0 0 1-.9-3.73l-.16-.17q-.18-.1-.3-.02l-.5.28a1 1 0 0 0-.42.48M15 23H9v-2h6z';

var rotate = 'M16 3H7v2h9a2 2 0 0 1 2 2v7.59l-2.3-2.3-1.4 1.42 4.7 4.7 4.7-4.7-1.4-1.42-2.3 2.3V7a4 4 0 0 0-4-4M3 11a2 2 0 0 0-2 2v7c0 1.1.9 2 2 2h7a2 2 0 0 0 2-2v-7a2 2 0 0 0-2-2zm7 9H3v-7h7z';

var saturation = 'M12.75.33C14.27 1.99 21 9.68 21 15c0 5.52-4.03 9-9 9s-9-3.48-9-9C3 9.68 9.73 1.99 11.25.33A1 1 0 0 1 12 0a1 1 0 0 1 .75.33M8.22 7.4a27 27 0 0 0-2.31 4.1A9 9 0 0 0 5 15c0 4.34 3.05 7 7 7s7-2.66 7-7q0-1.43-.9-3.5a27 27 0 0 0-2.32-4.1A51 51 0 0 0 12 2.5a51 51 0 0 0-3.78 4.9';

var saveOutline = 'M5 21.54V4.04a1.8 1.8 0 0 1 1.65-1.86 82 82 0 0 1 10.7 0c.9.06 1.65.83 1.65 1.85v17.51l-7-5zM6.52.2A3.8 3.8 0 0 0 3 4.03V22.5a1.51 1.51 0 0 0 2.4 1.23L12 19l6.6 4.72a1.51 1.51 0 0 0 2.4-1.23V4.03A3.8 3.8 0 0 0 17.48.2 84 84 0 0 0 6.52.2';

var saved = 'M3 4.03A3.8 3.8 0 0 1 6.52.2a84 84 0 0 1 10.96 0A3.8 3.8 0 0 1 21 4.03V22.5a1.51 1.51 0 0 1-2.4 1.23L12 19l-6.6 4.72A1.51 1.51 0 0 1 3 22.49z';

var scale = 'M1 1v7h2V4.41L10.59 12 3 19.59V16H1v7h7v-2H4.41L12 13.41 19.59 21H16v2h7v-7h-2v3.59L13.41 12 21 4.41V8h2V1h-7v2h3.59L12 10.59 4.41 3H8V1z';

var scissors = 'M7.66 9.45a4.5 4.5 0 1 0-4.26.03L6.81 12l-3.4 2.52a4.5 4.5 0 1 0 4.25.03L9 13.62l8.47 6.26a4 4 0 0 0 3.35.66l1.1-.27a.5.5 0 0 0 .16-.9L11.36 12 22.1 4.63a.5.5 0 0 0-.17-.9l-1.09-.27a4 4 0 0 0-3.35.66l-8.47 6.26zM3.73 3.73a2.5 2.5 0 1 1 3.54 3.54 2.5 2.5 0 0 1-3.54-3.54M8 18.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0';

var search = 'M17.33 18.74a10 10 0 1 1 1.41-1.41l4.47 4.47-1.41 1.41zM11 3a8 8 0 1 0 0 16 8 8 0 0 0 0-16';

var searchByImage = 'M1 5a4 4 0 0 1 4-4h4v2H5a2 2 0 0 0-2 2v4H1zm22 4h-2V5a2 2 0 0 0-2-2h-4V1h4a4 4 0 0 1 4 4zM5 23a4 4 0 0 1-4-4v-4h2v4c0 1.1.9 2 2 2h4v2zm18-4a4 4 0 0 1-4 4h-4v-2h4a2 2 0 0 0 2-2v-4h2zm-6-7a5 5 0 1 1-10 0 5 5 0 0 1 10 0m-5-3a3 3 0 1 0 0 6 3 3 0 0 0 0-6';

var searchFill = 'M16.51 19.34a10 10 0 1 1 2.83-2.83l4.58 4.58-2.83 2.83zM11 5a6 6 0 1 0 0 12 6 6 0 0 0 0-12';

var security = 'M.44 7.28a4 4 0 0 1 2.7-4.33L11.05.32a3 3 0 0 1 1.9 0l7.91 2.63a4 4 0 0 1 2.7 4.33l-.74 5.57a12 12 0 0 1-6.3 9.04l-3.58 1.88a2 2 0 0 1-1.88 0l-3.57-1.88a12 12 0 0 1-6.31-9.04zm19.79-2.43L13 2.45v19.03l2.58-1.36a10 10 0 0 0 5.26-7.53l.74-5.58a2 2 0 0 0-1.35-2.16m-16.46 0a2 2 0 0 0-1.35 2.16l.74 5.58a10 10 0 0 0 5.26 7.53L11 21.48V2.44z';

var select = 'M1 5a4 4 0 0 1 4-4h4v2H5a2 2 0 0 0-2 2v4H1zm18-2h-4V1h4a4 4 0 0 1 4 4v4h-2V5a2 2 0 0 0-2-2M1 19v-4h2v4c0 1.1.9 2 2 2h4v2H5a4 4 0 0 1-4-4m20 0v-4h2v4a4 4 0 0 1-4 4h-4v-2h4a2 2 0 0 0 2-2';

var send = 'M4.07 1.37a2.1 2.1 0 0 0-2.8 2.59L3.94 12l-2.69 8.04a2.1 2.1 0 0 0 2.81 2.6l18.1-7.7A3 3 0 0 0 24 12.18v-.36a3 3 0 0 0-1.83-2.76zm-.89 1.86a.1.1 0 0 1 .1-.02l18.11 7.7a1 1 0 0 1 .61.91v.36a1 1 0 0 1-.6.92L3.28 20.8a.1.1 0 0 1-.13-.12L5.72 13H14v-2H5.72L3.16 3.33a.1.1 0 0 1 .02-.1';

var shadows = 'M24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0m-13 9.95V2.05a10 10 0 0 0 0 19.9m2-.95v.95a10 10 0 0 0 3.36-.95zm7.66-4H13v2h6.14q.89-.9 1.52-2m1.3-4H13v2h8.54q.3-.96.41-2m-.42-4H13v2h8.95a10 10 0 0 0-.4-2m-2.4-4H13v2h7.66q-.63-1.1-1.52-2M13 2.05V3h3.36A10 10 0 0 0 13 2.05';

var shapes = 'M19.8 10.27A6.5 6.5 0 1 0 8.23 8.21l-.24.23a4.64 4.64 0 0 0-8 3.2v.22c0 2.72 2.14 4.77 3.92 6.03a20 20 0 0 0 3.68 2.03h.03L8 19l-.37.93.37.15.37-.15L8 19l.37.93.03-.01a12 12 0 0 0 1.14-.53q.64-.3 1.46-.8V21c0 1.1.9 2 2 2h9a2 2 0 0 0 2-2v-5a6 6 0 0 0-4.2-5.73M17 10q-.65 0-1.25.13a4.64 4.64 0 0 0-5.7-2.94A4.5 4.5 0 1 1 17.33 10zm-6.08 6.25A18 18 0 0 1 8 17.91a18 18 0 0 1-2.92-1.66C3.36 15.04 2 13.51 2 11.86v-.22a2.64 2.64 0 0 1 4.6-1.77L8 11.42l1.4-1.55a2.64 2.64 0 0 1 4.49 1A6 6 0 0 0 11 16v.2zM17 12h1a4 4 0 0 1 4 4v5h-9v-5a4 4 0 0 1 4-4';

var share = 'M17.7 5.8 12 .08l-5.7 5.7L7.7 7.2 11 3.9V15h2V3.91l3.3 3.3zM2 18v-5H0v5a4 4 0 0 0 4 4h16a4 4 0 0 0 4-4v-5h-2v5a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2';

var shoppingBag = 'M8 4a4 4 0 0 1 8 0v2h4.07a2 2 0 0 1 2 1.86l.62 8.78A5 5 0 0 1 17.7 22H6.3a5 5 0 0 1-5-5.36l.64-8.78a2 2 0 0 1 2-1.86H8zM3.93 8l-.63 8.79a3 3 0 0 0 3 3.21h11.4a3 3 0 0 0 3-3.21L20.07 8H16v4h-2V8h-4v4H8V8zM14 4a2 2 0 0 0-4 0v2h4z';

var shrink = 'M16.7 6.7 12 11.42l-4.7-4.7L8.7 5.3 11 7.6V1h2v6.59l2.3-2.3zm-1.4 12L13 16.42V23h-2v-6.59l-2.3 2.3-1.4-1.42 4.7-4.7 4.7 4.7z';

var shuffles = 'M21.03 1 1.53 3.4l.65 5.33v6.55h9.94L2.17 16.5l.8 6.5 19.51-2.4-.65-5.32V8.73h-9.98l9.98-1.23z';

var skintone = 'M12 24a12 12 0 1 1 0-24 12 12 0 0 1 0 24M2.05 13A10 10 0 0 0 11 21.95V13zM13 13v8.95A10 10 0 0 0 21.95 13zm0-10.95V11h8.95A10 10 0 0 0 13 2.05m-2 0A10 10 0 0 0 2.05 11H11z';

var slide = 'm12 .09-4.7 4.7 1.4 1.42L11 3.9V11H3.91l2.3-2.3-1.42-1.4L.1 12l4.7 4.7 1.42-1.4L3.9 13H11v7.09l-2.3-2.3-1.4 1.42 4.7 4.7 4.7-4.7-1.4-1.42-2.3 2.3V13h7.09l-2.3 2.3 1.42 1.4 4.7-4.7-4.7-4.7-1.42 1.4 2.3 2.3H13V3.91l2.3 2.3 1.4-1.42z';

var smiley = 'M6.5 5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5m11 0a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5m4.9 8.2C19.05 15.73 15.52 17 12 17s-7.05-1.27-10.4-3.8L.4 14.8C4.03 17.55 7.97 19 12 19s7.97-1.45 11.6-4.2z';

var snapchat = 'M11.99 1.73c3.22 0 5.9 2.68 5.9 5.91q0 1.13.07 2.1a.74.74 0 0 0 .9.66l1.02-.23.12-.02c.26 0 .5.18.55.44a.74.74 0 0 1-.48.86l-1.53.62a.8.8 0 0 0-.48.98c1.23 4.54 4.66 4.07 4.66 4.66 0 .74-2.59.85-2.82 1.08-.24.23-.01 1.37-.53 1.59q-.15.05-.41.05c-.4 0-.95-.07-1.54-.07-.5 0-1.04.05-1.5.27-1.24.57-2.44 1.64-3.92 1.64s-2.68-1.07-3.91-1.64a4 4 0 0 0-1.51-.27c-.59 0-1.14.07-1.54.07q-.25 0-.4-.05c-.53-.22-.3-1.36-.54-1.59-.23-.23-2.82-.34-2.82-1.08 0-.6 3.43-.12 4.66-4.66a.8.8 0 0 0-.48-.98l-1.53-.62a.74.74 0 0 1-.48-.86.56.56 0 0 1 .67-.42l1.01.23q.1.03.17.02c.38 0 .7-.29.74-.69q.06-.96.06-2.09A5.95 5.95 0 0 1 12 1.73m0-1.28a7 7 0 0 0-5.06 2.12 7.3 7.3 0 0 0-2.1 5.07q0 .7-.04 1.37l-.37-.09a1.85 1.85 0 0 0-2.22 1.39c-.22.99.32 1.98 1.27 2.33l1.12.46c-.74 2.28-2.12 2.72-3.04 3.02q-.37.1-.66.24a1.5 1.5 0 0 0-.89 1.35c0 .52.25 1 .7 1.34q.33.25.84.43c.47.16 1.01.26 1.46.34q.03.25.1.52a1.8 1.8 0 0 0 1.04 1.22c.33.14.67.15.9.15l.72-.03q.4-.04.82-.04.63 0 .97.15.46.23.99.55c.97.57 2.07 1.21 3.46 1.21s2.49-.64 3.46-1.21q.52-.31 1-.55.32-.15.96-.15.42 0 .82.04l.72.03c.23 0 .57-.01.9-.15a1.8 1.8 0 0 0 1.04-1.22q.07-.27.1-.52c.45-.08 1-.18 1.46-.34q.52-.18.85-.43.68-.54.69-1.34c0-.27-.09-.95-.89-1.35q-.3-.14-.66-.24c-.92-.3-2.3-.74-3.04-3.02l1.12-.46a2 2 0 0 0 1.27-2.33 1.83 1.83 0 0 0-2.22-1.39l-.37.09q-.03-.66-.03-1.37a7 7 0 0 0-2.12-5.07A7.3 7.3 0 0 0 11.99.45';

var sortAscending = 'm12 .59 8.7 8.7-1.4 1.42L13 4.4V24h-2V4.41l-6.3 6.3-1.4-1.42z';

var sortDescending = 'M11 19.59V0h2v19.59l6.3-6.3 1.4 1.42-8.7 8.7-8.7-8.7 1.4-1.42z';

var sound = 'M2.5 17H5l6.48 4.63a2 2 0 0 0 1.16.37H13a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1h-.36a2 2 0 0 0-1.16.37L5 7H2.5A2.5 2.5 0 0 0 0 9.5v5A2.5 2.5 0 0 0 2.5 17M7 9.06a2 2 0 0 1 .84-1.63L12 4.46v15.08l-4.16-2.97A2 2 0 0 1 7 14.94zM2.5 15a.5.5 0 0 1-.5-.5v-5c0-.28.22-.5.5-.5H4a1 1 0 0 1 1 1v4a1 1 0 0 1-1 1zM18.53 4.4l-.63 1.9a6 6 0 0 1 0 11.4l.63 1.9a8 8 0 0 0 0-15.2m-1.26 3.8-.64 1.9a2 2 0 0 1 0 3.8l.64 1.9a4 4 0 0 0 0-7.6';

var soundFill = 'M2.5 17H5l6.48 4.63a2 2 0 0 0 1.16.37H13a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1h-.36a2 2 0 0 0-1.16.37L5 7H2.5A2.5 2.5 0 0 0 0 9.5v5A2.5 2.5 0 0 0 2.5 17M18.53 4.4l-.63 1.9a6 6 0 0 1 0 11.4l.63 1.9a8 8 0 0 0 0-15.2m-1.26 3.8-.64 1.9a2 2 0 0 1 0 3.8l.64 1.9a4 4 0 0 0 0-7.6';

var soundSlash = 'm.3 1.7 22 22 1.4-1.4-22-22zm18.23 2.7-.63 1.9a6 6 0 0 1 2.46 9.82l1.42 1.41A8 8 0 0 0 18.53 4.4m-1.26 3.8-.64 1.9a2 2 0 0 1 .9 3.19l1.42 1.41a4 4 0 0 0-1.68-6.5M13 2h-.36a2 2 0 0 0-1.16.37L8.64 4.4l1.44 1.43L12 4.46v3.3l2 2V3a1 1 0 0 0-1-1m-6 9.24L2.76 7H2.5A2.5 2.5 0 0 0 0 9.5v5A2.5 2.5 0 0 0 2.5 17H5l6.48 4.63a2 2 0 0 0 1.16.37H13a1 1 0 0 0 1-1v-2.76l-2-2v3.3l-4.16-2.97A2 2 0 0 1 7 14.94zM2.5 15a.5.5 0 0 1-.5-.5v-5c0-.28.22-.5.5-.5H4a1 1 0 0 1 1 1v4a1 1 0 0 1-1 1z';

var soundSlashFill = 'm1.7.3 22 22-1.4 1.4-22-22zM24 12c0 2.15-.85 4.1-2.22 5.53l-1.42-1.41a5.98 5.98 0 0 0-2.46-9.81l.63-1.9A8 8 0 0 1 24 12m-4 0c0 1.04-.4 2-1.05 2.7l-1.42-1.41a2 2 0 0 0-.9-3.19l.64-1.9A4 4 0 0 1 20 12m-6-9v6.76L8.64 4.4l2.84-2.03A2 2 0 0 1 12.64 2H13a1 1 0 0 1 1 1M2.5 7h.26L14 18.24V21a1 1 0 0 1-1 1h-.36a2 2 0 0 1-1.16-.37L5 17H2.5A2.5 2.5 0 0 1 0 14.5v-5A2.5 2.5 0 0 1 2.5 7';

var sparkle = 'M19.73.94a5 5 0 0 0 3.65 3.42l.62.14v1l-.62.14a5 5 0 0 0-3.74 3.74l-.14.62h-1l-.14-.62a5 5 0 0 0-3.42-3.65l-.32-.09L14 5.5v-1l.62-.14A5 5 0 0 0 18.36.62L18.5 0h1l.14.62zM19 6.2q.52-.67 1.2-1.2A7 7 0 0 1 19 3.8q-.52.68-1.2 1.2.68.52 1.2 1.2m-1.73 6.02L20 13v2l-2.73.78a8 8 0 0 0-5.5 5.5L11 24H9l-.78-2.73a8 8 0 0 0-5.5-5.5L0 15v-2l2.73-.78a8 8 0 0 0 5.5-5.5L9 4h2l.78 2.73a8 8 0 0 0 5.5 5.5M10 7.74A10 10 0 0 1 3.74 14 10 10 0 0 1 10 20.26 10 10 0 0 1 16.26 14 10 10 0 0 1 10 7.74';

var speech = 'M22.35 17A11.5 11.5 0 1 0 17 22.36l3.69.65A2 2 0 0 0 23 20.7z';

var speechEllipsis = 'M7 10.5a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3m5 3a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3m5 0a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3m-5 10c1.8 0 3.5-.41 5-1.15l3.69.65A2 2 0 0 0 23 20.7l-.65-3.7A11.5 11.5 0 1 0 12 23.5m8.55-7.36-.28.58.76 4.31-4.31-.76-.58.28q-1.89.93-4.14.95a9.5 9.5 0 1 1 8.55-5.36';

var speechEllipsisFill = 'M17 22.35A11.5 11.5 0 1 1 22.36 17l.64 3.7a2 2 0 0 1-2.3 2.3zM7 10.5a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3m5 3a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3m5-3a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3';

var speechExclamationPoint = 'M12 6a2.07 2.07 0 0 0-2.04 2.46l.86 4.56a1.2 1.2 0 0 0 2.36 0l.86-4.56A2.07 2.07 0 0 0 12 6m0 9a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3m0 8.5c1.8 0 3.5-.41 5-1.15l3.69.65A2 2 0 0 0 23 20.7l-.65-3.7A11.5 11.5 0 1 0 12 23.5m8.55-7.36-.28.58.76 4.31-4.31-.76-.58.28q-1.89.93-4.14.95a9.5 9.5 0 1 1 8.55-5.36';

var speechHeart = 'm11.63 18.43.37-.93zl.37.15.37-.15-.37-.93.37.93.03-.01.26-.12a16 16 0 0 0 2.92-1.65c1.53-1.1 3.42-2.9 3.42-5.32v-.22a4.11 4.11 0 0 0-7-2.93 4.11 4.11 0 0 0-7 2.93v.22c0 2.42 1.89 4.23 3.42 5.32a17 17 0 0 0 3.18 1.77zM7 11.1a2.11 2.11 0 0 1 3.68-1.41L12 11.16l1.32-1.46A2.11 2.11 0 0 1 17 11.11v.22c0 1.36-1.11 2.64-2.58 3.69A15 15 0 0 1 12 16.4 15 15 0 0 1 9.58 15C8.11 13.98 7 12.7 7 11.34zm5 12.39c1.8 0 3.5-.41 5-1.15l3.69.65A2 2 0 0 0 23 20.7l-.65-3.7A11.5 11.5 0 1 0 12 23.5m8.55-7.36-.28.58.76 4.31-4.31-.76-.58.28q-1.89.93-4.14.95a9.5 9.5 0 1 1 8.55-5.36';

var speechOutline = 'm20.27 16.72.28-.58q.93-1.89.95-4.14a9.5 9.5 0 1 0-5.36 8.55l.58-.28 4.31.76zm-3.26 5.63A11.5 11.5 0 1 1 22.36 17l.64 3.7a2 2 0 0 1-2.3 2.3z';

var speed = 'M12 0c2.19 0 4.24.58 6 1.6l-1 1.74A10 10 0 1 0 20.66 7l1.73-1A12 12 0 1 1 12 0M9.88 10.59c1.3-1.3 4.52-2.61 6.13-3.2.39-.15.75.21.6.6-.59 1.6-1.9 4.83-3.2 6.13a2.5 2.5 0 1 1-3.53-3.53';

var speedThirdX = 'M21.66 14.59A10.02 10.02 0 0 0 12 2a10 10 0 0 0-5 18.66L6 22.4a12 12 0 1 1 17.6-7.28zm-8.25-.47a2.5 2.5 0 1 1-3.53-3.53c1.3-1.3 4.52-2.61 6.13-3.2.39-.15.75.21.6.6-.59 1.6-1.9 4.83-3.2 6.13M10.11 22c.53 0 .92.41.92.95a.9.9 0 0 1-.93.94.9.9 0 0 1-.94-.94c0-.54.4-.95.94-.95m7.59-.63c0 1.51-1.25 2.61-2.95 2.61-1.62 0-2.7-.67-2.98-1.84l1.48-.66q.3 1.07 1.4 1.07c.85 0 1.4-.5 1.4-1.32 0-.76-.55-1.27-1.34-1.27-.47 0-.83.1-1.2.33l-.56-1.14 2.3-1.59h-3.1v-1.48h5.25v1.4l-2.02 1.48c1.46.05 2.32.93 2.32 2.4m4.42 2.46L21 22.09l-1.16 1.74h-1.77l1.98-2.75-1.76-2.47h1.77l.94 1.48.97-1.49h1.76l-1.8 2.52 1.96 2.71z';

var speedFifthX = 'M21.66 14.59A10.02 10.02 0 0 0 12 2a10 10 0 0 0-5 18.66L6 22.4a12 12 0 1 1 17.6-7.28zm-8.25-.47a2.5 2.5 0 1 1-3.53-3.53c1.3-1.3 4.52-2.61 6.13-3.2.39-.15.75.21.6.6-.59 1.6-1.9 4.83-3.2 6.13M10.16 22c.54 0 .92.41.92.95a.9.9 0 0 1-.92.94.9.9 0 0 1-.95-.94c0-.54.4-.95.95-.95m4.51 1.98c-1.4 0-2.5-.68-2.8-1.73l1.44-.65q.3.94 1.32.95c.82 0 1.32-.48 1.32-1.27 0-.8-.45-1.27-1.23-1.27-.6 0-1.03.29-1.24.67l-1.3-.51.73-4.1h4.25v1.49H14.1l-.33 1.64c.3-.3.8-.45 1.38-.45 1.43 0 2.45.96 2.45 2.52 0 1.65-1.21 2.71-2.94 2.71m7.45-.15L21 22.09l-1.16 1.74h-1.77l1.98-2.75-1.76-2.47h1.77l.94 1.48.97-1.49h1.76l-1.8 2.52 1.96 2.71z';

var speed1X = 'M12 22a10 10 0 1 1 9.66-7.41l1.93.52A12.02 12.02 0 0 0 12 0a12 12 0 1 0 0 24zm4.61-14.01a.47.47 0 0 0-.6-.6c-1.6.59-4.83 1.9-6.13 3.2a2.5 2.5 0 1 0 3.53 3.53c1.3-1.3 2.61-4.52 3.2-6.13m.33 8.08h-1.53c0 1-.65 1.48-1.78 1.48v1.6c.84 0 1.45-.2 1.73-.68v5.36h1.58zm6.94 7.76-1.96-2.7 1.8-2.53h-1.76l-.97 1.49-.94-1.49h-1.77l1.76 2.48-1.98 2.75h1.77L21 22.09l1.13 1.74z';

var speedDoubleX = 'M21.66 14.59A10.02 10.02 0 0 0 12 2a10 10 0 0 0-2.59 19.66L8.9 23.6a12 12 0 1 1 14.7-8.48zm-8.25-.47a2.5 2.5 0 1 1-3.53-3.53c1.3-1.3 4.52-2.61 6.13-3.2.39-.15.75.21.6.6-.59 1.6-1.9 4.83-3.2 6.13m.17 8.2h3.82v1.51h-5.65a3 3 0 0 1-.06-.65c0-1.35.68-2.33 1.85-2.92l1.44-.74c.47-.24.8-.6.8-1.12 0-.64-.45-1.07-1.15-1.07-.8 0-1.27.52-1.33 1.39l-1.63-.41c.09-1.49 1.23-2.39 2.95-2.39 1.8 0 2.82.9 2.82 2.4 0 1.03-.62 1.87-1.68 2.44l-1.34.73c-.5.27-.75.53-.84.83m8.54 1.51L21 22.09l-1.16 1.74h-1.77l1.98-2.75-1.76-2.47h1.77l.94 1.48.97-1.49h1.76l-1.8 2.52 1.96 2.71z';

var speedTripleX = 'M21.66 14.59A10.02 10.02 0 0 0 12 2a10 10 0 0 0-2.59 19.66L8.9 23.6a12 12 0 1 1 14.7-8.48zm-8.25-.47a2.5 2.5 0 1 1-3.53-3.53c1.3-1.3 4.52-2.61 6.13-3.2.39-.15.75.21.6.6-.59 1.6-1.9 4.83-3.2 6.13m4.29 7.25c0 1.51-1.25 2.61-2.95 2.61-1.62 0-2.7-.67-2.98-1.84l1.48-.66q.3 1.07 1.4 1.07c.85 0 1.4-.5 1.4-1.32 0-.76-.55-1.27-1.34-1.27-.47 0-.83.1-1.2.33l-.56-1.14 2.3-1.59h-3.1v-1.48h5.25v1.4l-2.02 1.48c1.46.05 2.32.93 2.32 2.4m4.42 2.46L21 22.09l-1.16 1.74h-1.77l1.98-2.75-1.76-2.47h1.77l.94 1.48.97-1.49h1.76l-1.8 2.52 1.96 2.71z';

var spread = 'm17.3 15.3 2.29-2.3H13v-2h6.59l-2.3-2.3 1.42-1.4 4.7 4.7-4.7 4.7zm-12 1.4L.58 12l4.7-4.7L6.7 8.7 4.4 11H11v2H4.41l2.3 2.3z';

var star = 'M11.02 1.65c.36-.87 1.6-.87 1.96 0l2.65 6.4 6.9.55c.94.07 1.32 1.24.61 1.85l-5.26 4.5 1.6 6.74c.23.92-.77 1.64-1.57 1.15L12 19.24l-5.9 3.6c-.81.5-1.8-.23-1.59-1.15l1.6-6.73-5.25-4.5a1.06 1.06 0 0 1 .6-1.86l6.9-.56z';

var starHalf = 'M12 1c-.4 0-.8.22-.98.65l-2.66 6.4-6.9.55a1.06 1.06 0 0 0-.6 1.85l5.26 4.5-1.6 6.74c-.23.92.77 1.64 1.57 1.15l5.91-3.6z';

var starOutline = 'm20.12 10.41-4.47 3.82 1.37 5.72L12 16.9l-5.02 3.06 1.37-5.72-4.47-3.82 5.86-.47L12 4.51l2.26 5.43zM8.36 8.04l-6.9.56a1.06 1.06 0 0 0-.6 1.85l5.26 4.5-1.6 6.74c-.23.92.77 1.64 1.57 1.15l5.91-3.6 5.9 3.6c.81.5 1.8-.23 1.59-1.15l-1.6-6.73 5.25-4.5c.71-.62.33-1.79-.6-1.86l-6.9-.56-2.66-6.39a1.06 1.06 0 0 0-1.96 0z';

var sticker = 'M5 1a4 4 0 0 0-4 4v14a4 4 0 0 0 4 4h5v-2H5a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1h-4a4 4 0 0 0-3.7 2.5 4.5 4.5 0 0 1-3.48-1.91l-1.64 1.15A6.5 6.5 0 0 0 12 16.48V23h.76a4 4 0 0 0 2.83-1.17l6.24-6.24A4 4 0 0 0 23 12.76V5a4 4 0 0 0-4-4zm15.41 13.17-6.24 6.24-.17.16V16c0-1.1.9-2 2-2h4.57zM7.5 11a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3m9-3a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3';

var stickerImage = 'M14 8a2 2 0 1 0 4 0 2 2 0 0 0-4 0M5 1a4 4 0 0 0-4 4v14a4 4 0 0 0 4 4h5v-2H5a2 2 0 0 1-2-2v-4.59l.94-.94a5.04 5.04 0 0 1 7.12 0l.23.24q.46.45.99.83A4 4 0 0 0 12 16v7h.76a4 4 0 0 0 2.83-1.17l6.24-6.24A4 4 0 0 0 23 12.76V5a4 4 0 0 0-4-4zm7.7 11.3-.23-.24A7.04 7.04 0 0 0 3 11.63V5c0-1.1.9-2 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1h-4a4 4 0 0 0-2.55.92q-.4-.29-.74-.63m7.71 1.87-6.24 6.24-.17.16V16c0-1.1.9-2 2-2h4.57z';

var sun = 'M10.75.06a12 12 0 0 1 2.5 0l-.41 3.98a8 8 0 0 0-1.68 0zM4.95 2.3q1.01-.74 2.17-1.25L8.75 4.7q-.78.34-1.45.84zm11.93-1.25q1.16.51 2.18 1.25L16.7 5.53q-.67-.5-1.45-.84zM1.04 7.12q.51-1.16 1.25-2.18L5.53 7.3q-.5.67-.84 1.45zM21.7 4.94q.74 1.01 1.25 2.18L19.3 8.75a8 8 0 0 0-.84-1.45zm-17.67 7.9-3.98.41a12 12 0 0 1 0-2.5l3.98.41a8 8 0 0 0 0 1.68m19.9-2.1a12 12 0 0 1 0 2.51l-3.98-.41a8 8 0 0 0 0-1.68zM2.29 19.07q-.74-1.02-1.25-2.18l3.65-1.63q.34.78.84 1.45zm20.67-2.18q-.51 1.16-1.25 2.18l-3.24-2.36a8 8 0 0 0 .84-1.45zM7.12 22.96q-1.16-.51-2.18-1.25l2.36-3.24a8 8 0 0 0 1.45.84zm11.94-1.25q-1.02.74-2.18 1.25l-1.63-3.65a8 8 0 0 0 1.45-.84zm-6.22-1.75.41 3.98a12 12 0 0 1-2.5 0l.41-3.98a8 8 0 0 0 1.68 0M18 12a6 6 0 1 1-12 0 6 6 0 0 1 12 0m-6-4a4 4 0 1 0 0 8 4 4 0 0 0 0-8';

var swap = 'M8 17v-2H0v8h2v-4.36A11.99 11.99 0 0 0 24 12h-2a10 10 0 0 1-18.66 5zm16-8V1h-2v4.36A11.99 11.99 0 0 0 0 12h2a10 10 0 0 1 18.66-5H16v2z';

var switchAccount = 'M16.3 2.7 19.58 6H8v2h11.59l-3.3 3.3 1.42 1.4L23.4 7l-5.7-5.7zM7.7 21.3 4.42 18H16v-2H4.4l3.3-3.3-1.42-1.4L.6 17l5.7 5.7z';

var table = 'M1 5a4 4 0 0 1 4-4h14a4 4 0 0 1 4 4v14a4 4 0 0 1-4 4H5a4 4 0 0 1-4-4zm4-2a2 2 0 0 0-2 2v1h18V5a2 2 0 0 0-2-2zm3 13v-3H3v3zm-5 2v1c0 1.1.9 2 2 2h3v-3zm7 0v3h9a2 2 0 0 0 2-2v-1zm11-2v-3H10v3zM8 8H3v3h5zm2 0v3h11V8z';

var tag = 'M16 10a2 2 0 1 0 0-4 2 2 0 0 0 0 4m-3.76-9a4 4 0 0 0-2.83 1.17l-8 8a4 4 0 0 0 0 5.66l6.76 6.76a4 4 0 0 0 5.66 0l8-8A4 4 0 0 0 23 11.76V5a4 4 0 0 0-4-4zm-1.41 2.59A2 2 0 0 1 12.24 3H19a2 2 0 0 1 2 2v6.76a2 2 0 0 1-.59 1.41l-8 8a2 2 0 0 1-2.82 0l-6.76-6.76a2 2 0 0 1 0-2.82z';

var tagStar = 'M9.41 2.17A4 4 0 0 1 12.24 1H19a4 4 0 0 1 4 4v6.76a4 4 0 0 1-.36 1.65l-1.82-.82a2 2 0 0 0 .18-.83V5a2 2 0 0 0-2-2h-6.76a2 2 0 0 0-1.41.59l-8 8a2 2 0 0 0 0 2.82l6.76 6.76a2 2 0 0 0 2.62.18l1.22 1.58a4 4 0 0 1-5.26-.34l-6.76-6.76a4 4 0 0 1 0-5.66zM18 8a2 2 0 1 1-4 0 2 2 0 0 1 4 0m1.86 9.02 2.6.2a.4.4 0 0 1 .22.7l-1.97 1.69.6 2.53a.4.4 0 0 1-.6.43L18.5 21.2l-2.22 1.36a.4.4 0 0 1-.59-.43l.6-2.53-1.97-1.69a.4.4 0 0 1 .23-.7l2.59-.2 1-2.4a.4.4 0 0 1 .73 0z';

var target = 'M20 2.59V0h2v2h2v2h-2.59l-6.7 6.7q.29.6.29 1.3a3 3 0 1 1-1.7-2.7l1.46-1.47a5 5 0 1 0 2.18 3.4l1.63-1.64A7 7 0 0 1 12 19a7 7 0 1 1 4.2-12.6l1.42-1.43a9 9 0 1 0 2.48 3.1l1.48-1.48a11 11 0 1 1-2.54-3.04zM12 11a1 1 0 1 0 0 2 1 1 0 0 0 0-2';

var telegram = 'M24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12.43 8.86q-1.75.73-7 3.01-.85.34-.9.67c-.04.36.42.5 1.04.7l.27.08c.6.2 1.43.44 1.86.45q.58 0 1.3-.48 4.9-3.32 5.06-3.35.13-.05.25.02c.07.07.07.18.06.22-.05.19-1.84 1.86-2.77 2.72l-.54.5-.28.28c-.57.55-1 .96.02 1.64.5.32.89.59 1.28.85.42.3.85.58 1.4.95q.21.13.4.28c.5.35.95.67 1.5.62.32-.03.65-.33.82-1.23.4-2.13 1.18-6.73 1.36-8.63.02-.17 0-.38-.02-.47a.5.5 0 0 0-.17-.33 1 1 0 0 0-.46-.14c-.45.01-1.15.25-4.48 1.64';

var template = 'M4 1a2 2 0 0 0-2 2v18c0 1.1.9 2 2 2h5a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2zm5 20H4V3h5zm9-20a5 5 0 1 0 0 10 5 5 0 0 0 0-10m0 2a3 3 0 1 1 0 6 3 3 0 0 1 0-6m-5 18c0 1.1.9 2 2 2h6a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2h-6a2 2 0 0 0-2 2zm2 0v-6h6v6z';

var terms = 'M22 20a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4V7.24a4 4 0 0 1 1.17-2.83L7.1.5A1.7 1.7 0 0 1 10 1.7V4a4 4 0 0 1-4 4H5a1 1 0 0 0-1 1v11c0 1.1.9 2 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-6V0h6a4 4 0 0 1 4 4zM8 4V2.41L4.59 5.83 4.43 6H6a2 2 0 0 0 2-2m0 7a1 1 0 1 1-2 0 1 1 0 0 1 2 0m0 4a1 1 0 1 1-2 0 1 1 0 0 1 2 0m-2 4a1 1 0 1 1 2 0 1 1 0 0 1-2 0m12-7h-8v-2h8zm-8 2h8v2h-8zm6 6h-6v-2h6z';

var text = 'M8 2v2h1c.29 0 .49.28.4.55L4.71 17.78A1.8 1.8 0 0 1 3 19H2v2h7v-2H6.41l1.42-4h8.34l1.42 4H15v2h7v-2h-1c-.77 0-1.46-.49-1.72-1.22L14.6 4.55a.4.4 0 0 1 .39-.55h1V2zm3.7 2h.6l3.17 9H8.53z';

var textAlignCenter = 'M24 7H0V5h24zm-6 6H6v-2h12zM2 17h20v2H2z';

var textAlignLeft = 'M24 7H0V5h24zm-12 6H0v-2h12zM0 17h20v2H0z';

var textAlignRight = 'M24 7H0V5h24zm0 6H12v-2h12zM4 17h20v2H4z';

var textAllCaps = 'M3.7 14.42 2.8 17H.37L4.73 5.72h2.58L11.68 17H9.25l-.92-2.58zm2.31-6.44-1.58 4.44H7.6zm9.65 6.44L14.75 17h-2.43l4.37-11.28h2.57L23.63 17H21.2l-.91-2.58zm2.3-6.44-1.58 4.44h3.19z';

var textExtraSmall = 'M22 10H2V8h20zm0 12H2v-2h20zM8.11 19l3-7.75h1.77l3 7.75h-1.67l-.62-1.77H10.4L9.78 19zm4.98-3.15L12 12.8l-1.09 3.05z';

var textInvert = 'M12 13.2V7.04l2.4 6.16zM4 23a3 3 0 0 1-3-3V4a3 3 0 0 1 3-3h16a3 3 0 0 1 3 3v16a3 3 0 0 1-3 3zM3 4v16a1 1 0 0 0 1 1h8v-6.08H8.93L7.35 19h-2.1l5.8-14.1H12V3H4a1 1 0 0 0-1 1m9 9.2v1.72h3.07L16.65 19h2.08L12.95 4.9H12v2.14-.02L9.6 13.2z';

var textLarge = 'M22 2H2v2h20zm0 18H2v2h20zM8.17 19l1.08-3.06h5.5L15.82 19h2.88L13.53 5.6h-3.06L5.28 19zm1.94-5.43 1.88-5.29 1.9 5.29z';

var textLineHeight = 'M2 4h20V2H2zm0 18h20v-2H2zM13 8.41l1.3 1.3 1.4-1.42L12 4.6 8.3 8.3l1.4 1.42L11 8.4v7.18l-1.3-1.3-1.4 1.42 3.7 3.7 3.7-3.7-1.4-1.42-1.3 1.3z';

var textMedium = 'M22 4H2v2h20zm0 16H2v2h20zM8.57 19l.97-2.74h4.91l.97 2.74h2.59L13.37 7.02h-2.74L5.99 19zm1.74-4.86 1.68-4.73 1.7 4.73z';

var textSentenceCase = 'M4.98 15.26 4.01 18H1.43L6.07 6.01h2.74L13.45 18h-2.58l-.97-2.74zm2.45-6.85-1.68 4.73h3.38zm14.83 7.63.63 1.36c-.4.51-.95.84-1.79.84A1.9 1.9 0 0 1 19.3 17c-.4.8-1.24 1.24-2.3 1.24-1.66 0-2.83-1.02-2.83-2.4 0-1.34.76-2.1 2.33-2.53.75-.2 1.73-.36 2.67-.46v-.09c0-.73-.5-1.2-1.35-1.2q-1.27 0-1.56 1.08l-1.97-.81c.44-1.33 1.78-2.14 3.64-2.14 2.24 0 3.53 1 3.53 2.95v3.1q0 .46.4.47.2.02.4-.17m-4.6.41c.9 0 1.5-.64 1.5-1.48v-.6a10 10 0 0 0-1.71.3c-.6.17-.88.44-.88.9 0 .5.37.88 1.08.88';

var textSize = 'm12.22 19 1.58-4.08h6.14L21.52 19h2.08L17.82 4.9h-1.9L10.12 19zm2.24-5.8 2.4-6.18 2.4 6.18zM2.38 19l.74-2.1h3.76l.74 2.1h1.97L6.04 9.84H3.95L.4 19zm1.32-3.72L5 11.67l1.3 3.61z';

var textSmall = 'M22 6H2v2h20zm0 14H2v2h20zM9.18 19l.8-2.25h4.04l.8 2.25h2.13l-3.83-9.87h-2.25L7.05 19zm1.42-4 1.4-3.9 1.4 3.9z';

var textSpacing = 'm3.07 13 .97-2.74h4.91L9.92 13h2.58L7.86 1.01H5.13L.48 13zM4.8 8.14 6.5 3.4l1.7 4.73zm15.36-1.48V6.6c1.44-.22 2.2-1.24 2.2-2.74 0-1.82-1.47-2.86-3.61-2.86h-4.78v12h4.68C21.4 13 23 11.64 23 9.53c0-1.7-1.14-2.75-2.84-2.87m-1.9-3.54c1.03 0 1.63.48 1.63 1.33s-.65 1.38-1.65 1.38h-1.89v-2.7zm.37 7.77h-2.28V7.83h2.36c1.16 0 1.82.53 1.82 1.46 0 1.04-.71 1.6-1.9 1.6m.96 9.11-1.3 1.3 1.42 1.4 3.7-3.7-3.7-3.7-1.42 1.4 1.3 1.3H4.4l1.3-1.3-1.42-1.4L.6 19l3.7 3.7 1.42-1.4L4.4 20z';

var textSticker = 'M5 1a4 4 0 0 0-4 4v14a4 4 0 0 0 4 4h5v-2H5a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1h-3.79l-1.89-7.35h-1.99L4.62 19H7.1l2.08-4.08h2.97A4 4 0 0 0 12 16v7h.76a4 4 0 0 0 2.83-1.17l6.24-6.24A4 4 0 0 0 23 12.76V5a4 4 0 0 0-4-4zm5.21 11.95 2.81-5.48 1.18 4.96a4 4 0 0 0-.79.52zm10.2 1.22-6.24 6.24-.17.16V16c0-1.1.9-2 2-2h4.57z';

var thumbsDown = 'M9 22.5c0 .83.67 1.5 1.5 1.5h1.34c1.7 0 3.3-1.1 3.71-2.85.23-.96.45-2.14.45-3.15q0-.48-.06-1h2.56a3.5 3.5 0 0 0 3.36-4.48 3.5 3.5 0 0 0 0-4.04 3.5 3.5 0 0 0-.9-3.46A3.5 3.5 0 0 0 17.5 2h-5.16a11 11 0 0 0-2.9.39l-2.91.8a9 9 0 0 1-2.37.31H4a2 2 0 0 0-2 2v5.75a2 2 0 0 0 1.45 1.92l2.1.6a1 1 0 0 1 .54.38L9 18.32zm2-.5v-3.68a2 2 0 0 0-.36-1.15L7.73 13a3 3 0 0 0-1.64-1.17L4 11.24V5.5h.16a11 11 0 0 0 2.9-.39l2.91-.8A9 9 0 0 1 12.34 4h5.16c.83 0 1.5.67 1.5 1.5V6l.4.3a1.5 1.5 0 0 1 .43 1.9l-.37.68.56.52a1.5 1.5 0 0 1 0 2.2l-.56.52.37.68q.16.3.17.7c0 .83-.67 1.5-1.5 1.5h-4.93l.22 1.19c.13.65.21 1.29.21 1.81 0 .77-.18 1.77-.4 2.69-.17.76-.88 1.31-1.76 1.31z';

var thumbsUp = 'M9 1.5C9 .67 9.67 0 10.5 0h1.34c1.7 0 3.3 1.1 3.71 2.85C15.78 3.81 16 5 16 6q0 .49-.06 1h2.56a3.5 3.5 0 0 1 3.36 4.48 3.5 3.5 0 0 1 0 4.04 3.5 3.5 0 0 1-.9 3.46A3.5 3.5 0 0 1 17.5 22h-5.16a11 11 0 0 1-2.9-.39l-2.91-.8a9 9 0 0 0-2.37-.31H4a2 2 0 0 1-2-2v-5.75a2 2 0 0 1 1.45-1.92l2.1-.6a1 1 0 0 0 .54-.38L9 5.68zm2 .5v3.68a2 2 0 0 1-.36 1.15L7.73 11a3 3 0 0 1-1.64 1.17l-2.09.6v5.74h.16a11 11 0 0 1 2.9.39l2.91.8a9 9 0 0 0 2.37.31h5.16c.83 0 1.5-.67 1.5-1.5V18l.4-.3a1.5 1.5 0 0 0 .43-1.9l-.37-.68.56-.52a1.5 1.5 0 0 0 0-2.2l-.56-.52.37-.68q.16-.3.17-.7c0-.83-.67-1.5-1.5-1.5h-4.93l.22-1.19c.13-.65.21-1.29.21-1.81 0-.77-.18-1.77-.4-2.69A1.8 1.8 0 0 0 11.85 2z';

var timer = 'M13 5v7.41l-3.3 3.3-1.4-1.42 2.7-2.7V5zm2-3.59q2.27.66 4.04 2.14l1.25-1.26 1.42 1.42-1.26 1.25A11 11 0 1 1 9 1.41V0h6zM12 21a9 9 0 1 0 0-18 9 9 0 0 0 0 18';

var timer3 = 'M15 0v1.41q2.27.66 4.04 2.14l1.25-1.26 1.42 1.42-1.26 1.25a11 11 0 0 1 1.63 11.44l-1.83-.8q.73-1.67.75-3.6a9 9 0 1 0-9 9v2A11 11 0 0 1 9 1.41V0zm-2 12.41-3.3 3.3-1.4-1.42 2.7-2.7V5h2zm6.61 8.96c0 1.31-1.07 2.26-2.54 2.26-1.4 0-2.33-.58-2.58-1.6l1.29-.56q.25.92 1.2.93c.73 0 1.2-.44 1.2-1.14 0-.66-.47-1.1-1.15-1.1-.4 0-.71.08-1.04.28l-.48-.98 2-1.38h-2.7V16.8h4.55V18l-1.75 1.3c1.26.04 2 .8 2 2.07';

var timer10 = 'M1 12A11 11 0 0 1 9 1.41V0h6v1.41q2.27.66 4.04 2.14l1.25-1.26 1.42 1.42-1.26 1.25a11 11 0 0 1 1.63 11.44l-1.83-.8q.73-1.67.75-3.6a9 9 0 1 0-9 9v2A11 11 0 0 1 1 12m12 .41-3.3 3.3-1.4-1.42 2.7-2.7V5h2zm2.69 11.09h-1.37v-4.63c-.24.41-.77.6-1.49.6v-1.4c.98 0 1.53-.41 1.54-1.27h1.32zm4.1-6.83c1.74 0 2.78 1.3 2.78 3.48s-1.04 3.48-2.79 3.48c-1.74 0-2.78-1.3-2.78-3.48s1.04-3.48 2.78-3.48m0 1.28c-.85 0-1.36.82-1.36 2.2s.5 2.2 1.35 2.2 1.36-.82 1.36-2.2-.51-2.2-1.36-2.2';

var trashCan = 'M13 9v9h-2V9zM7.65 2.27A3 3 0 0 1 10.56 0h2.88a3 3 0 0 1 2.9 2.27L16.79 4H23v2h-1.1a1 1 0 0 0-1 .94l-.74 13.28a4 4 0 0 1-4 3.78H7.84a4 4 0 0 1-4-3.78L3.11 6.94a1 1 0 0 0-1-.94H1V4h6.22zM4.94 6a3 3 0 0 1 .16.83l.74 13.28a2 2 0 0 0 2 1.89h8.32a2 2 0 0 0 2-1.89l.74-13.28a3 3 0 0 1 .16-.83zm4.34-2h5.44l-.31-1.24a1 1 0 0 0-.97-.76h-2.88a1 1 0 0 0-.97.76z';

var trending = 'M15 4v2h5.59L12 14.59 9.41 12a2 2 0 0 0-2.82 0l-6.3 6.3 1.42 1.4L8 13.42 10.59 16a2 2 0 0 0 2.82 0L22 7.41V13h2V4z';

var undo = 'm4.41 10 4.3 4.3-1.42 1.4L.6 9l6.7-6.7 1.42 1.4L4.4 8H17a6 6 0 0 1 0 12h-5v-2h5a4 4 0 1 0 0-8z';

var unlock = 'M9 14v2h6v-2zM8 6a4 4 0 0 1 7.2-2.4l1.6-1.2A6 6 0 0 0 6 6v1a4 4 0 0 0-4 4v8a4 4 0 0 0 4 4h12a4 4 0 0 0 4-4v-8a4 4 0 0 0-4-4H8zm10 3a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-8c0-1.1.9-2 2-2z';

var uploadFeed = 'M4 20c0 1.1.9 2 2 2h8v2H6a4 4 0 0 1-4-4V7.24a4 4 0 0 1 1.17-2.83L7.1.5A1.7 1.7 0 0 1 10 1.7V4a4 4 0 0 1-4 4H5a1 1 0 0 0-1 1zM8 4V2.41L4.59 5.83 4.43 6H6a2 2 0 0 0 2-2m14 8h-2V4a2 2 0 0 0-2-2h-6V0h6a4 4 0 0 1 4 4zm-3 2.09 4.7 4.7-1.4 1.42-2.3-2.3V24h-2v-6.09l-2.3 2.3-1.4-1.42z';

var viber = 'M12.52 8.69c0 .16.14.28.3.27a1.35 1.35 0 0 1 1.42 1.46.29.29 0 1 0 .57.05A1.93 1.93 0 0 0 12.8 8.4a.3.3 0 0 0-.27.3m-.11-1.84a.29.29 0 0 0-.02.57c.93.03 1.81.4 2.47 1.07a3.3 3.3 0 0 1 .85 2.42.29.29 0 0 0 .57.03 4 4 0 0 0-1-2.84V8.1a4.2 4.2 0 0 0-2.87-1.24m-.83-1.2c0 .16.13.29.29.28a5.3 5.3 0 0 1 3.8 1.5 5.5 5.5 0 0 1 1.55 4.1.29.29 0 1 0 .58.02 6 6 0 0 0-1.71-4.52h-.01a5.8 5.8 0 0 0-4.22-1.68.3.3 0 0 0-.28.3m1.62 8.6a1 1 0 0 1-.33.05 5.6 5.6 0 0 1-3.74-3.76.8.8 0 0 1 .23-.62l.54-.42a.94.94 0 0 0 .16-1.18l-.1-.18c-.17-.27-.4-.65-.58-.88l-.79-.98a.8.8 0 0 0-1.06-.17q-.57.45-.97 1.05-.35.38-.44.9v.13q0 .2.07.38a13 13 0 0 0 1.13 2.46 15 15 0 0 0 2.2 3h.03q.44.45.93.82.98.78 2.06 1.38 1.17.69 2.47 1.14.19.06.37.05h.13q.52-.08.9-.43.53-.47.88-1.08a.8.8 0 0 0-.17-1.06 12 12 0 0 0-2.03-1.48.9.9 0 0 0-1.18.16l-.42.53a1 1 0 0 1-.29.19M20.36 3.5c-.56-.53-2.85-2.18-7.93-2.2 0 0-5.99-.37-8.93 2.31-1.63 1.63-2.2 4.01-2.26 6.96s-.14 8.47 5.19 9.97v2.3s0 .92.57 1.1c.61.2 1.02-.26 1.54-.85l.34-.38c.39-.42.92-1.03 1.32-1.5a21 21 0 0 0 7.04-.56c1.18-.3 4.69-1.2 5.3-6.23.73-5.7-.31-9.3-2.18-10.92m.62 10.51c-.52 4.15-3.3 4.8-4.31 5.04l-.26.06c-1.9.47-3.87.64-5.82.5 0 0-2.31 2.75-3.04 3.51a.4.4 0 0 1-.33.14q-.17-.06-.15-.4v-3.8c-4.37-1.21-4.26-5.66-4.2-8.18v-.24c.06-2.46.52-4.48 1.9-5.84 2.46-2.23 7.55-1.9 7.55-1.9 4.3 0 6.36 1.31 6.84 1.74 1.6 1.36 2.4 4.6 1.82 9.37';

var videoAdvance10Seconds = 'M12 2a10 10 0 0 1 8.66 5H18v2h6V3h-2v2.36A11.99 11.99 0 0 0 0 12a12 12 0 0 0 20.45 8.52l-1.4-1.42A10 10 0 1 1 12 2m2 13.25c1.66 0 3-1.46 3-3.25 0-1.8-1.34-3.25-3-3.25s-3 1.46-3 3.25c0 1.8 1.34 3.25 3 3.25M13 12c0-.84.6-1.25 1-1.25s1 .4 1 1.25c0 .84-.6 1.25-1 1.25s-1-.4-1-1.25m-3 3V9H8v6z';

var videoCamera = 'M4 3a4 4 0 0 0-4 4v10a4 4 0 0 0 4 4h9a4 4 0 0 0 4-4v-1.28l2.51 1.44a3 3 0 0 0 4.49-2.6V9.44a3 3 0 0 0-4.49-2.6L17 8.27V7a4 4 0 0 0-4-4zm13.5 7.3 3-1.72a1 1 0 0 1 1.5.87v5.1a1 1 0 0 1-1.5.87l-3-1.71a1 1 0 0 1-.5-.87v-1.68a1 1 0 0 1 .5-.87M15 17a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V7c0-1.1.9-2 2-2h9a2 2 0 0 1 2 2z';

var videoRewind10Seconds = 'M12 2a10 10 0 0 0-8.66 5H6v2H0V3h2v2.36A11.99 11.99 0 0 1 24 12a12 12 0 0 1-20.45 8.52l1.4-1.42A10 10 0 1 0 12 2m-1 10c0-1.8 1.34-3.25 3-3.25s3 1.46 3 3.25c0 1.8-1.34 3.25-3 3.25s-3-1.46-3-3.25m3 1.25c.4 0 1-.4 1-1.25 0-.84-.6-1.25-1-1.25s-1 .4-1 1.25c0 .84.6 1.25 1 1.25M8 15V9h2v6z';

var viewTypeDefault = 'M1 3c0-1.1.9-2 2-2h6a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2zm2 6h6V3H3zm-2 6c0-1.1.9-2 2-2h6a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2zm2 6h6v-6H3zM21 1a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-6a2 2 0 0 1-2-2V3c0-1.1.9-2 2-2zm0 2h-6v6h6zm-8 12c0-1.1.9-2 2-2h6a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-6a2 2 0 0 1-2-2zm2 6h6v-6h-6z';

var viewTypeDense = 'M1 2.5C1 1.67 1.67 1 2.5 1h2C5.33 1 6 1.67 6 2.5v2C6 5.33 5.33 6 4.5 6h-2A1.5 1.5 0 0 1 1 4.5zM1 11c0-.83.67-1.5 1.5-1.5h2c.83 0 1.5.67 1.5 1.5v2c0 .83-.67 1.5-1.5 1.5h-2A1.5 1.5 0 0 1 1 13zm3.5 7c.83 0 1.5.67 1.5 1.5v2c0 .83-.67 1.5-1.5 1.5h-2A1.5 1.5 0 0 1 1 21.5v-2c0-.83.67-1.5 1.5-1.5zm5-15.5c0-.83.67-1.5 1.5-1.5h2c.83 0 1.5.67 1.5 1.5v2c0 .83-.67 1.5-1.5 1.5h-2a1.5 1.5 0 0 1-1.5-1.5zm3.5 7c.83 0 1.5.67 1.5 1.5v2c0 .83-.67 1.5-1.5 1.5h-2A1.5 1.5 0 0 1 9.5 13v-2c0-.83.67-1.5 1.5-1.5zm-3.5 10c0-.83.67-1.5 1.5-1.5h2c.83 0 1.5.67 1.5 1.5v2c0 .83-.67 1.5-1.5 1.5h-2a1.5 1.5 0 0 1-1.5-1.5zM21.5 1c.83 0 1.5.67 1.5 1.5v2c0 .83-.67 1.5-1.5 1.5h-2A1.5 1.5 0 0 1 18 4.5v-2c0-.83.67-1.5 1.5-1.5zM18 11c0-.83.67-1.5 1.5-1.5h2c.83 0 1.5.67 1.5 1.5v2c0 .83-.67 1.5-1.5 1.5h-2A1.5 1.5 0 0 1 18 13zm3.5 7c.83 0 1.5.67 1.5 1.5v2c0 .83-.67 1.5-1.5 1.5h-2a1.5 1.5 0 0 1-1.5-1.5v-2c0-.83.67-1.5 1.5-1.5z';

var viewTypeList = 'M4 1a3 3 0 1 0 0 6 3 3 0 0 0 0-6M3 4a1 1 0 1 1 2 0 1 1 0 0 1-2 0m1 5a3 3 0 1 0 0 6 3 3 0 0 0 0-6m-1 3a1 1 0 1 1 2 0 1 1 0 0 1-2 0m1 11a3 3 0 1 0 0-6 3 3 0 0 0 0 6m1-3a1 1 0 1 1-2 0 1 1 0 0 1 2 0M9 5h14V3H9zm14 6H9v2h14zM9 21h14v-2H9z';

var viewTypeSparse = 'M3 4a4 4 0 0 1 4-4h10a4 4 0 0 1 4 4v12a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4zm2 0v12c0 1.1.9 2 2 2h10a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2M4 22h9v2H4zm16 1a1 1 0 1 1-2 0 1 1 0 0 1 2 0m-5 0a1 1 0 1 1 2 0 1 1 0 0 1-2 0';

var visit = 'M23 1H13v2h6.59l-8.3 8.3 1.42 1.4L21 4.42V11h2zM3 8c0-1.1.9-2 2-2h5V4H5a4 4 0 0 0-4 4v11a4 4 0 0 0 4 4h11a4 4 0 0 0 4-4v-5h-2v5a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z';

var warmth = 'M16 16a4 4 0 1 1-5-3.87V7h2v5.13A4 4 0 0 1 16 16M7 5a5 5 0 0 1 10 0v4.75A7.99 7.99 0 0 1 12 24 8 8 0 0 1 7 9.75zm2 5.71-.75.6A5.99 5.99 0 0 0 12 22a6 6 0 0 0 3.75-10.68l-.75-.6V5a3 3 0 1 0-6 0z';

var wave = 'M1 17.76v2.11a6 6 0 0 0 2.7-1.66C4.6 17.3 5.37 17 6 17s1.4.32 2.3 1.2C9.4 19.33 10.63 20 12 20s2.6-.68 3.7-1.8c.9-.88 1.66-1.2 2.3-1.2s1.4.32 2.3 1.2a6 6 0 0 0 2.7 1.67v-2.11q-.6-.28-1.3-.97C20.6 15.7 19.37 15 18 15s-2.6.68-3.7 1.8c-.9.88-1.66 1.2-2.3 1.2s-1.4-.32-2.3-1.2C8.6 15.67 7.37 15 6 15s-2.6.68-3.7 1.8q-.7.68-1.3.96m0-6v2.11a6 6 0 0 0 2.7-1.66C4.6 11.3 5.37 11 6 11s1.4.32 2.3 1.2C9.4 13.33 10.63 14 12 14s2.6-.68 3.7-1.8c.9-.88 1.66-1.2 2.3-1.2s1.4.32 2.3 1.2a6 6 0 0 0 2.7 1.67v-2.11q-.6-.28-1.3-.97C20.6 9.7 19.37 9 18 9s-2.6.68-3.7 1.8c-.9.88-1.66 1.2-2.3 1.2s-1.4-.32-2.3-1.2C8.6 9.67 7.37 9 6 9s-2.6.68-3.7 1.8q-.7.68-1.3.96m0-6v2.11a6 6 0 0 0 2.7-1.66C4.6 5.3 5.37 5 6 5s1.4.32 2.3 1.2C9.4 7.33 10.63 8 12 8s2.6-.68 3.7-1.8C16.6 5.33 17.37 5 18 5s1.4.32 2.3 1.2A6 6 0 0 0 23 7.88V5.76q-.6-.28-1.3-.97C20.6 3.7 19.37 3 18 3s-2.6.68-3.7 1.8C13.4 5.67 12.63 6 12 6s-1.4-.32-2.3-1.2C8.6 3.67 7.37 3 6 3s-2.6.68-3.7 1.8q-.7.68-1.3.96';

var whatsapp = 'M18.75 16.8c-.29.83-1.43 1.5-2.32 1.69-.62.12-1.42.23-4.14-.9-3.48-1.45-5.71-5-5.89-5.24-.17-.23-1.4-1.88-1.4-3.59 0-1.7.86-2.54 1.21-2.9.29-.3.76-.42 1.21-.42h.4c.35.02.52.04.75.6.29.68.98 2.4 1.07 2.57.08.18.16.42.05.65s-.21.34-.38.54-.34.36-.52.58c-.16.19-.33.39-.14.74.2.34.9 1.48 1.92 2.4 1.32 1.19 2.4 1.56 2.77 1.72.29.11.62.1.83-.14.27-.29.6-.76.93-1.23.23-.34.54-.38.84-.26.32.12 2.02.96 2.36 1.13.35.17.58.25.67.4.06.17.06.86-.22 1.67M12 0A12 12 0 0 0 1.97 18.58L0 24l5.5-1.88-.09-.1A12 12 0 1 0 12 0';

var wifiNo = 'M18.12 6.22a16 16 0 0 1 3.7 2.14l-7.51 7.5c.51.46.9 1.07 1.08 1.75L23.3 9.7c.78-.78.8-2.06-.07-2.75a18 18 0 0 0-22.48 0C-.1 7.63-.09 8.9.7 9.69l7.9 7.91a3.5 3.5 0 0 1 1.08-1.74l-7.5-7.5a16 16 0 0 1 15.93-2.15M12.3 19.97a1.5 1.5 0 1 0-.6-2.94 1.5 1.5 0 0 0 .6 2.94M12 7c-1.3 0-2.3 1.18-2.09 2.47l.93 5.54a1.18 1.18 0 0 0 2.32 0l.93-5.54A2.12 2.12 0 0 0 12 7';

var workflowStatusAll = 'M11 6A5 5 0 1 1 1 6a5 5 0 0 1 10 0M6 3a3 3 0 1 0 0 6 3 3 0 0 0 0-6m5 15a5 5 0 1 1-10 0 5 5 0 0 1 10 0m-5-3a3 3 0 1 0 0 6 3 3 0 0 0 0-6m7-9a5 5 0 1 1 10 0 5 5 0 0 1-10 0m5 3a3 3 0 1 0 0-6 3 3 0 0 0 0 6m5 9a5 5 0 1 1-10 0 5 5 0 0 1 10 0m-5-3a3 3 0 1 0 0 6 3 3 0 0 0 0-6';

var workflowStatusCanceled = 'M8 11h8v2H8zM10.44.42a3.1 3.1 0 0 1 3.12 0l7.69 4.44a3.1 3.1 0 0 1 1.56 2.7v8.88c0 1.11-.6 2.14-1.56 2.7l-7.69 4.44a3.1 3.1 0 0 1-3.12 0l-7.69-4.44a3.1 3.1 0 0 1-1.56-2.7V7.56c0-1.11.6-2.14 1.56-2.7zm1.04 1.8L3.79 6.66c-.32.19-.52.53-.52.9v8.88c0 .37.2.71.52.9l7.69 4.44c.32.19.72.19 1.04 0l7.69-4.44c.32-.19.52-.53.52-.9V7.56c0-.37-.2-.71-.52-.9l-7.69-4.44a1 1 0 0 0-1.04 0';

var workflowStatusHalted = 'M8 16h2V8H8zm8-8h-2v8h2zm-4 16a12 12 0 1 0 0-24 12 12 0 0 0 0 24M2 12a10 10 0 1 1 20 0 10 10 0 0 1-20 0';

var workflowStatusInProgress = 'M12 0a12 12 0 1 1 0 24 12 12 0 0 1 0-24m0 22V2a10 10 0 1 0 0 20';

var workflowStatusOk = 'm10 17.41-4.7-4.7 1.4-1.42 3.3 3.3 7.3-7.3 1.4 1.42zM24 12a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var workflowStatusProblem = 'm9.2 10.3 2.8 2.79 2.8-2.8 1.4 1.42-2.79 2.79 2.8 2.8-1.42 1.4L12 15.92l-2.8 2.8-1.4-1.42 2.79-2.79-2.8-2.8zM7.68 3.5a5 5 0 0 1 8.66 0l6.93 12a5 5 0 0 1-4.33 7.5H5.07a5 5 0 0 1-4.33-7.5zm1.73 1-6.93 12a3 3 0 0 0 2.6 4.5h13.86a3 3 0 0 0 2.6-4.5l-6.93-12a3 3 0 0 0-5.2 0';

var workflowStatusQueued = 'm5.13 2-.09.14a6.2 6.2 0 0 0 2.72 9.13l1.7.73-1.7.73a6.2 6.2 0 0 0-2.72 9.13l.1.14H3v2h18v-2h-2.13l.09-.14a6.2 6.2 0 0 0-2.72-9.13l-1.7-.73 1.7-.73a6.2 6.2 0 0 0 2.72-9.13l-.1-.14H21V0H3v2zm2.64 7A4.2 4.2 0 0 1 6.7 3.25l.24-.36A2 2 0 0 1 8.61 2h6.78a2 2 0 0 1 1.67.9l.24.35A4.2 4.2 0 0 1 16.23 9zm.84 13a2 2 0 0 1-1.67-.9l-.24-.35a4.2 4.2 0 0 1 1.84-6.18L11 13.52V20h2v-6.48l2.46 1.05a4.2 4.2 0 0 1 1.84 6.18l-.24.36a2 2 0 0 1-1.67.89z';

var workflowStatusUnstarted = 'M10 12a2 2 0 1 1 4 0 2 2 0 0 1-4 0m14 0a12 12 0 1 1-24 0 12 12 0 0 1 24 0M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20';

var workflowStatusWarning = 'm14.04 8.46-.86 4.56a1.2 1.2 0 0 1-2.36 0l-.86-4.56a2.07 2.07 0 1 1 4.08 0m-.54 8.04a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0M9.25 1.14a3.9 3.9 0 0 1 5.5 0l8.11 8.11a3.9 3.9 0 0 1 0 5.5l-8.11 8.11a3.9 3.9 0 0 1-5.5 0l-8.11-8.11a3.9 3.9 0 0 1 0-5.5zm1.41 1.41-8.1 8.11a1.9 1.9 0 0 0 0 2.68l8.1 8.1a1.9 1.9 0 0 0 2.68 0l8.1-8.1a1.9 1.9 0 0 0 0-2.68l-8.1-8.1a1.9 1.9 0 0 0-2.68 0';

var xSocial = 'M14.23 10.16 22.98 0H20.9l-7.59 8.82L7.25 0h-7l9.18 13.34L.26 24h2.07l8.02-9.32 6.4 9.32h7zM3.08 1.56h3.18L20.9 22.51h-3.19z';

var yahoo = 'm21.56 17.45.83.04-.23 1.51-.78-.06-.73-.06v-1.54zm-.7-7.63c.32.07 2.86.3 3.14.31l-1.67 6.31-1.44-.11zm.76-1.48h-1.73l-.56.12c-.59.15-5.96 4.2-6.31 5.2-.08.34 0 3.67.08 4.17.36.08 2.91 0 3.38.09l-.06 1.02c-.45-.03-3.7-.02-5.56-.02-.94 0-3.96.1-4.9.07l.18-.98c.51-.03 2.62.1 3.09-.38.23-.24.16-3.4.08-3.94-.2-.57-4.9-6.31-6.14-7.25H0V5h10.7v.1h.03l-.03.24v1.1H7.47c1.44 2.04 3.5 4.51 4.38 5.7l4.3-3.8H13.6l-.36-1.44h9.38l-.08.1h.04l-.67.95h-.02z';

var youtube = 'M9.75 15.27V8.73L15.5 12zm12.79-8.6c-.25-.95-1-1.7-1.94-1.96-1.72-.46-8.6-.46-8.6-.46s-6.88 0-8.6.46c-.94.26-1.69 1-1.94 1.96C1 8.4 1 12 1 12s0 3.6.46 5.33c.25.95 1 1.7 1.94 1.96 1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46c.94-.26 1.69-1 1.94-1.96C23 15.6 23 12 23 12s0-3.6-.46-5.33';

const icons = Object.freeze({
    '360': threeSixty,
    '3d': threeD,
    '3d-move': threeDMove,
    'accessibility': accessibility,
    'ad': ad,
    'ad-group': adGroup,
    'add': add,
    'add-circle': addCircle,
    'add-layout': addLayout,
    'add-pin': addPin,
    'add-section': addSection,
    'ads-overview': adsOverview,
    'ads-stats': adsStats,
    'alert': alert,
    'align-bottom': alignBottom,
    'align-bottom-center': alignBottomCenter,
    'align-bottom-left': alignBottomLeft,
    'align-bottom-right': alignBottomRight,
    'align-middle': alignMiddle,
    'align-top': alignTop,
    'align-top-center': alignTopCenter,
    'align-top-left': alignTopLeft,
    'align-top-right': alignTopRight,
    'alphabetical': alphabetical,
    'android-share': androidShare,
    'angled-pin': angledPin,
    'animate': animate,
    'api': api,
    'apple': apple,
    'apps': apps,
    'ar-try-on': arTryOn,
    'arrow-back': arrowBack,
    'arrow-circle-back': arrowCircleBack,
    'arrow-circle-down': arrowCircleDown,
    'arrow-circle-forward': arrowCircleForward,
    'arrow-circle-up': arrowCircleUp,
    'arrow-counter-clockwise': arrowCounterClockwise,
    'arrow-double-back': arrowDoubleBack,
    'arrow-double-forward': arrowDoubleForward,
    'arrow-down': arrowDown,
    'arrow-end': arrowEnd,
    'arrow-forward': arrowForward,
    'arrow-left-curved': arrowLeftCurved,
    'arrow-nested': arrowNested,
    'arrow-start': arrowStart,
    'arrow-up': arrowUp,
    'arrow-up-left': arrowUpLeft,
    'arrow-up-right': arrowUpRight,
    'arrows-vertical': arrowsVertical,
    'aspect-ratio': aspectRatio$1,
    'audio-bars': audioBars,
    'audio-mix': audioMix,
    'audio-playing': audioPlaying,
    'bell': bell,
    'bell-fill': bellFill,
    'birthday-cake': birthdayCake,
    'board': board,
    'board-sticker-large': boardStickerLarge,
    'board-sticker-small': boardStickerSmall,
    'border': border,
    'border-shadow': borderShadow,
    'briefcase': briefcase,
    'building-business': buildingBusiness,
    'business-hierarchy': businessHierarchy,
    'calendar': calendar,
    'calendar-check': calendarCheck,
    'camera': camera,
    'camera-flip': cameraFlip,
    'camera-roll': cameraRoll,
    'cancel': cancel,
    'canonical-pin': canonicalPin,
    'captions': captions,
    'captions-outline': captionsOutline,
    'card-stack': cardStack,
    'check': check,
    'check-circle': checkCircle,
    'check-circle-fill': checkCircleFill,
    'chevron-down-circle': chevronDownCircle,
    'chevron-left-circle': chevronLeftCircle,
    'chevron-right-circle': chevronRightCircle,
    'chevron-up-circle': chevronUpCircle,
    'circle': circle,
    'circle-ellipsis': circleEllipsis,
    'circle-information-fill': circleInformationFill,
    'circle-initializing': circleInitializing,
    'clear': clear,
    'clips': clips,
    'clock': clock,
    'clock-checked': clockChecked,
    'cloud-server': cloudServer,
    'code': code,
    'code-check': codeCheck,
    'cog': cog,
    'collage': collage,
    'collapse': collapse,
    'color': color,
    'color-palette': colorPalette,
    'color-picker': colorPicker,
    'color-solid': colorSolid,
    'color-split': colorSplit,
    'compass': compass,
    'compose': compose,
    'contrast': contrast,
    'conversion-tag': conversionTag,
    'copy-to-clipboard': copyToClipboard,
    'credit-card': creditCard,
    'crop': crop,
    'cutout': cutout,
    'dash': dash,
    'data-source': dataSource,
    'design': design,
    'desktop': desktop,
    'diagnostics': diagnostics,
    'directional-arrow-left': directionalArrowLeft,
    'directional-arrow-right': directionalArrowRight,
    'download': download,
    'drag-drop': dragDrop,
    'draw': draw,
    'dropbox': dropbox,
    'duplicate': duplicate,
    'edit': edit,
    'ellipsis': ellipsis,
    'envelope': envelope,
    'erase': erase,
    'erase-auto': eraseAuto,
    'etsy': etsy,
    'expand': expand,
    'eye': eye,
    'eye-hide': eyeHide,
    'face-happy': faceHappy,
    'face-neutral': faceNeutral,
    'face-sad': faceSad,
    'face-smiley': faceSmiley,
    'face-smiley-outline': faceSmileyOutline,
    'face-smiley-plus': faceSmileyPlus,
    'face-tryon': faceTryon,
    'facebook': facebook,
    'fade': fade,
    'file-box': fileBox,
    'file-unknown': fileUnknown,
    'fill-opaque': fillOpaque,
    'fill-transparent': fillTransparent,
    'filter': filter,
    'flag': flag,
    'flame': flame,
    'flash': flash,
    'flash-automatic': flashAutomatic,
    'flash-slash': flashSlash,
    'flashlight': flashlight,
    'flip-horizontal': flipHorizontal,
    'flip-vertical': flipVertical,
    'folder': folder,
    'folder-fill': folderFill,
    'forward': forward,
    'gauge': gauge,
    'ghost': ghost,
    'ghost-fill': ghostFill,
    'gif': gif,
    'gif-visual': gifVisual,
    'gift': gift,
    'globe': globe,
    'globe-checked': globeChecked,
    'gmail': gmail,
    'graph-bar': graphBar,
    'graph-pie': graphPie,
    'hand': hand,
    'hand-pointing': handPointing,
    'handle': handle,
    'heart': heart,
    'heart-broken': heartBroken,
    'heart-health': heartHealth,
    'heart-outline': heartOutline,
    'highlights': highlights,
    'history': history,
    'home': home,
    'home-fill': homeFill,
    'idea-pin': ideaPin,
    'image-portrait': imagePortrait,
    'impressum': impressum,
    'indent': indent,
    'info-circle': infoCircle,
    'information': information,
    'insights-audience': insightsAudience,
    'insights-conversion': insightsConversion,
    'instagram': instagram,
    'invoice': invoice,
    'kakao-talk': kakaoTalk,
    'key': key,
    'knoop': knoop,
    'lab-flask': labFlask,
    'lasso-magic': lassoMagic,
    'layers-stack': layersStack,
    'layout': layout,
    'lightbulb': lightbulb,
    'lightning-bolt-circle': lightningBoltCircle,
    'link': link,
    'link-broken': linkBroken,
    'lips': lips,
    'list-numbered': listNumbered,
    'list-numbered-rtl': listNumberedRtl,
    'location': location,
    'lock': lock,
    'logo-large': logoLarge,
    'logo-small': logoSmall,
    'logout': logout,
    'magic-pen': magicPen,
    'magic-wand': magicWand,
    'magnifying-glass-sparkle': magnifyingGlassSparkle,
    'manage-access': manageAccess,
    'margins-large': marginsLarge,
    'margins-medium': marginsMedium,
    'margins-small': marginsSmall,
    'maximize': maximize,
    'megaphone': megaphone,
    'menu': menu,
    'messenger': messenger,
    'microphone': microphone,
    'minimize': minimize,
    'mobile': mobile,
    'moon': moon,
    'move-pin': movePin,
    'music-off': musicOff,
    'music-on': musicOn,
    'mute': mute,
    'mute-fill': muteFill,
    'orientation-landscape': orientationLandscape,
    'orientation-portrait': orientationPortrait,
    'outdent': outdent,
    'outlook': outlook,
    'overlay-text': overlayText,
    'overlay-text-outline': overlayTextOutline,
    'overview': overview,
    'paper-clip': paperClip,
    'paper-lines-plus': paperLinesPlus,
    'pause': pause,
    'pen': pen,
    'pen-auto': penAuto,
    'people': people,
    'performance-plus': performancePlus,
    'person': person,
    'person-add': personAdd,
    'person-fill': personFill,
    'person-magnifying-glass': personMagnifyingGlass,
    'phone': phone,
    'pin': pin,
    'pin-hide': pinHide,
    'pincode': pincode,
    'pinterest': pinterest,
    'play': play,
    'protect': protect,
    'question-mark': questionMark,
    'record-limit': recordLimit,
    'record-limit-10': recordLimit10,
    'record-limit-15': recordLimit15,
    'record-limit-30': recordLimit30,
    'record-limit-5': recordLimit5,
    'record-limit-60': recordLimit60,
    'redo': redo,
    'refresh': refresh,
    'remove': remove,
    'reorder-images': reorderImages,
    'replace': replace,
    'report': report,
    'rewind': rewind,
    'ribbon': ribbon,
    'rocketship': rocketship,
    'rotate': rotate,
    'saturation': saturation,
    'save-outline': saveOutline,
    'saved': saved,
    'scale': scale,
    'scissors': scissors,
    'search': search,
    'search-by-image': searchByImage,
    'search-fill': searchFill,
    'security': security,
    'select': select,
    'send': send,
    'shadows': shadows,
    'shapes': shapes,
    'share': share,
    'shopping-bag': shoppingBag,
    'shrink': shrink,
    'shuffles': shuffles,
    'skintone': skintone,
    'slide': slide,
    'smiley': smiley,
    'snapchat': snapchat,
    'sort-ascending': sortAscending,
    'sort-descending': sortDescending,
    'sound': sound,
    'sound-fill': soundFill,
    'sound-slash': soundSlash,
    'sound-slash-fill': soundSlashFill,
    'sparkle': sparkle,
    'speech': speech,
    'speech-ellipsis': speechEllipsis,
    'speech-ellipsis-fill': speechEllipsisFill,
    'speech-exclamation-point': speechExclamationPoint,
    'speech-heart': speechHeart,
    'speech-outline': speechOutline,
    'speed': speed,
    'speed-.3x': speedThirdX,
    'speed-.5x': speedFifthX,
    'speed-1x': speed1X,
    'speed-2x': speedDoubleX,
    'speed-3x': speedTripleX,
    'spread': spread,
    'star': star,
    'star-half': starHalf,
    'star-outline': starOutline,
    'sticker': sticker,
    'sticker-image': stickerImage,
    'sun': sun,
    'swap': swap,
    'switch-account': switchAccount,
    'table': table,
    'tag': tag,
    'tag-star': tagStar,
    'target': target,
    'telegram': telegram,
    'template': template,
    'terms': terms,
    'text': text,
    'text-align-center': textAlignCenter,
    'text-align-left': textAlignLeft,
    'text-align-right': textAlignRight,
    'text-all-caps': textAllCaps,
    'text-extra-small': textExtraSmall,
    'text-invert': textInvert,
    'text-large': textLarge,
    'text-line-height': textLineHeight,
    'text-medium': textMedium,
    'text-sentence-case': textSentenceCase,
    'text-size': textSize,
    'text-small': textSmall,
    'text-spacing': textSpacing,
    'text-sticker': textSticker,
    'thumbs-down': thumbsDown,
    'thumbs-up': thumbsUp,
    'timer': timer,
    'timer-10': timer10,
    'timer-3': timer3,
    'trash-can': trashCan,
    'trending': trending,
    'undo': undo,
    'unlock': unlock,
    'upload-feed': uploadFeed,
    'viber': viber,
    'video-advance-10-seconds': videoAdvance10Seconds,
    'video-camera': videoCamera,
    'video-rewind-10-seconds': videoRewind10Seconds,
    'view-type-default': viewTypeDefault,
    'view-type-dense': viewTypeDense,
    'view-type-list': viewTypeList,
    'view-type-sparse': viewTypeSparse,
    'visit': visit,
    'warmth': warmth,
    'wave': wave,
    'whatsapp': whatsapp,
    'wifi-no': wifiNo,
    'workflow-status-all': workflowStatusAll,
    'workflow-status-canceled': workflowStatusCanceled,
    'workflow-status-halted': workflowStatusHalted,
    'workflow-status-in-progress': workflowStatusInProgress,
    'workflow-status-ok': workflowStatusOk,
    'workflow-status-problem': workflowStatusProblem,
    'workflow-status-queued': workflowStatusQueued,
    'workflow-status-unstarted': workflowStatusUnstarted,
    'workflow-status-warning': workflowStatusWarning,
    'x-social': xSocial,
    'yahoo': yahoo,
    'youtube': youtube,
});

const defaultDeviceType = 'desktop';
const DeviceTypeContext = createContext(defaultDeviceType);
/**
 * [DeviceTypeProvider](https://gestalt.pinterest.systems/web/utilities/devicetypeprovider) is an optional [React Context provider](https://reactjs.org/docs/context.html#contextprovider) to enable device-specific UI for Gestalt components that support it.
 */
function DeviceTypeProvider({ children, deviceType }) {
    return jsxRuntime.jsx(DeviceTypeContext.Provider, { value: deviceType, children: children });
}
function useDeviceType() {
    var _a;
    return (_a = useContext(DeviceTypeContext)) !== null && _a !== void 0 ? _a : defaultDeviceType;
}

const ExperimentContext = createContext({});
/**
 * *ALPHA - DO NOT USE YET - MAY HAVE BREAKING CHANGES IN THE NEAR FUTURE*
 */
const ExperimentProvider = ExperimentContext.Provider;
function useExperimentContext(experimentName) {
    var _a, _b;
    const experiments = (_a = useContext(ExperimentContext)) !== null && _a !== void 0 ? _a : {};
    return ((_b = experiments[experimentName]) !== null && _b !== void 0 ? _b : {
        anyEnabled: false,
        group: '',
    });
}

function useInExperiment({ webExperimentName, mwebExperimentName, }) {
    const deviceType = useDeviceType();
    const { anyEnabled: inWebExp } = useExperimentContext(webExperimentName);
    const { anyEnabled: inMwebExp } = useExperimentContext(mwebExperimentName);
    let inExperiment = false;
    if (deviceType) {
        if (deviceType === 'desktop') {
            inExperiment = inWebExp;
        }
        else {
            inExperiment = inMwebExp;
        }
    }
    return inExperiment;
}

// @ts-expect-error - TS2322 - Type 'string[]' is not assignable to type 'readonly ("replace" | "search" | "link" | "text" | "dash" | "3D" | "3D-move" | "360" | "accessibility" | "ad" | "ad-group" | "add" | "add-circle" | "add-layout" | "add-pin" | "add-section" | ... 317 more ... | "wave")[]'.
const IconNames$2 = Object.keys(icons$2);
/**
 * [Icons](https://gestalt.pinterest.systems/web/icon) are the symbolic representation of an action or information, providing visual context and improving usability.
 *
 * See the [Iconography and SVG guidelines](https://gestalt.pinterest.systems/foundations/iconography/library) to explore the full icon library.
 *
 * ![Icon light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Icon-list.spec.ts-snapshots/Icon-list-chromium-darwin.png)
 * ![Icon dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Icon-list-dark.spec.ts-snapshots/Icon-list-dark-chromium-darwin.png)
 *
 */
function InternalIcon({ accessibilityLabel, color = 'subtle', dangerouslySetSvgPath, dataTestId, icon, inline = false, size = 16, }) {
    const cs = classnames(flipOnRtlIconNames.includes(icon) && styles$U.rtlSupport, styles$U[color], styles$U.icon, { [styles$U.iconBlock]: !inline });
    const isInExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const getIconPath = (iconToUse) => {
        const iconName = iconToUse;
        if (!iconName)
            return undefined;
        if (isInExperiment) {
            if (iconName in icons) {
                return icons[iconName];
            }
            if (iconName in icons$1) {
                return icons$1[iconName];
            }
        }
        if (iconName in icons$3) {
            return icons$3[iconName];
        }
        return icons$2[iconName];
    };
    /**
     * Some RTL Icons, we need to swap to a completely new icon because they can't be flipped
     * @param iconName
     */
    function getFinalIconName(iconName) {
        var _a;
        if (!iconName) {
            return undefined;
        }
        if (!swapOnRtlIconNames.includes(iconName))
            return iconName;
        // As a convention, text direction is defined in `dir` attribute of `html` tag of the document
        const isRTL = typeof document === 'undefined'
            ? false
            : ((_a = document.querySelector('html')) === null || _a === void 0 ? void 0 : _a.getAttribute('dir')) === 'rtl';
        // return the RTL version of the icon
        if (isRTL && `${iconName}-rtl` in icons$2) {
            return `${iconName}-rtl`;
        }
        return iconName;
    }
    const iconToUse = getFinalIconName(icon);
    const path = (iconToUse && getIconPath(iconToUse)) ||
        /* eslint-disable-next-line no-underscore-dangle */
        (dangerouslySetSvgPath && dangerouslySetSvgPath.__path) ||
        undefined;
    const ariaHidden = accessibilityLabel === '' ? true : null;
    let viewBox = '0 0 24 24';
    // if it's a component icon use a 16x16 view box
    if (iconToUse && iconToUse in icons$1) {
        viewBox = '0 0 16 16';
    }
    return (
    // @ts-expect-error - TS2322 - Type '{ children: Element; "aria-hidden": true | null; "aria-label": string; className: string; height: string | number; role: "img"; viewBox: string; width: string | number; }' is not assignable to type 'SVGProps<SVGSVGElement>'.
    jsxRuntime.jsx("svg", { "aria-hidden": ariaHidden, "aria-label": accessibilityLabel, className: cs, "data-test-id": dataTestId, height: size, role: "img", viewBox: viewBox, width: size, children: jsxRuntime.jsx("path", { d: path }) }));
}
InternalIcon.icons = IconNames$2;
InternalIcon.displayName = 'InternalIcon';

// @ts-expect-error - TS2322 - Type 'string[]' is not assignable to type 'readonly ("replace" | "search" | "link" | "text" | "dash" | "3D" | "3D-move" | "360" | "accessibility" | "ad" | "ad-group" | "add" | "add-circle" | "add-layout" | "add-pin" | "add-section" | ... 317 more ... | "wave")[]'.
const IconNames$1 = Object.keys(icons$2);
/**
 * [Icons](https://gestalt.pinterest.systems/web/icon) are the symbolic representation of an action or information, providing visual context and improving usability.
 *
 * See the [Iconography and SVG guidelines](https://gestalt.pinterest.systems/foundations/iconography/library) to explore the full icon library.
 *
 * ![Icon light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Icon-list.spec.ts-snapshots/Icon-list-chromium-darwin.png)
 * ![Icon dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Icon-list-dark.spec.ts-snapshots/Icon-list-dark-chromium-darwin.png)
 *
 */
function Icon({ accessibilityLabel, color = 'subtle', dangerouslySetSvgPath, dataTestId, icon, inline = false, size = 16, }) {
    return (jsxRuntime.jsx(InternalIcon, { accessibilityLabel: accessibilityLabel, color: color, dangerouslySetSvgPath: dangerouslySetSvgPath, dataTestId: dataTestId, icon: icon, inline: inline, size: size }));
}
Icon.icons = IconNames$1;
Icon.displayName = 'Icon';

var focusStyles = {"accessibilityOutline":"iyn","accessibilityOutlineLightBackground":"n9p","accessibilityOutlineDarkBackground":"iHx","accessibilityOutlineFocusWithin":"LI1","accessibilityOutlineBorderDefault":"fin","accessibilityOutlineBorder":"HDv","accessibilityOutlineBorderInverse":"lVk","accessibilityOutlineFocus":"C1J","hideOutline":"CCY"};

var touchableStyles = {"fullHeight":"oCZ","fullWidth":"Tbt L4E","pointer":"e8F BG7","zoomIn":"agv LIa","zoomOut":"_Ds Smz","copy":"xAc q-D","move":"bSH c8z","noDrop":"Wy8 rEw","grab":"WTB K8T","grabbing":"Q_w RMk","tapTransition":"S9z","tapCompress":"yui"};

// Portions of the code in this file are based on code from react & react-spectrum:
let hasSetupGlobalListeners = false;
// @ts-expect-error - TS7034 - Variable 'currentModality' implicitly has type 'any' in some locations where its type cannot be determined.
let currentModality = null;
const changeHandlers = new Set();
let hasEventBeforeFocus = false;
const isMac = typeof window !== 'undefined' && window.navigator != null
    ? /^Mac/.test(window.navigator.platform)
    : false;
function isValidKey(e) {
    return !(e.metaKey || (!isMac && e.altKey) || e.ctrlKey);
}
function triggerChangeHandlers(modality, e) {
    changeHandlers.forEach((handler) => {
        handler(modality, e);
    });
}
function handleKeyboardEvent(e) {
    hasEventBeforeFocus = true;
    if (isValidKey(e)) {
        currentModality = 'keyboard';
        triggerChangeHandlers('keyboard', e);
    }
}
function handlePointerEvent(e) {
    currentModality = 'pointer';
    if (e.type === 'mousedown' || e.type === 'pointerdown') {
        hasEventBeforeFocus = true;
        triggerChangeHandlers('pointer', e);
    }
}
function handleFocusEvent(e) {
    // Firefox fires two extra focus events when the user first clicks into an iframe:
    // first on the window, then on the document. We ignore these events so they don't
    // cause keyboard focus rings to appear.
    if (e.target === window || e.target === document) {
        return;
    }
    // If a focus event occurs without a preceding keyboard or pointer event, switch to keyboard modality.
    // This occurs, for example, when navigating a form with the next/previous buttons on iOS.
    if (!hasEventBeforeFocus) {
        currentModality = 'keyboard';
        triggerChangeHandlers('keyboard', e);
    }
    hasEventBeforeFocus = false;
}
function handleWindowBlur() {
    // When the window is blurred, reset state. This is necessary when tabbing out of the window,
    // for example, since a subsequent focus event won't be fired.
    hasEventBeforeFocus = false;
}
function isFocusVisible() {
    // @ts-expect-error - TS7005 - Variable 'currentModality' implicitly has an 'any' type.
    return currentModality !== 'pointer';
}
function setupGlobalFocusEvents() {
    if (typeof window === 'undefined' || hasSetupGlobalListeners) {
        return;
    }
    // Programmatic focus() calls shouldn't affect the current input modality.
    // However, we need to detect other cases when a focus event occurs without
    // a preceding user event (e.g. screen reader focus). Overriding the focus
    // method on HTMLElement.prototype is a bit hacky, but works.
    const { focus } = HTMLElement.prototype;
    HTMLElement.prototype.focus = function focusElement(...args) {
        hasEventBeforeFocus = true;
        focus.apply(this, args);
    };
    document.addEventListener('keydown', handleKeyboardEvent, true);
    document.addEventListener('keyup', handleKeyboardEvent, true);
    // Register focus events on the window so they are sure to happen
    // before React's event listeners (registered on the document).
    window.addEventListener('focus', handleFocusEvent, true);
    window.addEventListener('blur', handleWindowBlur, false);
    if (typeof PointerEvent !== 'undefined') {
        document.addEventListener('pointerdown', handlePointerEvent, true);
        document.addEventListener('pointermove', handlePointerEvent, true);
        document.addEventListener('pointerup', handlePointerEvent, true);
    }
    else {
        document.addEventListener('mousedown', handlePointerEvent, true);
        document.addEventListener('mousemove', handlePointerEvent, true);
        document.addEventListener('mouseup', handlePointerEvent, true);
    }
    hasSetupGlobalListeners = true;
}
/**
 * https://gestalt.pinterest.systems/web/utilities/usefocusvisible
 */
function useFocusVisible() {
    setupGlobalFocusEvents();
    const [isFocusVisibleState, setFocusVisible] = useState(isFocusVisible());
    useEffect(() => {
        const handler = () => {
            setFocusVisible(isFocusVisible());
        };
        changeHandlers.add(handler);
        return () => {
            changeHandlers.delete(handler);
        };
    }, []);
    return { isFocusVisible: isFocusVisibleState };
}

const ENTER$1 = 13;
const ESCAPE = 27;
const SPACE$1 = 32;
const DOWN_ARROW = 40;
const UP_ARROW = 38;
const TAB$1 = 9;

const SCROLL_DISTANCE = 10;
const keyPressShouldTriggerTap = (event) => [ENTER$1, SPACE$1].includes(event.charCode);
function useTapFeedback({ height, width, }) {
    const [isTapping, setTapping] = useState(false);
    const [coordinate, setCoordinate] = useState({
        x: 0,
        y: 0,
    });
    const [compressStyle, setCompressStyle] = useState(null);
    useEffect(() => {
        if (height != null && width != null) {
            const largestSize = width > height ? width : height;
            setCompressStyle({
                transform: isTapping ? `scale(${(largestSize - 4) / largestSize})` : '',
            });
        }
    }, [height, width, isTapping]);
    return {
        compressStyle,
        isTapping,
        handleBlur: () => setTapping(false),
        handleMouseDown: () => setTapping(true),
        handleMouseUp: () => setTapping(false),
        handleTouchStart: ({ touches }) => {
            setTapping(true);
            // @ts-expect-error - TS2488 - Type 'TouchList' must have a '[Symbol.iterator]()' method that returns an iterator.
            const [touch] = touches;
            if (touch) {
                setCoordinate({
                    x: touch.clientX,
                    y: touch.clientY,
                });
            }
        },
        handleTouchMove: ({ touches }) => {
            // @ts-expect-error - TS2488 - Type 'TouchList' must have a '[Symbol.iterator]()' method that returns an iterator.
            const [touch] = touches;
            if (isTapping && touch) {
                const { x: startX, y: startY } = coordinate;
                const { clientX, clientY } = touch;
                if (Math.abs(clientX - startX) > SCROLL_DISTANCE ||
                    Math.abs(clientY - startY) > SCROLL_DISTANCE) {
                    setTapping(false);
                }
            }
        },
        handleTouchCancel: () => setTapping(false),
        handleTouchEnd: () => setTapping(false),
    };
}

/**
 * [TapArea](https://gestalt.pinterest.systems/tapArea) allows components to be clickable and touchable in an accessible way
 *
 * ![TapArea](https://raw.githubusercontent.com/pinterest/gestalt/master/docs/graphics/building-blocks/TapArea.svg)
 */
const TapAreaWithForwardRef = forwardRef(function TapArea({ accessibilityLabel, accessibilityControls, accessibilityExpanded, accessibilityHaspopup, accessibilityChecked, children, dataTestId, disabled = false, focusColor = 'lightBackground', fullHeight, fullWidth = true, innerFocusColor, mouseCursor = 'pointer', onBlur, onKeyDown, onFocus, onMouseDown, onMouseUp, onMouseEnter, onMouseLeave, onTap, tabIndex = 0, role, rounding = 0, tapStyle = 'none', }, ref) {
    var _a, _b;
    const innerRef = useRef(null);
    // When using both forwardRef and innerRef, React.useimperativehandle() allows a parent component
    // that renders <TapArea ref={inputRef} /> to call inputRef.current.focus()
    // @ts-expect-error - TS2322 - Type 'HTMLDivElement | null' is not assignable to type 'HTMLDivElement'.
    useImperativeHandle(ref, () => innerRef.current);
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const { isFocusVisible } = useFocusVisible();
    const { compressStyle, isTapping, handleBlur, handleMouseDown, handleMouseUp, handleTouchStart, handleTouchMove, handleTouchCancel, handleTouchEnd, } = useTapFeedback({
        height: (_a = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight,
        width: (_b = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _b === void 0 ? void 0 : _b.clientWidth,
    });
    const buttonRoleClasses = classnames(touchableStyles.tapTransition, getRoundingClassName(rounding), {
        [focusStyles.hideOutline]: !disabled && !isFocusVisible,
        [focusStyles.accessibilityOutline]: !isInVRExperiment && !disabled && isFocusVisible,
        [focusStyles.accessibilityOutlineLightBackground]: isInVRExperiment && focusColor === 'lightBackground' && !disabled && isFocusVisible,
        [focusStyles.accessibilityOutlineDarkBackground]: isInVRExperiment && focusColor === 'darkBackground' && !disabled && isFocusVisible,
        [focusStyles.accessibilityOutlineBorder]: isInVRExperiment && innerFocusColor === 'default' && !disabled && !isFocusVisible,
        [focusStyles.accessibilityOutlineBorderDefault]: isInVRExperiment && innerFocusColor === 'default' && !disabled && isFocusVisible,
        [focusStyles.accessibilityOutlineBorderInverse]: isInVRExperiment && innerFocusColor === 'inverse' && !disabled && isFocusVisible,
        [touchableStyles.fullHeight]: fullHeight,
        [touchableStyles.fullWidth]: fullWidth,
        [touchableStyles.copy]: mouseCursor === 'copy' && !disabled,
        [touchableStyles.grab]: mouseCursor === 'grab' && !disabled,
        [touchableStyles.grabbing]: mouseCursor === 'grabbing' && !disabled,
        [touchableStyles.move]: mouseCursor === 'move' && !disabled,
        [touchableStyles.noDrop]: mouseCursor === 'noDrop' && !disabled,
        [touchableStyles.pointer]: mouseCursor === 'pointer' && !disabled,
        [touchableStyles.zoomIn]: mouseCursor === 'zoomIn' && !disabled,
        [touchableStyles.zoomOut]: mouseCursor === 'zoomOut' && !disabled,
        [touchableStyles.tapCompress]: !disabled && tapStyle === 'compress' && isTapping,
    });
    return (jsxRuntime.jsx("div", Object.assign({ ref: innerRef, "aria-checked": role === 'switch' ? accessibilityChecked : undefined, "aria-controls": accessibilityControls, "aria-disabled": disabled, "aria-expanded": accessibilityExpanded, "aria-haspopup": accessibilityHaspopup, "aria-label": accessibilityLabel, className: buttonRoleClasses, "data-test-id": dataTestId, onBlur: (event) => {
            if (!disabled)
                onBlur === null || onBlur === void 0 ? void 0 : onBlur({ event });
            handleBlur();
        }, onClick: (event) => {
            if (!disabled)
                onTap === null || onTap === void 0 ? void 0 : onTap({ event });
        }, onFocus: (event) => {
            if (!disabled) {
                onFocus === null || onFocus === void 0 ? void 0 : onFocus({ event });
            }
        }, onKeyDown: (event) => {
            if (!disabled)
                onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown({ event });
        }, onKeyPress: (event) => {
            // Check to see if space or enter were pressed
            if (!disabled && keyPressShouldTriggerTap(event)) {
                // Prevent the default action to stop scrolling when space is pressed
                // TODO: this may be preventing ENTER keypress events coming from Buttons/IconButtons within a TapArea
                event.preventDefault();
                onTap === null || onTap === void 0 ? void 0 : onTap({ event });
            }
        }, onMouseDown: (event) => {
            onMouseDown === null || onMouseDown === void 0 ? void 0 : onMouseDown({ event });
            handleMouseDown();
        }, onMouseEnter: (event) => {
            if (!disabled)
                onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter({ event });
        }, onMouseLeave: (event) => {
            if (!disabled)
                onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave({ event });
        }, onMouseUp: (event) => {
            onMouseUp === null || onMouseUp === void 0 ? void 0 : onMouseUp({ event });
            handleMouseUp();
        }, onTouchCancel: handleTouchCancel, onTouchEnd: handleTouchEnd, onTouchMove: handleTouchMove, onTouchStart: handleTouchStart, role: role !== null && role !== void 0 ? role : 'button' }, (tapStyle === 'compress' && compressStyle && !disabled ? { style: compressStyle } : {}), { 
        // @ts-expect-error - TS2322 - Type '0 | -1 | null' is not assignable to type 'number | undefined'.
        tabIndex: disabled ? null : tabIndex, children: children })));
});
TapAreaWithForwardRef.displayName = 'TapArea';

var stylesText = {"Text":"tBJ dyH iFc","TextBody":"eSP dyH","lg":"eSv","lgDefault":"jKS","lgEmphasis":"J3B","md":"Q1L","mdDefault":"Ucg","mdEmphasis":"xoZ","sm":"D7e","smDefault":"pS1","smEmphasis":"EwK","xs":"Xdw","xsDefault":"a6a","xsEmphasis":"kFc","noOutline":"nrl","hoverNoUnderline":"WB7","hoverUnderline":"uTl","outlineFocus":"afV","outlineFocusVR":"K1L","inheritColor":"_74","standalone":"PUS","vrInheritColor":"NP-","dark":"Ch2","default":"X8m","inverse":"B1n","error":"sOY","light":"qX7","link":"bw-","recommendation":"GbA","shopping":"d4-","subtle":"JlN","success":"MHs","warning":"_9L","underline":"q0F","noUnderline":"NtY","textColorOverrideDark":"cna","disabled":"MLI","textColorOverrideError":"rKr","textColorOverrideLight":"z7C","textColorOverrideErrorVr":"W0H"};

/*
  Shared types among text components (Text, Heading)
*/
const semanticColors = [
    'default',
    'disabled',
    'subtle',
    'success',
    'error',
    'warning',
    'inverse',
    'shopping',
    'recommendation',
    'link',
    'light',
    'dark',
];

var styles$T = {"textUI":"fxm dyH","lg":"aCi","md":"wne","sm":"Q_r","xs":"ot0"};

var typographyStyle = {"antialiased":"dyH","fontSize100":"dR0","fontSize200":"j1A","fontSize300":"sAJ","fontSize400":"bwj","fontSize500":"GTB","fontSize600":"R-d","fontSize100Override":"D6W","fontSize200Override":"_fT","fontSize300Override":"IQJ","fontSize400Override":"nkh","fontSize500Override":"ORN","fontSize600Override":"biO","sansSerif":"iFc","fontWeightNormal":"swG","fontWeightSemiBold":"H2s","fontStyleRegular":"VEk","fontStyleItalic":"SVm","breakWord":"IZT","breakAll":"Sxk","noWrap":"UK7","truncate":"z-6","alignStart":"zDA","alignEnd":"PON","alignForceLeft":"Oii","alignForceRight":"RyG","alignCenter":"tg7","alignJustify":"sdb","lineClamp":"CKL"};

function isNotNullish$3(val) {
    return val !== null && val !== undefined;
}
/**
 * [TextUI](https://gestalt.pinterest.systems/web/textui) component is meant to be used when text is interactive, such as a Button text or TextField labels. Compared to the Text component, TextUI is bolder and has a tighter line height.
 *
 * ![Text light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/TextUI.spec.ts-snapshots/TextUI-chromium-darwin.png)
 * ![Text dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/TextUI-dark.spec.ts-snapshots/TextUI-dark-chromium-darwin.png)
 */
const TextUIWithForwardRef = forwardRef(function Text({ align = 'start', children, color = 'default', dataTestId, inline = false, italic = false, lineClamp, overflow = 'breakWord', size = 'md', title, }, ref) {
    const colorClass = semanticColors.includes(color) && stylesText[color];
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const getWordBreakStyle = () => {
        if (overflow === 'breakAll') {
            return typographyStyle.breakAll;
        }
        // default to breakWord if lineClamp is set
        if (overflow === 'breakWord' || isNotNullish$3(lineClamp)) {
            return typographyStyle.breakWord;
        }
        return undefined;
    };
    const cs = classnames(color && colorClass, align === 'center' && typographyStyle.alignCenter, 
    // @ts-expect-error - TS2367 - This condition will always return 'false' since the types '"center" | "start" | "end" | "forceLeft" | "forceRight"' and '"justify"' have no overlap.
    align === 'justify' && typographyStyle.alignJustify, align === 'start' && typographyStyle.alignStart, align === 'end' && typographyStyle.alignEnd, align === 'forceLeft' && typographyStyle.alignForceLeft, align === 'forceRight' && typographyStyle.alignForceRight, getWordBreakStyle(), overflow === 'noWrap' && typographyStyle.noWrap, italic && typographyStyle.fontStyleItalic, isNotNullish$3(lineClamp) && typographyStyle.lineClamp, {
        [stylesText.Text]: !isInVRExperiment,
        [typographyStyle.fontWeightSemiBold]: !isInVRExperiment,
        [typographyStyle.fontSize400]: !isInVRExperiment && size === 'lg',
        [typographyStyle.fontSize300]: !isInVRExperiment && size === 'md',
        [typographyStyle.fontSize200]: !isInVRExperiment && size === 'sm',
        [typographyStyle.fontSize100]: !isInVRExperiment && size === 'xs',
        [styles$T.textUI]: isInVRExperiment,
        [styles$T.lg]: isInVRExperiment && size === 'lg',
        [styles$T.md]: isInVRExperiment && size === 'md',
        [styles$T.sm]: isInVRExperiment && size === 'sm',
        [styles$T.xs]: isInVRExperiment && size === 'xs',
    });
    const Tag = inline ? 'span' : 'div';
    return (jsxRuntime.jsx(Tag, Object.assign({ className: cs, "data-test-id": dataTestId, title: title !== null && title !== void 0 ? title : (isNotNullish$3(lineClamp) && typeof children === 'string' ? children : undefined) }, (lineClamp ? { style: { WebkitLineClamp: lineClamp } } : {}), { ref: ref, children: children })));
});
TextUIWithForwardRef.displayName = 'TextUI';

const ScrollBoundaryContainerContext = createContext({
    scrollBoundaryContainerRef: null,
    addRef: () => { },
});
const { Provider: Provider$5 } = ScrollBoundaryContainerContext;
function ScrollBoundaryContainerProvider({ children }) {
    const [scrollBoundaryContainerRef, setScrollBoundaryContainerRef] = useState(null);
    const scrollBoundaryContainerContext = {
        scrollBoundaryContainerRef,
        addRef: useCallback((ref) => {
            setScrollBoundaryContainerRef(ref);
        }, []),
    };
    return jsxRuntime.jsx(Provider$5, { value: scrollBoundaryContainerContext, children: children });
}
function useScrollBoundaryContainer() {
    const scrollBoundaryContainerContext = useContext(ScrollBoundaryContainerContext);
    return scrollBoundaryContainerContext;
}

var styles$S = {"layer":"NIm MIw QLY Rym"};

// CONSTANTS
const getContainerNode = ({ scrollBoundaryContainerRef, initialPositionRef, }) => {
    // containerNode references the ScrollBoundaryContainer node to which
    // append the portal
    let containerNode = null;
    // currentNode references the DOM node used while traversing up nodes in the DOM tree
    let currentNode = initialPositionRef;
    while (!containerNode) {
        // To find ScrollBoundaryContainer parents, currentNode is traversed up accessing its parent node
        // until matching with the ScrollBoundaryContainer ref passed via context
        // or until reaching the HTML document (loop break)
        if (scrollBoundaryContainerRef && currentNode && currentNode.parentNode) {
            if (currentNode instanceof HTMLDivElement &&
                (scrollBoundaryContainerRef === null || scrollBoundaryContainerRef === void 0 ? void 0 : scrollBoundaryContainerRef.isSameNode(currentNode))) {
                containerNode = scrollBoundaryContainerRef;
            }
            currentNode = currentNode.parentNode;
        }
        else {
            break;
        }
    }
    return containerNode;
};

/**
 * [Layers](https://gestalt.pinterest.systems/web/layer) allow you to render children outside the DOM hierarchy of the parent. It's a wrapper around React createPortal that lets you use it as a component. This is particularly useful for places you might have needed to use z-index to overlay the screen before.
 *
 * ![Layer](https://raw.githubusercontent.com/pinterest/gestalt/master/docs/graphics/building-blocks/Layer.svg)
 */
function Layer({ children, zIndex: zIndexIndexable, }) {
    const [mounted, setMounted] = useState(false);
    const portalContainer = useRef(null);
    const zIndex = zIndexIndexable === null || zIndexIndexable === void 0 ? void 0 : zIndexIndexable.index();
    // If ScrollBoundaryContainer is parent of Layer, useScrollBoundaryContainer provides access to
    // the  ScrollBoundaryContainer node ref.
    const { scrollBoundaryContainerRef } = useScrollBoundaryContainer();
    // initialPositionRef is a temporary-placed DOM Node from which to traverse up to find
    // any ScrollBoundaryContainer parent. After mounting, it's replaced with a portal.
    const initialPositionRef = useRef(null);
    useEffect(() => {
        // After the initial mount, useEffect gets called
        setMounted(true);
        // containerNode stores the ScrollBoundaryContainer node to use
        // as container in the portal -createPortal(child, container)-.
        const containerNode = getContainerNode({
            scrollBoundaryContainerRef,
            initialPositionRef: initialPositionRef === null || initialPositionRef === void 0 ? void 0 : initialPositionRef.current,
        });
        if (typeof document !== 'undefined' && document.createElement) {
            portalContainer.current = document.createElement('div');
        }
        if (portalContainer.current) {
            portalContainer.current.style.zIndex = zIndex === undefined ? '' : zIndex.toString();
            portalContainer.current.className = zIndex === undefined ? '' : styles$S.layer;
            if (containerNode) {
                // If containerNode is found, append the portal to it
                containerNode.appendChild(portalContainer.current);
            }
            else if (typeof document !== 'undefined' && document.body) {
                // If not, append the portal to document.body
                document.body.appendChild(portalContainer.current);
            }
        }
        return () => {
            if (portalContainer.current) {
                if (containerNode) {
                    containerNode.removeChild(portalContainer.current);
                }
                else if (typeof document !== 'undefined' && document.body) {
                    document.body.removeChild(portalContainer.current);
                }
            }
        };
    }, [zIndex, scrollBoundaryContainerRef]);
    if (!mounted || !portalContainer.current) {
        // The initial render will be this temporary div
        // to capture the initial position of the DOM node in the DOM tree
        // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLDivElement | null | undefined>' is not assignable to type 'LegacyRef<HTMLDivElement> | undefined'.
        return jsxRuntime.jsx("div", { ref: initialPositionRef });
    }
    // After useEffect, we render the children into the portal container node outside the DOM hierarchy
    // @ts-expect-error - TS2322 - Type 'ReactPortal' is not assignable to type 'ReactNode'.
    return createPortal(children, portalContainer.current);
}
Layer.displayName = 'Layer';

const sides = ['top', 'right', 'bottom', 'left'];
const min = Math.min;
const max = Math.max;
const round = Math.round;
const floor = Math.floor;

const createCoords = v => ({
  x: v,
  y: v
});

const oppositeSideMap = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
const oppositeAlignmentMap = {
  start: 'end',
  end: 'start'
};

function clamp(start, value, end) {
  return max(start, min(value, end));
}

function evaluate(value, param) {
  return typeof value === 'function' ? value(param) : value;
}

function getSide(placement) {
  return placement.split('-')[0];
}

function getAlignment(placement) {
  return placement.split('-')[1];
}

function getOppositeAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}

function getAxisLength(axis) {
  return axis === 'y' ? 'height' : 'width';
}

function getSideAxis(placement) {
  return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';
}

function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}

function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }

  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';

  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }

  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}

function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}

function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);
}

function getSideList(side, isStart, rtl) {
  const lr = ['left', 'right'];
  const rl = ['right', 'left'];
  const tb = ['top', 'bottom'];
  const bt = ['bottom', 'top'];

  switch (side) {
    case 'top':
    case 'bottom':
      if (rtl) return isStart ? rl : lr;
      return isStart ? lr : rl;

    case 'left':
    case 'right':
      return isStart ? tb : bt;

    default:
      return [];
  }
}

function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === 'start', rtl);

  if (alignment) {
    list = list.map(side => side + "-" + alignment);

    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }

  return list;
}

function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);
}

function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}

function getPaddingObject(padding) {
  return typeof padding !== 'number' ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}

function rectToClientRect(rect) {
  const {
    x,
    y,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y,
    left: x,
    right: x + width,
    bottom: y + height,
    x,
    y
  };
}

function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === 'y';
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;

  switch (side) {
    case 'top':
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;

    case 'bottom':
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;

    case 'right':
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;

    case 'left':
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;

    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }

  switch (getAlignment(placement)) {
    case 'start':
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;

    case 'end':
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }

  return coords;
}

const computePosition$1 = async (reference, floating, config) => {
  const {
    placement = 'bottom',
    strategy = 'absolute',
    middleware = [],
    platform
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));
  let rects = await platform.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;

  for (let i = 0; i < validMiddleware.length; i++) {
    const {
      name,
      fn
    } = validMiddleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform,
      elements: {
        reference,
        floating
      }
    });
    x = nextX != null ? nextX : x;
    y = nextY != null ? nextY : y;
    middlewareData = { ...middlewareData,
      [name]: { ...middlewareData[name],
        ...data
      }
    };

    if (reset && resetCount <= 50) {
      resetCount++;

      if (typeof reset === 'object') {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }

        if (reset.rects) {
          rects = reset.rects === true ? await platform.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }

        ({
          x,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }

      i = -1;
      continue;
    }
  }

  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};

async function detectOverflow(state, options) {
  var _await$platform$isEle;

  if (options === void 0) {
    options = {};
  }

  const {
    x,
    y,
    platform,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = 'clippingAncestors',
    rootBoundary = 'viewport',
    elementContext = 'floating',
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === 'floating' ? 'reference' : 'floating';
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform.getClippingRect({
    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === 'floating' ? { ...rects.floating,
    x,
    y
  } : rects.reference;
  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));
  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}

const arrow$1 = options => ({
  name: 'arrow',
  options,

  async fn(state) {
    const {
      x,
      y,
      placement,
      rects,
      platform,
      elements,
      middlewareData
    } = state;
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};

    if (element == null) {
      return {};
    }

    const paddingObject = getPaddingObject(padding);
    const coords = {
      x,
      y
    };
    const axis = getAlignmentAxis(placement);
    const length = getAxisLength(axis);
    const arrowDimensions = await platform.getDimensions(element);
    const isYAxis = axis === 'y';
    const minProp = isYAxis ? 'top' : 'left';
    const maxProp = isYAxis ? 'bottom' : 'right';
    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;

    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }

    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
    const min$1 = minPadding;
    const max = clientSize - arrowDimensions[length] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset = clamp(min$1, center, max);
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset,
        centerOffset: center - offset - alignmentOffset,
        ...(shouldAddOffset && {
          alignmentOffset
        })
      },
      reset: shouldAddOffset
    };
  }

});

const flip = function (options) {
  if (options === void 0) {
    options = {};
  }

  return {
    name: 'flip',
    options,

    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;

      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = 'bestFit',
        fallbackAxisSideDirection = 'none',
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);

      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }

      const side = getSide(placement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));

      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }

      const placements = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];

      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }

      if (checkCrossAxis) {
        const sides = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides[0]], overflow[sides[1]]);
      }

      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];

      if (!overflows.every(side => side <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;

        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements[nextIndex];

        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }

        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;

        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case 'bestFit':
              {
                var _overflowsData$map$so;

                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];

                if (placement) {
                  resetPlacement = placement;
                }

                break;
              }

            case 'initialPlacement':
              resetPlacement = initialPlacement;
              break;
          }
        }

        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }

      return {};
    }

  };
};

function getSideOffsets(overflow, rect) {
  return {
    top: overflow.top - rect.height,
    right: overflow.right - rect.width,
    bottom: overflow.bottom - rect.height,
    left: overflow.left - rect.width
  };
}

function isAnySideFullyClipped(overflow) {
  return sides.some(side => overflow[side] >= 0);
}

const hide = function (options) {
  if (options === void 0) {
    options = {};
  }

  return {
    name: 'hide',
    options,

    async fn(state) {
      const {
        rects
      } = state;
      const {
        strategy = 'referenceHidden',
        ...detectOverflowOptions
      } = evaluate(options, state);

      switch (strategy) {
        case 'referenceHidden':
          {
            const overflow = await detectOverflow(state, { ...detectOverflowOptions,
              elementContext: 'reference'
            });
            const offsets = getSideOffsets(overflow, rects.reference);
            return {
              data: {
                referenceHiddenOffsets: offsets,
                referenceHidden: isAnySideFullyClipped(offsets)
              }
            };
          }

        case 'escaped':
          {
            const overflow = await detectOverflow(state, { ...detectOverflowOptions,
              altBoundary: true
            });
            const offsets = getSideOffsets(overflow, rects.floating);
            return {
              data: {
                escapedOffsets: offsets,
                escaped: isAnySideFullyClipped(offsets)
              }
            };
          }

        default:
          {
            return {};
          }
      }
    }

  };
};

async function convertValueToCoords(state, options) {
  const {
    placement,
    platform,
    elements
  } = state;
  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === 'y';
  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === 'number' ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };

  if (alignment && typeof alignmentAxis === 'number') {
    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;
  }

  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}

const offset = function (options) {
  if (options === void 0) {
    options = 0;
  }

  return {
    name: 'offset',
    options,

    async fn(state) {
      const {
        x,
        y
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      return {
        x: x + diffCoords.x,
        y: y + diffCoords.y,
        data: diffCoords
      };
    }

  };
};

const shift = function (options) {
  if (options === void 0) {
    options = {};
  }

  return {
    name: 'shift',
    options,

    async fn(state) {
      const {
        x,
        y,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: _ref => {
            let {
              x,
              y
            } = _ref;
            return {
              x,
              y
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x,
        y
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];

      if (checkMainAxis) {
        const minSide = mainAxis === 'y' ? 'top' : 'left';
        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';
        const min = mainAxisCoord + overflow[minSide];
        const max = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp(min, mainAxisCoord, max);
      }

      if (checkCrossAxis) {
        const minSide = crossAxis === 'y' ? 'top' : 'left';
        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';
        const min = crossAxisCoord + overflow[minSide];
        const max = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp(min, crossAxisCoord, max);
      }

      const limitedCoords = limiter.fn({ ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return { ...limitedCoords,
        data: {
          x: limitedCoords.x - x,
          y: limitedCoords.y - y
        }
      };
    }

  };
};

const limitShift = function (options) {
  if (options === void 0) {
    options = {};
  }

  return {
    options,

    fn(state) {
      const {
        x,
        y,
        placement,
        rects,
        middlewareData
      } = state;
      const {
        offset = 0,
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true
      } = evaluate(options, state);
      const coords = {
        x,
        y
      };
      const crossAxis = getSideAxis(placement);
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      const rawOffset = evaluate(offset, state);
      const computedOffset = typeof rawOffset === 'number' ? {
        mainAxis: rawOffset,
        crossAxis: 0
      } : {
        mainAxis: 0,
        crossAxis: 0,
        ...rawOffset
      };

      if (checkMainAxis) {
        const len = mainAxis === 'y' ? 'height' : 'width';
        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;

        if (mainAxisCoord < limitMin) {
          mainAxisCoord = limitMin;
        } else if (mainAxisCoord > limitMax) {
          mainAxisCoord = limitMax;
        }
      }

      if (checkCrossAxis) {
        var _middlewareData$offse, _middlewareData$offse2;

        const len = mainAxis === 'y' ? 'width' : 'height';
        const isOriginSide = ['top', 'left'].includes(getSide(placement));
        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);

        if (crossAxisCoord < limitMin) {
          crossAxisCoord = limitMin;
        } else if (crossAxisCoord > limitMax) {
          crossAxisCoord = limitMax;
        }
      }

      return {
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      };
    }

  };
};

function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || '').toLowerCase();
  }

  return '#document';
}

function getWindow(node) {
  var _node$ownerDocument;

  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}

function getDocumentElement(node) {
  var _ref;

  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}

function isNode(value) {
  return value instanceof Node || value instanceof getWindow(value).Node;
}

function isElement(value) {
  return value instanceof Element || value instanceof getWindow(value).Element;
}

function isHTMLElement(value) {
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}

function isShadowRoot(value) {
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }

  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}

function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle$1(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);
}

function isTableElement(element) {
  return ['table', 'td', 'th'].includes(getNodeName(element));
}

function isContainingBlock(element) {
  const webkit = isWebKit();
  const css = getComputedStyle$1(element);
  return css.transform !== 'none' || css.perspective !== 'none' || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));
}

function getContainingBlock(element) {
  let currentNode = getParentNode(element);

  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    }

    currentNode = getParentNode(currentNode);
  }

  return null;
}

function isWebKit() {
  if (typeof CSS === 'undefined' || !CSS.supports) return false;
  return CSS.supports('-webkit-backdrop-filter', 'none');
}

function isLastTraversableNode(node) {
  return ['html', 'body', '#document'].includes(getNodeName(node));
}

function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}

function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  return {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}

function getParentNode(node) {
  if (getNodeName(node) === 'html') {
    return node;
  }

  const result = node.assignedSlot || node.parentNode || isShadowRoot(node) && node.host || getDocumentElement(node);
  return isShadowRoot(result) ? result.host : result;
}

function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);

  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }

  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }

  return getNearestOverflowAncestor(parentNode);
}

function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;

  if (list === void 0) {
    list = [];
  }

  if (traverseIframes === void 0) {
    traverseIframes = true;
  }

  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);

  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
  }

  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}

function getCssDimensions(element) {
  const css = getComputedStyle$1(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;

  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }

  return {
    width,
    height,
    $: shouldFallback
  };
}

function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}

function getScale(element) {
  const domElement = unwrapElement(element);

  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }

  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;

  if (!x || !Number.isFinite(x)) {
    x = 1;
  }

  if (!y || !Number.isFinite(y)) {
    y = 1;
  }

  return {
    x,
    y
  };
}

const noOffsets = /*#__PURE__*/createCoords(0);

function getVisualOffsets(element) {
  const win = getWindow(element);

  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }

  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}

function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }

  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }

  return isFixed;
}

function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }

  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }

  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);

  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }

  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;

  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentIFrame = win.frameElement;

    while (currentIFrame && offsetParent && offsetWin !== win) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle$1(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentIFrame = getWindow(currentIFrame).frameElement;
    }
  }

  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}

function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);

  if (offsetParent === documentElement) {
    return rect;
  }

  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);

  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {
    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }

    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }

  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}

function getClientRects(element) {
  return Array.from(element.getClientRects());
}

function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}

function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;

  if (getComputedStyle$1(body).direction === 'rtl') {
    x += max(html.clientWidth, body.clientWidth) - width;
  }

  return {
    width,
    height,
    x,
    y
  };
}

function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;

  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();

    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }

  return {
    width,
    height,
    x,
    y
  };
}

function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y
  };
}

function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;

  if (clippingAncestor === 'viewport') {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === 'document') {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = { ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }

  return rectToClientRect(rect);
}

function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);

  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }

  return getComputedStyle$1(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);
}

function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);

  if (cachedResult) {
    return cachedResult;
  }

  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle$1(element).position === 'fixed';
  let currentNode = elementIsFixed ? getParentNode(element) : element;

  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle$1(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);

    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {
      currentContainingBlockComputedStyle = null;
    }

    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);

    if (shouldDropCurrentNode) {
      result = result.filter(ancestor => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }

    currentNode = getParentNode(currentNode);
  }

  cache.set(element, result);
  return result;
}

function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === 'clippingAncestors' ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}

function getDimensions(element) {
  return getCssDimensions(element);
}

function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === 'fixed';
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);

  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }

    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }

  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle$1(element).position === 'fixed') {
    return null;
  }

  if (polyfill) {
    return polyfill(element);
  }

  return element.offsetParent;
}

function getOffsetParent(element, polyfill) {
  const window = getWindow(element);

  if (!isHTMLElement(element)) {
    return window;
  }

  let offsetParent = getTrueOffsetParent(element, polyfill);

  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }

  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static' && !isContainingBlock(offsetParent))) {
    return window;
  }

  return offsetParent || getContainingBlock(element) || window;
}

const getElementRects = async function (_ref) {
  let {
    reference,
    floating,
    strategy
  } = _ref;
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  return {
    reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),
    floating: {
      x: 0,
      y: 0,
      ...(await getDimensionsFn(floating))
    }
  };
};

function isRTL(element) {
  return getComputedStyle$1(element).direction === 'rtl';
}

const platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};

function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);

  function cleanup() {
    clearTimeout(timeoutId);
    io && io.disconnect();
    io = null;
  }

  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }

    if (threshold === void 0) {
      threshold = 1;
    }

    cleanup();
    const {
      left,
      top,
      width,
      height
    } = element.getBoundingClientRect();

    if (!skip) {
      onMove();
    }

    if (!width || !height) {
      return;
    }

    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;

    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;

      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }

        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 100);
        } else {
          refresh(false, ratio);
        }
      }

      isFirstUpdate = false;
    }

    try {
      io = new IntersectionObserver(handleObserve, { ...options,
        root: root.ownerDocument
      });
    } catch (e) {
      io = new IntersectionObserver(handleObserve, options);
    }

    io.observe(element);
  }

  refresh(true);
  return cleanup;
}

function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }

  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === 'function',
    layoutShift = typeof IntersectionObserver === 'function',
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];
  ancestors.forEach(ancestor => {
    ancestorScroll && ancestor.addEventListener('scroll', update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener('resize', update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;

  if (elementResize) {
    resizeObserver = new ResizeObserver(_ref => {
      let [firstEntry] = _ref;

      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          resizeObserver && resizeObserver.observe(floating);
        });
      }

      update();
    });

    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }

    resizeObserver.observe(floating);
  }

  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;

  if (animationFrame) {
    frameLoop();
  }

  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);

    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }

    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }

  update();
  return () => {
    ancestors.forEach(ancestor => {
      ancestorScroll && ancestor.removeEventListener('scroll', update);
      ancestorResize && ancestor.removeEventListener('resize', update);
    });
    cleanupIo && cleanupIo();
    resizeObserver && resizeObserver.disconnect();
    resizeObserver = null;

    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}

const computePosition = (reference, floating, options) => {
  const cache = new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = { ...mergedOptions.platform,
    _c: cache
  };
  return computePosition$1(reference, floating, { ...mergedOptions,
    platform: platformWithCache
  });
};

const arrow = options => {
  function isRef(value) {
    return {}.hasOwnProperty.call(value, 'current');
  }

  return {
    name: 'arrow',
    options,

    fn(state) {
      const {
        element,
        padding
      } = typeof options === 'function' ? options(state) : options;

      if (element && isRef(element)) {
        if (element.current != null) {
          return arrow$1({
            element: element.current,
            padding
          }).fn(state);
        }

        return {};
      } else if (element) {
        return arrow$1({
          element,
          padding
        }).fn(state);
      }

      return {};
    }

  };
};

var index$1 = typeof document !== 'undefined' ? useLayoutEffect : useEffect;

function deepEqual(a, b) {
  if (a === b) {
    return true;
  }

  if (typeof a !== typeof b) {
    return false;
  }

  if (typeof a === 'function' && a.toString() === b.toString()) {
    return true;
  }

  let length, i, keys;

  if (a && b && typeof a == 'object') {
    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length) return false;

      for (i = length; i-- !== 0;) {
        if (!deepEqual(a[i], b[i])) {
          return false;
        }
      }

      return true;
    }

    keys = Object.keys(a);
    length = keys.length;

    if (length !== Object.keys(b).length) {
      return false;
    }

    for (i = length; i-- !== 0;) {
      if (!{}.hasOwnProperty.call(b, keys[i])) {
        return false;
      }
    }

    for (i = length; i-- !== 0;) {
      const key = keys[i];

      if (key === '_owner' && a.$$typeof) {
        continue;
      }

      if (!deepEqual(a[key], b[key])) {
        return false;
      }
    }

    return true;
  }

  return a !== a && b !== b;
}

function getDPR(element) {
  if (typeof window === 'undefined') {
    return 1;
  }

  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}

function roundByDPR(element, value) {
  const dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}

function useLatestRef$1(value) {
  const ref = React.useRef(value);
  index$1(() => {
    ref.current = value;
  });
  return ref;
}

function useFloating$1(options) {
  if (options === void 0) {
    options = {};
  }

  const {
    placement = 'bottom',
    strategy = 'absolute',
    middleware = [],
    platform,
    elements: {
      reference: externalReference,
      floating: externalFloating
    } = {},
    transform = true,
    whileElementsMounted,
    open
  } = options;
  const [data, setData] = React.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = React.useState(middleware);

  if (!deepEqual(latestMiddleware, middleware)) {
    setLatestMiddleware(middleware);
  }

  const [_reference, _setReference] = React.useState(null);
  const [_floating, _setFloating] = React.useState(null);
  const setReference = React.useCallback(node => {
    if (node != referenceRef.current) {
      referenceRef.current = node;

      _setReference(node);
    }
  }, [_setReference]);
  const setFloating = React.useCallback(node => {
    if (node !== floatingRef.current) {
      floatingRef.current = node;

      _setFloating(node);
    }
  }, [_setFloating]);
  const referenceEl = externalReference || _reference;
  const floatingEl = externalFloating || _floating;
  const referenceRef = React.useRef(null);
  const floatingRef = React.useRef(null);
  const dataRef = React.useRef(data);
  const whileElementsMountedRef = useLatestRef$1(whileElementsMounted);
  const platformRef = useLatestRef$1(platform);
  const update = React.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }

    const config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };

    if (platformRef.current) {
      config.platform = platformRef.current;
    }

    computePosition(referenceRef.current, floatingRef.current, config).then(data => {
      const fullData = { ...data,
        isPositioned: true
      };

      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
        dataRef.current = fullData;
        ReactDOM.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef]);
  index$1(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData(data => ({ ...data,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = React.useRef(false);
  index$1(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index$1(() => {
    if (referenceEl) referenceRef.current = referenceEl;
    if (floatingEl) floatingRef.current = floatingEl;

    if (referenceEl && floatingEl) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(referenceEl, floatingEl, update);
      } else {
        update();
      }
    }
  }, [referenceEl, floatingEl, update, whileElementsMountedRef]);
  const refs = React.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = React.useMemo(() => ({
    reference: referenceEl,
    floating: floatingEl
  }), [referenceEl, floatingEl]);
  const floatingStyles = React.useMemo(() => {
    const initialStyles = {
      position: strategy,
      left: 0,
      top: 0
    };

    if (!elements.floating) {
      return initialStyles;
    }

    const x = roundByDPR(elements.floating, data.x);
    const y = roundByDPR(elements.floating, data.y);

    if (transform) {
      return { ...initialStyles,
        transform: "translate(" + x + "px, " + y + "px)",
        ...(getDPR(elements.floating) >= 1.5 && {
          willChange: 'transform'
        })
      };
    }

    return {
      position: strategy,
      left: x,
      top: y
    };
  }, [strategy, transform, elements.floating, data.x, data.y]);
  return React.useMemo(() => ({ ...data,
    update,
    refs,
    elements,
    floatingStyles
  }), [data, update, refs, elements, floatingStyles]);
}

var candidateSelectors = ['input:not([inert])', 'select:not([inert])', 'textarea:not([inert])', 'a[href]:not([inert])', 'button:not([inert])', '[tabindex]:not(slot):not([inert])', 'audio[controls]:not([inert])', 'video[controls]:not([inert])', '[contenteditable]:not([contenteditable="false"]):not([inert])', 'details>summary:first-of-type:not([inert])', 'details:not([inert])'];
var candidateSelector = /* #__PURE__ */candidateSelectors.join(',');
var NoElement = typeof Element === 'undefined';
var matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
var getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {
  var _element$getRootNode;

  return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);
} : function (element) {
  return element === null || element === void 0 ? void 0 : element.ownerDocument;
};

var isInert = function isInert(node, lookUp) {
  var _node$getAttribute;

  if (lookUp === void 0) {
    lookUp = true;
  }

  var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, 'inert');
  var inert = inertAtt === '' || inertAtt === 'true';
  var result = inert || lookUp && node && isInert(node.parentNode);
  return result;
};

var isContentEditable = function isContentEditable(node) {
  var _node$getAttribute2;

  var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, 'contenteditable');
  return attValue === '' || attValue === 'true';
};

var getCandidates = function getCandidates(el, includeContainer, filter) {
  if (isInert(el)) {
    return [];
  }

  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));

  if (includeContainer && matches.call(el, candidateSelector)) {
    candidates.unshift(el);
  }

  candidates = candidates.filter(filter);
  return candidates;
};

var getCandidatesIteratively = function getCandidatesIteratively(elements, includeContainer, options) {
  var candidates = [];
  var elementsToCheck = Array.from(elements);

  while (elementsToCheck.length) {
    var element = elementsToCheck.shift();

    if (isInert(element, false)) {
      continue;
    }

    if (element.tagName === 'SLOT') {
      var assigned = element.assignedElements();
      var content = assigned.length ? assigned : element.children;
      var nestedCandidates = getCandidatesIteratively(content, true, options);

      if (options.flatten) {
        candidates.push.apply(candidates, nestedCandidates);
      } else {
        candidates.push({
          scopeParent: element,
          candidates: nestedCandidates
        });
      }
    } else {
      var validCandidate = matches.call(element, candidateSelector);

      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {
        candidates.push(element);
      }

      var shadowRoot = element.shadowRoot || typeof options.getShadowRoot === 'function' && options.getShadowRoot(element);
      var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));

      if (shadowRoot && validShadowRoot) {
        var _nestedCandidates = getCandidatesIteratively(shadowRoot === true ? element.children : shadowRoot.children, true, options);

        if (options.flatten) {
          candidates.push.apply(candidates, _nestedCandidates);
        } else {
          candidates.push({
            scopeParent: element,
            candidates: _nestedCandidates
          });
        }
      } else {
        elementsToCheck.unshift.apply(elementsToCheck, element.children);
      }
    }
  }

  return candidates;
};

var hasTabIndex = function hasTabIndex(node) {
  return !isNaN(parseInt(node.getAttribute('tabindex'), 10));
};

var getTabIndex = function getTabIndex(node) {
  if (!node) {
    throw new Error('No node provided');
  }

  if (node.tabIndex < 0) {
    if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {
      return 0;
    }
  }

  return node.tabIndex;
};

var getSortOrderTabIndex = function getSortOrderTabIndex(node, isScope) {
  var tabIndex = getTabIndex(node);

  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {
    return 0;
  }

  return tabIndex;
};

var sortOrderedTabbables = function sortOrderedTabbables(a, b) {
  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;
};

var isInput = function isInput(node) {
  return node.tagName === 'INPUT';
};

var isHiddenInput = function isHiddenInput(node) {
  return isInput(node) && node.type === 'hidden';
};

var isDetailsWithSummary = function isDetailsWithSummary(node) {
  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {
    return child.tagName === 'SUMMARY';
  });
  return r;
};

var getCheckedRadio = function getCheckedRadio(nodes, form) {
  for (var i = 0; i < nodes.length; i++) {
    if (nodes[i].checked && nodes[i].form === form) {
      return nodes[i];
    }
  }
};

var isTabbableRadio = function isTabbableRadio(node) {
  if (!node.name) {
    return true;
  }

  var radioScope = node.form || getRootNode(node);

  var queryRadios = function queryRadios(name) {
    return radioScope.querySelectorAll('input[type="radio"][name="' + name + '"]');
  };

  var radioSet;

  if (typeof window !== 'undefined' && typeof window.CSS !== 'undefined' && typeof window.CSS.escape === 'function') {
    radioSet = queryRadios(window.CSS.escape(node.name));
  } else {
    try {
      radioSet = queryRadios(node.name);
    } catch (err) {
      console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s', err.message);
      return false;
    }
  }

  var checked = getCheckedRadio(radioSet, node.form);
  return !checked || checked === node;
};

var isRadio = function isRadio(node) {
  return isInput(node) && node.type === 'radio';
};

var isNonTabbableRadio = function isNonTabbableRadio(node) {
  return isRadio(node) && !isTabbableRadio(node);
};

var isNodeAttached = function isNodeAttached(node) {
  var _nodeRoot;

  var nodeRoot = node && getRootNode(node);
  var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;
  var attached = false;

  if (nodeRoot && nodeRoot !== node) {
    var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;

    attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));

    while (!attached && nodeRootHost) {
      var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;

      nodeRoot = getRootNode(nodeRootHost);
      nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;
      attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));
    }
  }

  return attached;
};

var isZeroArea = function isZeroArea(node) {
  var _node$getBoundingClie = node.getBoundingClientRect(),
      width = _node$getBoundingClie.width,
      height = _node$getBoundingClie.height;

  return width === 0 && height === 0;
};

var isHidden = function isHidden(node, _ref) {
  var displayCheck = _ref.displayCheck,
      getShadowRoot = _ref.getShadowRoot;

  if (getComputedStyle(node).visibility === 'hidden') {
    return true;
  }

  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');
  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;

  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {
    return true;
  }

  if (!displayCheck || displayCheck === 'full' || displayCheck === 'legacy-full') {
    if (typeof getShadowRoot === 'function') {
      var originalNode = node;

      while (node) {
        var parentElement = node.parentElement;
        var rootNode = getRootNode(node);

        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true) {
            return isZeroArea(node);
          } else if (node.assignedSlot) {
          node = node.assignedSlot;
        } else if (!parentElement && rootNode !== node.ownerDocument) {
          node = rootNode.host;
        } else {
          node = parentElement;
        }
      }

      node = originalNode;
    }

    if (isNodeAttached(node)) {
      return !node.getClientRects().length;
    }

    if (displayCheck !== 'legacy-full') {
      return true;
    }
  } else if (displayCheck === 'non-zero-area') {
    return isZeroArea(node);
  }

  return false;
};

var isDisabledFromFieldset = function isDisabledFromFieldset(node) {
  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
    var parentNode = node.parentElement;

    while (parentNode) {
      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {
        for (var i = 0; i < parentNode.children.length; i++) {
          var child = parentNode.children.item(i);

          if (child.tagName === 'LEGEND') {
            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);
          }
        }

        return true;
      }

      parentNode = parentNode.parentElement;
    }
  }

  return false;
};

var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {
  if (node.disabled || isInert(node) || isHiddenInput(node) || isHidden(node, options) || isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
    return false;
  }

  return true;
};

var isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {
  if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {
    return false;
  }

  return true;
};

var isValidShadowRootTabbable = function isValidShadowRootTabbable(shadowHostNode) {
  var tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);

  if (isNaN(tabIndex) || tabIndex >= 0) {
    return true;
  }

  return false;
};

var sortByOrder = function sortByOrder(candidates) {
  var regularTabbables = [];
  var orderedTabbables = [];
  candidates.forEach(function (item, i) {
    var isScope = !!item.scopeParent;
    var element = isScope ? item.scopeParent : item;
    var candidateTabindex = getSortOrderTabIndex(element, isScope);
    var elements = isScope ? sortByOrder(item.candidates) : element;

    if (candidateTabindex === 0) {
      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);
    } else {
      orderedTabbables.push({
        documentOrder: i,
        tabIndex: candidateTabindex,
        item: item,
        isScope: isScope,
        content: elements
      });
    }
  });
  return orderedTabbables.sort(sortOrderedTabbables).reduce(function (acc, sortable) {
    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);
    return acc;
  }, []).concat(regularTabbables);
};

var tabbable = function tabbable(container, options) {
  options = options || {};
  var candidates;

  if (options.getShadowRoot) {
    candidates = getCandidatesIteratively([container], options.includeContainer, {
      filter: isNodeMatchingSelectorTabbable.bind(null, options),
      flatten: false,
      getShadowRoot: options.getShadowRoot,
      shadowRootFilter: isValidShadowRootTabbable
    });
  } else {
    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));
  }

  return sortByOrder(candidates);
};

let rafId = 0;

function enqueueFocus(el, options) {
  if (options === void 0) {
    options = {};
  }

  const {
    preventScroll = false,
    cancelPrevious = true,
    sync = false
  } = options;
  cancelPrevious && cancelAnimationFrame(rafId);

  const exec = () => el == null ? void 0 : el.focus({
    preventScroll
  });

  if (sync) {
    exec();
  } else {
    rafId = requestAnimationFrame(exec);
  }
}

var index = typeof document !== 'undefined' ? useLayoutEffect : useEffect;

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

let serverHandoffComplete = false;
let count = 0;

const genId = () => "floating-ui-" + count++;

function useFloatingId() {
  const [id, setId] = React.useState(() => serverHandoffComplete ? genId() : undefined);
  index(() => {
    if (id == null) {
      setId(genId());
    }
  }, []);
  React.useEffect(() => {
    if (!serverHandoffComplete) {
      serverHandoffComplete = true;
    }
  }, []);
  return id;
}

const useReactId = React[/*#__PURE__*/'useId'.toString()];
const useId = useReactId || useFloatingId;

function createPubSub() {
  const map = new Map();
  return {
    emit(event, data) {
      var _map$get;

      (_map$get = map.get(event)) == null ? void 0 : _map$get.forEach(handler => handler(data));
    },

    on(event, listener) {
      map.set(event, [...(map.get(event) || []), listener]);
    },

    off(event, listener) {
      var _map$get2;

      map.set(event, ((_map$get2 = map.get(event)) == null ? void 0 : _map$get2.filter(l => l !== listener)) || []);
    }

  };
}
const FloatingTreeContext = /*#__PURE__*/React.createContext(null);

const useFloatingTree = () => React.useContext(FloatingTreeContext);

function createAttribute(name) {
  return "data-floating-ui-" + name;
}

function useLatestRef(value) {
  const ref = useRef(value);
  index(() => {
    ref.current = value;
  });
  return ref;
}

function getAncestors(nodes, id) {
  var _nodes$find;

  let allAncestors = [];
  let currentParentId = (_nodes$find = nodes.find(node => node.id === id)) == null ? void 0 : _nodes$find.parentId;

  while (currentParentId) {
    const currentNode = nodes.find(node => node.id === currentParentId);
    currentParentId = currentNode == null ? void 0 : currentNode.parentId;

    if (currentNode) {
      allAncestors = allAncestors.concat(currentNode);
    }
  }

  return allAncestors;
}

function getChildren(nodes, id) {
  let allChildren = nodes.filter(node => {
    var _node$context;

    return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);
  });
  let currentChildren = allChildren;

  while (currentChildren.length) {
    currentChildren = nodes.filter(node => {
      var _currentChildren;

      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some(n => {
        var _node$context2;

        return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);
      });
    });
    allChildren = allChildren.concat(currentChildren);
  }

  return allChildren;
}

let counterMap = /*#__PURE__*/new WeakMap();
let uncontrolledElementsSet = /*#__PURE__*/new WeakSet();
let markerMap = {};
let lockCount = 0;

const supportsInert = () => typeof HTMLElement !== 'undefined' && 'inert' in HTMLElement.prototype;

const unwrapHost = node => node && (node.host || unwrapHost(node.parentNode));

const correctElements = (parent, targets) => targets.map(target => {
  if (parent.contains(target)) {
    return target;
  }

  const correctedTarget = unwrapHost(target);

  if (parent.contains(correctedTarget)) {
    return correctedTarget;
  }

  return null;
}).filter(x => x != null);

function applyAttributeToOthers(uncorrectedAvoidElements, body, ariaHidden, inert) {
  const markerName = 'data-floating-ui-inert';
  const controlAttribute = inert ? 'inert' : ariaHidden ? 'aria-hidden' : null;
  const avoidElements = correctElements(body, uncorrectedAvoidElements);
  const elementsToKeep = new Set();
  const elementsToStop = new Set(avoidElements);
  const hiddenElements = [];

  if (!markerMap[markerName]) {
    markerMap[markerName] = new WeakMap();
  }

  const markerCounter = markerMap[markerName];
  avoidElements.forEach(keep);
  deep(body);
  elementsToKeep.clear();

  function keep(el) {
    if (!el || elementsToKeep.has(el)) {
      return;
    }

    elementsToKeep.add(el);
    el.parentNode && keep(el.parentNode);
  }

  function deep(parent) {
    if (!parent || elementsToStop.has(parent)) {
      return;
    }

    Array.prototype.forEach.call(parent.children, node => {
      if (elementsToKeep.has(node)) {
        deep(node);
      } else {
        const attr = controlAttribute ? node.getAttribute(controlAttribute) : null;
        const alreadyHidden = attr !== null && attr !== 'false';
        const counterValue = (counterMap.get(node) || 0) + 1;
        const markerValue = (markerCounter.get(node) || 0) + 1;
        counterMap.set(node, counterValue);
        markerCounter.set(node, markerValue);
        hiddenElements.push(node);

        if (counterValue === 1 && alreadyHidden) {
          uncontrolledElementsSet.add(node);
        }

        if (markerValue === 1) {
          node.setAttribute(markerName, '');
        }

        if (!alreadyHidden && controlAttribute) {
          node.setAttribute(controlAttribute, 'true');
        }
      }
    });
  }

  lockCount++;
  return () => {
    hiddenElements.forEach(element => {
      const counterValue = (counterMap.get(element) || 0) - 1;
      const markerValue = (markerCounter.get(element) || 0) - 1;
      counterMap.set(element, counterValue);
      markerCounter.set(element, markerValue);

      if (!counterValue) {
        if (!uncontrolledElementsSet.has(element) && controlAttribute) {
          element.removeAttribute(controlAttribute);
        }

        uncontrolledElementsSet.delete(element);
      }

      if (!markerValue) {
        element.removeAttribute(markerName);
      }
    });
    lockCount--;

    if (!lockCount) {
      counterMap = new WeakMap();
      counterMap = new WeakMap();
      uncontrolledElementsSet = new WeakSet();
      markerMap = {};
    }
  };
}

function markOthers(avoidElements, ariaHidden, inert) {
  if (ariaHidden === void 0) {
    ariaHidden = false;
  }

  if (inert === void 0) {
    inert = false;
  }

  const body = getDocument(avoidElements[0]).body;
  return applyAttributeToOthers(avoidElements.concat(Array.from(body.querySelectorAll('[aria-live]'))), body, ariaHidden, inert);
}

const getTabbableOptions = () => ({
  getShadowRoot: true,
  displayCheck: typeof ResizeObserver === 'function' && ResizeObserver.toString().includes('[native code]') ? 'full' : 'none'
});

function getTabbableIn(container, direction) {
  const allTabbable = tabbable(container, getTabbableOptions());

  if (direction === 'prev') {
    allTabbable.reverse();
  }

  const activeIndex = allTabbable.indexOf(activeElement(getDocument(container)));
  const nextTabbableElements = allTabbable.slice(activeIndex + 1);
  return nextTabbableElements[0];
}

function getNextTabbable() {
  return getTabbableIn(document.body, 'next');
}

function getPreviousTabbable() {
  return getTabbableIn(document.body, 'prev');
}

function isOutsideEvent(event, container) {
  const containerElement = container || event.currentTarget;
  const relatedTarget = event.relatedTarget;
  return !relatedTarget || !contains$1(containerElement, relatedTarget);
}

function disableFocusInside(container) {
  const tabbableElements = tabbable(container, getTabbableOptions());
  tabbableElements.forEach(element => {
    element.dataset.tabindex = element.getAttribute('tabindex') || '';
    element.setAttribute('tabindex', '-1');
  });
}

function enableFocusInside(container) {
  const elements = container.querySelectorAll('[data-tabindex]');
  elements.forEach(element => {
    const tabindex = element.dataset.tabindex;
    delete element.dataset.tabindex;

    if (tabindex) {
      element.setAttribute('tabindex', tabindex);
    } else {
      element.removeAttribute('tabindex');
    }
  });
}

const HIDDEN_STYLES = {
  border: 0,
  clip: 'rect(0 0 0 0)',
  height: '1px',
  margin: '-1px',
  overflow: 'hidden',
  padding: 0,
  position: 'fixed',
  whiteSpace: 'nowrap',
  width: '1px',
  top: 0,
  left: 0
};
let timeoutId;

function setActiveElementOnTab(event) {
  if (event.key === 'Tab') {
    event.target;
    clearTimeout(timeoutId);
  }
}

const FocusGuard = /*#__PURE__*/React.forwardRef(function FocusGuard(props, ref) {
  const [role, setRole] = React.useState();
  index(() => {
    if (isSafari()) {
      setRole('button');
    }

    document.addEventListener('keydown', setActiveElementOnTab);
    return () => {
      document.removeEventListener('keydown', setActiveElementOnTab);
    };
  }, []);
  const restProps = {
    ref,
    tabIndex: 0,
    role,
    'aria-hidden': role ? undefined : true,
    [createAttribute('focus-guard')]: '',
    style: HIDDEN_STYLES
  };
  return /*#__PURE__*/React.createElement("span", _extends({}, props, restProps));
});
const PortalContext = /*#__PURE__*/React.createContext(null);

function useFloatingPortalNode(_temp) {
  let {
    id,
    root
  } = _temp === void 0 ? {} : _temp;
  const [portalNode, setPortalNode] = React.useState(null);
  const uniqueId = useId();
  const portalContext = usePortalContext();
  const data = React.useMemo(() => ({
    id,
    root,
    portalContext,
    uniqueId
  }), [id, root, portalContext, uniqueId]);
  const dataRef = React.useRef();
  index(() => {
    return () => {
      portalNode == null ? void 0 : portalNode.remove();
    };
  }, [portalNode, data]);
  index(() => {
    if (dataRef.current === data) return;
    dataRef.current = data;
    const {
      id,
      root,
      portalContext,
      uniqueId
    } = data;
    const existingIdRoot = id ? document.getElementById(id) : null;
    const attr = createAttribute('portal');

    if (existingIdRoot) {
      const subRoot = document.createElement('div');
      subRoot.id = uniqueId;
      subRoot.setAttribute(attr, '');
      existingIdRoot.appendChild(subRoot);
      setPortalNode(subRoot);
    } else {
      let container = root || (portalContext == null ? void 0 : portalContext.portalNode);
      if (container && !isElement(container)) container = container.current;
      container = container || document.body;
      let idWrapper = null;

      if (id) {
        idWrapper = document.createElement('div');
        idWrapper.id = id;
        container.appendChild(idWrapper);
      }

      const subRoot = document.createElement('div');
      subRoot.id = uniqueId;
      subRoot.setAttribute(attr, '');
      container = idWrapper || container;
      container.appendChild(subRoot);
      setPortalNode(subRoot);
    }
  }, [data]);
  return portalNode;
}

function FloatingPortal(_ref) {
  let {
    children,
    id,
    root = null,
    preserveTabOrder = true
  } = _ref;
  const portalNode = useFloatingPortalNode({
    id,
    root
  });
  const [focusManagerState, setFocusManagerState] = React.useState(null);
  const beforeOutsideRef = React.useRef(null);
  const afterOutsideRef = React.useRef(null);
  const beforeInsideRef = React.useRef(null);
  const afterInsideRef = React.useRef(null);
  const shouldRenderGuards = !!focusManagerState && !focusManagerState.modal && focusManagerState.open && preserveTabOrder && !!(root || portalNode);
  React.useEffect(() => {
    if (!portalNode || !preserveTabOrder || focusManagerState != null && focusManagerState.modal) {
      return;
    }

    function onFocus(event) {
      if (portalNode && isOutsideEvent(event)) {
        const focusing = event.type === 'focusin';
        const manageFocus = focusing ? enableFocusInside : disableFocusInside;
        manageFocus(portalNode);
      }
    }

    portalNode.addEventListener('focusin', onFocus, true);
    portalNode.addEventListener('focusout', onFocus, true);
    return () => {
      portalNode.removeEventListener('focusin', onFocus, true);
      portalNode.removeEventListener('focusout', onFocus, true);
    };
  }, [portalNode, preserveTabOrder, focusManagerState == null ? void 0 : focusManagerState.modal]);
  return /*#__PURE__*/React.createElement(PortalContext.Provider, {
    value: React.useMemo(() => ({
      preserveTabOrder,
      beforeOutsideRef,
      afterOutsideRef,
      beforeInsideRef,
      afterInsideRef,
      portalNode,
      setFocusManagerState
    }), [preserveTabOrder, portalNode])
  }, shouldRenderGuards && portalNode && /*#__PURE__*/React.createElement(FocusGuard, {
    "data-type": "outside",
    ref: beforeOutsideRef,
    onFocus: event => {
      if (isOutsideEvent(event, portalNode)) {
        var _beforeInsideRef$curr;

        (_beforeInsideRef$curr = beforeInsideRef.current) == null ? void 0 : _beforeInsideRef$curr.focus();
      } else {
        const prevTabbable = getPreviousTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);
        prevTabbable == null ? void 0 : prevTabbable.focus();
      }
    }
  }), shouldRenderGuards && portalNode && /*#__PURE__*/React.createElement("span", {
    "aria-owns": portalNode.id,
    style: HIDDEN_STYLES
  }), portalNode && /*#__PURE__*/createPortal(children, portalNode), shouldRenderGuards && portalNode && /*#__PURE__*/React.createElement(FocusGuard, {
    "data-type": "outside",
    ref: afterOutsideRef,
    onFocus: event => {
      if (isOutsideEvent(event, portalNode)) {
        var _afterInsideRef$curre;

        (_afterInsideRef$curre = afterInsideRef.current) == null ? void 0 : _afterInsideRef$curre.focus();
      } else {
        const nextTabbable = getNextTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);
        nextTabbable == null ? void 0 : nextTabbable.focus();
        (focusManagerState == null ? void 0 : focusManagerState.closeOnFocusOut) && (focusManagerState == null ? void 0 : focusManagerState.onOpenChange(false, event.nativeEvent));
      }
    }
  }));
}

const usePortalContext = () => React.useContext(PortalContext);

const VisuallyHiddenDismiss = /*#__PURE__*/React.forwardRef(function VisuallyHiddenDismiss(props, ref) {
  return /*#__PURE__*/React.createElement("button", _extends({}, props, {
    type: "button",
    ref: ref,
    tabIndex: -1,
    style: HIDDEN_STYLES
  }));
});

function FloatingFocusManager(props) {
  const {
    context,
    children,
    disabled = false,
    order = ['content'],
    guards: _guards = true,
    initialFocus = 0,
    returnFocus = true,
    modal = true,
    visuallyHiddenDismiss = false,
    closeOnFocusOut = true
  } = props;
  const {
    open,
    refs,
    nodeId,
    onOpenChange,
    events,
    dataRef,
    elements: {
      domReference,
      floating
    }
  } = context;
  const guards = supportsInert() ? _guards : true;
  const orderRef = useLatestRef(order);
  const initialFocusRef = useLatestRef(initialFocus);
  const returnFocusRef = useLatestRef(returnFocus);
  const tree = useFloatingTree();
  const portalContext = usePortalContext();
  const ignoreInitialFocus = typeof initialFocus === 'number' && initialFocus < 0;
  const startDismissButtonRef = React.useRef(null);
  const endDismissButtonRef = React.useRef(null);
  const preventReturnFocusRef = React.useRef(false);
  const previouslyFocusedElementRef = React.useRef(null);
  const isPointerDownRef = React.useRef(false);
  const isInsidePortal = portalContext != null;
  const isUntrappedTypeableCombobox = domReference && domReference.getAttribute('role') === 'combobox' && isTypeableElement(domReference) && ignoreInitialFocus;
  const getTabbableContent = React.useCallback(function (container) {
    if (container === void 0) {
      container = floating;
    }

    return container ? tabbable(container, getTabbableOptions()) : [];
  }, [floating]);
  const getTabbableElements = React.useCallback(container => {
    const content = getTabbableContent(container);
    return orderRef.current.map(type => {
      if (domReference && type === 'reference') {
        return domReference;
      }

      if (floating && type === 'floating') {
        return floating;
      }

      return content;
    }).filter(Boolean).flat();
  }, [domReference, floating, orderRef, getTabbableContent]);
  React.useEffect(() => {
    if (disabled || !modal) return;

    function onKeyDown(event) {
      if (event.key === 'Tab') {
        if (contains$1(floating, activeElement(getDocument(floating))) && getTabbableContent().length === 0 && !isUntrappedTypeableCombobox) {
          stopEvent(event);
        }

        const els = getTabbableElements();
        const target = getTarget(event);

        if (orderRef.current[0] === 'reference' && target === domReference) {
          stopEvent(event);

          if (event.shiftKey) {
            enqueueFocus(els[els.length - 1]);
          } else {
            enqueueFocus(els[1]);
          }
        }

        if (orderRef.current[1] === 'floating' && target === floating && event.shiftKey) {
          stopEvent(event);
          enqueueFocus(els[0]);
        }
      }
    }

    const doc = getDocument(floating);
    doc.addEventListener('keydown', onKeyDown);
    return () => {
      doc.removeEventListener('keydown', onKeyDown);
    };
  }, [disabled, domReference, floating, modal, orderRef, refs, isUntrappedTypeableCombobox, getTabbableContent, getTabbableElements]);
  React.useEffect(() => {
    if (disabled || !closeOnFocusOut) return;

    function handlePointerDown() {
      isPointerDownRef.current = true;
      setTimeout(() => {
        isPointerDownRef.current = false;
      });
    }

    function handleFocusOutside(event) {
      const relatedTarget = event.relatedTarget;
      queueMicrotask(() => {
        const movedToUnrelatedNode = !(contains$1(domReference, relatedTarget) || contains$1(floating, relatedTarget) || contains$1(relatedTarget, floating) || contains$1(portalContext == null ? void 0 : portalContext.portalNode, relatedTarget) || relatedTarget != null && relatedTarget.hasAttribute(createAttribute('focus-guard')) || tree && (getChildren(tree.nodesRef.current, nodeId).find(node => {
          var _node$context, _node$context2;

          return contains$1((_node$context = node.context) == null ? void 0 : _node$context.elements.floating, relatedTarget) || contains$1((_node$context2 = node.context) == null ? void 0 : _node$context2.elements.domReference, relatedTarget);
        }) || getAncestors(tree.nodesRef.current, nodeId).find(node => {
          var _node$context3, _node$context4;

          return ((_node$context3 = node.context) == null ? void 0 : _node$context3.elements.floating) === relatedTarget || ((_node$context4 = node.context) == null ? void 0 : _node$context4.elements.domReference) === relatedTarget;
        })));

        if (relatedTarget && movedToUnrelatedNode && !isPointerDownRef.current && relatedTarget !== previouslyFocusedElementRef.current) {
          preventReturnFocusRef.current = true;
          onOpenChange(false, event);
        }
      });
    }

    if (floating && isHTMLElement(domReference)) {
      domReference.addEventListener('focusout', handleFocusOutside);
      domReference.addEventListener('pointerdown', handlePointerDown);
      !modal && floating.addEventListener('focusout', handleFocusOutside);
      return () => {
        domReference.removeEventListener('focusout', handleFocusOutside);
        domReference.removeEventListener('pointerdown', handlePointerDown);
        !modal && floating.removeEventListener('focusout', handleFocusOutside);
      };
    }
  }, [disabled, domReference, floating, modal, nodeId, tree, portalContext, onOpenChange, closeOnFocusOut]);
  React.useEffect(() => {
    var _portalContext$portal;

    if (disabled) return;
    const portalNodes = Array.from((portalContext == null ? void 0 : (_portalContext$portal = portalContext.portalNode) == null ? void 0 : _portalContext$portal.querySelectorAll("[" + createAttribute('portal') + "]")) || []);

    if (floating) {
      const insideElements = [floating, ...portalNodes, startDismissButtonRef.current, endDismissButtonRef.current, orderRef.current.includes('reference') || isUntrappedTypeableCombobox ? domReference : null].filter(x => x != null);
      const cleanup = modal ? markOthers(insideElements, guards, !guards) : markOthers(insideElements);
      return () => {
        cleanup();
      };
    }
  }, [disabled, domReference, floating, modal, orderRef, portalContext, isUntrappedTypeableCombobox, guards]);
  index(() => {
    if (disabled || !floating) return;
    const doc = getDocument(floating);
    const previouslyFocusedElement = activeElement(doc);
    queueMicrotask(() => {
      const focusableElements = getTabbableElements(floating);
      const initialFocusValue = initialFocusRef.current;
      const elToFocus = (typeof initialFocusValue === 'number' ? focusableElements[initialFocusValue] : initialFocusValue.current) || floating;
      const focusAlreadyInsideFloatingEl = contains$1(floating, previouslyFocusedElement);

      if (!ignoreInitialFocus && !focusAlreadyInsideFloatingEl && open) {
        enqueueFocus(elToFocus, {
          preventScroll: elToFocus === floating
        });
      }
    });
  }, [disabled, open, floating, ignoreInitialFocus, getTabbableElements, initialFocusRef]);
  index(() => {
    if (disabled || !floating) return;
    let preventReturnFocusScroll = false;
    const doc = getDocument(floating);
    const previouslyFocusedElement = activeElement(doc);
    const contextData = dataRef.current;
    previouslyFocusedElementRef.current = previouslyFocusedElement;

    function onDismiss(payload) {
      if (payload.type === 'escapeKey' && refs.domReference.current) {
        previouslyFocusedElementRef.current = refs.domReference.current;
      }

      if (['referencePress', 'escapeKey'].includes(payload.type)) {
        return;
      }

      const returnFocus = payload.data.returnFocus;

      if (typeof returnFocus === 'object') {
        preventReturnFocusRef.current = false;
        preventReturnFocusScroll = returnFocus.preventScroll;
      } else {
        preventReturnFocusRef.current = !returnFocus;
      }
    }

    events.on('dismiss', onDismiss);
    return () => {
      events.off('dismiss', onDismiss);
      const activeEl = activeElement(doc);
      const shouldFocusReference = contains$1(floating, activeEl) || tree && getChildren(tree.nodesRef.current, nodeId).some(node => {
        var _node$context5;

        return contains$1((_node$context5 = node.context) == null ? void 0 : _node$context5.elements.floating, activeEl);
      }) || contextData.openEvent && ['click', 'mousedown'].includes(contextData.openEvent.type);

      if (shouldFocusReference && refs.domReference.current) {
        previouslyFocusedElementRef.current = refs.domReference.current;
      }

      if (returnFocusRef.current && isHTMLElement(previouslyFocusedElementRef.current) && !preventReturnFocusRef.current) {
        enqueueFocus(previouslyFocusedElementRef.current, {
          cancelPrevious: false,
          preventScroll: preventReturnFocusScroll
        });
      }
    };
  }, [disabled, floating, returnFocusRef, dataRef, refs, events, tree, nodeId]);
  index(() => {
    if (disabled || !portalContext) return;
    portalContext.setFocusManagerState({
      modal,
      closeOnFocusOut,
      open,
      onOpenChange,
      refs
    });
    return () => {
      portalContext.setFocusManagerState(null);
    };
  }, [disabled, portalContext, modal, open, onOpenChange, refs, closeOnFocusOut]);
  index(() => {
    if (disabled) return;

    if (floating && typeof MutationObserver === 'function' && !ignoreInitialFocus) {
      const handleMutation = () => {
        const tabIndex = floating.getAttribute('tabindex');

        if (orderRef.current.includes('floating') || activeElement(getDocument(floating)) !== refs.domReference.current && getTabbableContent().length === 0) {
          if (tabIndex !== '0') {
            floating.setAttribute('tabindex', '0');
          }
        } else if (tabIndex !== '-1') {
          floating.setAttribute('tabindex', '-1');
        }
      };

      handleMutation();
      const observer = new MutationObserver(handleMutation);
      observer.observe(floating, {
        childList: true,
        subtree: true,
        attributes: true
      });
      return () => {
        observer.disconnect();
      };
    }
  }, [disabled, floating, refs, orderRef, getTabbableContent, ignoreInitialFocus]);

  function renderDismissButton(location) {
    if (disabled || !visuallyHiddenDismiss || !modal) {
      return null;
    }

    return /*#__PURE__*/React.createElement(VisuallyHiddenDismiss, {
      ref: location === 'start' ? startDismissButtonRef : endDismissButtonRef,
      onClick: event => onOpenChange(false, event.nativeEvent)
    }, typeof visuallyHiddenDismiss === 'string' ? visuallyHiddenDismiss : 'Dismiss');
  }

  const shouldRenderGuards = !disabled && guards && !isUntrappedTypeableCombobox && (isInsidePortal || modal);
  return /*#__PURE__*/React.createElement(React.Fragment, null, shouldRenderGuards && /*#__PURE__*/React.createElement(FocusGuard, {
    "data-type": "inside",
    ref: portalContext == null ? void 0 : portalContext.beforeInsideRef,
    onFocus: event => {
      if (modal) {
        const els = getTabbableElements();
        enqueueFocus(order[0] === 'reference' ? els[0] : els[els.length - 1]);
      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {
        preventReturnFocusRef.current = false;

        if (isOutsideEvent(event, portalContext.portalNode)) {
          const nextTabbable = getNextTabbable() || domReference;
          nextTabbable == null ? void 0 : nextTabbable.focus();
        } else {
          var _portalContext$before;

          (_portalContext$before = portalContext.beforeOutsideRef.current) == null ? void 0 : _portalContext$before.focus();
        }
      }
    }
  }), !isUntrappedTypeableCombobox && renderDismissButton('start'), children, renderDismissButton('end'), shouldRenderGuards && /*#__PURE__*/React.createElement(FocusGuard, {
    "data-type": "inside",
    ref: portalContext == null ? void 0 : portalContext.afterInsideRef,
    onFocus: event => {
      if (modal) {
        enqueueFocus(getTabbableElements()[0]);
      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {
        if (closeOnFocusOut) {
          preventReturnFocusRef.current = true;
        }

        if (isOutsideEvent(event, portalContext.portalNode)) {
          const prevTabbable = getPreviousTabbable() || domReference;
          prevTabbable == null ? void 0 : prevTabbable.focus();
        } else {
          var _portalContext$afterO;

          (_portalContext$afterO = portalContext.afterOutsideRef.current) == null ? void 0 : _portalContext$afterO.focus();
        }
      }
    }
  }));
}

const useInsertionEffect = React[/*#__PURE__*/'useInsertionEffect'.toString()];

const useSafeInsertionEffect = useInsertionEffect || (fn => fn());

function useEffectEvent(callback) {
  const ref = React.useRef(() => {
    {
      throw new Error('Cannot call an event handler while rendering.');
    }
  });
  useSafeInsertionEffect(() => {
    ref.current = callback;
  });
  return React.useCallback(function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return ref.current == null ? void 0 : ref.current(...args);
  }, []);
}

let devMessageSet;

{
  devMessageSet = /*#__PURE__*/new Set();
}

function useFloating(options) {
  var _options$elements2;

  if (options === void 0) {
    options = {};
  }

  const {
    open = false,
    onOpenChange: unstable_onOpenChange,
    nodeId
  } = options;

  {
    var _options$elements;

    const err = 'Floating UI: Cannot pass a virtual element to the ' + '`elements.reference` option, as it must be a real DOM element. ' + 'Use `refs.setPositionReference` instead.';

    if ((_options$elements = options.elements) != null && _options$elements.reference && !isElement(options.elements.reference)) {
      var _devMessageSet;

      if (!((_devMessageSet = devMessageSet) != null && _devMessageSet.has(err))) {
        var _devMessageSet2;

        (_devMessageSet2 = devMessageSet) == null ? void 0 : _devMessageSet2.add(err);
        console.error(err);
      }
    }
  }

  const [_domReference, setDomReference] = React.useState(null);
  const domReference = ((_options$elements2 = options.elements) == null ? void 0 : _options$elements2.reference) || _domReference;
  const position = useFloating$1(options);
  const tree = useFloatingTree();
  const onOpenChange = useEffectEvent((open, event) => {
    if (open) {
      dataRef.current.openEvent = event;
    }

    unstable_onOpenChange == null ? void 0 : unstable_onOpenChange(open, event);
  });
  const domReferenceRef = React.useRef(null);
  const dataRef = React.useRef({});
  const events = React.useState(() => createPubSub())[0];
  const floatingId = useId();
  const setPositionReference = React.useCallback(node => {
    const positionReference = isElement(node) ? {
      getBoundingClientRect: () => node.getBoundingClientRect(),
      contextElement: node
    } : node;
    position.refs.setReference(positionReference);
  }, [position.refs]);
  const setReference = React.useCallback(node => {
    if (isElement(node) || node === null) {
      domReferenceRef.current = node;
      setDomReference(node);
    }

    if (isElement(position.refs.reference.current) || position.refs.reference.current === null || node !== null && !isElement(node)) {
      position.refs.setReference(node);
    }
  }, [position.refs]);
  const refs = React.useMemo(() => ({ ...position.refs,
    setReference,
    setPositionReference,
    domReference: domReferenceRef
  }), [position.refs, setReference, setPositionReference]);
  const elements = React.useMemo(() => ({ ...position.elements,
    domReference: domReference
  }), [position.elements, domReference]);
  const context = React.useMemo(() => ({ ...position,
    refs,
    elements,
    dataRef,
    nodeId,
    floatingId,
    events,
    open,
    onOpenChange
  }), [position, nodeId, floatingId, events, open, onOpenChange, refs, elements]);
  index(() => {
    const node = tree == null ? void 0 : tree.nodesRef.current.find(node => node.id === nodeId);

    if (node) {
      node.context = context;
    }
  });
  return React.useMemo(() => ({ ...position,
    context,
    refs,
    elements
  }), [position, refs, elements, context]);
}

const SIDES_MAP = {
    'bottom': 'down',
    'left': 'left',
    'right': 'right',
    'top': 'up',
};
const POPOVER_OFFSET_VALUE = 8; // pixels
function usePopover({ anchor, caretElement, caretPadding, direction, forceDirection, strategy, scrollBoundary, hideWhenReferenceHidden, onPositioned, }) {
    let placement = direction !== null && direction !== void 0 ? direction : 'bottom';
    const isRtl = typeof document === 'undefined' ? false : (document === null || document === void 0 ? void 0 : document.dir) === 'rtl';
    if (isRtl && direction === 'left') {
        placement = 'right';
    }
    else if (isRtl && direction === 'right') {
        placement = 'left';
    }
    // #region Middlewares
    // Distance between anchor and popover
    const popoverOffset = offset(POPOVER_OFFSET_VALUE);
    // Hides popover when anchor is outside of viewport. Padding is negative so that it compensates for `popoverOffset`
    const popoverHide = hideWhenReferenceHidden && hide({ padding: -POPOVER_OFFSET_VALUE });
    // Calculates the positon of caret
    const popoverArrow = caretElement && arrow({ element: caretElement, padding: caretPadding });
    // Flips popover direction based on available space
    const popoverFlip = flip({
        // @ts-expect-error - TS2322 - Type 'HTMLElement | null | undefined' is not assignable to type 'Boundary | undefined'.
        boundary: scrollBoundary,
        fallbackAxisSideDirection: 'start',
    });
    // Shifts popover to prevent clipping near viewport edges
    const popoverShift = shift({
        padding: 8,
        // @ts-expect-error - TS2322 - Type 'HTMLElement | null | undefined' is not assignable to type 'Boundary | undefined'.
        boundary: scrollBoundary,
        limiter: limitShift({
            offset: 5,
        }),
    });
    // #endregion
    const floating = useFloating({
        strategy,
        placement,
        whileElementsMounted: autoUpdate,
        elements: { reference: anchor },
        // Do not reorder middlewares! Order is important as the calculations are passed along
        middleware: [
            popoverOffset,
            popoverShift,
            forceDirection ? undefined : popoverFlip,
            popoverArrow,
            popoverHide,
        ],
    });
    useEffect(() => {
        if (floating.isPositioned && onPositioned)
            onPositioned();
    }, [onPositioned, floating.isPositioned]);
    return floating;
}

const PATHS = {
    down: 'M0 4c.694 0 1.36-.278 1.846-.773L4.376.66c.806-.819 2.187-.885 3.083-.148.057.047.111.096.163.148l2.526 2.565A2.6 2.6 0 0012 4',
    left: 'M0 0c0 .694.278 1.36.773 1.846l2.567 2.53c.819.806.885 2.187.148 3.083a2.098 2.098 0 01-.148.163L.775 10.148A2.6 2.6 0 000 12',
    right: 'M4 12c0-.694-.278-1.36-.773-1.847L.66 7.625C-.159 6.818-.225 5.437.512 4.54c.047-.057.096-.111.148-.163l2.565-2.526A2.6 2.6 0 004 0',
    up: 'M12 0c-.694 0-1.36.278-1.847.773L7.625 3.34c-.807.819-2.188.885-3.084.148a2.098 2.098 0 01-.163-.148L1.853.775A2.6 2.6 0 000 0',
};
function Caret(props) {
    const { direction, height, width } = props;
    return (jsxRuntime.jsx("svg", { height: height, width: width, children: jsxRuntime.jsx("path", { d: PATHS[direction], stroke: "rgb(0 0 0 / 0.02)" }) }));
}

var styles$R = {"border":"Dl7","maxDimensions":"DHH","minDimensions":"kFh","caret":"BR9","caretPrimary":"E9a","caretSecondary":"Uw7","caretEducation":"KZC","primary":"V0G","secondary":"dDH","education":"D35"};

const CARET_HEIGHT = 4;
const CARET_WIDTH = 12;
const DIRECTIONS_MAP = {
    down: 'bottom',
    left: 'left',
    right: 'right',
    up: 'top',
};
function Contents({ accessibilityLabel, anchor, bgColor, border = true, caret = true, children, id, idealDirection, forceDirection, role, rounding, width, shouldFocus = true, onKeyDown, scrollBoundary, hideWhenReferenceHidden, onPositioned, shouldTrapFocus, overflow, }) {
    var _a;
    const caretRef = useRef(null);
    let idealPlacement = 'top';
    if (idealDirection) {
        idealPlacement = DIRECTIONS_MAP[idealDirection];
    }
    const { refs, placement, floatingStyles, middlewareData, context, isPositioned } = usePopover({
        anchor,
        caretElement: caretRef.current,
        caretPadding: rounding && rounding * 4,
        forceDirection,
        direction: idealPlacement,
        scrollBoundary,
        hideWhenReferenceHidden,
        onPositioned,
    });
    const caretOffset = middlewareData.arrow;
    const isAnchorInViewport = ((_a = middlewareData.hide) === null || _a === void 0 ? void 0 : _a.referenceHidden) === true;
    const isCaretVertical = placement === 'top' || placement === 'bottom';
    useEffect(() => {
        if (shouldFocus && refs.floating.current && isPositioned) {
            refs.floating.current.focus();
        }
    }, [isPositioned, refs.floating, shouldFocus]);
    useEffect(() => {
        // @ts-expect-error - TS2769 - No overload matches this call.
        window.addEventListener('keydown', onKeyDown);
        // @ts-expect-error - TS2769 - No overload matches this call.
        return () => window.removeEventListener('keydown', onKeyDown);
    }, [onKeyDown]);
    return (jsxRuntime.jsx(FloatingFocusManager, { context: context, disabled: role === 'tooltip' || role === 'listbox', modal: shouldTrapFocus !== null && shouldTrapFocus !== void 0 ? shouldTrapFocus : false, returnFocus: false, children: jsxRuntime.jsxs("div", { ref: refs.setFloating, className: classnames(Layout.absolute, Layout.block, Layout.borderBox, borderStyles.shadow, {
                [borderStyles.rounding2]: rounding === 2,
                [borderStyles.rounding4]: rounding === 4,
            }), style: Object.assign(Object.assign({}, floatingStyles), { visibility: isAnchorInViewport ? 'hidden' : 'visible', outline: 'none' }), tabIndex: -1, children: [caret && (jsxRuntime.jsx("div", { 
                    // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLElement | null>' is not assignable to type 'LegacyRef<HTMLDivElement> | undefined'.
                    ref: caretRef, className: classnames(styles$R.caret, Layout.flex, Layout.absolute, {
                        [styles$R.caretPrimary]: bgColor === 'white',
                        [styles$R.caretSecondary]: bgColor === 'darkGray',
                        [styles$R.caretEducation]: bgColor === 'blue',
                    }), style: {
                        left: caretOffset === null || caretOffset === void 0 ? void 0 : caretOffset.x,
                        top: caretOffset === null || caretOffset === void 0 ? void 0 : caretOffset.y,
                        [placement]: '100%',
                    }, children: jsxRuntime.jsx(Caret
                    // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'Placement' can't be used to index type 'Record<Side, MainDirections>'.
                    , { 
                        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'Placement' can't be used to index type 'Record<Side, MainDirections>'.
                        direction: SIDES_MAP[placement], height: isCaretVertical ? CARET_HEIGHT : CARET_WIDTH, width: isCaretVertical ? CARET_WIDTH : CARET_HEIGHT }) })), jsxRuntime.jsx("div", { "aria-label": accessibilityLabel, className: classnames(Layout.relative, styles$R.maxDimensions, {
                        [styles$R.minDimensions]: width != null,
                        [styles$R.border]: border,
                        [styles$R.primary]: bgColor === 'white',
                        [styles$R.secondary]: bgColor === 'darkGray',
                        [styles$R.education]: bgColor === 'blue',
                        [borderStyles.rounding2]: rounding === 2,
                        [borderStyles.rounding4]: rounding === 4,
                    }), id: id, role: role, style: { maxWidth: width, overflow }, children: children })] }) }));
}

function OutsideEventBehavior({ children, onClick }) {
    const element = useRef(null);
    useEffect(() => {
        const handleClickEvent = (event) => {
            if (!onClick ||
                !element ||
                (event.target instanceof Node && element.current && element.current.contains(event.target))) {
                return;
            }
            onClick(event);
        };
        document.addEventListener('click', handleClickEvent, {
            capture: true,
        });
        return function cleanup() {
            document.removeEventListener('click', handleClickEvent, {
                capture: true,
            });
        };
    }, [onClick]);
    // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLDivElement | null | undefined>' is not assignable to type 'LegacyRef<HTMLDivElement> | undefined'.
    return jsxRuntime.jsx("div", { ref: element, children: children });
}

const SIZE_WIDTH_MAP$2 = {
    xs: 180,
    sm: 230,
    md: 284,
    lg: 320,
    xl: 360,
};
function Controller({ accessibilityLabel, anchor, bgColor, border, caret, children, id, idealDirection, forceDirection, role, rounding, shouldFocus, size, onDismiss, onKeyDown, disablePortal, scrollBoundary, hideWhenReferenceHidden, onPositioned, shouldTrapFocus, overflow, }) {
    const width = typeof size === 'string' ? SIZE_WIDTH_MAP$2[size] : size;
    const handleKeyDown = (event) => {
        if (event.keyCode === ESCAPE) {
            onDismiss();
        }
        onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown({ event });
    };
    const handlePageClick = (event) => {
        if (event.target instanceof Node && !anchor.contains(event.target)) {
            onDismiss();
        }
    };
    const contents = (jsxRuntime.jsx(OutsideEventBehavior, { onClick: handlePageClick, children: jsxRuntime.jsx(Contents, { accessibilityLabel: accessibilityLabel, anchor: anchor, bgColor: bgColor, border: border, caret: caret, forceDirection: forceDirection, hideWhenReferenceHidden: hideWhenReferenceHidden, id: id, idealDirection: idealDirection, onKeyDown: handleKeyDown, onPositioned: onPositioned, overflow: overflow, role: role, rounding: rounding, scrollBoundary: scrollBoundary, shouldFocus: shouldFocus, shouldTrapFocus: shouldTrapFocus, width: width, children: children }) }));
    return disablePortal ? contents : jsxRuntime.jsx(FloatingPortal, { children: contents });
}

function isNotNullish$2(val) {
    return val !== null && val !== undefined;
}
/**
 * [Text](https://gestalt.pinterest.systems/web/text) component is used for all non-heading text on all surfaces, whether inside of UI components or in long-form paragraph text.
 *
 * ![Text light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Text.spec.ts-snapshots/Text-chromium-darwin.png)
 * ![Text dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Text-dark.spec.ts-snapshots/Text-dark-chromium-darwin.png)
 */
const TextWithForwardRef = forwardRef(function Text({ align = 'start', children, color = 'default', dataTestId, inline = false, italic = false, lineClamp, overflow = 'breakWord', size = '300', title, underline = false, weight = 'normal', }, ref) {
    const colorClass = semanticColors.includes(color) && stylesText[color];
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const getWordBreakStyle = () => {
        if (overflow === 'breakAll') {
            return typographyStyle.breakAll;
        }
        // default to breakWord if lineClamp is set
        if (overflow === 'breakWord' || isNotNullish$2(lineClamp)) {
            return typographyStyle.breakWord;
        }
        return undefined;
    };
    const cs = classnames(color && colorClass, align === 'center' && typographyStyle.alignCenter, 
    // @ts-expect-error - TS2367 - This condition will always return 'false' since the types '"center" | "start" | "end" | "forceLeft" | "forceRight"' and '"justify"' have no overlap.
    align === 'justify' && typographyStyle.alignJustify, align === 'start' && typographyStyle.alignStart, align === 'end' && typographyStyle.alignEnd, align === 'forceLeft' && typographyStyle.alignForceLeft, align === 'forceRight' && typographyStyle.alignForceRight, getWordBreakStyle(), overflow === 'noWrap' && typographyStyle.noWrap, italic && typographyStyle.fontStyleItalic, underline && stylesText.underline, isNotNullish$2(lineClamp) && typographyStyle.lineClamp, {
        [stylesText.Text]: !isInVRExperiment,
        [typographyStyle[`fontSize${size}`]]: !isInVRExperiment,
        [typographyStyle.fontWeightSemiBold]: !isInVRExperiment && weight === 'bold',
        [typographyStyle.fontWeightNormal]: !isInVRExperiment && weight === 'normal',
        [stylesText.TextBody]: isInVRExperiment,
        [stylesText.lg]: isInVRExperiment && (size === '400' || size === '500' || size === '600'),
        [stylesText.md]: isInVRExperiment && size === '300',
        [stylesText.sm]: isInVRExperiment && size === '200',
        [stylesText.xs]: isInVRExperiment && size === '100',
        [stylesText.lgDefault]: isInVRExperiment &&
            (size === '400' || size === '500' || size === '600') &&
            weight === 'normal',
        [stylesText.mdDefault]: isInVRExperiment && size === '300' && weight === 'normal',
        [stylesText.smDefault]: isInVRExperiment && size === '200' && weight === 'normal',
        [stylesText.xsDefault]: isInVRExperiment && size === '100' && weight === 'normal',
        [stylesText.lgEmphasis]: isInVRExperiment &&
            (size === '400' || size === '500' || size === '600') &&
            weight === 'bold',
        [stylesText.mdEmphasis]: isInVRExperiment && size === '300' && weight === 'bold',
        [stylesText.smEmphasis]: isInVRExperiment && size === '200' && weight === 'bold',
        [stylesText.xsEmphasis]: isInVRExperiment && size === '100' && weight === 'bold',
    });
    const Tag = inline ? 'span' : 'div';
    return (jsxRuntime.jsx(Tag, Object.assign({ className: cs, "data-test-id": dataTestId, title: title !== null && title !== void 0 ? title : (isNotNullish$2(lineClamp) && typeof children === 'string' ? children : undefined) }, (lineClamp ? { style: { WebkitLineClamp: lineClamp } } : {}), { ref: ref, children: children })));
});
TextWithForwardRef.displayName = 'Text';

/**
 * Hook to debounce a particular function from being called until after a given
 * wait period. An important bit is that we clear the timeout when the component
 * unmounts. That way, we avoid React state updates on unmounted components which
 * result in a warning. See https://stackoverflow.com/a/60907638/117193 for more info
 */
function useDebouncedCallback(callback, wait) {
    const timeout = useRef();
    function cleanup() {
        if (timeout.current) {
            clearTimeout(timeout.current);
        }
    }
    useEffect(() => cleanup, []);
    return function debouncedCallback() {
        cleanup();
        // @ts-expect-error - TS2322 - Type 'Timeout' is not assignable to type 'number'.
        timeout.current = setTimeout(() => {
            callback();
        }, wait);
    };
}

const noop = () => { };
const TIMEOUT = 100;
const initialState$2 = { hoveredIcon: false, hoveredText: false, isOpen: false };
const reducer = (state, action) => {
    if (action.disabled)
        return Object.assign(Object.assign({}, state), { isOpen: false, hoveredIcon: false, hoveredText: false });
    switch (action.type) {
        case 'hoverInIcon':
            return Object.assign(Object.assign({}, state), { hoveredIcon: true, isOpen: true });
        case 'hoverInText':
            return Object.assign(Object.assign({}, state), { hoveredText: true, isOpen: true });
        case 'hoverOutIcon':
            return Object.assign(Object.assign({}, state), { hoveredIcon: false, isOpen: !state.hoveredText ? false : state.isOpen });
        case 'hoverOutText':
            return Object.assign(Object.assign({}, state), { hoveredText: false, isOpen: !state.hoveredIcon ? false : state.isOpen });
        default:
            throw new Error();
    }
};
function InternalTooltip({ accessibilityLabel, children, dataTestId, disabled, link, idealDirection, inline, text, zIndex, }) {
    const [state, dispatch] = useReducer(reducer, initialState$2);
    const { isOpen } = state;
    const childRef = useRef(null);
    const { current: anchor } = childRef;
    const mouseLeaveDelay = link ? TIMEOUT : 0;
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    useEffect(() => {
        if (disabled === true) {
            dispatch({ type: 'hoverOutIcon', disabled });
        }
    }, [disabled]);
    const handleIconMouseEnter = () => {
        dispatch({ type: 'hoverInIcon', disabled });
    };
    const handleIconMouseLeave = useDebouncedCallback(() => {
        dispatch({ type: 'hoverOutIcon', disabled });
    }, mouseLeaveDelay);
    const handleTextMouseEnter = () => {
        dispatch({ type: 'hoverInText', disabled });
    };
    const handleTextMouseLeave = useDebouncedCallback(() => {
        dispatch({ type: 'hoverOutText', disabled });
    }, mouseLeaveDelay);
    const getTooltipText = () => {
        if (Array.isArray(text)) {
            // first and last line should not have a <p> tag, (adds extra padding)
            const lines = text.map((line, idx) => {
                if (typeof line !== 'string')
                    return '';
                return text.length === 1 || idx === text.length - 1 ? (line) : (jsxRuntime.jsxs(Fragment, { children: [line, " ", jsxRuntime.jsx("br", {}), " ", jsxRuntime.jsx("br", {})] }));
            });
            return lines;
        }
        return text;
    };
    const accessibilityLabelFallback = typeof text === 'string' ? text : text.join('');
    const dataTestIdText = dataTestId && `${dataTestId}-text`;
    return (jsxRuntime.jsxs(BoxWithForwardRef, { display: inline ? 'inlineBlock' : 'block', children: [jsxRuntime.jsx(BoxWithForwardRef, { ref: childRef, "aria-label": accessibilityLabel != null && !disabled ? accessibilityLabel : accessibilityLabelFallback, "data-test-id": dataTestId, onBlur: handleIconMouseLeave, onFocus: handleIconMouseEnter, onMouseEnter: handleIconMouseEnter, onMouseLeave: handleIconMouseLeave, children: children }), isOpen && !!anchor && (jsxRuntime.jsx(Layer, { zIndex: zIndex, children: jsxRuntime.jsx(Controller, { anchor: anchor, bgColor: isInVRExperiment ? undefined : 'darkGray', border: false, caret: false, disablePortal: true, hideWhenReferenceHidden: true, idealDirection: idealDirection, onDismiss: noop, role: "tooltip", rounding: 2, shouldFocus: false, children: jsxRuntime.jsxs(BoxWithForwardRef, { color: isInVRExperiment ? 'inverse' : undefined, maxWidth: 180, onBlur: link ? handleTextMouseLeave : undefined, onFocus: link ? handleTextMouseEnter : undefined, onMouseEnter: link ? handleTextMouseEnter : undefined, onMouseLeave: link ? handleTextMouseLeave : undefined, padding: 2, rounding: 2, tabIndex: 0, children: [jsxRuntime.jsx(TextWithForwardRef, { color: "inverse", dataTestId: dataTestIdText, size: "100", children: getTooltipText() }), Boolean(link) && jsxRuntime.jsx(BoxWithForwardRef, { marginTop: 1, children: link })] }) }) }))] }));
}
InternalTooltip.displayName = 'InternalTooltip';

/**
 * [Tooltip](https://gestalt.pinterest.systems/web/tooltip) is a floating text label that succinctly describes the function of an interactive element, typically [Icon Button](https://gestalt.pinterest.systems/web/iconbutton). It’s displayed continuously as long as the user hovers over or focuses on the element.
 *
 * **NOTE** Planning to use Tooltip with IconButton? Use [IconButton's built-in tooltip](https://gestalt.pinterest.systems/web/iconbutton#With-Tooltip) instead. **NOTE**
 *
 * ![Tooltip light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Tooltip.spec.ts-snapshots/Tooltip-chromium-darwin.png)
 * ![Tooltip dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Tooltip-dark.spec.ts-snapshots/Tooltip-dark-chromium-darwin.png)
 */
function Tooltip({ accessibilityLabel, children, dataTestId, link, idealDirection = 'down', inline, text, zIndex, }) {
    return (jsxRuntime.jsx(InternalTooltip, { accessibilityLabel: accessibilityLabel, dataTestId: dataTestId, idealDirection: idealDirection, inline: inline, link: link, text: text, zIndex: zIndex, children: children }));
}
Tooltip.displayName = 'Tooltip';

/**
 * Returns event handlers that manage state for active, focus and hover states
 * @returns handled states
 */
const useInteractiveStates = () => {
    const [isActive, setActive] = useState(false);
    const [isFocused, setFocused] = useState(false);
    const [isHovered, setHovered] = useState(false);
    const handleOnBlur = useCallback(() => {
        setFocused(false);
    }, []);
    const handleOnFocus = useCallback(() => {
        setFocused(true);
    }, []);
    const handleOnMouseDown = useCallback(() => {
        setActive(true);
    }, []);
    const handleOnMouseUp = useCallback(() => {
        setActive(false);
    }, []);
    const handleOnMouseEnter = useCallback(() => {
        setHovered(true);
    }, []);
    const handleOnMouseLeave = useCallback(() => {
        setActive(false);
        setHovered(false);
    }, []);
    return {
        handleOnBlur,
        handleOnFocus,
        handleOnMouseDown,
        handleOnMouseUp,
        handleOnMouseLeave,
        handleOnMouseEnter,
        isActive,
        isFocused,
        isHovered,
    };
};

/**
 * [Badge](https://gestalt.pinterest.systems/web/badge) is a label that indicates status or importance. Badges should provide quick recognition.
 *
 * ![Badge light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Badge.spec.ts-snapshots/Badge-chromium-darwin.png)
 * ![Badge dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Badge-dark.spec.ts-snapshots/Badge-dark-chromium-darwin.png)
 *
 */
function Badge({ dataTestId, position = 'middle', text, type = 'info', tooltip, }) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const dataTestIdIcon = dataTestId && `${dataTestId}-icon`;
    const dataTestIdText = dataTestId && `${dataTestId}-text`;
    const dataTestIdTooltip = dataTestId && `${dataTestId}-tooltip`;
    const { isFocusVisible } = useFocusVisible();
    const shouldUseTooltip = tooltip === null || tooltip === void 0 ? void 0 : tooltip.text;
    const ICON_MAP = Object.freeze({
        'info': 'info-circle',
        'error': 'workflow-status-problem',
        'warning': 'workflow-status-warning',
        'success': 'check-circle',
        'neutral': 'lock',
        'recommendation': 'sparkle',
        'darkWash': 'info-circle',
        'lightWash': 'info-circle',
    });
    const COLOR_ICON_MAP = Object.freeze({
        'info': 'info',
        'error': 'error',
        'warning': 'warning',
        'success': 'success',
        'neutral': isInVRExperiment ? 'default' : 'inverse',
        'recommendation': 'recommendation',
        'darkWash': 'light',
        'lightWash': 'dark',
    });
    const COLOR_TEXT_MAP = Object.freeze({
        'info': 'shopping',
        'error': 'error',
        'warning': 'warning',
        'success': 'success',
        'neutral': isInVRExperiment ? 'default' : 'inverse',
        'recommendation': 'recommendation',
        'darkWash': 'light',
        'lightWash': 'dark',
    });
    let styleType = type;
    if (shouldUseTooltip) {
        styleType = `interactive-${type}`;
    }
    const { handleOnBlur, handleOnFocus, handleOnMouseEnter, handleOnMouseLeave, isFocused } = useInteractiveStates();
    const cxStyles = classnames(styles$V.badge, styles$V[styleType], {
        [styles$V.middle]: !shouldUseTooltip && position === 'middle',
        [styles$V.top]: !shouldUseTooltip && position === 'top',
        [styles$V.focusInnerBorder]: isInVRExperiment &&
            isFocused &&
            isFocusVisible &&
            !['darkWash', 'lightWash'].some((color) => color === type),
        [styles$V.focusInnerBorderLight]: isInVRExperiment && isFocused && isFocusVisible && type === 'darkWash',
        [styles$V.focusInnerBorderDark]: isInVRExperiment && isFocused && isFocusVisible && type === 'lightWash',
    });
    const cxPositionStyles = classnames({
        [styles$V.middle]: position === 'middle',
        [styles$V.top]: position === 'top',
    });
    const badgeComponent = (jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", gap: { row: 1, column: 0 }, children: [shouldUseTooltip ? (jsxRuntime.jsx(BoxWithForwardRef, { alignContent: "center", display: "flex", children: jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: isInVRExperiment || type.endsWith('Wash') ? COLOR_ICON_MAP[type] : 'inverse', dataTestId: dataTestIdIcon, icon: ICON_MAP[type], inline: true, size: isInVRExperiment ? '12' : '14' }) })) : null, jsxRuntime.jsx(BoxWithForwardRef, { alignContent: "center", display: "flex", children: jsxRuntime.jsx(TextUIWithForwardRef, { color: isInVRExperiment || type.endsWith('Wash') ? COLOR_TEXT_MAP[type] : 'inverse', dataTestId: dataTestIdText, inline: true, size: "sm", children: text }) })] }));
    return shouldUseTooltip ? (jsxRuntime.jsx(Tooltip, { accessibilityLabel: "", dataTestId: dataTestIdTooltip, idealDirection: tooltip.idealDirection, inline: true, text: tooltip.text, zIndex: tooltip.zIndex, children: jsxRuntime.jsx("div", { className: cxPositionStyles, children: jsxRuntime.jsx(TapAreaWithForwardRef, { accessibilityLabel: tooltip.accessibilityLabel, fullHeight: true, mouseCursor: "default", onBlur: handleOnBlur, onFocus: handleOnFocus, onMouseEnter: handleOnMouseEnter, onMouseLeave: handleOnMouseLeave, rounding: 1, tapStyle: "none", children: jsxRuntime.jsx(BoxWithForwardRef, { alignContent: "center", display: "flex", height: "100%", children: jsxRuntime.jsxs("div", { className: cxStyles, children: [badgeComponent, " "] }) }) }) }) })) : (jsxRuntime.jsxs("div", { className: cxStyles, children: [badgeComponent, " "] }));
}
Badge.displayName = 'Badge';

function AccordionTitle(props) {
    const { dataTestId } = props;
    const dataTestIdIcon = dataTestId && `${dataTestId}-icon`;
    const dataTestIdText = dataTestId && `${dataTestId}-text`;
    const dataTestIdBadge = dataTestId && `${dataTestId}-badge`;
    const { iconAccessibilityLabel = '', title, type = 'info', size = 'lg' } = props;
    // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ badge?: BadgeType | undefined; icon?: "replace" | "search" | "link" | "text" | "dash" | "3D" | "3D-move" | "360" | "accessibility" | "ad" | "ad-group" | "add" | "add-circle" | ... 321 more ... | undefined; ... 4 more ...; size?: "sm" | ... 2 more ... | undefined; }'.
    const decoration = ['icon', 'badge', 'iconButton'].find((prop) => !!props[prop]);
    const hasError = type === 'error';
    const hasIcon = hasError || decoration === 'icon';
    const textAndIconColor = hasError ? 'error' : 'default';
    const { titleGap } = applyModuleDensityStyle(size);
    return (jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", gap: { row: titleGap, column: 0 }, children: [hasIcon && (jsxRuntime.jsx(FlexWithForwardRef.Item, { minWidth: 0, children: jsxRuntime.jsx(Icon, { accessibilityLabel: iconAccessibilityLabel, color: textAndIconColor, dataTestId: dataTestIdIcon, icon: hasError ? 'workflow-status-problem' : props.icon }) })), title && (jsxRuntime.jsx(FlexWithForwardRef.Item, { minWidth: 0, children: jsxRuntime.jsx(TextWithForwardRef, { color: textAndIconColor, dataTestId: dataTestIdText, lineClamp: 1, weight: "bold", children: title }) })), decoration === 'badge' && props.badge && (jsxRuntime.jsx(FlexWithForwardRef.Item, { minWidth: 0, children: jsxRuntime.jsx(BoxWithForwardRef, { dangerouslySetInlineStyle: { __style: { top: '1px' } }, position: "relative", children: jsxRuntime.jsx(Badge, { dataTestId: dataTestIdBadge, text: props.badge.text, type: props.badge.type || 'info' }) }) })), decoration === 'iconButton' && jsxRuntime.jsx(FlexWithForwardRef.Item, { minWidth: 0, children: props.iconButton })] }));
}

function AccordionExpandableItem({ accessibilityCollapseLabel, accessibilityExpandLabel, badge, children, icon, iconAccessibilityLabel, iconButton, id, isCollapsed, onExpand, summary, title, size = 'lg', type = 'info', }) {
    const { padding, gap, summaryListGap } = applyModuleDensityStyle(size);
    return (jsxRuntime.jsx(BoxWithForwardRef, { padding: padding, children: jsxRuntime.jsxs(FlexWithForwardRef, { direction: "column", gap: { column: gap, row: 0 }, children: [jsxRuntime.jsx(TapAreaWithForwardRef, { accessibilityControls: id, accessibilityExpanded: !isCollapsed, accessibilityLabel: isCollapsed ? accessibilityExpandLabel : accessibilityCollapseLabel, onTap: ({ event }) => {
                        if ((event === null || event === void 0 ? void 0 : event.target) instanceof Element && event.target.closest('button') !== null) {
                            return;
                        }
                        onExpand(!isCollapsed);
                    }, children: jsxRuntime.jsxs(FlexWithForwardRef, { children: [jsxRuntime.jsxs(BoxWithForwardRef, { alignItems: "baseline", display: "flex", flex: "grow", marginEnd: 6, children: [jsxRuntime.jsx(BoxWithForwardRef, { column: isCollapsed && summary ? 6 : 12, children: jsxRuntime.jsx(AccordionTitle, { badge: badge, icon: icon, iconAccessibilityLabel: iconAccessibilityLabel, iconButton: iconButton, size: size, title: title, type: type }) }), summary && isCollapsed && (jsxRuntime.jsx(BoxWithForwardRef, { column: padding, marginStart: padding, children: jsxRuntime.jsx(FlexWithForwardRef, { direction: "column", gap: { column: summaryListGap, row: 0 }, children: summary.map((item, i) => (
                                            // eslint-disable-next-line react/no-array-index-key
                                            jsxRuntime.jsx(TextWithForwardRef, { lineClamp: 1, size: "200", children: item }, i))) }) }))] }), Boolean(children) && (jsxRuntime.jsx(BoxWithForwardRef, { alignItems: "center", display: "flex", id: id, maxHeight: 24, padding: 1, children: jsxRuntime.jsx(Icon, { accessibilityLabel: isCollapsed ? accessibilityExpandLabel : accessibilityCollapseLabel, color: "default", icon: isCollapsed ? 'arrow-down' : 'arrow-up', size: "12" }) }))] }) }), !isCollapsed && jsxRuntime.jsx(FlexWithForwardRef.Item, { children: children })] }) }));
}

var darkColorDesignTokens = {
	"color-red-pushpin-0": "#fff7f7",
	"color-red-pushpin-50": "#ffebeb",
	"color-red-pushpin-100": "#ffe0e0",
	"color-red-pushpin-200": "#fcbbbb",
	"color-red-pushpin-300": "#f47171",
	"color-red-pushpin-400": "#eb4242",
	"color-red-pushpin-450": "#e60023",
	"color-red-pushpin-500": "#cc0000",
	"color-red-pushpin-600": "#b60000",
	"color-red-pushpin-700": "#9b0000",
	"color-red-pushpin-800": "#800000",
	"color-red-pushpin-900": "#660000",
	"color-pink-flaminglow-0": "#fff8fa",
	"color-pink-flaminglow-50": "#ffebf1",
	"color-pink-flaminglow-100": "#ffdfe9",
	"color-pink-flaminglow-200": "#ffbed2",
	"color-pink-flaminglow-300": "#fe8eb1",
	"color-pink-flaminglow-400": "#f76593",
	"color-pink-flaminglow-450": "#ee376a",
	"color-pink-flaminglow-500": "#de2c62",
	"color-pink-flaminglow-600": "#c31952",
	"color-pink-flaminglow-700": "#a30c4a",
	"color-pink-flaminglow-800": "#82053e",
	"color-pink-flaminglow-900": "#630233",
	"color-blue-skycicle-0": "#f7fbff",
	"color-blue-skycicle-50": "#e6f4ff",
	"color-blue-skycicle-100": "#d7edff",
	"color-blue-skycicle-200": "#abdbff",
	"color-blue-skycicle-300": "#75bfff",
	"color-blue-skycicle-400": "#45a3fe",
	"color-blue-skycicle-450": "#007cff",
	"color-blue-skycicle-500": "#0074e8",
	"color-blue-skycicle-600": "#005fcb",
	"color-blue-skycicle-700": "#004ba9",
	"color-blue-skycicle-800": "#003c96",
	"color-blue-skycicle-900": "#002966",
	"color-teal-spabattical-0": "#f7fdfc",
	"color-teal-spabattical-50": "#e6faf5",
	"color-teal-spabattical-100": "#ccf6ee",
	"color-teal-spabattical-200": "#75e4d5",
	"color-teal-spabattical-300": "#48d5c6",
	"color-teal-spabattical-400": "#26c0b4",
	"color-teal-spabattical-450": "#009990",
	"color-teal-spabattical-500": "#00857c",
	"color-teal-spabattical-600": "#006b6c",
	"color-teal-spabattical-700": "#005c62",
	"color-teal-spabattical-800": "#005062",
	"color-teal-spabattical-900": "#003440",
	"color-green-matchacado-0": "#f6fdf5",
	"color-green-matchacado-50": "#e3fae1",
	"color-green-matchacado-100": "#c3f9c2",
	"color-green-matchacado-200": "#a4f9ac",
	"color-green-matchacado-300": "#6bec8c",
	"color-green-matchacado-400": "#39d377",
	"color-green-matchacado-450": "#1dad65",
	"color-green-matchacado-500": "#008753",
	"color-green-matchacado-600": "#005f3e",
	"color-green-matchacado-700": "#00422c",
	"color-green-matchacado-800": "#003020",
	"color-green-matchacado-900": "#00261a",
	"color-purple-mysticool-0": "#f8f7ff",
	"color-purple-mysticool-50": "#f0edff",
	"color-purple-mysticool-100": "#e9e4ff",
	"color-purple-mysticool-200": "#d5c7ff",
	"color-purple-mysticool-300": "#b190ff",
	"color-purple-mysticool-400": "#9e68ff",
	"color-purple-mysticool-450": "#8a39fa",
	"color-purple-mysticool-500": "#812ae7",
	"color-purple-mysticool-600": "#6b16ca",
	"color-purple-mysticool-700": "#550aa9",
	"color-purple-mysticool-800": "#400387",
	"color-purple-mysticool-900": "#2c0066",
	"color-orange-firetini-0": "#fff6eb",
	"color-orange-firetini-50": "#fff0db",
	"color-orange-firetini-100": "#ffe4c1",
	"color-orange-firetini-200": "#ffc58f",
	"color-orange-firetini-300": "#fda161",
	"color-orange-firetini-400": "#f77a38",
	"color-orange-firetini-450": "#ff5b45",
	"color-orange-firetini-500": "#de3700",
	"color-orange-firetini-600": "#c32f00",
	"color-orange-firetini-700": "#a42700",
	"color-orange-firetini-800": "#842000",
	"color-orange-firetini-900": "#660e00",
	"color-yellow-caramellow-0": "#fffedb",
	"color-yellow-caramellow-50": "#fffebb",
	"color-yellow-caramellow-100": "#fffd92",
	"color-yellow-caramellow-200": "#fae600",
	"color-yellow-caramellow-300": "#fdc900",
	"color-yellow-caramellow-400": "#e18d00",
	"color-yellow-caramellow-450": "#d86800",
	"color-yellow-caramellow-500": "#bd5b00",
	"color-yellow-caramellow-600": "#aa4900",
	"color-yellow-caramellow-700": "#943a00",
	"color-yellow-caramellow-800": "#7c2d00",
	"color-yellow-caramellow-900": "#662400",
	"color-white-mochimalist-0": "#ffffff",
	"color-gray-roboflow-50": "#f9f9f9",
	"color-gray-roboflow-100": "#f1f1f1",
	"color-gray-roboflow-200": "#e9e9e9",
	"color-gray-roboflow-300": "#cdcdcd",
	"color-gray-roboflow-400": "#a5a5a5",
	"color-gray-roboflow-500": "#767676",
	"color-gray-roboflow-550": "#5f5f5f",
	"color-gray-roboflow-600": "#4a4a4a",
	"color-gray-roboflow-700": "#2b2b2b",
	"color-gray-roboflow-800": "#191919",
	"color-black-cosmicore-900": "#111111",
	"color-transparent": "rgba(0, 0, 0, 0)",
	"color-text-default": "#ffffff",
	"color-text-subtle": "#a5a5a5",
	"color-text-success": "#39d377",
	"color-text-disabled": "#4a4a4a",
	"color-text-error": "#f47171",
	"color-text-warning": "#e18d00",
	"color-text-inverse": "#111111",
	"color-text-dark": "#111111",
	"color-text-light": "#ffffff",
	"color-text-shopping": "#75bfff",
	"color-text-link": "#45a3fe",
	"color-text-formfield-default": "#efefef",
	"color-text-formfield-disabled": "#ababab",
	"color-text-formfield-placeholder": "#ababab",
	"color-icon-default": "#ffffff",
	"color-icon-subtle": "#a5a5a5",
	"color-icon-subtle-accent": "#cdcdcd",
	"color-icon-success": "#39d377",
	"color-icon-disabled": "#4a4a4a",
	"color-icon-error": "#f47171",
	"color-icon-warning": "#e18d00",
	"color-icon-info": "#75bfff",
	"color-icon-recommendation": "#b190ff",
	"color-icon-inverse": "#111111",
	"color-icon-shopping": "#75bfff",
	"color-icon-brand-primary": "#e60023",
	"color-icon-light": "#ffffff",
	"color-icon-dark": "#111111",
	"color-icon-avatar-default": "#efefef",
	"color-background-default": "#111111",
	"color-background-info-base": "#75bfff",
	"color-background-info-weak": "#003c96",
	"color-background-info-strong": "#abdbff",
	"color-background-error-base": "#f47171",
	"color-background-error-weak": "#660000",
	"color-background-warning-base": "#fdc900",
	"color-background-warning-weak": "#7c2d00",
	"color-background-success-base": "#6bec8c",
	"color-background-success-weak": "#00422c",
	"color-background-recommendation-base": "#b190ff",
	"color-background-recommendation-weak": "#550aa9",
	"color-background-neutral": "#cdcdcd",
	"color-background-shopping": "#75bfff",
	"color-background-primary-base": "#e60023",
	"color-background-primary-strong": "#b60000",
	"color-background-primary-weak": "#f47171",
	"color-background-secondary-base": "#767676",
	"color-background-secondary-strong": "#a5a5a5",
	"color-background-secondary-weak": "#cdcdcd",
	"color-background-tertiary-base": "#cdcdcd",
	"color-background-tertiary-strong": "#2b2b2b",
	"color-background-tertiary-weak": "#cdcdcd",
	"color-background-selected-base": "#e9e9e9",
	"color-background-selected-strong": "#2b2b2b",
	"color-background-selected-weak": "#a5a5a5",
	"color-background-inverse-base": "#f9f9f9",
	"color-background-inverse-strong": "#e9e9e9",
	"color-background-brand": "#e60023",
	"color-background-education": "#75bfff",
	"color-background-wash-dark": "rgba(0, 0, 0, 0.8)",
	"color-background-wash-light": "rgba(255, 255, 255, 0.9)",
	"color-background-dark": "#111111",
	"color-background-light": "#ffffff",
	"color-background-elevation-accent": "#191919",
	"color-background-elevation-floating": "#2b2b2b",
	"color-background-elevation-raised": "#4a4a4a",
	"color-background-avatar-placeholder": "#404040",
	"color-background-avatar-wash": "rgba(250, 250, 250, 0.5)",
	"color-background-badge-neutral-default": "#cdcdcd",
	"color-background-badge-neutral-hover": "#cdcdcd",
	"color-background-badge-info-default": "#75bfff",
	"color-background-badge-info-hover": "#abdbff",
	"color-background-badge-error-default": "#f47171",
	"color-background-badge-error-hover": "#f47171",
	"color-background-badge-warning-default": "#fdc900",
	"color-background-badge-warning-hover": "#fdc900",
	"color-background-badge-success-default": "#6bec8c",
	"color-background-badge-success-hover": "#6bec8c",
	"color-background-badge-recommendation-default": "#b190ff",
	"color-background-badge-recommendation-hover": "#b190ff",
	"color-background-badge-lightwash-default": "rgba(255, 255, 255, 0.9)",
	"color-background-badge-lightwash-hover": "rgba(255, 255, 255, 0.9)",
	"color-background-badge-darkwash-default": "rgba(0, 0, 0, 0.8)",
	"color-background-badge-darkwash-hover": "rgba(0, 0, 0, 0.8)",
	"color-background-box-default": "#111111",
	"color-background-box-info-base": "#75bfff",
	"color-background-box-info-weak": "#003c96",
	"color-background-box-error-base": "#f47171",
	"color-background-box-error-weak": "#660000",
	"color-background-box-warning-base": "#fdc900",
	"color-background-box-warning-weak": "#7c2d00",
	"color-background-box-success-base": "#6bec8c",
	"color-background-box-success-weak": "#00422c",
	"color-background-box-recommendation-base": "#b190ff",
	"color-background-box-recommendation-weak": "#550aa9",
	"color-background-box-shopping": "#75bfff",
	"color-background-box-primary": "#e60023",
	"color-background-box-secondary": "#767676",
	"color-background-box-tertiary": "#cdcdcd",
	"color-background-box-selected": "#e9e9e9",
	"color-background-box-inverse": "#f9f9f9",
	"color-background-box-brand": "#e60023",
	"color-background-box-education": "#75bfff",
	"color-background-box-elevation-accent": "#191919",
	"color-background-box-elevation-floating": "#2b2b2b",
	"color-background-box-elevation-raised": "#4a4a4a",
	"color-background-box-lightwash": "#535353",
	"color-background-box-darkwash": "#666666",
	"color-background-box-transparentdarkgray": "rgba(255, 255, 255, 0.8)",
	"color-background-box-dark": "#111111",
	"color-background-box-light": "#ffffff",
	"color-background-box-transparent": "rgba(0, 0, 0, 0)",
	"color-background-button-primary-default": "#e60023",
	"color-background-button-primary-hover": "#b60000",
	"color-background-button-primary-active": "#b8001b",
	"color-background-button-secondary-default": "#4a4a4a",
	"color-background-button-secondary-hover": "#535353",
	"color-background-button-secondary-active": "#666666",
	"color-background-button-tertiary-default": "rgba(0, 0, 0, 0)",
	"color-background-button-tertiary-hover": "rgba(250, 250, 250, 0.5)",
	"color-background-button-tertiary-active": "rgba(250, 250, 250, 0.6)",
	"color-background-button-shopping-default": "#75bfff",
	"color-background-button-shopping-hover": "#4a8ad4",
	"color-background-button-shopping-active": "#4a85c9",
	"color-background-button-white-default": "#030303",
	"color-background-button-white-hover": "#121212",
	"color-background-button-white-active": "#1f1f1f",
	"color-background-button-gray-default": "#cdcdcd",
	"color-background-button-gray-hover": "#919191",
	"color-background-button-gray-active": "#9b9b9b",
	"color-background-button-semitransparentdefault-default": "rgba(51, 51, 51, 0.8)",
	"color-background-button-semitransparentdefault-hover": "#121212",
	"color-background-button-semitransparentdefault-active": "#1f1f1f",
	"color-background-button-semitransparentwhite-default": "rgba(51, 51, 51, 0.8)",
	"color-background-button-semitransparentwhite-hover": "#121212",
	"color-background-button-semitransparentwhite-active": "#1f1f1f",
	"color-background-button-semitransparentdark-default": "rgba(255, 255, 255, 0.8)",
	"color-background-button-semitransparentdark-hover": "#f0f0f0",
	"color-background-button-semitransparentdark-active": "#e0e0e0",
	"color-background-button-transparentdarkbackground-default": "rgba(0, 0, 0, 0)",
	"color-background-button-transparentdarkbackground-hover": "rgba(250, 250, 250, 0.5)",
	"color-background-button-transparentdarkbackground-active": "rgba(250, 250, 250, 0.6)",
	"color-background-button-disabled-default": "#2b2b2b",
	"color-background-button-selected-default": "#e9e9e9",
	"color-background-combobox-item-default": "rgba(0, 0, 0, 0)",
	"color-background-combobox-item-hover": "#404040",
	"color-background-datepicker-container": "#212121",
	"color-background-datepicker-range-default": "rgba(250, 250, 250, 0.5)",
	"color-background-datepicker-range-hover": "rgba(250, 250, 250, 0.5)",
	"color-background-datepicker-range-active": "rgba(250, 250, 250, 0.5)",
	"color-background-datepicker-button-unselected-default": "#212121",
	"color-background-datepicker-button-unselected-hover": "rgba(250, 250, 250, 0.5)",
	"color-background-datepicker-button-unselected-active": "rgba(250, 250, 250, 0.5)",
	"color-background-datepicker-button-selected-default": "#efefef",
	"color-background-datepicker-button-selected-hover": "#efefef",
	"color-background-datepicker-button-selected-active": "#efefef",
	"color-background-formfield-primary": "#030303",
	"color-background-formfield-disabled": "#404040",
	"color-background-formfield-selected": "#efefef",
	"color-background-iconbutton-semitransparentdark-default": "rgba(255, 255, 255, 0.8)",
	"color-background-iconbutton-semitransparentdark-hover": "#f0f0f0",
	"color-background-iconbutton-semitransparentdark-active": "#e0e0e0",
	"color-background-mask-wash": "rgba(0, 0, 0, 0.04)",
	"color-background-overlay": "#2b2b2b",
	"color-background-popover-primary": "#2b2b2b",
	"color-background-popover-secondary": "#efefef",
	"color-background-popover-education": "#75bfff",
	"color-background-tabs-default-base": "#111111",
	"color-background-tabs-default-hover": "#767676",
	"color-background-tabs-default-active": "#535353",
	"color-background-tabs-transparent-base": "rgba(0, 0, 0, 0)",
	"color-background-tabs-transparent-hover": "rgba(0, 0, 0, 0.06)",
	"color-background-tabs-transparent-active": "rgba(0, 0, 0, 0.1)",
	"color-background-tag-primary-default": "#767676",
	"color-background-tag-primary-hover": "#535353",
	"color-background-tag-primary-active": "#666666",
	"color-background-tag-error-default": "#f47171",
	"color-background-tag-error-hover": "#cf001f",
	"color-background-tag-error-active": "#b8001b",
	"color-background-tag-warning-default": "#fdc900",
	"color-background-tag-warning-hover": "#e18d00",
	"color-background-tag-warning-active": "#d86800",
	"color-background-searchguide-default-10": "#e9e4ff",
	"color-background-searchguide-default-11": "#767676",
	"color-background-searchguide-default-01": "#abdbff",
	"color-background-searchguide-default-02": "#a4f9ac",
	"color-background-searchguide-default-03": "#ffc58f",
	"color-background-searchguide-default-04": "#fcbbbb",
	"color-background-searchguide-default-05": "#d5c7ff",
	"color-background-searchguide-default-06": "#d7edff",
	"color-background-searchguide-default-07": "#c3f9c2",
	"color-background-searchguide-default-08": "#ffe4c1",
	"color-background-searchguide-default-09": "#fcbbbb",
	"color-background-searchguide-hover-10": "#e9e4ff",
	"color-background-searchguide-hover-11": "#767676",
	"color-background-searchguide-hover-01": "#abdbff",
	"color-background-searchguide-hover-02": "#a4f9ac",
	"color-background-searchguide-hover-03": "#ffc58f",
	"color-background-searchguide-hover-04": "#fcbbbb",
	"color-background-searchguide-hover-05": "#d5c7ff",
	"color-background-searchguide-hover-06": "#d7edff",
	"color-background-searchguide-hover-07": "#c3f9c2",
	"color-background-searchguide-hover-08": "#ffe4c1",
	"color-background-searchguide-hover-09": "#fcbbbb",
	"color-background-searchguide-active-10": "#e9e4ff",
	"color-background-searchguide-active-11": "#767676",
	"color-background-searchguide-active-01": "#abdbff",
	"color-background-searchguide-active-02": "#a4f9ac",
	"color-background-searchguide-active-03": "#ffc58f",
	"color-background-searchguide-active-04": "#fcbbbb",
	"color-background-searchguide-active-05": "#d5c7ff",
	"color-background-searchguide-active-06": "#d7edff",
	"color-background-searchguide-active-07": "#c3f9c2",
	"color-background-searchguide-active-08": "#ffe4c1",
	"color-background-searchguide-active-09": "#fcbbbb",
	"color-background-segmentedcontrol-container": "#404040",
	"color-background-segmentedcontrol-tab-selected": "#030303",
	"color-background-switch-default-selected": "#efefef",
	"color-background-switch-default-unselected": "#030303",
	"color-background-switch-disabled-selected": "#ababab",
	"color-background-switch-disabled-unselected": "#404040",
	"color-background-switch-hover-selected": "#efefef",
	"color-background-switch-hover-unselected": "#030303",
	"color-background-switch-pressed-selected": "#efefef",
	"color-background-switch-pressed-unselected": "#030303",
	"color-background-table-footer": "#030303",
	"color-background-table-row-hover": "#404040",
	"color-background-table-row-selected": "#404040",
	"color-background-tagdata-primary": "#767676",
	"color-background-tagdata-secondary": "#111111",
	"color-background-tagdata-disabled": "#404040",
	"color-background-tableofcontents-item-default": "rgba(0, 0, 0, 0)",
	"color-background-tableofcontents-item-hover": "#767676",
	"color-background-tiledata-10": "#007a721A",
	"color-background-tiledata-11": "#f765931A",
	"color-background-tiledata-12": "#ffc58f1A",
	"color-background-tiledata-01": "#005fcb1A",
	"color-background-tiledata-02": "#75e4d51A",
	"color-background-tiledata-03": "#b190ff1A",
	"color-background-tiledata-04": "#fda6001A",
	"color-background-tiledata-05": "#75bfff1A",
	"color-background-tiledata-06": "#de2c621A",
	"color-background-tiledata-07": "#a4f9ac1A",
	"color-background-tiledata-08": "#812ae71A",
	"color-background-tiledata-09": "#ff5b451A",
	"color-background-tiledata-hover": "#767676",
	"color-background-tiledata-disabled": "#404040",
	"color-background-video-container-primary": "#f9f9f9",
	"color-background-video-container-secondary": "rgba(0, 0, 0, 0)",
	"color-border-container": "#767676",
	"color-border-default": "#cdcdcd",
	"color-border-error": "#f47171",
	"color-border-focus": "rgba(0, 132, 255, 0.5)",
	"color-border-avatar": "#030303",
	"color-border-badge-default": "#111111",
	"color-border-badge-light": "#ffffff",
	"color-border-badge-dark": "#111111",
	"color-border-formfield-error-default": "#f47171",
	"color-border-formfield-error-hover": "#cf001f",
	"color-border-formfield-disabled": "#404040",
	"color-border-popover-primary": "#212121",
	"color-border-popover-secondary": "#efefef",
	"color-border-popover-education": "#75bfff",
	"color-border-pulsar-default": "#0074e8",
	"color-border-pulsar-hover": "#dce9fa",
	"color-border-switch-focus-inner": "#cdcdcd",
	"color-border-switch-disabled-selected": "#111111",
	"color-border-switch-disabled-unselected": "#767676",
	"color-border-table-row-selected": "#ffffff",
	"color-border-tag-disabled": "#ababab",
	"color-data-visualization-10": "#007a72",
	"color-data-visualization-11": "#f76593",
	"color-data-visualization-12": "#ffc58f",
	"color-data-visualization-01": "#005fcb",
	"color-data-visualization-02": "#75e4d5",
	"color-data-visualization-03": "#b190ff",
	"color-data-visualization-04": "#fda600",
	"color-data-visualization-05": "#75bfff",
	"color-data-visualization-06": "#de2c62",
	"color-data-visualization-07": "#a4f9ac",
	"color-data-visualization-08": "#812ae7",
	"color-data-visualization-09": "#ff5b45",
	"color-data-visualization-primary": "#75bfff",
	"color-data-visualization-success-graph": "#6bec8c",
	"color-data-visualization-success-text": "#39d377",
	"color-data-visualization-error-graph": "#f47171",
	"color-data-visualization-error-text": "#eb4242",
	"font-size-100": "12px",
	"font-size-200": "14px",
	"font-size-300": "16px",
	"font-size-400": "20px",
	"font-size-500": "28px",
	"font-size-600": "36px",
	"font-size-datepicker-date": "16px",
	"font-size-datepicker-heading": "20px",
	"font-weight-normal": "400",
	"font-weight-semibold": "600",
	"font-weight-bold": "700",
	"font-weight-datepicker-date": "400",
	"font-weight-datepicker-heading": "700",
	"font-family-default-latin": "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"font-family-default-japanese": "'SF Pro JP', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'Hiragino Kaku Gothic Pro', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"font-family-code": "SFMono-Medium, 'SF Mono', 'Segoe UI Mono', 'Roboto Mono', 'Ubuntu Mono', Menlo, Consolas, Courier, monospace",
	"font-family-datepicker-date": "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"font-family-datepicker-heading": "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"font-letterspacing-datepicker-date": "normal",
	"font-letterspacing-datepicker-heading": "normal",
	"font-lineheight-datepicker-date": "22px",
	"font-lineheight-datepicker-heading": "normal",
	"font-textdecoration-datepicker-date": "none",
	"font-textdecoration-datepicker-heading": "none",
	"opacity-0": "0",
	"opacity-100": "0.04",
	"opacity-200": "0.2",
	"opacity-300": "0.4",
	"opacity-400": "0.8",
	"opacity-500": "0.9",
	"rounding-0": "0px",
	"rounding-100": "4px",
	"rounding-200": "8px",
	"rounding-300": "12px",
	"rounding-400": "16px",
	"rounding-500": "20px",
	"rounding-600": "24px",
	"rounding-700": "28px",
	"rounding-800": "32px",
	"rounding-pill": "999px",
	"rounding-circle": "50%",
	"rounding-datepicker-container": "16px",
	"rounding-datepicker-days": "50%",
	"rounding-datepicker-navigation": "50%",
	"rounding-datepicker-range-start": "50% 0px 0px 50%",
	"rounding-datepicker-range-middle": "0px",
	"rounding-datepicker-range-end": "0px 50% 50% 0px",
	"space-0": "0px",
	"space-100": "4px",
	"space-200": "8px",
	"space-300": "12px",
	"space-400": "16px",
	"space-500": "20px",
	"space-600": "24px",
	"space-700": "28px",
	"space-800": "32px",
	"space-900": "36px",
	"space-1000": "40px",
	"space-1100": "44px",
	"space-1200": "48px",
	"space-1300": "52px",
	"space-1400": "56px",
	"space-1500": "60px",
	"space-1600": "64px",
	"space-negative-100": "-4px",
	"space-negative-200": "-8px",
	"space-negative-300": "-12px",
	"space-negative-400": "-16px",
	"space-negative-500": "-20px",
	"space-negative-600": "-24px",
	"space-negative-700": "-28px",
	"space-negative-800": "-32px",
	"space-negative-900": "-36px",
	"space-negative-1000": "-40px",
	"space-negative-1100": "-44px",
	"space-negative-1200": "-48px",
	"space-negative-1300": "-52px",
	"space-negative-1400": "-56px",
	"space-negative-1500": "-60px",
	"space-negative-1600": "-64px",
	"elevation-floating": "none",
	"elevation-raised-top": "0px 0.5px 0px 0px rgba(249, 249, 249, 0)",
	"elevation-raised-bottom": "0px -0.5px 0px 0px rgba(249, 249, 249, 0)",
	"elevation-datepicker": "0px 0px 8px 0px rgba(250, 250, 250, 0.06)"
};

var lightColorDesignTokens = {
	"color-red-pushpin-0": "#fff7f7",
	"color-red-pushpin-50": "#ffebeb",
	"color-red-pushpin-100": "#ffe0e0",
	"color-red-pushpin-200": "#fcbbbb",
	"color-red-pushpin-300": "#f47171",
	"color-red-pushpin-400": "#eb4242",
	"color-red-pushpin-450": "#e60023",
	"color-red-pushpin-500": "#cc0000",
	"color-red-pushpin-600": "#b60000",
	"color-red-pushpin-700": "#9b0000",
	"color-red-pushpin-800": "#800000",
	"color-red-pushpin-900": "#660000",
	"color-pink-flaminglow-0": "#fff8fa",
	"color-pink-flaminglow-50": "#ffebf1",
	"color-pink-flaminglow-100": "#ffdfe9",
	"color-pink-flaminglow-200": "#ffbed2",
	"color-pink-flaminglow-300": "#fe8eb1",
	"color-pink-flaminglow-400": "#f76593",
	"color-pink-flaminglow-450": "#ee376a",
	"color-pink-flaminglow-500": "#de2c62",
	"color-pink-flaminglow-600": "#c31952",
	"color-pink-flaminglow-700": "#a30c4a",
	"color-pink-flaminglow-800": "#82053e",
	"color-pink-flaminglow-900": "#630233",
	"color-blue-skycicle-0": "#f7fbff",
	"color-blue-skycicle-50": "#e6f4ff",
	"color-blue-skycicle-100": "#d7edff",
	"color-blue-skycicle-200": "#abdbff",
	"color-blue-skycicle-300": "#75bfff",
	"color-blue-skycicle-400": "#45a3fe",
	"color-blue-skycicle-450": "#007cff",
	"color-blue-skycicle-500": "#0074e8",
	"color-blue-skycicle-600": "#005fcb",
	"color-blue-skycicle-700": "#004ba9",
	"color-blue-skycicle-800": "#003c96",
	"color-blue-skycicle-900": "#002966",
	"color-teal-spabattical-0": "#f7fdfc",
	"color-teal-spabattical-50": "#e6faf5",
	"color-teal-spabattical-100": "#ccf6ee",
	"color-teal-spabattical-200": "#75e4d5",
	"color-teal-spabattical-300": "#48d5c6",
	"color-teal-spabattical-400": "#26c0b4",
	"color-teal-spabattical-450": "#009990",
	"color-teal-spabattical-500": "#00857c",
	"color-teal-spabattical-600": "#006b6c",
	"color-teal-spabattical-700": "#005c62",
	"color-teal-spabattical-800": "#005062",
	"color-teal-spabattical-900": "#003440",
	"color-green-matchacado-0": "#f6fdf5",
	"color-green-matchacado-50": "#e3fae1",
	"color-green-matchacado-100": "#c3f9c2",
	"color-green-matchacado-200": "#a4f9ac",
	"color-green-matchacado-300": "#6bec8c",
	"color-green-matchacado-400": "#39d377",
	"color-green-matchacado-450": "#1dad65",
	"color-green-matchacado-500": "#008753",
	"color-green-matchacado-600": "#005f3e",
	"color-green-matchacado-700": "#00422c",
	"color-green-matchacado-800": "#003020",
	"color-green-matchacado-900": "#00261a",
	"color-purple-mysticool-0": "#f8f7ff",
	"color-purple-mysticool-50": "#f0edff",
	"color-purple-mysticool-100": "#e9e4ff",
	"color-purple-mysticool-200": "#d5c7ff",
	"color-purple-mysticool-300": "#b190ff",
	"color-purple-mysticool-400": "#9e68ff",
	"color-purple-mysticool-450": "#8a39fa",
	"color-purple-mysticool-500": "#812ae7",
	"color-purple-mysticool-600": "#6b16ca",
	"color-purple-mysticool-700": "#550aa9",
	"color-purple-mysticool-800": "#400387",
	"color-purple-mysticool-900": "#2c0066",
	"color-orange-firetini-0": "#fff6eb",
	"color-orange-firetini-50": "#fff0db",
	"color-orange-firetini-100": "#ffe4c1",
	"color-orange-firetini-200": "#ffc58f",
	"color-orange-firetini-300": "#fda161",
	"color-orange-firetini-400": "#f77a38",
	"color-orange-firetini-450": "#ff5b45",
	"color-orange-firetini-500": "#de3700",
	"color-orange-firetini-600": "#c32f00",
	"color-orange-firetini-700": "#a42700",
	"color-orange-firetini-800": "#842000",
	"color-orange-firetini-900": "#660e00",
	"color-yellow-caramellow-0": "#fffedb",
	"color-yellow-caramellow-50": "#fffebb",
	"color-yellow-caramellow-100": "#fffd92",
	"color-yellow-caramellow-200": "#fae600",
	"color-yellow-caramellow-300": "#fdc900",
	"color-yellow-caramellow-400": "#e18d00",
	"color-yellow-caramellow-450": "#d86800",
	"color-yellow-caramellow-500": "#bd5b00",
	"color-yellow-caramellow-600": "#aa4900",
	"color-yellow-caramellow-700": "#943a00",
	"color-yellow-caramellow-800": "#7c2d00",
	"color-yellow-caramellow-900": "#662400",
	"color-white-mochimalist-0": "#ffffff",
	"color-gray-roboflow-50": "#f9f9f9",
	"color-gray-roboflow-100": "#f1f1f1",
	"color-gray-roboflow-200": "#e9e9e9",
	"color-gray-roboflow-300": "#cdcdcd",
	"color-gray-roboflow-400": "#a5a5a5",
	"color-gray-roboflow-500": "#767676",
	"color-gray-roboflow-550": "#5f5f5f",
	"color-gray-roboflow-600": "#4a4a4a",
	"color-gray-roboflow-700": "#2b2b2b",
	"color-gray-roboflow-800": "#191919",
	"color-black-cosmicore-900": "#111111",
	"color-transparent": "rgba(0, 0, 0, 0)",
	"color-text-default": "#111111",
	"color-text-subtle": "#767676",
	"color-text-success": "#005f3e",
	"color-text-disabled": "#a5a5a5",
	"color-text-error": "#cc0000",
	"color-text-warning": "#bd5b00",
	"color-text-inverse": "#ffffff",
	"color-text-dark": "#111111",
	"color-text-light": "#ffffff",
	"color-text-shopping": "#0074e8",
	"color-text-link": "#004ba9",
	"color-text-formfield-default": "#111111",
	"color-text-formfield-disabled": "#767676",
	"color-text-formfield-placeholder": "#767676",
	"color-icon-default": "#111111",
	"color-icon-subtle": "#767676",
	"color-icon-subtle-accent": "#5f5f5f",
	"color-icon-success": "#005f3e",
	"color-icon-disabled": "#a5a5a5",
	"color-icon-error": "#cc0000",
	"color-icon-warning": "#bd5b00",
	"color-icon-info": "#0074e8",
	"color-icon-recommendation": "#812ae7",
	"color-icon-inverse": "#ffffff",
	"color-icon-shopping": "#0074e8",
	"color-icon-brand-primary": "#e60023",
	"color-icon-light": "#ffffff",
	"color-icon-dark": "#111111",
	"color-icon-avatar-default": "#111111",
	"color-background-default": "#ffffff",
	"color-background-info-base": "#0074e8",
	"color-background-info-weak": "#d7edff",
	"color-background-info-strong": "#005fcb",
	"color-background-error-base": "#cc0000",
	"color-background-error-weak": "#ffe0e0",
	"color-background-warning-base": "#bd5b00",
	"color-background-warning-weak": "#ffe4c1",
	"color-background-success-base": "#008753",
	"color-background-success-weak": "#c3f9c2",
	"color-background-recommendation-base": "#812ae7",
	"color-background-recommendation-weak": "#e9e4ff",
	"color-background-neutral": "#767676",
	"color-background-shopping": "#0074e8",
	"color-background-primary-base": "#e60023",
	"color-background-primary-strong": "#b60000",
	"color-background-primary-weak": "#f47171",
	"color-background-secondary-base": "#e9e9e9",
	"color-background-secondary-strong": "#a5a5a5",
	"color-background-secondary-weak": "#cdcdcd",
	"color-background-tertiary-base": "#767676",
	"color-background-tertiary-strong": "#2b2b2b",
	"color-background-tertiary-weak": "#cdcdcd",
	"color-background-selected-base": "#111111",
	"color-background-selected-strong": "#2b2b2b",
	"color-background-selected-weak": "#a5a5a5",
	"color-background-inverse-base": "#111111",
	"color-background-inverse-strong": "#e9e9e9",
	"color-background-brand": "#e60023",
	"color-background-education": "#0074e8",
	"color-background-wash-dark": "rgba(0, 0, 0, 0.8)",
	"color-background-wash-light": "rgba(255, 255, 255, 0.9)",
	"color-background-dark": "#111111",
	"color-background-light": "#ffffff",
	"color-background-elevation-accent": "#f1f1f1",
	"color-background-elevation-floating": "rgba(0, 0, 0, 0)",
	"color-background-elevation-raised": "rgba(0, 0, 0, 0)",
	"color-background-avatar-placeholder": "#efefef",
	"color-background-avatar-wash": "rgba(0, 0, 0, 0.06)",
	"color-background-badge-neutral-default": "#767676",
	"color-background-badge-neutral-hover": "#767676",
	"color-background-badge-info-default": "#0074e8",
	"color-background-badge-info-hover": "#005fcb",
	"color-background-badge-error-default": "#cc0000",
	"color-background-badge-error-hover": "#cc0000",
	"color-background-badge-warning-default": "#bd5b00",
	"color-background-badge-warning-hover": "#bd5b00",
	"color-background-badge-success-default": "#008753",
	"color-background-badge-success-hover": "#008753",
	"color-background-badge-recommendation-default": "#812ae7",
	"color-background-badge-recommendation-hover": "#812ae7",
	"color-background-badge-lightwash-default": "rgba(255, 255, 255, 0.9)",
	"color-background-badge-lightwash-hover": "rgba(255, 255, 255, 0.9)",
	"color-background-badge-darkwash-default": "rgba(0, 0, 0, 0.8)",
	"color-background-badge-darkwash-hover": "rgba(0, 0, 0, 0.8)",
	"color-background-box-default": "#ffffff",
	"color-background-box-info-base": "#0074e8",
	"color-background-box-info-weak": "#d7edff",
	"color-background-box-error-base": "#cc0000",
	"color-background-box-error-weak": "#ffe0e0",
	"color-background-box-warning-base": "#bd5b00",
	"color-background-box-warning-weak": "#ffe4c1",
	"color-background-box-success-base": "#008753",
	"color-background-box-success-weak": "#c3f9c2",
	"color-background-box-recommendation-base": "#812ae7",
	"color-background-box-recommendation-weak": "#e9e4ff",
	"color-background-box-shopping": "#0074e8",
	"color-background-box-primary": "#e60023",
	"color-background-box-secondary": "#e9e9e9",
	"color-background-box-tertiary": "#767676",
	"color-background-box-selected": "#111111",
	"color-background-box-inverse": "#111111",
	"color-background-box-brand": "#e60023",
	"color-background-box-education": "#0074e8",
	"color-background-box-elevation-accent": "#f1f1f1",
	"color-background-box-elevation-floating": "rgba(0, 0, 0, 0)",
	"color-background-box-elevation-raised": "rgba(0, 0, 0, 0)",
	"color-background-box-lightwash": "#e2e2e2",
	"color-background-box-darkwash": "#dadada",
	"color-background-box-transparentdarkgray": "rgba(51, 51, 51, 0.8)",
	"color-background-box-dark": "#111111",
	"color-background-box-light": "#ffffff",
	"color-background-box-transparent": "rgba(0, 0, 0, 0)",
	"color-background-button-primary-default": "#e60023",
	"color-background-button-primary-hover": "#b60000",
	"color-background-button-primary-active": "#a3081a",
	"color-background-button-primary-disabled": "#e9e9e9",
	"color-background-button-secondary-default": "#e9e9e9",
	"color-background-button-secondary-hover": "#e2e2e2",
	"color-background-button-secondary-active": "#dadada",
	"color-background-button-secondary-disabled": "#e9e9e9",
	"color-background-button-tertiary-default": "rgba(0, 0, 0, 0)",
	"color-background-button-tertiary-hover": "rgba(0, 0, 0, 0.06)",
	"color-background-button-tertiary-active": "rgba(0, 0, 0, 0.1)",
	"color-background-button-tertiary-disabled": "#e9e9e9",
	"color-background-button-shopping-default": "#0074e8",
	"color-background-button-shopping-hover": "#4a8ad4",
	"color-background-button-shopping-active": "#4a85c9",
	"color-background-button-white-default": "#ffffff",
	"color-background-button-white-hover": "#f0f0f0",
	"color-background-button-white-active": "#e0e0e0",
	"color-background-button-white-disabled": "#e9e9e9",
	"color-background-button-gray-default": "#767676",
	"color-background-button-gray-hover": "#878787",
	"color-background-button-gray-active": "#828282",
	"color-background-button-gray-disabled": "#e9e9e9",
	"color-background-button-semitransparentdefault-default": "rgba(255, 255, 255, 0.8)",
	"color-background-button-semitransparentdefault-hover": "#f0f0f0",
	"color-background-button-semitransparentdefault-active": "#e0e0e0",
	"color-background-button-semitransparentwhite-default": "rgba(255, 255, 255, 0.8)",
	"color-background-button-semitransparentwhite-hover": "#f0f0f0",
	"color-background-button-semitransparentwhite-active": "rgba(255, 255, 255, 0.8)",
	"color-background-button-semitransparentwhite-disabled": "#e9e9e9",
	"color-background-button-semitransparentdark-default": "rgba(51, 51, 51, 0.8)",
	"color-background-button-semitransparentdark-hover": "#121212",
	"color-background-button-semitransparentdark-active": "#1f1f1f",
	"color-background-button-semitransparentdark-disabled": "#e9e9e9",
	"color-background-button-transparentdarkbackground-default": "rgba(0, 0, 0, 0)",
	"color-background-button-transparentdarkbackground-hover": "rgba(0, 0, 0, 0.06)",
	"color-background-button-transparentdarkbackground-active": "rgba(0, 0, 0, 0.1)",
	"color-background-button-transparentdarkbackground-disabled": "#e9e9e9",
	"color-background-button-disabled-default": "#e9e9e9",
	"color-background-button-selected-default": "#111111",
	"color-background-button-selected-disabled": "#111111",
	"color-background-combobox-item-default": "rgba(0, 0, 0, 0)",
	"color-background-combobox-item-hover": "#efefef",
	"color-background-checkbox-disabled": "#efefef",
	"color-background-checkbox-checked-default": "#111111",
	"color-background-checkbox-checked-error": "#111111",
	"color-background-checkbox-unchecked-default": "#ffffff",
	"color-background-checkbox-unchecked-error": "#ffffff",
	"color-background-datepicker-container": "#ffffff",
	"color-background-datepicker-range-default": "rgba(0, 0, 0, 0.06)",
	"color-background-datepicker-range-hover": "rgba(0, 0, 0, 0.06)",
	"color-background-datepicker-range-active": "rgba(0, 0, 0, 0.06)",
	"color-background-datepicker-button-unselected-default": "#ffffff",
	"color-background-datepicker-button-unselected-hover": "rgba(0, 0, 0, 0.06)",
	"color-background-datepicker-button-unselected-active": "rgba(0, 0, 0, 0.06)",
	"color-background-datepicker-button-selected-default": "#111111",
	"color-background-datepicker-button-selected-hover": "#111111",
	"color-background-datepicker-button-selected-active": "#111111",
	"color-background-formfield-primary": "#ffffff",
	"color-background-formfield-disabled": "#efefef",
	"color-background-formfield-selected": "#111111",
	"color-background-iconbutton-semitransparentdark-default": "rgba(51, 51, 51, 0.8)",
	"color-background-iconbutton-semitransparentdark-hover": "#121212",
	"color-background-iconbutton-semitransparentdark-active": "#1f1f1f",
	"color-background-iconbutton-semitransparentdark-disabled": "#e9e9e9",
	"color-background-mask-wash": "rgba(0, 0, 0, 0.04)",
	"color-background-overlay": "#ffffff",
	"color-background-popover-primary": "#ffffff",
	"color-background-popover-secondary": "#111111",
	"color-background-popover-education": "#0074e8",
	"color-background-tabs-default-base": "#ffffff",
	"color-background-tabs-default-hover": "#e9e9e9",
	"color-background-tabs-default-active": "#e2e2e2",
	"color-background-tabs-transparent-base": "rgba(0, 0, 0, 0)",
	"color-background-tabs-transparent-hover": "rgba(0, 0, 0, 0.06)",
	"color-background-tabs-transparent-active": "rgba(0, 0, 0, 0.1)",
	"color-background-tag-primary-default": "#e9e9e9",
	"color-background-tag-primary-hover": "#e2e2e2",
	"color-background-tag-primary-active": "#dadada",
	"color-background-tag-error-default": "#cc0000",
	"color-background-tag-error-hover": "#ad081b",
	"color-background-tag-error-active": "#a3081a",
	"color-background-tag-warning-default": "#bd5b00",
	"color-background-tag-warning-hover": "#aa4900",
	"color-background-tag-warning-active": "#943a00",
	"color-background-searchguide-default-10": "#e9e4ff",
	"color-background-searchguide-default-11": "#e9e9e9",
	"color-background-searchguide-default-01": "#abdbff",
	"color-background-searchguide-default-02": "#a4f9ac",
	"color-background-searchguide-default-03": "#ffc58f",
	"color-background-searchguide-default-04": "#fcbbbb",
	"color-background-searchguide-default-05": "#d5c7ff",
	"color-background-searchguide-default-06": "#d7edff",
	"color-background-searchguide-default-07": "#c3f9c2",
	"color-background-searchguide-default-08": "#ffe4c1",
	"color-background-searchguide-default-09": "#fcbbbb",
	"color-background-searchguide-hover-10": "#e9e4ff",
	"color-background-searchguide-hover-11": "#e9e9e9",
	"color-background-searchguide-hover-01": "#abdbff",
	"color-background-searchguide-hover-02": "#a4f9ac",
	"color-background-searchguide-hover-03": "#ffc58f",
	"color-background-searchguide-hover-04": "#fcbbbb",
	"color-background-searchguide-hover-05": "#d5c7ff",
	"color-background-searchguide-hover-06": "#d7edff",
	"color-background-searchguide-hover-07": "#c3f9c2",
	"color-background-searchguide-hover-08": "#ffe4c1",
	"color-background-searchguide-hover-09": "#fcbbbb",
	"color-background-searchguide-active-10": "#e9e4ff",
	"color-background-searchguide-active-11": "#e9e9e9",
	"color-background-searchguide-active-01": "#abdbff",
	"color-background-searchguide-active-02": "#a4f9ac",
	"color-background-searchguide-active-03": "#ffc58f",
	"color-background-searchguide-active-04": "#fcbbbb",
	"color-background-searchguide-active-05": "#d5c7ff",
	"color-background-searchguide-active-06": "#d7edff",
	"color-background-searchguide-active-07": "#c3f9c2",
	"color-background-searchguide-active-08": "#ffe4c1",
	"color-background-searchguide-active-09": "#fcbbbb",
	"color-background-segmentedcontrol-container": "#efefef",
	"color-background-segmentedcontrol-tab-selected": "#ffffff",
	"color-background-switch-default-selected": "#111111",
	"color-background-switch-default-unselected": "#ffffff",
	"color-background-switch-disabled-selected": "#767676",
	"color-background-switch-disabled-unselected": "#efefef",
	"color-background-switch-hover-selected": "#111111",
	"color-background-switch-hover-unselected": "#ffffff",
	"color-background-switch-pressed-selected": "#111111",
	"color-background-switch-pressed-unselected": "#ffffff",
	"color-background-table-footer": "#ffffff",
	"color-background-table-row-hover": "#efefef",
	"color-background-table-row-selected": "#efefef",
	"color-background-tagdata-primary": "#e9e9e9",
	"color-background-tagdata-secondary": "#ffffff",
	"color-background-tagdata-disabled": "#efefef",
	"color-background-tableofcontents-item-default": "rgba(0, 0, 0, 0)",
	"color-background-tableofcontents-item-hover": "#e9e9e9",
	"color-background-tiledata-10": "#0050621A",
	"color-background-tiledata-11": "#de2c621A",
	"color-background-tiledata-12": "#660e001A",
	"color-background-tiledata-01": "#003c961A",
	"color-background-tiledata-02": "#11a69c1A",
	"color-background-tiledata-03": "#924af71A",
	"color-background-tiledata-04": "#d177111A",
	"color-background-tiledata-05": "#0081fe1A",
	"color-background-tiledata-06": "#ff53831A",
	"color-background-tiledata-07": "#00ab551A",
	"color-background-tiledata-08": "#4003871A",
	"color-background-tiledata-09": "#f2681f1A",
	"color-background-tiledata-hover": "#e9e9e9",
	"color-background-tiledata-disabled": "#efefef",
	"color-background-video-container-primary": "#111111",
	"color-background-video-container-secondary": "rgba(0, 0, 0, 0)",
	"color-border-container": "#cdcdcd",
	"color-border-default": "#767676",
	"color-border-error": "#cc0000",
	"color-border-focus": "rgba(0, 132, 255, 0.5)",
	"color-border-avatar": "#ffffff",
	"color-border-badge-default": "#ffffff",
	"color-border-badge-light": "#ffffff",
	"color-border-badge-dark": "#111111",
	"color-border-button-hover": "#cdcdcd",
	"color-border-button-pressed": "#cdcdcd",
	"color-border-checkbox-checked-default": "#111111",
	"color-border-checkbox-checked-error": "#cc0000",
	"color-border-checkbox-disabled": "#efefef",
	"color-border-checkbox-unchecked-default": "#767676",
	"color-border-checkbox-unchecked-error": "#cc0000",
	"color-border-checkbox-unchecked-hover": "#a5a5a5",
	"color-border-checkbox-unchecked-pressed": "#a5a5a5",
	"color-border-formfield-error-default": "#cc0000",
	"color-border-formfield-error-hover": "#ad081b",
	"color-border-formfield-disabled": "#efefef",
	"color-border-popover-primary": "#ffffff",
	"color-border-popover-secondary": "#111111",
	"color-border-popover-education": "#0074e8",
	"color-border-pulsar-default": "#0074e8",
	"color-border-pulsar-hover": "#dce9fa",
	"color-border-switch-default-selected": "#111111",
	"color-border-switch-default-unselected": "#767676",
	"color-border-switch-disabled-selected": "#ffffff",
	"color-border-switch-disabled-unselected": "#cdcdcd",
	"color-border-switch-focus-inner": "#767676",
	"color-border-switch-focus-outer": "#767676",
	"color-border-switch-hover-unselected": "#767676",
	"color-border-switch-pressed-unselected": "#767676",
	"color-border-table-row-selected": "#111111",
	"color-border-tag-disabled": "#767676",
	"color-data-visualization-10": "#005062",
	"color-data-visualization-11": "#de2c62",
	"color-data-visualization-12": "#660e00",
	"color-data-visualization-01": "#003c96",
	"color-data-visualization-02": "#11a69c",
	"color-data-visualization-03": "#924af7",
	"color-data-visualization-04": "#d17711",
	"color-data-visualization-05": "#0081fe",
	"color-data-visualization-06": "#ff5383",
	"color-data-visualization-07": "#00ab55",
	"color-data-visualization-08": "#400387",
	"color-data-visualization-09": "#f2681f",
	"color-data-visualization-primary": "#0081fe",
	"color-data-visualization-success-graph": "#008753",
	"color-data-visualization-success-text": "#005f3e",
	"color-data-visualization-error-graph": "#ed0000",
	"color-data-visualization-error-text": "#cc0000",
	"font-size-100": "12px",
	"font-size-200": "14px",
	"font-size-300": "16px",
	"font-size-400": "20px",
	"font-size-500": "28px",
	"font-size-600": "36px",
	"font-size-datepicker-date": "16px",
	"font-size-datepicker-heading": "20px",
	"font-weight-normal": "400",
	"font-weight-semibold": "600",
	"font-weight-bold": "700",
	"font-weight-datepicker-date": "400",
	"font-weight-datepicker-heading": "700",
	"font-family-default-latin": "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"font-family-default-japanese": "'SF Pro JP', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'Hiragino Kaku Gothic Pro', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"font-family-code": "SFMono-Medium, 'SF Mono', 'Segoe UI Mono', 'Roboto Mono', 'Ubuntu Mono', Menlo, Consolas, Courier, monospace",
	"font-family-datepicker-date": "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"font-family-datepicker-heading": "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"font-letterspacing-datepicker-date": "normal",
	"font-letterspacing-datepicker-heading": "normal",
	"font-lineheight-datepicker-date": "22px",
	"font-lineheight-datepicker-heading": "normal",
	"font-textdecoration-datepicker-date": "none",
	"font-textdecoration-datepicker-heading": "none",
	"opacity-0": "0",
	"opacity-100": "0.04",
	"opacity-200": "0.2",
	"opacity-300": "0.4",
	"opacity-400": "0.8",
	"opacity-500": "0.9",
	"rounding-0": "0px",
	"rounding-100": "4px",
	"rounding-200": "8px",
	"rounding-300": "12px",
	"rounding-400": "16px",
	"rounding-500": "20px",
	"rounding-600": "24px",
	"rounding-700": "28px",
	"rounding-800": "32px",
	"rounding-pill": "999px",
	"rounding-circle": "50%",
	"rounding-datepicker-container": "16px",
	"rounding-datepicker-days": "50%",
	"rounding-datepicker-navigation": "50%",
	"rounding-datepicker-range-start": "50% 0px 0px 50%",
	"rounding-datepicker-range-middle": "0px",
	"rounding-datepicker-range-end": "0px 50% 50% 0px",
	"space-0": "0px",
	"space-100": "4px",
	"space-200": "8px",
	"space-300": "12px",
	"space-400": "16px",
	"space-500": "20px",
	"space-600": "24px",
	"space-700": "28px",
	"space-800": "32px",
	"space-900": "36px",
	"space-1000": "40px",
	"space-1100": "44px",
	"space-1200": "48px",
	"space-1300": "52px",
	"space-1400": "56px",
	"space-1500": "60px",
	"space-1600": "64px",
	"space-negative-100": "-4px",
	"space-negative-200": "-8px",
	"space-negative-300": "-12px",
	"space-negative-400": "-16px",
	"space-negative-500": "-20px",
	"space-negative-600": "-24px",
	"space-negative-700": "-28px",
	"space-negative-800": "-32px",
	"space-negative-900": "-36px",
	"space-negative-1000": "-40px",
	"space-negative-1100": "-44px",
	"space-negative-1200": "-48px",
	"space-negative-1300": "-52px",
	"space-negative-1400": "-56px",
	"space-negative-1500": "-60px",
	"space-negative-1600": "-64px",
	"elevation-floating": "0px 0px 8px 0px rgba(0, 0, 0, 0.1)",
	"elevation-raised-top": "0px 2px 8px 0px rgba(0, 0, 0, 0.12)",
	"elevation-raised-bottom": "0px -2px 8px 0px rgba(0, 0, 0, 0.12)",
	"elevation-datepicker": "0px 0px 8px 0px rgba(0, 0, 0, 0.1)"
};

const date$1 = {
	"default": {
		type: "textDecoration",
		value: "none",
		filePath: "tokens/vr-theme/sema/text/font.json",
		isSource: false,
		original: {
			type: "textDecoration",
			value: "{base.font.textdecoration.default}"
		},
		name: "default",
		attributes: {
		},
		path: [
			"sema",
			"font",
			"textdecoration",
			"body",
			"MD",
			"default"
		]
	},
	link: {
		type: "textDecoration",
		value: "underline",
		filePath: "tokens/vr-theme/sema/text/font.json",
		isSource: false,
		original: {
			type: "textDecoration",
			value: "{base.font.textdecoration.underline}"
		},
		name: "link",
		attributes: {
		},
		path: [
			"sema",
			"font",
			"textdecoration",
			"body",
			"MD",
			"link"
		]
	},
	emphasis: {
		type: "textDecoration",
		value: "none",
		filePath: "tokens/vr-theme/sema/text/font.json",
		isSource: false,
		original: {
			type: "textDecoration",
			value: "{base.font.textdecoration.default}"
		},
		name: "emphasis",
		attributes: {
		},
		path: [
			"sema",
			"font",
			"textdecoration",
			"body",
			"MD",
			"emphasis"
		]
	}
};
var vrDarkColorDesignTokens = {
	"base-color-transparent": "rgba(255, 255, 255, 0)",
	"base-color-grayscale-0": "#ffffff",
	"base-color-grayscale-25": "#fffef7",
	"base-color-grayscale-50": "#f5f4ed",
	"base-color-grayscale-100": "#e8e7e1",
	"base-color-grayscale-150": "#c7c6c1",
	"base-color-grayscale-200": "#969292",
	"base-color-grayscale-250": "#757570",
	"base-color-grayscale-300": "#636361",
	"base-color-grayscale-350": "#4c4c4a",
	"base-color-grayscale-400": "#2e2e2d",
	"base-color-grayscale-450": "#1c1b1b",
	"base-color-grayscale-500": "#000000",
	"base-color-red-100": "#ffd3d1",
	"base-color-red-200": "#ff9494",
	"base-color-red-300": "#e60023",
	"base-color-red-400": "#b2001a",
	"base-color-red-500": "#8a0f0f",
	"base-color-purple-100": "#fcd8fc",
	"base-color-purple-200": "#efadef",
	"base-color-purple-300": "#c65dd0",
	"base-color-purple-400": "#8f4696",
	"base-color-purple-500": "#6d4270",
	"base-color-blue-100": "#c5eaf7",
	"base-color-blue-200": "#7cbede",
	"base-color-blue-300": "#2597d0",
	"base-color-blue-400": "#007db8",
	"base-color-blue-500": "#215d82",
	"base-color-green-100": "#d0e2a8",
	"base-color-green-200": "#a8bb63",
	"base-color-green-300": "#83a343",
	"base-color-green-400": "#517d3b",
	"base-color-green-500": "#265926",
	"base-color-orange-100": "#fde7c9",
	"base-color-orange-200": "#fbc55b",
	"base-color-orange-300": "#fea239",
	"base-color-orange-400": "#f06d22",
	"base-color-orange-500": "#9b4b1c",
	"base-color-pressed-grayscale-0": "#ebebe5",
	"base-color-pressed-grayscale-25": "#e7e6df",
	"base-color-pressed-grayscale-50": "#d8d7cf",
	"base-color-pressed-grayscale-100": "#c2c1bc",
	"base-color-pressed-grayscale-150": "#969292",
	"base-color-pressed-grayscale-200": "#747472",
	"base-color-pressed-grayscale-250": "#585856",
	"base-color-pressed-grayscale-300": "#464644",
	"base-color-pressed-grayscale-350": "#313130",
	"base-color-pressed-grayscale-400": "#585856",
	"base-color-pressed-grayscale-450": "#494946",
	"base-color-pressed-grayscale-500": "#393937",
	"base-color-pressed-red-100": "#f4a8a4",
	"base-color-pressed-red-200": "#ed5a5a",
	"base-color-pressed-red-300": "#9e0017",
	"base-color-pressed-red-400": "#7a0012",
	"base-color-pressed-red-500": "#530909",
	"base-color-pressed-purple-100": "#f8b5f8",
	"base-color-pressed-purple-200": "#da86da",
	"base-color-pressed-purple-300": "#9c4993",
	"base-color-pressed-purple-400": "#643569",
	"base-color-pressed-purple-500": "#422843",
	"base-color-pressed-blue-100": "#8ecfe6",
	"base-color-pressed-blue-200": "#4096bf",
	"base-color-pressed-blue-300": "#236586",
	"base-color-pressed-blue-400": "#0e5c81",
	"base-color-pressed-blue-500": "#1a394d",
	"base-color-pressed-green-100": "#a7b97e",
	"base-color-pressed-green-200": "#81904c",
	"base-color-pressed-green-300": "#677d3b",
	"base-color-pressed-green-400": "#3c5530",
	"base-color-pressed-green-500": "#1a321a",
	"base-color-pressed-orange-100": "#f4cc95",
	"base-color-pressed-orange-200": "#f1a613",
	"base-color-pressed-orange-300": "#e07f10",
	"base-color-pressed-orange-400": "#ca5816",
	"base-color-pressed-orange-500": "#6b381a",
	"base-color-hover-grayscale-0": "#f8f7f2",
	"base-color-hover-grayscale-25": "#f5f4ed",
	"base-color-hover-grayscale-50": "#e7e6df",
	"base-color-hover-grayscale-100": "#d6d4cd",
	"base-color-hover-grayscale-150": "#b2b0ae",
	"base-color-hover-grayscale-200": "#838181",
	"base-color-hover-grayscale-250": "#626260",
	"base-color-hover-grayscale-300": "#555553",
	"base-color-hover-grayscale-350": "#3e3e3c",
	"base-color-hover-grayscale-400": "#434342",
	"base-color-hover-grayscale-450": "#343332",
	"base-color-hover-grayscale-500": "#242423",
	"base-color-hover-red-100": "#fbbebb",
	"base-color-hover-red-200": "#f87777",
	"base-color-hover-red-300": "#bd001c",
	"base-color-hover-red-400": "#940016",
	"base-color-hover-red-500": "#6e0c0c",
	"base-color-hover-purple-100": "#fac7fa",
	"base-color-hover-purple-200": "#e599e5",
	"base-color-hover-purple-300": "#b04aa5",
	"base-color-hover-purple-400": "#793e7e",
	"base-color-hover-purple-500": "#57355a",
	"base-color-hover-blue-100": "#a8ddf0",
	"base-color-hover-blue-200": "#58a9d0",
	"base-color-hover-blue-300": "#2578a2",
	"base-color-hover-blue-400": "#086c9b",
	"base-color-hover-blue-500": "#1e4b67",
	"base-color-hover-green-100": "#bcd090",
	"base-color-hover-green-200": "#93a550",
	"base-color-hover-green-300": "#769041",
	"base-color-hover-green-400": "#476836",
	"base-color-hover-green-500": "#214521",
	"base-color-hover-orange-100": "#f9d9ae",
	"base-color-hover-orange-200": "#f8b430",
	"base-color-hover-orange-300": "#f48c15",
	"base-color-hover-orange-400": "#e05f15",
	"base-color-hover-orange-500": "#7e401b",
	"base-font-lineheight-110": "1.1",
	"base-font-lineheight-120": "1.2",
	"base-font-lineheight-130": "1.3",
	"base-font-lineheight-140": "1.4",
	"base-font-lineheight-150": "1.5",
	"base-font-lineheight-160": "1.6",
	"base-font-lineheight-170": "1.7",
	"base-font-lineheight-180": "1.8",
	"base-font-weight-400": "400",
	"base-font-weight-500": "500",
	"base-font-weight-700": "700",
	"base-font-size-12": "12px",
	"base-font-size-14": "14px",
	"base-font-size-16": "16px",
	"base-font-size-20": "20px",
	"base-font-size-28": "28px",
	"base-font-size-36": "36px",
	"base-font-family-default-latin": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"base-font-family-default-japanese": "'SF Pro JP', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'Hiragino Kaku Gothic Pro', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"base-font-family-code": "'SF Mono', 'Segoe UI Mono', 'Roboto Mono', 'Ubuntu Mono', Menlo, Consolas, Courier, monospace",
	"base-font-letterspacing-0": "0",
	"base-font-letterspacing-1": "1px",
	"base-font-letterspacing-05": "0.5px",
	"base-font-letterspacing-negative-1": "-1px",
	"base-font-letterspacing-negative-05": "-0.5px",
	"base-font-textdecoration-default": "none",
	"base-font-textdecoration-underline": "underline",
	"base-rounding-unit": "4px",
	"base-space-unit": "4px",
	"base-motion-duration-0": "0ms",
	"base-motion-duration-50": "50ms",
	"base-motion-duration-100": "100ms",
	"base-motion-duration-150": "150ms",
	"base-motion-duration-200": "200ms",
	"base-motion-duration-300": "300ms",
	"base-motion-duration-400": "400ms",
	"base-motion-duration-500": "500ms",
	"base-motion-duration-600": "600ms",
	"base-motion-duration-700": "700ms",
	"base-motion-duration-900": "900ms",
	"base-motion-easing-linear": "cubic-bezier(0, 0, 1, 1)",
	"base-motion-easing-expressive": "cubic-bezier(0.55, 0, 0, 1)",
	"base-motion-easing-lateral": "cubic-bezier(0.8, 0, 0.2, 1)",
	"base-motion-easing-bounce": "cubic-bezier(0, 0.35, 0, 1.25)",
	"base-motion-easing-enter": "cubic-bezier(0.05, 0.7, 0.1, 1)",
	"base-motion-easing-exit": "cubic-bezier(0.3, 0, 0.8, 0.15)",
	"sema-color-background-default": "#000000",
	"sema-color-background-primary": "#e60023",
	"sema-color-background-secondary": "#757570",
	"sema-color-background-tertiary": "#c7c6c1",
	"sema-color-background-selected": "#e8e7e1",
	"sema-color-background-education": "#7cbede",
	"sema-color-background-elevation": "#2e2e2d",
	"sema-color-background-scrim": "#1c1b1b",
	"sema-color-background-inverse": "#ffffff",
	"sema-color-background-light": "#ffffff",
	"sema-color-background-dark": "#000000",
	"sema-color-background-disabled": "#2e2e2d",
	"sema-color-background-transparent": "rgba(255, 255, 255, 0)",
	"sema-color-background-info-default": "#7cbede",
	"sema-color-background-info-weak": "#215d82",
	"sema-color-background-neutral-default": "#c7c6c1",
	"sema-color-background-neutral-weak": "#636361",
	"sema-color-background-recommendation-default": "#efadef",
	"sema-color-background-recommendation-weak": "#6d4270",
	"sema-color-background-success-default": "#a8bb63",
	"sema-color-background-success-weak": "#265926",
	"sema-color-background-warning-default": "#fbc55b",
	"sema-color-background-warning-weak": "#9b4b1c",
	"sema-color-background-error-default": "#ff9494",
	"sema-color-background-error-weak": "#8a0f0f",
	"sema-color-background-wash-default": "rgba(0, 0, 0, 0.8)",
	"sema-color-background-wash-dark": "rgba(0, 0, 0, 0.8)",
	"sema-color-background-wash-light": "rgba(255, 255, 255, 0.9)",
	"sema-color-background-wash-image-tint": "rgba(0, 0, 0, 0.04)",
	"sema-color-background-wash-scrims-default": "rgba(117, 117, 112, 0.4)",
	"sema-color-background-wash-scrims-opaque": "rgba(76, 76, 74, 0.8)",
	"sema-color-background-gradient-darken-bottom-weak": "rgba(0, 0, 0, 0)",
	"sema-color-background-gradient-darken-bottom-strong": "rgba(0, 0, 0, 0)",
	"sema-color-background-gradient-darken-top-weak": "rgba(0, 0, 0, 0)",
	"sema-color-background-gradient-darken-top-strong": "rgba(0, 0, 0, 0)",
	"sema-color-border-decorative": "#757570",
	"sema-color-border-interactive": "#c7c6c1",
	"sema-color-border-selected": "#ffffff",
	"sema-color-border-disabled": "#4c4c4a",
	"sema-color-border-success": "#a8bb63",
	"sema-color-border-error": "#ff9494",
	"sema-color-border-inverse": "#000000",
	"sema-color-border-focus-outer-default": "#c5eaf7",
	"sema-color-border-focus-outer-inverse": "#215d82",
	"sema-color-border-focus-outer-dark": "#007db8",
	"sema-color-border-focus-outer-light": "#c5eaf7",
	"sema-color-border-focus-inner-default": "#000000",
	"sema-color-border-focus-inner-inverse": "#ffffff",
	"sema-color-border-focus-inner-dark": "#000000",
	"sema-color-border-focus-inner-light": "#ffffff",
	"sema-color-text-default": "#ffffff",
	"sema-color-text-neutral": "#e8e7e1",
	"sema-color-text-subtle": "#969292",
	"sema-color-text-link": "#c5eaf7",
	"sema-color-text-info": "#c5eaf7",
	"sema-color-text-recommendation": "#fcd8fc",
	"sema-color-text-success": "#d0e2a8",
	"sema-color-text-warning": "#fde7c9",
	"sema-color-text-error": "#ffd3d1",
	"sema-color-text-primary": "#e60023",
	"sema-color-text-inverse": "#000000",
	"sema-color-text-light": "#ffffff",
	"sema-color-text-dark": "#000000",
	"sema-color-text-disabled": "#4c4c4a",
	"sema-color-icon-default": "#ffffff",
	"sema-color-icon-neutral": "#e8e7e1",
	"sema-color-icon-subtle": "#969292",
	"sema-color-icon-link": "#c5eaf7",
	"sema-color-icon-info": "#c5eaf7",
	"sema-color-icon-recommendation": "#fcd8fc",
	"sema-color-icon-success": "#d0e2a8",
	"sema-color-icon-warning": "#fde7c9",
	"sema-color-icon-error": "#ffd3d1",
	"sema-color-icon-primary": "#e60023",
	"sema-color-icon-inverse": "#000000",
	"sema-color-icon-light": "#ffffff",
	"sema-color-icon-dark": "#000000",
	"sema-color-icon-disabled": "#4c4c4a",
	"sema-color-dataviz-10": "#007a72",
	"sema-color-dataviz-11": "#f76593",
	"sema-color-dataviz-12": "#ffc58f",
	"sema-color-dataviz-01": "#005fcb",
	"sema-color-dataviz-02": "#75e4d5",
	"sema-color-dataviz-03": "#b190ff",
	"sema-color-dataviz-04": "#fda600",
	"sema-color-dataviz-05": "#75bfff",
	"sema-color-dataviz-06": "#de2c62",
	"sema-color-dataviz-07": "#a4f9ac",
	"sema-color-dataviz-08": "#812ae7",
	"sema-color-dataviz-09": "#ff5b45",
	"sema-color-hover-background-default": "#242423",
	"sema-color-hover-background-primary": "#bd001c",
	"sema-color-hover-background-secondary": "#626260",
	"sema-color-hover-background-tertiary": "#b2b0ae",
	"sema-color-hover-background-selected": "#d6d4cd",
	"sema-color-hover-background-education": "#58a9d0",
	"sema-color-hover-background-elevation": "#434342",
	"sema-color-hover-background-scrim": "#343332",
	"sema-color-hover-background-inverse": "#f8f7f2",
	"sema-color-hover-background-light": "#f8f7f2",
	"sema-color-hover-background-dark": "#242423",
	"sema-color-hover-background-info-default": "#58a9d0",
	"sema-color-hover-background-info-weak": "#1e4b67",
	"sema-color-hover-background-neutral-default": "#b2b0ae",
	"sema-color-hover-background-neutral-weak": "#555553",
	"sema-color-hover-background-recommendation-default": "#e599e5",
	"sema-color-hover-background-recommendation-weak": "#57355a",
	"sema-color-hover-background-success-default": "#93a550",
	"sema-color-hover-background-success-weak": "#214521",
	"sema-color-hover-background-warning-default": "#f8b430",
	"sema-color-hover-background-warning-weak": "#7e401b",
	"sema-color-hover-background-error-default": "#f87777",
	"sema-color-hover-background-error-weak": "#6e0c0c",
	"sema-color-hover-background-wash-default": "rgba(36, 36, 35, 0.85)",
	"sema-color-hover-background-wash-dark": "rgba(36, 36, 35, 0.85)",
	"sema-color-hover-background-wash-light": "rgba(248, 247, 242, 0.95)",
	"sema-color-hover-background-wash-image-tint": "rgba(36, 36, 35, 0.09)",
	"sema-color-hover-background-wash-scrims-default": "rgba(98, 98, 96, 0.45)",
	"sema-color-hover-background-wash-scrims-opaque": "rgba(62, 62, 60, 0.85)",
	"sema-color-hover-border-decorative": "#626260",
	"sema-color-hover-border-interactive": "#b2b0ae",
	"sema-color-hover-border-selected": "#f8f7f2",
	"sema-color-hover-border-success": "#93a550",
	"sema-color-hover-border-error": "#f87777",
	"sema-color-hover-border-inverse": "#242423",
	"sema-color-hover-text-default": "#f8f7f2",
	"sema-color-hover-text-neutral": "#d6d4cd",
	"sema-color-hover-text-subtle": "#838181",
	"sema-color-hover-text-link": "#a8ddf0",
	"sema-color-hover-text-info": "#a8ddf0",
	"sema-color-hover-text-recommendation": "#fac7fa",
	"sema-color-hover-text-success": "#bcd090",
	"sema-color-hover-text-warning": "#f9d9ae",
	"sema-color-hover-text-error": "#fbbebb",
	"sema-color-hover-text-primary": "#bd001c",
	"sema-color-hover-text-inverse": "#242423",
	"sema-color-hover-text-light": "#f8f7f2",
	"sema-color-hover-text-dark": "#242423",
	"sema-color-hover-icon-default": "#f8f7f2",
	"sema-color-hover-icon-neutral": "#d6d4cd",
	"sema-color-hover-icon-subtle": "#838181",
	"sema-color-hover-icon-link": "#a8ddf0",
	"sema-color-hover-icon-info": "#a8ddf0",
	"sema-color-hover-icon-recommendation": "#fac7fa",
	"sema-color-hover-icon-success": "#bcd090",
	"sema-color-hover-icon-warning": "#f9d9ae",
	"sema-color-hover-icon-error": "#fbbebb",
	"sema-color-hover-icon-primary": "#bd001c",
	"sema-color-hover-icon-inverse": "#242423",
	"sema-color-hover-icon-light": "#f8f7f2",
	"sema-color-hover-icon-dark": "#242423",
	"sema-color-pressed-background-default": "#393937",
	"sema-color-pressed-background-primary": "#9e0017",
	"sema-color-pressed-background-secondary": "#585856",
	"sema-color-pressed-background-tertiary": "#969292",
	"sema-color-pressed-background-selected": "#c2c1bc",
	"sema-color-pressed-background-education": "#4096bf",
	"sema-color-pressed-background-elevation": "#585856",
	"sema-color-pressed-background-scrim": "#494946",
	"sema-color-pressed-background-inverse": "#ebebe5",
	"sema-color-pressed-background-light": "#ebebe5",
	"sema-color-pressed-background-dark": "#393937",
	"sema-color-pressed-background-info-default": "#4096bf",
	"sema-color-pressed-background-info-weak": "#1a394d",
	"sema-color-pressed-background-neutral-default": "#969292",
	"sema-color-pressed-background-neutral-weak": "#464644",
	"sema-color-pressed-background-recommendation-default": "#da86da",
	"sema-color-pressed-background-recommendation-weak": "#422843",
	"sema-color-pressed-background-success-default": "#81904c",
	"sema-color-pressed-background-success-weak": "#1a321a",
	"sema-color-pressed-background-warning-default": "#f1a613",
	"sema-color-pressed-background-warning-weak": "#6b381a",
	"sema-color-pressed-background-error-default": "#ed5a5a",
	"sema-color-pressed-background-error-weak": "#530909",
	"sema-color-pressed-background-wash-default": "rgba(57, 57, 55, 0.9)",
	"sema-color-pressed-background-wash-dark": "rgba(57, 57, 55, 0.9)",
	"sema-color-pressed-background-wash-light": "#ebebe5",
	"sema-color-pressed-background-wash-image-tint": "rgba(57, 57, 55, 0.14)",
	"sema-color-pressed-background-wash-scrims-default": "rgba(88, 88, 86, 0.5)",
	"sema-color-pressed-background-wash-scrims-opaque": "rgba(49, 49, 48, 0.9)",
	"sema-color-pressed-border-decorative": "#585856",
	"sema-color-pressed-border-interactive": "#969292",
	"sema-color-pressed-border-selected": "#ebebe5",
	"sema-color-pressed-border-success": "#81904c",
	"sema-color-pressed-border-error": "#ed5a5a",
	"sema-color-pressed-border-inverse": "#393937",
	"sema-color-pressed-text-default": "#ebebe5",
	"sema-color-pressed-text-neutral": "#c2c1bc",
	"sema-color-pressed-text-subtle": "#747472",
	"sema-color-pressed-text-link": "#8ecfe6",
	"sema-color-pressed-text-info": "#8ecfe6",
	"sema-color-pressed-text-recommendation": "#f8b5f8",
	"sema-color-pressed-text-success": "#a7b97e",
	"sema-color-pressed-text-warning": "#f4cc95",
	"sema-color-pressed-text-error": "#f4a8a4",
	"sema-color-pressed-text-primary": "#9e0017",
	"sema-color-pressed-text-inverse": "#393937",
	"sema-color-pressed-text-light": "#ebebe5",
	"sema-color-pressed-text-dark": "#393937",
	"sema-color-pressed-icon-default": "#ebebe5",
	"sema-color-pressed-icon-neutral": "#c2c1bc",
	"sema-color-pressed-icon-subtle": "#747472",
	"sema-color-pressed-icon-link": "#8ecfe6",
	"sema-color-pressed-icon-info": "#8ecfe6",
	"sema-color-pressed-icon-recommendation": "#f8b5f8",
	"sema-color-pressed-icon-success": "#a7b97e",
	"sema-color-pressed-icon-warning": "#f4cc95",
	"sema-color-pressed-icon-error": "#f4a8a4",
	"sema-color-pressed-icon-primary": "#9e0017",
	"sema-color-pressed-icon-inverse": "#393937",
	"sema-color-pressed-icon-light": "#ebebe5",
	"sema-color-pressed-icon-dark": "#393937",
	"sema-elevation-surface": "0px 1px 2px 0px rgba(0,0,0,0.3), 0px 0px 1px 0px rgba(0,0,0,0.28)",
	"sema-elevation-floating": "0px 4px 16px 0px rgba(0,0,0,0.2), 0px 1px 4px 0px rgba(0,0,0,0.2)",
	"sema-elevation-raised-default": "0px 1px 6px 0.5px rgba(0,0,0,0.3), 0px 1px 2px 0px rgba(0,0,0,0.3)",
	"sema-elevation-raised-top": "0px 2px 8px 0px rgba(0,0,0,0.3), 0px 1px 2px 0px rgba(0,0,0,0.3)",
	"sema-elevation-raised-bottom": "0px -2px 8px 0px rgba(0,0,0,0.3), 0px -1px 2px 0px rgba(0,0,0,0.3)",
	"sema-font-weight-heading-lg": "700",
	"sema-font-weight-heading-md": "700",
	"sema-font-weight-heading-sm": "500",
	"sema-font-weight-heading-xs": "500",
	"sema-font-weight-heading-xxs": "500",
	"sema-font-weight-ui-lg": "500",
	"sema-font-weight-ui-md": "500",
	"sema-font-weight-ui-sm": "500",
	"sema-font-weight-ui-xs": "500",
	"sema-font-weight-ui-xxs": "500",
	"sema-font-weight-body-lg-default": "400",
	"sema-font-weight-body-lg-emphasis": "700",
	"sema-font-weight-body-md-default": "400",
	"sema-font-weight-body-md-emphasis": "700",
	"sema-font-weight-body-sm-default": "400",
	"sema-font-weight-body-sm-emphasis": "700",
	"sema-font-weight-body-xs-default": "400",
	"sema-font-weight-body-xs-emphasis": "700",
	"sema-font-weight-compact-xs-default": "400",
	"sema-font-weight-compact-xs-emphasis": "700",
	"sema-font-size-heading-xxs": "14px",
	"sema-font-size-heading-xs": "16px",
	"sema-font-size-heading-sm": "20px",
	"sema-font-size-heading-md": "28px",
	"sema-font-size-heading-lg": "36px",
	"sema-font-size-ui-xs": "12px",
	"sema-font-size-ui-sm": "14px",
	"sema-font-size-ui-md": "16px",
	"sema-font-size-ui-lg": "20px",
	"sema-font-size-body-xs": "12px",
	"sema-font-size-body-sm": "14px",
	"sema-font-size-body-md": "16px",
	"sema-font-size-body-lg": "20px",
	"sema-font-size-compact-xs": "12px",
	"sema-font-family-heading-lg": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-heading-md": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-heading-sm": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-heading-xs": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-heading-xxs": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-ui-lg": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-ui-md": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-ui-sm": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-ui-xs": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-body-lg": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-body-md": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-body-sm": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-body-xs": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-compact-xs": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-letterspacing-heading-lg": "-0.5px",
	"sema-font-letterspacing-heading-md": "-0.5px",
	"sema-font-letterspacing-heading-sm": "0",
	"sema-font-letterspacing-heading-xs": "0",
	"sema-font-letterspacing-heading-xxs": "0",
	"sema-font-letterspacing-ui-lg": "0",
	"sema-font-letterspacing-ui-md": "0",
	"sema-font-letterspacing-ui-sm": "0",
	"sema-font-letterspacing-ui-xs": "0",
	"sema-font-letterspacing-body-lg": "0",
	"sema-font-letterspacing-body-md": "0",
	"sema-font-letterspacing-body-sm": "0",
	"sema-font-letterspacing-body-xs": "0",
	"sema-font-letterspacing-compact-xs": "0",
	"sema-font-textdecoration-heading-lg": "none",
	"sema-font-textdecoration-heading-md": "none",
	"sema-font-textdecoration-heading-sm": "none",
	"sema-font-textdecoration-heading-xs": "none",
	"sema-font-textdecoration-heading-xxs": "none",
	"sema-font-textdecoration-ui-lg": "none",
	"sema-font-textdecoration-ui-md": "none",
	"sema-font-textdecoration-ui-sm": "none",
	"sema-font-textdecoration-ui-xs": "none",
	"sema-font-textdecoration-body-lg-default": "none",
	"sema-font-textdecoration-body-lg-link": "underline",
	"sema-font-textdecoration-body-lg-emphasis": "none",
	"sema-font-textdecoration-body-md-default": "none",
	"sema-font-textdecoration-body-md-link": "underline",
	"sema-font-textdecoration-body-md-emphasis": "none",
	"sema-font-textdecoration-body-sm-default": "none",
	"sema-font-textdecoration-body-sm-link": "underline",
	"sema-font-textdecoration-body-sm-emphasis": "none",
	"sema-font-textdecoration-body-xs-default": "none",
	"sema-font-textdecoration-body-xs-link": "underline",
	"sema-font-textdecoration-body-xs-emphasis": "none",
	"sema-font-textdecoration-compact-xs-default": "none",
	"sema-font-textdecoration-compact-xs-link": "underline",
	"sema-font-textdecoration-compact-xs-emphasis": "none",
	"sema-font-lineheight-xl": "1.5",
	"sema-font-lineheight-lg": "1.4",
	"sema-font-lineheight-md": "1.3",
	"sema-font-lineheight-sm": "1.2",
	"sema-font-lineheight-xs": "1.1",
	"sema-font-lineheight-heading-lg": "40px",
	"sema-font-lineheight-heading-md": "31px",
	"sema-font-lineheight-heading-sm": "24px",
	"sema-font-lineheight-heading-xs": "22px",
	"sema-font-lineheight-heading-xxs": "20px",
	"sema-font-lineheight-ui-lg": "24px",
	"sema-font-lineheight-ui-md": "19px",
	"sema-font-lineheight-ui-sm": "17px",
	"sema-font-lineheight-ui-xs": "16px",
	"sema-font-lineheight-body-lg": "28px",
	"sema-font-lineheight-body-md": "22px",
	"sema-font-lineheight-body-sm": "20px",
	"sema-font-lineheight-body-xs": "17px",
	"sema-font-lineheight-compact-xs": "14px",
	"sema-opacity-0": "0",
	"sema-opacity-4": "0.04",
	"sema-opacity-20": "0.2",
	"sema-opacity-40": "0.4",
	"sema-opacity-60": "0.6",
	"sema-opacity-80": "0.8",
	"sema-opacity-90": "0.9",
	"sema-opacity-100": "1",
	"sema-rounding-0": "0px",
	"sema-rounding-100": "4px",
	"sema-rounding-200": "8px",
	"sema-rounding-300": "12px",
	"sema-rounding-400": "16px",
	"sema-rounding-500": "20px",
	"sema-rounding-600": "24px",
	"sema-rounding-700": "28px",
	"sema-rounding-800": "32px",
	"sema-rounding-pill": "999px",
	"sema-rounding-circle": "50%",
	"sema-space-0": "0px",
	"sema-space-25": "1px",
	"sema-space-50": "2px",
	"sema-space-100": "4px",
	"sema-space-150": "6px",
	"sema-space-200": "8px",
	"sema-space-300": "12px",
	"sema-space-400": "16px",
	"sema-space-500": "20px",
	"sema-space-600": "24px",
	"sema-space-700": "28px",
	"sema-space-800": "32px",
	"sema-space-900": "36px",
	"sema-space-1000": "40px",
	"sema-space-1100": "44px",
	"sema-space-1200": "48px",
	"sema-space-1300": "52px",
	"sema-space-1400": "56px",
	"sema-space-1500": "60px",
	"sema-space-1600": "64px",
	"sema-space-negative-25": "-1px",
	"sema-space-negative-50": "-2px",
	"sema-space-negative-100": "-4px",
	"sema-space-negative-150": "-6px",
	"sema-space-negative-200": "-8px",
	"sema-space-negative-300": "-12px",
	"sema-space-negative-400": "-16px",
	"sema-space-negative-500": "-20px",
	"sema-space-negative-600": "-24px",
	"sema-space-negative-700": "-28px",
	"sema-space-negative-800": "-32px",
	"sema-space-negative-900": "-36px",
	"sema-space-negative-1000": "-40px",
	"sema-space-negative-1100": "-44px",
	"sema-space-negative-1200": "-48px",
	"sema-space-negative-1300": "-52px",
	"sema-space-negative-1400": "-56px",
	"sema-space-negative-1500": "-60px",
	"sema-space-negative-1600": "-64px",
	"sema-motion-position-fadein-duration": "300ms",
	"sema-motion-position-fadein-easing": "cubic-bezier(0.8, 0, 0.2, 1)",
	"sema-motion-position-fadeout-duration": "200ms",
	"sema-motion-position-fadeout-easing": "cubic-bezier(0.8, 0, 0.2, 1)",
	"sema-motion-position-enter-duration": "300ms",
	"sema-motion-position-enter-easing": "cubic-bezier(0, 0.35, 0, 1.25)",
	"sema-motion-position-exit-duration": "300ms",
	"sema-motion-position-exit-easing": "cubic-bezier(0.3, 0, 0.8, 0.15)",
	"sema-motion-position-on-duration": "300ms",
	"sema-motion-position-on-easing": "cubic-bezier(0, 0.35, 0, 1.25)",
	"sema-motion-position-off-duration": "200ms",
	"sema-motion-position-off-easing": "cubic-bezier(0.8, 0, 0.2, 1)",
	"sema-motion-position-swipe-duration": "400ms",
	"sema-motion-position-swipe-easing": "cubic-bezier(0.8, 0, 0.2, 1)",
	"sema-motion-scale-on-duration": "150ms",
	"sema-motion-scale-on-easing": "cubic-bezier(0, 0, 1, 1)",
	"sema-motion-scale-swipe-duration": "400ms",
	"sema-motion-scale-swipe-easing": "cubic-bezier(0.8, 0, 0.2, 1)",
	"sema-motion-colorchange-duration": "300ms",
	"sema-motion-colorchange-easing": "cubic-bezier(0, 0, 1, 1)",
	"sema-motion-opacity-duration-default": "300ms",
	"sema-motion-opacity-duration-instant": "0ms",
	"sema-motion-opacity-easing-default": "cubic-bezier(0, 0, 1, 1)",
	"sema-motion-opacity-easing-instant": "cubic-bezier(0, 0, 1, 1)",
	"comp-checkbox-motion-background-colorchange-easing": "cubic-bezier(0, 0, 1, 1)",
	"comp-checkbox-motion-background-colorchange-duration": "150ms",
	"comp-checkbox-icon-motion-collapse-in-easing": "cubic-bezier(0.55, 0, 0, 1)",
	"comp-checkbox-icon-motion-collapse-in-duration": "200ms",
	"comp-checkbox-icon-motion-collapse-out-easing": "cubic-bezier(0.3, 0, 0.8, 0.15)",
	"comp-checkbox-icon-motion-collapse-out-duration": "150ms",
	"comp-radiogroupbutton-motion-border-scale-easing": "cubic-bezier(0, 0.35, 0, 1.25)",
	"comp-radiogroupbutton-motion-border-scale-duration": "150ms",
	"comp-radiogroupbutton-motion-border-fade-easing": "cubic-bezier(0.3, 0, 0.8, 0.15)",
	"comp-radiogroupbutton-motion-border-fade-duration": "150ms",
	"comp-spinner-color-background-pink": "#d452d1",
	"comp-spinner-color-background-orange": "#ff7c36",
	"comp-spinner-color-background-blue": "#24ccb0",
	"color-data-visualization-10": "#007a72",
	"color-data-visualization-11": "#f76593",
	"color-data-visualization-12": "#ffc58f",
	"color-data-visualization-01": "#005fcb",
	"color-data-visualization-02": "#75e4d5",
	"color-data-visualization-03": "#b190ff",
	"color-data-visualization-04": "#fda600",
	"color-data-visualization-05": "#75bfff",
	"color-data-visualization-06": "#de2c62",
	"color-data-visualization-07": "#a4f9ac",
	"color-data-visualization-08": "#812ae7",
	"color-data-visualization-09": "#ff5b45",
	"color-data-visualization-primary": "#75bfff",
	"color-data-visualization-success-graph": "#a8bb63",
	"color-data-visualization-success-text": "#83a343",
	"color-data-visualization-error-graph": "#ff9494",
	"color-data-visualization-error-text": "#e60023",
	"color-red-pushpin-0": "#ffd3d1",
	"color-red-pushpin-50": "#ffd3d1",
	"color-red-pushpin-100": "#ffd3d1",
	"color-red-pushpin-200": "#ffd3d1",
	"color-red-pushpin-300": "#ff9494",
	"color-red-pushpin-400": "#e60023",
	"color-red-pushpin-450": "#e60023",
	"color-red-pushpin-500": "#b2001a",
	"color-red-pushpin-600": "#b2001a",
	"color-red-pushpin-700": "#8a0f0f",
	"color-red-pushpin-800": "#8a0f0f",
	"color-red-pushpin-900": "#8a0f0f",
	"color-pink-flaminglow-0": "#fcd8fc",
	"color-pink-flaminglow-50": "#fcd8fc",
	"color-pink-flaminglow-100": "#fcd8fc",
	"color-pink-flaminglow-200": "#efadef",
	"color-pink-flaminglow-300": "#efadef",
	"color-pink-flaminglow-400": "#c65dd0",
	"color-pink-flaminglow-450": "#8f4696",
	"color-pink-flaminglow-500": "#8f4696",
	"color-pink-flaminglow-600": "#8f4696",
	"color-pink-flaminglow-700": "#6d4270",
	"color-pink-flaminglow-800": "#6d4270",
	"color-pink-flaminglow-900": "#6d4270",
	"color-blue-skycicle-0": "#c5eaf7",
	"color-blue-skycicle-50": "#c5eaf7",
	"color-blue-skycicle-100": "#c5eaf7",
	"color-blue-skycicle-200": "#c5eaf7",
	"color-blue-skycicle-300": "#7cbede",
	"color-blue-skycicle-400": "#2597d0",
	"color-blue-skycicle-450": "#007db8",
	"color-blue-skycicle-500": "#007db8",
	"color-blue-skycicle-600": "#007db8",
	"color-blue-skycicle-700": "#215d82",
	"color-blue-skycicle-800": "#215d82",
	"color-blue-skycicle-900": "#215d82",
	"color-teal-spabattical-0": "#c5eaf7",
	"color-teal-spabattical-50": "#c5eaf7",
	"color-teal-spabattical-100": "#c5eaf7",
	"color-teal-spabattical-200": "#7cbede",
	"color-teal-spabattical-300": "#7cbede",
	"color-teal-spabattical-400": "#2597d0",
	"color-teal-spabattical-450": "#007db8",
	"color-teal-spabattical-500": "#007db8",
	"color-teal-spabattical-600": "#007db8",
	"color-teal-spabattical-700": "#215d82",
	"color-teal-spabattical-800": "#215d82",
	"color-teal-spabattical-900": "#215d82",
	"color-green-matchacado-0": "#d0e2a8",
	"color-green-matchacado-50": "#d0e2a8",
	"color-green-matchacado-100": "#d0e2a8",
	"color-green-matchacado-200": "#d0e2a8",
	"color-green-matchacado-300": "#a8bb63",
	"color-green-matchacado-400": "#83a343",
	"color-green-matchacado-450": "#517d3b",
	"color-green-matchacado-500": "#517d3b",
	"color-green-matchacado-600": "#517d3b",
	"color-green-matchacado-700": "#265926",
	"color-green-matchacado-800": "#265926",
	"color-green-matchacado-900": "#265926",
	"color-purple-mysticool-0": "#fcd8fc",
	"color-purple-mysticool-50": "#fcd8fc",
	"color-purple-mysticool-100": "#fcd8fc",
	"color-purple-mysticool-200": "#fcd8fc",
	"color-purple-mysticool-300": "#efadef",
	"color-purple-mysticool-400": "#c65dd0",
	"color-purple-mysticool-450": "#8f4696",
	"color-purple-mysticool-500": "#8f4696",
	"color-purple-mysticool-600": "#8f4696",
	"color-purple-mysticool-700": "#6d4270",
	"color-purple-mysticool-800": "#6d4270",
	"color-purple-mysticool-900": "#6d4270",
	"color-orange-firetini-0": "#fde7c9",
	"color-orange-firetini-50": "#fde7c9",
	"color-orange-firetini-100": "#fde7c9",
	"color-orange-firetini-200": "#fde7c9",
	"color-orange-firetini-300": "#fbc55b",
	"color-orange-firetini-400": "#fea239",
	"color-orange-firetini-450": "#f06d22",
	"color-orange-firetini-500": "#f06d22",
	"color-orange-firetini-600": "#f06d22",
	"color-orange-firetini-700": "#9b4b1c",
	"color-orange-firetini-800": "#9b4b1c",
	"color-orange-firetini-900": "#9b4b1c",
	"color-yellow-caramellow-0": "#fde7c9",
	"color-yellow-caramellow-50": "#fde7c9",
	"color-yellow-caramellow-100": "#fde7c9",
	"color-yellow-caramellow-200": "#fbc55b",
	"color-yellow-caramellow-300": "#fbc55b",
	"color-yellow-caramellow-400": "#fea239",
	"color-yellow-caramellow-450": "#f06d22",
	"color-yellow-caramellow-500": "#f06d22",
	"color-yellow-caramellow-600": "#f06d22",
	"color-yellow-caramellow-700": "#9b4b1c",
	"color-yellow-caramellow-800": "#9b4b1c",
	"color-yellow-caramellow-900": "#9b4b1c",
	"color-white-mochimalist-0": "#ffffff",
	"color-gray-roboflow-50": "#fffef7",
	"color-gray-roboflow-100": "#f5f4ed",
	"color-gray-roboflow-200": "#e8e7e1",
	"color-gray-roboflow-300": "#c7c6c1",
	"color-gray-roboflow-400": "#969292",
	"color-gray-roboflow-500": "#757570",
	"color-gray-roboflow-550": "#636361",
	"color-gray-roboflow-600": "#4c4c4a",
	"color-gray-roboflow-700": "#2e2e2d",
	"color-gray-roboflow-800": "#1c1b1b",
	"color-black-cosmicore-900": "#000000",
	"color-transparent": "rgba(255, 255, 255, 0)",
	"color-text-default": "#ffffff",
	"color-text-subtle": "#969292",
	"color-text-success": "#d0e2a8",
	"color-text-disabled": "#4c4c4a",
	"color-text-error": "#ffd3d1",
	"color-text-warning": "#fde7c9",
	"color-text-inverse": "#000000",
	"color-text-dark": "#000000",
	"color-text-light": "#ffffff",
	"color-text-shopping": "#c5eaf7",
	"color-text-link": "#c5eaf7",
	"color-icon-default": "#ffffff",
	"color-icon-subtle": "#969292",
	"color-icon-subtle-accent": "#969292",
	"color-icon-success": "#d0e2a8",
	"color-icon-disabled": "#4c4c4a",
	"color-icon-error": "#ffd3d1",
	"color-icon-warning": "#fde7c9",
	"color-icon-info": "#c5eaf7",
	"color-icon-recommendation": "#fcd8fc",
	"color-icon-inverse": "#000000",
	"color-icon-shopping": "#ffffff",
	"color-icon-brand-primary": "#e60023",
	"color-icon-light": "#ffffff",
	"color-icon-dark": "#000000",
	"color-background-default": "#000000",
	"color-background-info-base": "#7cbede",
	"color-background-info-weak": "#215d82",
	"color-background-info-strong": "#7cbede",
	"color-background-error-base": "#ff9494",
	"color-background-error-weak": "#8a0f0f",
	"color-background-warning-base": "#fbc55b",
	"color-background-warning-weak": "#9b4b1c",
	"color-background-success-base": "#a8bb63",
	"color-background-success-weak": "#265926",
	"color-background-recommendation-base": "#efadef",
	"color-background-recommendation-weak": "#6d4270",
	"color-background-neutral": "#7cbede",
	"color-background-shopping": "#000000",
	"color-background-primary-base": "#e60023",
	"color-background-primary-weak": "#e60023",
	"color-background-primary-strong": "#e60023",
	"color-background-secondary-base": "#757570",
	"color-background-secondary-weak": "#757570",
	"color-background-secondary-strong": "#757570",
	"color-background-tertiary-base": "#c7c6c1",
	"color-background-tertiary-weak": "#c7c6c1",
	"color-background-tertiary-strong": "#c7c6c1",
	"color-background-selected-base": "#e8e7e1",
	"color-background-selected-weak": "#e8e7e1",
	"color-background-selected-strong": "#e8e7e1",
	"color-background-inverse-base": "#ffffff",
	"color-background-inverse-strong": "#ffffff",
	"color-background-brand": "#e60023",
	"color-background-education": "#7cbede",
	"color-background-wash-dark": "#000000",
	"color-background-wash-light": "#000000",
	"color-background-dark": "rgba(0, 0, 0, 0.8)",
	"color-background-light": "rgba(255, 255, 255, 0.9)",
	"color-background-elevation-accent": "#1c1b1b",
	"color-background-elevation-floating": "#2e2e2d",
	"color-background-elevation-raised": "#2e2e2d",
	"color-background-badge-neutral-default": "#636361",
	"color-background-badge-neutral-hover": "#555553",
	"color-background-badge-info-default": "#215d82",
	"color-background-badge-info-hover": "#1e4b67",
	"color-background-badge-error-default": "#8a0f0f",
	"color-background-badge-error-hover": "#6e0c0c",
	"color-background-badge-warning-default": "#9b4b1c",
	"color-background-badge-warning-hover": "#7e401b",
	"color-background-badge-success-default": "#265926",
	"color-background-badge-success-hover": "#214521",
	"color-background-badge-recommendation-default": "#6d4270",
	"color-background-badge-recommendation-hover": "#57355a",
	"color-background-badge-lightwash-default": "rgba(255, 255, 255, 0.9)",
	"color-background-badge-lightwash-hover": "rgba(248, 247, 242, 0.95)",
	"color-background-badge-darkwash-default": "rgba(0, 0, 0, 0.8)",
	"color-background-badge-darkwash-hover": "rgba(36, 36, 35, 0.85)",
	"color-background-button-primary-default": "#e60023",
	"color-background-button-primary-hover": "#bd001c",
	"color-background-button-primary-active": "#9e0017",
	"color-background-button-primary-disabled": "#2e2e2d",
	"color-background-button-secondary-default": "#757570",
	"color-background-button-secondary-hover": "#626260",
	"color-background-button-secondary-active": "#585856",
	"color-background-button-secondary-disabled": "#2e2e2d",
	"color-background-button-tertiary-default": "rgba(0, 0, 0, 0)",
	"color-background-button-tertiary-hover": "rgba(36, 36, 35, 0.85)",
	"color-background-button-tertiary-active": "rgba(57, 57, 55, 0.9)",
	"color-background-button-tertiary-disabled-default": "rgba(0, 0, 0, 0)",
	"color-background-button-tertiary-disabled-selected": "#2e2e2d",
	"color-background-button-gray-default": "#c7c6c1",
	"color-background-button-gray-hover": "#b2b0ae",
	"color-background-button-gray-active": "#969292",
	"color-background-button-gray-disabled": "#2e2e2d",
	"color-background-button-shopping-default": "#e60023",
	"color-background-button-shopping-hover": "#bd001c",
	"color-background-button-shopping-active": "#9e0017",
	"color-background-button-shopping-disabled": "#2e2e2d",
	"color-background-button-semitransparentdefault-default": "rgba(0, 0, 0, 0.8)",
	"color-background-button-semitransparentdefault-hover": "rgba(36, 36, 35, 0.85)",
	"color-background-button-semitransparentdefault-active": "rgba(57, 57, 55, 0.9)",
	"color-background-button-semitransparentdefault-disabled": "#2e2e2d",
	"color-background-button-semitransparentwhite-default": "rgba(255, 255, 255, 0.9)",
	"color-background-button-semitransparentwhite-hover": "rgba(248, 247, 242, 0.95)",
	"color-background-button-semitransparentwhite-active": "#ebebe5",
	"color-background-button-semitransparentwhite-disabled-default": "rgba(0, 0, 0, 0.8)",
	"color-background-button-semitransparentwhite-disabled-selected": "#2e2e2d",
	"color-background-button-semitransparentdark-default": "rgba(0, 0, 0, 0.8)",
	"color-background-button-semitransparentdark-hover": "#f8f7f2",
	"color-background-button-semitransparentdark-active": "#ebebe5",
	"color-background-button-semitransparentdark-disabled-default": "rgba(0, 0, 0, 0.39)",
	"color-background-button-semitransparentdark-disabled-selected": "#2e2e2d",
	"color-background-button-transparentdarkbackground-default": "rgba(255, 255, 255, 0)",
	"color-background-button-transparentdarkbackground-hover": "rgba(248, 247, 242, 0.95)",
	"color-background-button-transparentdarkbackground-active": "#ebebe5",
	"color-background-button-transparentdarkbackground-disabled": "#2e2e2d",
	"color-background-button-white-default": "#000000",
	"color-background-button-white-hover": "#242423",
	"color-background-button-white-active": "#393937",
	"color-background-button-white-disabled": "#2e2e2d",
	"color-background-button-selected-default": "#e8e7e1",
	"color-background-button-selected-disabled": "#2e2e2d",
	"color-background-button-disabled-default": "#2e2e2d",
	"color-background-checkbox-checked-default": "#e8e7e1",
	"color-background-checkbox-checked-error": "#8a0f0f",
	"color-background-checkbox-disabled": "#2e2e2d",
	"color-background-checkbox-unchecked-default": "#000000",
	"color-background-checkbox-unchecked-error": "#000000",
	"color-background-datepicker-container": "#212121",
	"color-background-datepicker-range-default": "#757570",
	"color-background-datepicker-range-hover": "#626260",
	"color-background-datepicker-range-active": "#585856",
	"color-background-datepicker-button-unselected-default": "#2e2e2d",
	"color-background-datepicker-button-unselected-hover": "#242423",
	"color-background-datepicker-button-unselected-active": "#393937",
	"color-background-datepicker-button-selected-default": "#e8e7e1",
	"color-background-datepicker-button-selected-hover": "#d6d4cd",
	"color-background-datepicker-button-selected-active": "#c2c1bc",
	"color-background-iconbutton-semitransparentdark-default": "rgba(0, 0, 0, 0.8)",
	"color-background-iconbutton-semitransparentdark-hover": "rgba(36, 36, 35, 0.85)",
	"color-background-iconbutton-semitransparentdark-active": "rgba(57, 57, 55, 0.9)",
	"color-background-iconbutton-semitransparentdark-disabled-default": "rgba(0, 0, 0, 0.39)",
	"color-background-iconbutton-semitransparentdark-disabled-selected": "#2e2e2d",
	"color-background-searchguide-default-10": "#6d4270",
	"color-background-searchguide-default-11": "#000000",
	"color-background-searchguide-default-01": "#007db8",
	"color-background-searchguide-default-02": "#517d3b",
	"color-background-searchguide-default-03": "#f06d22",
	"color-background-searchguide-default-04": "#b2001a",
	"color-background-searchguide-default-05": "#8f4696",
	"color-background-searchguide-default-06": "#215d82",
	"color-background-searchguide-default-07": "#265926",
	"color-background-searchguide-default-08": "#9b4b1c",
	"color-background-searchguide-default-09": "#8a0f0f",
	"color-background-searchguide-hover-10": "#57355a",
	"color-background-searchguide-hover-11": "#242423",
	"color-background-searchguide-hover-01": "#086c9b",
	"color-background-searchguide-hover-02": "#476836",
	"color-background-searchguide-hover-03": "#e05f15",
	"color-background-searchguide-hover-04": "#940016",
	"color-background-searchguide-hover-05": "#793e7e",
	"color-background-searchguide-hover-06": "#1e4b67",
	"color-background-searchguide-hover-07": "#214521",
	"color-background-searchguide-hover-08": "#7e401b",
	"color-background-searchguide-hover-09": "#6e0c0c",
	"color-background-searchguide-active-10": "#422843",
	"color-background-searchguide-active-11": "#393937",
	"color-background-searchguide-active-01": "#0e5c81",
	"color-background-searchguide-active-02": "#3c5530",
	"color-background-searchguide-active-03": "#ca5816",
	"color-background-searchguide-active-04": "#7a0012",
	"color-background-searchguide-active-05": "#643569",
	"color-background-searchguide-active-06": "#1a394d",
	"color-background-searchguide-active-07": "#1a321a",
	"color-background-searchguide-active-08": "#6b381a",
	"color-background-searchguide-active-09": "#530909",
	"color-background-switch-default-unselected": "#000000",
	"color-background-switch-default-selected": "#e8e7e1",
	"color-background-switch-disabled-unselected": "#000000",
	"color-background-switch-disabled-selected": "#2e2e2d",
	"color-background-switch-hover-selected": "#d6d4cd",
	"color-background-switch-hover-unselected": "#242423",
	"color-background-switch-pressed-selected": "#c2c1bc",
	"color-background-switch-pressed-unselected": "#393937",
	"color-background-tabs-default-base": "#000000",
	"color-background-tabs-default-hover": "#242423",
	"color-background-tabs-default-active": "#393937",
	"color-background-tabs-transparent-base": "#000000",
	"color-background-tabs-transparent-hover": "#242423",
	"color-background-tabs-transparent-active": "#393937",
	"color-border-container": "#757570",
	"color-border-default": "#c7c6c1",
	"color-border-error": "#ff9494",
	"color-border-focus": "#c5eaf7",
	"color-border-badge-default": "#000000",
	"color-border-badge-light": "#ffffff",
	"color-border-badge-dark": "#000000",
	"color-border-button-hover": "#b2b0ae",
	"color-border-button-pressed": "#969292",
	"color-border-checkbox-checked-default": "#e8e7e1",
	"color-border-checkbox-checked-error": "#8a0f0f",
	"color-border-checkbox-disabled": "#2e2e2d",
	"color-border-checkbox-unchecked-default": "#c7c6c1",
	"color-border-checkbox-unchecked-error": "#ff9494",
	"color-border-checkbox-unchecked-hover": "#b2b0ae",
	"color-border-switch-focus-inner": "#000000",
	"color-border-switch-focus-outer": "#c5eaf7",
	"elevation-floating": "0px 4px 16px 0px rgba(0,0,0,0.2), 0px 1px 4px 0px rgba(0,0,0,0.2)",
	"elevation-raised-top": "0px 2px 8px 0px rgba(0,0,0,0.3), 0px 1px 2px 0px rgba(0,0,0,0.3)",
	"elevation-raised-bottom": "0px -2px 8px 0px rgba(0,0,0,0.3), 0px -1px 2px 0px rgba(0,0,0,0.3)",
	"font-size-100": "12px",
	"font-size-200": "14px",
	"font-size-300": "16px",
	"font-size-400": "20px",
	"font-size-500": "28px",
	"font-size-600": "36px",
	"font-weight-normal": "400",
	"font-weight-semibold": "500",
	"font-weight-bold": "700",
	"font-family-default-latin": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"font-family-default-japanese": "'SF Pro JP', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'Hiragino Kaku Gothic Pro', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"font-family-code": "'SF Mono', 'Segoe UI Mono', 'Roboto Mono', 'Ubuntu Mono', Menlo, Consolas, Courier, monospace",
	"font-weight-datepicker-date": "400",
	"font-weight-datepicker-heading": "500",
	"font-size-datepicker-date": "16px",
	"font-size-datepicker-heading": "20px",
	"font-family-datepicker-date": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"font-family-datepicker-heading": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"font-letterspacing-datepicker-date": "0",
	"font-letterspacing-datepicker-heading": "0",
	"font-lineheight-datepicker-date": "22px",
	"font-lineheight-datepicker-heading": "24px",
	date: date$1,
	"font-textdecoration-datepicker-heading": "none",
	"opacity-100": "0.04",
	"opacity-200": "0.2",
	"opacity-300": "0.4",
	"opacity-400": "0.8",
	"opacity-500": "0.9",
	"opacity-0": "0",
	"rounding-100": "4px",
	"rounding-200": "8px",
	"rounding-300": "12px",
	"rounding-400": "16px",
	"rounding-500": "20px",
	"rounding-600": "24px",
	"rounding-700": "28px",
	"rounding-800": "32px",
	"rounding-0": "0px",
	"rounding-pill": "999px",
	"rounding-circle": "50%",
	"rounding-datepicker-container": "16px",
	"rounding-datepicker-days": "16px",
	"rounding-datepicker-navigation": "12px",
	"rounding-datepicker-range-start": "16px 0px 0px 16px",
	"rounding-datepicker-range-middle": "0px",
	"rounding-datepicker-range-end": "0px 16px 16px 0px",
	"space-100": "4px",
	"space-200": "8px",
	"space-300": "12px",
	"space-400": "16px",
	"space-500": "20px",
	"space-600": "24px",
	"space-700": "28px",
	"space-800": "32px",
	"space-900": "36px",
	"space-1000": "40px",
	"space-1100": "44px",
	"space-1200": "48px",
	"space-1300": "52px",
	"space-1400": "56px",
	"space-1500": "60px",
	"space-1600": "64px",
	"space-0": "0px",
	"space-negative-100": "-4px",
	"space-negative-200": "-8px",
	"space-negative-300": "-12px",
	"space-negative-400": "-16px",
	"space-negative-500": "-20px",
	"space-negative-600": "-24px",
	"space-negative-700": "-28px",
	"space-negative-800": "-32px",
	"space-negative-900": "-36px",
	"space-negative-1000": "-40px",
	"space-negative-1100": "-44px",
	"space-negative-1200": "-48px",
	"space-negative-1300": "-52px",
	"space-negative-1400": "-56px",
	"space-negative-1500": "-60px",
	"space-negative-1600": "-64px"
};

var vrCkLineHeightDesignTokens = {
	"base-font-lineheight-110": "1.1",
	"base-font-lineheight-120": "1.2",
	"base-font-lineheight-130": "1.3",
	"base-font-lineheight-140": "1.4",
	"base-font-lineheight-150": "1.5",
	"base-font-lineheight-160": "1.6",
	"base-font-lineheight-170": "1.7",
	"base-font-lineheight-180": "1.8",
	"sema-font-lineheight-xl": "1.5",
	"sema-font-lineheight-lg": "1.5",
	"sema-font-lineheight-md": "1.5",
	"sema-font-lineheight-sm": "1.3",
	"sema-font-lineheight-xs": "1.2",
	"sema-font-lineheight-heading-lg": "43px",
	"sema-font-lineheight-heading-md": "34px",
	"sema-font-lineheight-heading-sm": "26px",
	"sema-font-lineheight-heading-xs": "24px",
	"sema-font-lineheight-heading-xxs": "21px",
	"sema-font-lineheight-ui-lg": "26px",
	"sema-font-lineheight-ui-md": "21px",
	"sema-font-lineheight-ui-sm": "18px",
	"sema-font-lineheight-ui-xs": "18px",
	"sema-font-lineheight-body-lg": "30px",
	"sema-font-lineheight-body-md": "24px",
	"sema-font-lineheight-body-sm": "21px",
	"sema-font-lineheight-body-xs": "18px",
	"sema-font-lineheight-compact-xs": "16px",
	"font-lineheight-datepicker-date": "24px",
	"font-lineheight-datepicker-heading": "26px"
};

var vrDefaultLineHeightDesignTokens = {
	"base-font-lineheight-110": "1.1",
	"base-font-lineheight-120": "1.2",
	"base-font-lineheight-130": "1.3",
	"base-font-lineheight-140": "1.4",
	"base-font-lineheight-150": "1.5",
	"base-font-lineheight-160": "1.6",
	"base-font-lineheight-170": "1.7",
	"base-font-lineheight-180": "1.8",
	"sema-font-lineheight-xl": "1.5",
	"sema-font-lineheight-lg": "1.4",
	"sema-font-lineheight-md": "1.3",
	"sema-font-lineheight-sm": "1.2",
	"sema-font-lineheight-xs": "1.1",
	"sema-font-lineheight-heading-lg": "40px",
	"sema-font-lineheight-heading-md": "31px",
	"sema-font-lineheight-heading-sm": "24px",
	"sema-font-lineheight-heading-xs": "22px",
	"sema-font-lineheight-heading-xxs": "20px",
	"sema-font-lineheight-ui-lg": "24px",
	"sema-font-lineheight-ui-md": "19px",
	"sema-font-lineheight-ui-sm": "17px",
	"sema-font-lineheight-ui-xs": "16px",
	"sema-font-lineheight-body-lg": "28px",
	"sema-font-lineheight-body-md": "22px",
	"sema-font-lineheight-body-sm": "20px",
	"sema-font-lineheight-body-xs": "17px",
	"sema-font-lineheight-compact-xs": "14px",
	"font-lineheight-datepicker-date": "22px",
	"font-lineheight-datepicker-heading": "24px"
};

var vrJaLineHeightDesignTokens = {
	"base-font-lineheight-110": "1.1",
	"base-font-lineheight-120": "1.2",
	"base-font-lineheight-130": "1.3",
	"base-font-lineheight-140": "1.4",
	"base-font-lineheight-150": "1.5",
	"base-font-lineheight-160": "1.6",
	"base-font-lineheight-170": "1.7",
	"base-font-lineheight-180": "1.8",
	"sema-font-lineheight-xl": "1.6",
	"sema-font-lineheight-lg": "1.6",
	"sema-font-lineheight-md": "1.5",
	"sema-font-lineheight-sm": "1.3",
	"sema-font-lineheight-xs": "1.2",
	"sema-font-lineheight-heading-lg": "43px",
	"sema-font-lineheight-heading-md": "34px",
	"sema-font-lineheight-heading-sm": "26px",
	"sema-font-lineheight-heading-xs": "26px",
	"sema-font-lineheight-heading-xxs": "22px",
	"sema-font-lineheight-ui-lg": "26px",
	"sema-font-lineheight-ui-md": "21px",
	"sema-font-lineheight-ui-sm": "18px",
	"sema-font-lineheight-ui-xs": "18px",
	"sema-font-lineheight-body-lg": "32px",
	"sema-font-lineheight-body-md": "26px",
	"sema-font-lineheight-body-sm": "22px",
	"sema-font-lineheight-body-xs": "19px",
	"sema-font-lineheight-compact-xs": "16px",
	"font-lineheight-datepicker-date": "26px",
	"font-lineheight-datepicker-heading": "26px"
};

var vrTallLineHeightDesignTokens = {
	"base-font-lineheight-110": "1.1",
	"base-font-lineheight-120": "1.2",
	"base-font-lineheight-130": "1.3",
	"base-font-lineheight-140": "1.4",
	"base-font-lineheight-150": "1.5",
	"base-font-lineheight-160": "1.6",
	"base-font-lineheight-170": "1.7",
	"base-font-lineheight-180": "1.8",
	"sema-font-lineheight-xl": "1.7",
	"sema-font-lineheight-lg": "1.7",
	"sema-font-lineheight-md": "1.6",
	"sema-font-lineheight-sm": "1.4",
	"sema-font-lineheight-xs": "1.3",
	"sema-font-lineheight-heading-lg": "46px",
	"sema-font-lineheight-heading-md": "36px",
	"sema-font-lineheight-heading-sm": "28px",
	"sema-font-lineheight-heading-xs": "27px",
	"sema-font-lineheight-heading-xxs": "24px",
	"sema-font-lineheight-ui-lg": "28px",
	"sema-font-lineheight-ui-md": "22px",
	"sema-font-lineheight-ui-sm": "20px",
	"sema-font-lineheight-ui-xs": "20px",
	"sema-font-lineheight-body-lg": "34px",
	"sema-font-lineheight-body-md": "27px",
	"sema-font-lineheight-body-sm": "24px",
	"sema-font-lineheight-body-xs": "22px",
	"sema-font-lineheight-compact-xs": "17px",
	"font-lineheight-datepicker-date": "27px",
	"font-lineheight-datepicker-heading": "28px"
};

var vrThLineHeightDesignTokens = {
	"base-font-lineheight-110": "1.1",
	"base-font-lineheight-120": "1.2",
	"base-font-lineheight-130": "1.3",
	"base-font-lineheight-140": "1.4",
	"base-font-lineheight-150": "1.5",
	"base-font-lineheight-160": "1.6",
	"base-font-lineheight-170": "1.7",
	"base-font-lineheight-180": "1.8",
	"sema-font-lineheight-xl": "1.8",
	"sema-font-lineheight-lg": "1.8",
	"sema-font-lineheight-md": "1.7",
	"sema-font-lineheight-sm": "1.5",
	"sema-font-lineheight-xs": "1.3",
	"sema-font-lineheight-heading-lg": "47px",
	"sema-font-lineheight-heading-md": "36px",
	"sema-font-lineheight-heading-sm": "30px",
	"sema-font-lineheight-heading-xs": "29px",
	"sema-font-lineheight-heading-xxs": "25px",
	"sema-font-lineheight-ui-lg": "30px",
	"sema-font-lineheight-ui-md": "24px",
	"sema-font-lineheight-ui-sm": "21px",
	"sema-font-lineheight-ui-xs": "20px",
	"sema-font-lineheight-body-lg": "36px",
	"sema-font-lineheight-body-md": "29px",
	"sema-font-lineheight-body-sm": "25px",
	"sema-font-lineheight-body-xs": "22px",
	"sema-font-lineheight-compact-xs": "18px",
	"font-lineheight-datepicker-date": "29px",
	"font-lineheight-datepicker-heading": "30px"
};

var vrViLineHeightDesignTokens = {
	"base-font-lineheight-110": "1.1",
	"base-font-lineheight-120": "1.2",
	"base-font-lineheight-130": "1.3",
	"base-font-lineheight-140": "1.4",
	"base-font-lineheight-150": "1.5",
	"base-font-lineheight-160": "1.6",
	"base-font-lineheight-170": "1.7",
	"base-font-lineheight-180": "1.8",
	"sema-font-lineheight-xl": "1.4",
	"sema-font-lineheight-lg": "1.3",
	"sema-font-lineheight-md": "1.2",
	"sema-font-lineheight-sm": "1.2",
	"sema-font-lineheight-xs": "1.2",
	"sema-font-lineheight-heading-lg": "43px",
	"sema-font-lineheight-heading-md": "34px",
	"sema-font-lineheight-heading-sm": "24px",
	"sema-font-lineheight-heading-xs": "21px",
	"sema-font-lineheight-heading-xxs": "18px",
	"sema-font-lineheight-ui-lg": "24px",
	"sema-font-lineheight-ui-md": "19px",
	"sema-font-lineheight-ui-sm": "17px",
	"sema-font-lineheight-ui-xs": "14px",
	"sema-font-lineheight-body-lg": "26px",
	"sema-font-lineheight-body-md": "21px",
	"sema-font-lineheight-body-sm": "18px",
	"sema-font-lineheight-body-xs": "16px",
	"sema-font-lineheight-compact-xs": "14px",
	"font-lineheight-datepicker-date": "21px",
	"font-lineheight-datepicker-heading": "24px"
};

const date = {
	"default": {
		type: "textDecoration",
		value: "none",
		filePath: "tokens/vr-theme/sema/text/font.json",
		isSource: false,
		original: {
			type: "textDecoration",
			value: "{base.font.textdecoration.default}"
		},
		name: "default",
		attributes: {
		},
		path: [
			"sema",
			"font",
			"textdecoration",
			"body",
			"MD",
			"default"
		]
	},
	link: {
		type: "textDecoration",
		value: "underline",
		filePath: "tokens/vr-theme/sema/text/font.json",
		isSource: false,
		original: {
			type: "textDecoration",
			value: "{base.font.textdecoration.underline}"
		},
		name: "link",
		attributes: {
		},
		path: [
			"sema",
			"font",
			"textdecoration",
			"body",
			"MD",
			"link"
		]
	},
	emphasis: {
		type: "textDecoration",
		value: "none",
		filePath: "tokens/vr-theme/sema/text/font.json",
		isSource: false,
		original: {
			type: "textDecoration",
			value: "{base.font.textdecoration.default}"
		},
		name: "emphasis",
		attributes: {
		},
		path: [
			"sema",
			"font",
			"textdecoration",
			"body",
			"MD",
			"emphasis"
		]
	}
};
var vrLightColorDesignTokens = {
	"base-color-transparent": "rgba(255, 255, 255, 0)",
	"base-color-grayscale-0": "#ffffff",
	"base-color-grayscale-25": "#fffef7",
	"base-color-grayscale-50": "#f5f4ed",
	"base-color-grayscale-100": "#e8e7e1",
	"base-color-grayscale-150": "#c7c6c1",
	"base-color-grayscale-200": "#969292",
	"base-color-grayscale-250": "#757570",
	"base-color-grayscale-300": "#636361",
	"base-color-grayscale-350": "#4c4c4a",
	"base-color-grayscale-400": "#2e2e2d",
	"base-color-grayscale-450": "#1c1b1b",
	"base-color-grayscale-500": "#000000",
	"base-color-red-100": "#ffd3d1",
	"base-color-red-200": "#ff9494",
	"base-color-red-300": "#e60023",
	"base-color-red-400": "#b2001a",
	"base-color-red-500": "#8a0f0f",
	"base-color-purple-100": "#fcd8fc",
	"base-color-purple-200": "#efadef",
	"base-color-purple-300": "#c65dd0",
	"base-color-purple-400": "#8f4696",
	"base-color-purple-500": "#6d4270",
	"base-color-blue-100": "#c5eaf7",
	"base-color-blue-200": "#7cbede",
	"base-color-blue-300": "#2597d0",
	"base-color-blue-400": "#007db8",
	"base-color-blue-500": "#215d82",
	"base-color-green-100": "#d0e2a8",
	"base-color-green-200": "#a8bb63",
	"base-color-green-300": "#83a343",
	"base-color-green-400": "#517d3b",
	"base-color-green-500": "#265926",
	"base-color-orange-100": "#fde7c9",
	"base-color-orange-200": "#fbc55b",
	"base-color-orange-300": "#fea239",
	"base-color-orange-400": "#f06d22",
	"base-color-orange-500": "#9b4b1c",
	"base-color-pressed-grayscale-0": "#ebebe5",
	"base-color-pressed-grayscale-25": "#e7e6df",
	"base-color-pressed-grayscale-50": "#d8d7cf",
	"base-color-pressed-grayscale-100": "#c2c1bc",
	"base-color-pressed-grayscale-150": "#969292",
	"base-color-pressed-grayscale-200": "#747472",
	"base-color-pressed-grayscale-250": "#585856",
	"base-color-pressed-grayscale-300": "#464644",
	"base-color-pressed-grayscale-350": "#313130",
	"base-color-pressed-grayscale-400": "#585856",
	"base-color-pressed-grayscale-450": "#494946",
	"base-color-pressed-grayscale-500": "#393937",
	"base-color-pressed-red-100": "#f4a8a4",
	"base-color-pressed-red-200": "#ed5a5a",
	"base-color-pressed-red-300": "#9e0017",
	"base-color-pressed-red-400": "#7a0012",
	"base-color-pressed-red-500": "#530909",
	"base-color-pressed-purple-100": "#f8b5f8",
	"base-color-pressed-purple-200": "#da86da",
	"base-color-pressed-purple-300": "#9c4993",
	"base-color-pressed-purple-400": "#643569",
	"base-color-pressed-purple-500": "#422843",
	"base-color-pressed-blue-100": "#8ecfe6",
	"base-color-pressed-blue-200": "#4096bf",
	"base-color-pressed-blue-300": "#236586",
	"base-color-pressed-blue-400": "#0e5c81",
	"base-color-pressed-blue-500": "#1a394d",
	"base-color-pressed-green-100": "#a7b97e",
	"base-color-pressed-green-200": "#81904c",
	"base-color-pressed-green-300": "#677d3b",
	"base-color-pressed-green-400": "#3c5530",
	"base-color-pressed-green-500": "#1a321a",
	"base-color-pressed-orange-100": "#f4cc95",
	"base-color-pressed-orange-200": "#f1a613",
	"base-color-pressed-orange-300": "#e07f10",
	"base-color-pressed-orange-400": "#ca5816",
	"base-color-pressed-orange-500": "#6b381a",
	"base-color-hover-grayscale-0": "#f8f7f2",
	"base-color-hover-grayscale-25": "#f5f4ed",
	"base-color-hover-grayscale-50": "#e7e6df",
	"base-color-hover-grayscale-100": "#d6d4cd",
	"base-color-hover-grayscale-150": "#b2b0ae",
	"base-color-hover-grayscale-200": "#838181",
	"base-color-hover-grayscale-250": "#626260",
	"base-color-hover-grayscale-300": "#555553",
	"base-color-hover-grayscale-350": "#3e3e3c",
	"base-color-hover-grayscale-400": "#434342",
	"base-color-hover-grayscale-450": "#343332",
	"base-color-hover-grayscale-500": "#242423",
	"base-color-hover-red-100": "#fbbebb",
	"base-color-hover-red-200": "#f87777",
	"base-color-hover-red-300": "#bd001c",
	"base-color-hover-red-400": "#940016",
	"base-color-hover-red-500": "#6e0c0c",
	"base-color-hover-purple-100": "#fac7fa",
	"base-color-hover-purple-200": "#e599e5",
	"base-color-hover-purple-300": "#b04aa5",
	"base-color-hover-purple-400": "#793e7e",
	"base-color-hover-purple-500": "#57355a",
	"base-color-hover-blue-100": "#a8ddf0",
	"base-color-hover-blue-200": "#58a9d0",
	"base-color-hover-blue-300": "#2578a2",
	"base-color-hover-blue-400": "#086c9b",
	"base-color-hover-blue-500": "#1e4b67",
	"base-color-hover-green-100": "#bcd090",
	"base-color-hover-green-200": "#93a550",
	"base-color-hover-green-300": "#769041",
	"base-color-hover-green-400": "#476836",
	"base-color-hover-green-500": "#214521",
	"base-color-hover-orange-100": "#f9d9ae",
	"base-color-hover-orange-200": "#f8b430",
	"base-color-hover-orange-300": "#f48c15",
	"base-color-hover-orange-400": "#e05f15",
	"base-color-hover-orange-500": "#7e401b",
	"base-font-lineheight-110": "1.1",
	"base-font-lineheight-120": "1.2",
	"base-font-lineheight-130": "1.3",
	"base-font-lineheight-140": "1.4",
	"base-font-lineheight-150": "1.5",
	"base-font-lineheight-160": "1.6",
	"base-font-lineheight-170": "1.7",
	"base-font-lineheight-180": "1.8",
	"base-font-weight-400": "400",
	"base-font-weight-500": "500",
	"base-font-weight-700": "700",
	"base-font-size-12": "12px",
	"base-font-size-14": "14px",
	"base-font-size-16": "16px",
	"base-font-size-20": "20px",
	"base-font-size-28": "28px",
	"base-font-size-36": "36px",
	"base-font-family-default-latin": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"base-font-family-default-japanese": "'SF Pro JP', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'Hiragino Kaku Gothic Pro', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"base-font-family-code": "'SF Mono', 'Segoe UI Mono', 'Roboto Mono', 'Ubuntu Mono', Menlo, Consolas, Courier, monospace",
	"base-font-letterspacing-0": "0",
	"base-font-letterspacing-1": "1px",
	"base-font-letterspacing-05": "0.5px",
	"base-font-letterspacing-negative-1": "-1px",
	"base-font-letterspacing-negative-05": "-0.5px",
	"base-font-textdecoration-default": "none",
	"base-font-textdecoration-underline": "underline",
	"base-rounding-unit": "4px",
	"base-space-unit": "4px",
	"base-motion-duration-0": "0ms",
	"base-motion-duration-50": "50ms",
	"base-motion-duration-100": "100ms",
	"base-motion-duration-150": "150ms",
	"base-motion-duration-200": "200ms",
	"base-motion-duration-300": "300ms",
	"base-motion-duration-400": "400ms",
	"base-motion-duration-500": "500ms",
	"base-motion-duration-600": "600ms",
	"base-motion-duration-700": "700ms",
	"base-motion-duration-900": "900ms",
	"base-motion-easing-linear": "cubic-bezier(0, 0, 1, 1)",
	"base-motion-easing-expressive": "cubic-bezier(0.55, 0, 0, 1)",
	"base-motion-easing-lateral": "cubic-bezier(0.8, 0, 0.2, 1)",
	"base-motion-easing-bounce": "cubic-bezier(0, 0.35, 0, 1.25)",
	"base-motion-easing-enter": "cubic-bezier(0.05, 0.7, 0.1, 1)",
	"base-motion-easing-exit": "cubic-bezier(0.3, 0, 0.8, 0.15)",
	"sema-color-background-default": "#ffffff",
	"sema-color-background-primary": "#e60023",
	"sema-color-background-secondary": "#e8e7e1",
	"sema-color-background-tertiary": "#757570",
	"sema-color-background-selected": "#000000",
	"sema-color-background-education": "#007db8",
	"sema-color-background-elevation": "#ffffff",
	"sema-color-background-scrim": "#f5f4ed",
	"sema-color-background-inverse": "#000000",
	"sema-color-background-light": "#ffffff",
	"sema-color-background-dark": "#000000",
	"sema-color-background-disabled": "#e8e7e1",
	"sema-color-background-transparent": "rgba(255, 255, 255, 0)",
	"sema-color-background-info-default": "#007db8",
	"sema-color-background-info-weak": "#c5eaf7",
	"sema-color-background-neutral-default": "#757570",
	"sema-color-background-neutral-weak": "#c7c6c1",
	"sema-color-background-recommendation-default": "#8f4696",
	"sema-color-background-recommendation-weak": "#fcd8fc",
	"sema-color-background-success-default": "#517d3b",
	"sema-color-background-success-weak": "#d0e2a8",
	"sema-color-background-warning-default": "#9b4b1c",
	"sema-color-background-warning-weak": "#fde7c9",
	"sema-color-background-error-default": "#b2001a",
	"sema-color-background-error-weak": "#ffd3d1",
	"sema-color-background-wash-default": "rgba(255, 255, 255, 0.9)",
	"sema-color-background-wash-dark": "rgba(0, 0, 0, 0.8)",
	"sema-color-background-wash-light": "rgba(255, 255, 255, 0.9)",
	"sema-color-background-wash-image-tint": "rgba(0, 0, 0, 0.04)",
	"sema-color-background-wash-scrims-default": "rgba(117, 117, 112, 0.4)",
	"sema-color-background-wash-scrims-opaque": "rgba(245, 244, 237, 0.8)",
	"sema-color-background-gradient-darken-bottom-weak": "rgba(0, 0, 0, 0)",
	"sema-color-background-gradient-darken-bottom-strong": "rgba(0, 0, 0, 0)",
	"sema-color-background-gradient-darken-top-weak": "rgba(0, 0, 0, 0)",
	"sema-color-background-gradient-darken-top-strong": "rgba(0, 0, 0, 0)",
	"sema-color-border-decorative": "#c7c6c1",
	"sema-color-border-interactive": "#757570",
	"sema-color-border-selected": "#000000",
	"sema-color-border-disabled": "#c7c6c1",
	"sema-color-border-success": "#517d3b",
	"sema-color-border-error": "#b2001a",
	"sema-color-border-inverse": "#ffffff",
	"sema-color-border-focus-outer-default": "#007db8",
	"sema-color-border-focus-outer-inverse": "#c5eaf7",
	"sema-color-border-focus-outer-dark": "#007db8",
	"sema-color-border-focus-outer-light": "#c5eaf7",
	"sema-color-border-focus-inner-default": "#ffffff",
	"sema-color-border-focus-inner-inverse": "#000000",
	"sema-color-border-focus-inner-dark": "#000000",
	"sema-color-border-focus-inner-light": "#ffffff",
	"sema-color-text-default": "#000000",
	"sema-color-text-neutral": "#4c4c4a",
	"sema-color-text-subtle": "#636361",
	"sema-color-text-link": "#215d82",
	"sema-color-text-info": "#215d82",
	"sema-color-text-recommendation": "#6d4270",
	"sema-color-text-success": "#265926",
	"sema-color-text-warning": "#9b4b1c",
	"sema-color-text-error": "#8a0f0f",
	"sema-color-text-primary": "#e60023",
	"sema-color-text-inverse": "#ffffff",
	"sema-color-text-light": "#ffffff",
	"sema-color-text-dark": "#000000",
	"sema-color-text-disabled": "#969292",
	"sema-color-icon-default": "#000000",
	"sema-color-icon-neutral": "#4c4c4a",
	"sema-color-icon-subtle": "#636361",
	"sema-color-icon-link": "#215d82",
	"sema-color-icon-info": "#215d82",
	"sema-color-icon-recommendation": "#6d4270",
	"sema-color-icon-success": "#265926",
	"sema-color-icon-warning": "#9b4b1c",
	"sema-color-icon-error": "#8a0f0f",
	"sema-color-icon-primary": "#e60023",
	"sema-color-icon-inverse": "#ffffff",
	"sema-color-icon-light": "#ffffff",
	"sema-color-icon-dark": "#000000",
	"sema-color-icon-disabled": "#969292",
	"sema-color-dataviz-10": "#005062",
	"sema-color-dataviz-11": "#de2c62",
	"sema-color-dataviz-12": "#660e00",
	"sema-color-dataviz-01": "#003c96",
	"sema-color-dataviz-02": "#11a69c",
	"sema-color-dataviz-03": "#924af7",
	"sema-color-dataviz-04": "#d17711",
	"sema-color-dataviz-05": "#0081fe",
	"sema-color-dataviz-06": "#ff5383",
	"sema-color-dataviz-07": "#00ab55",
	"sema-color-dataviz-08": "#400387",
	"sema-color-dataviz-09": "#f2681f",
	"sema-color-hover-background-default": "#f8f7f2",
	"sema-color-hover-background-primary": "#bd001c",
	"sema-color-hover-background-secondary": "#d6d4cd",
	"sema-color-hover-background-tertiary": "#626260",
	"sema-color-hover-background-selected": "#242423",
	"sema-color-hover-background-education": "#086c9b",
	"sema-color-hover-background-elevation": "#f8f7f2",
	"sema-color-hover-background-scrim": "#e7e6df",
	"sema-color-hover-background-inverse": "#242423",
	"sema-color-hover-background-light": "#f8f7f2",
	"sema-color-hover-background-dark": "#242423",
	"sema-color-hover-background-info-default": "#086c9b",
	"sema-color-hover-background-info-weak": "#a8ddf0",
	"sema-color-hover-background-neutral-default": "#626260",
	"sema-color-hover-background-neutral-weak": "#b2b0ae",
	"sema-color-hover-background-recommendation-default": "#793e7e",
	"sema-color-hover-background-recommendation-weak": "#fac7fa",
	"sema-color-hover-background-success-default": "#476836",
	"sema-color-hover-background-success-weak": "#bcd090",
	"sema-color-hover-background-warning-default": "#7e401b",
	"sema-color-hover-background-warning-weak": "#f9d9ae",
	"sema-color-hover-background-error-default": "#940016",
	"sema-color-hover-background-error-weak": "#fbbebb",
	"sema-color-hover-background-wash-default": "rgba(248, 247, 242, 0.95)",
	"sema-color-hover-background-wash-dark": "rgba(36, 36, 35, 0.85)",
	"sema-color-hover-background-wash-light": "rgba(248, 247, 242, 0.95)",
	"sema-color-hover-background-wash-image-tint": "rgba(36, 36, 35, 0.09)",
	"sema-color-hover-background-wash-scrims-default": "rgba(98, 98, 96, 0.45)",
	"sema-color-hover-background-wash-scrims-opaque": "rgba(231, 230, 223, 0.85)",
	"sema-color-hover-border-decorative": "#b2b0ae",
	"sema-color-hover-border-interactive": "#626260",
	"sema-color-hover-border-selected": "#242423",
	"sema-color-hover-border-success": "#476836",
	"sema-color-hover-border-error": "#940016",
	"sema-color-hover-border-inverse": "#f8f7f2",
	"sema-color-hover-text-default": "#242423",
	"sema-color-hover-text-neutral": "#3e3e3c",
	"sema-color-hover-text-subtle": "#555553",
	"sema-color-hover-text-link": "#1e4b67",
	"sema-color-hover-text-info": "#1e4b67",
	"sema-color-hover-text-recommendation": "#57355a",
	"sema-color-hover-text-success": "#214521",
	"sema-color-hover-text-warning": "#7e401b",
	"sema-color-hover-text-error": "#6e0c0c",
	"sema-color-hover-text-primary": "#bd001c",
	"sema-color-hover-text-inverse": "#f8f7f2",
	"sema-color-hover-text-light": "#f8f7f2",
	"sema-color-hover-text-dark": "#242423",
	"sema-color-hover-icon-default": "#242423",
	"sema-color-hover-icon-neutral": "#3e3e3c",
	"sema-color-hover-icon-subtle": "#555553",
	"sema-color-hover-icon-link": "#1e4b67",
	"sema-color-hover-icon-info": "#1e4b67",
	"sema-color-hover-icon-recommendation": "#57355a",
	"sema-color-hover-icon-success": "#214521",
	"sema-color-hover-icon-warning": "#7e401b",
	"sema-color-hover-icon-error": "#6e0c0c",
	"sema-color-hover-icon-primary": "#bd001c",
	"sema-color-hover-icon-inverse": "#f8f7f2",
	"sema-color-hover-icon-light": "#f8f7f2",
	"sema-color-hover-icon-dark": "#242423",
	"sema-color-pressed-background-default": "#ebebe5",
	"sema-color-pressed-background-primary": "#9e0017",
	"sema-color-pressed-background-secondary": "#c2c1bc",
	"sema-color-pressed-background-tertiary": "#585856",
	"sema-color-pressed-background-selected": "#393937",
	"sema-color-pressed-background-education": "#0e5c81",
	"sema-color-pressed-background-elevation": "#ebebe5",
	"sema-color-pressed-background-scrim": "#d8d7cf",
	"sema-color-pressed-background-inverse": "#393937",
	"sema-color-pressed-background-light": "#ebebe5",
	"sema-color-pressed-background-dark": "#393937",
	"sema-color-pressed-background-info-default": "#0e5c81",
	"sema-color-pressed-background-info-weak": "#8ecfe6",
	"sema-color-pressed-background-neutral-default": "#585856",
	"sema-color-pressed-background-neutral-weak": "#969292",
	"sema-color-pressed-background-recommendation-default": "#643569",
	"sema-color-pressed-background-recommendation-weak": "#f8b5f8",
	"sema-color-pressed-background-success-default": "#3c5530",
	"sema-color-pressed-background-success-weak": "#a7b97e",
	"sema-color-pressed-background-warning-default": "#6b381a",
	"sema-color-pressed-background-warning-weak": "#f4cc95",
	"sema-color-pressed-background-error-default": "#7a0012",
	"sema-color-pressed-background-error-weak": "#f4a8a4",
	"sema-color-pressed-background-wash-default": "#ebebe5",
	"sema-color-pressed-background-wash-dark": "rgba(57, 57, 55, 0.9)",
	"sema-color-pressed-background-wash-light": "#ebebe5",
	"sema-color-pressed-background-wash-image-tint": "rgba(57, 57, 55, 0.14)",
	"sema-color-pressed-background-wash-scrims-default": "rgba(88, 88, 86, 0.5)",
	"sema-color-pressed-background-wash-scrims-opaque": "rgba(216, 215, 207, 0.9)",
	"sema-color-pressed-border-decorative": "#969292",
	"sema-color-pressed-border-interactive": "#585856",
	"sema-color-pressed-border-selected": "#393937",
	"sema-color-pressed-border-success": "#3c5530",
	"sema-color-pressed-border-error": "#7a0012",
	"sema-color-pressed-border-inverse": "#ebebe5",
	"sema-color-pressed-text-default": "#393937",
	"sema-color-pressed-text-neutral": "#313130",
	"sema-color-pressed-text-subtle": "#464644",
	"sema-color-pressed-text-link": "#1a394d",
	"sema-color-pressed-text-info": "#1a394d",
	"sema-color-pressed-text-recommendation": "#422843",
	"sema-color-pressed-text-success": "#1a321a",
	"sema-color-pressed-text-warning": "#6b381a",
	"sema-color-pressed-text-error": "#530909",
	"sema-color-pressed-text-primary": "#9e0017",
	"sema-color-pressed-text-inverse": "#ebebe5",
	"sema-color-pressed-text-light": "#ebebe5",
	"sema-color-pressed-text-dark": "#393937",
	"sema-color-pressed-icon-default": "#393937",
	"sema-color-pressed-icon-neutral": "#313130",
	"sema-color-pressed-icon-subtle": "#464644",
	"sema-color-pressed-icon-link": "#1a394d",
	"sema-color-pressed-icon-info": "#1a394d",
	"sema-color-pressed-icon-recommendation": "#422843",
	"sema-color-pressed-icon-success": "#1a321a",
	"sema-color-pressed-icon-warning": "#6b381a",
	"sema-color-pressed-icon-error": "#530909",
	"sema-color-pressed-icon-primary": "#9e0017",
	"sema-color-pressed-icon-inverse": "#ebebe5",
	"sema-color-pressed-icon-light": "#ebebe5",
	"sema-color-pressed-icon-dark": "#393937",
	"sema-elevation-surface": "0px 1px 2px 0px rgba(0,0,0,0.1), 0px 0px 1px 0px rgba(0,0,0,0.08)",
	"sema-elevation-floating": "0px 4px 16px 0px rgba(0,0,0,0.1), 0px 1px 4px 0px rgba(0,0,0,0.08)",
	"sema-elevation-raised-default": "0px 0px 0px 0.5px rgba(0,0,0,0.06), 0px 1px 6px 0px rgba(0,0,0,0.1), 0px 1px 2px 0px rgba(0,0,0,0.06)",
	"sema-elevation-raised-top": "0px 1px 0px 0.5px rgba(0,0,0,0.06), 0px 2px 8px 0px rgba(0,0,0,0.12), 0px -1px 2px 0px rgba(0,0,0,0.06)",
	"sema-elevation-raised-bottom": "0px -1px 0px 0.5px rgba(0,0,0,0.06), 0px -2px 8px 0px rgba(0,0,0,0.12), 0px -1px 2px 0px rgba(0,0,0,0.06)",
	"sema-font-weight-heading-lg": "700",
	"sema-font-weight-heading-md": "700",
	"sema-font-weight-heading-sm": "500",
	"sema-font-weight-heading-xs": "500",
	"sema-font-weight-heading-xxs": "500",
	"sema-font-weight-ui-lg": "500",
	"sema-font-weight-ui-md": "500",
	"sema-font-weight-ui-sm": "500",
	"sema-font-weight-ui-xs": "500",
	"sema-font-weight-ui-xxs": "500",
	"sema-font-weight-body-lg-default": "400",
	"sema-font-weight-body-lg-emphasis": "700",
	"sema-font-weight-body-md-default": "400",
	"sema-font-weight-body-md-emphasis": "700",
	"sema-font-weight-body-sm-default": "400",
	"sema-font-weight-body-sm-emphasis": "700",
	"sema-font-weight-body-xs-default": "400",
	"sema-font-weight-body-xs-emphasis": "700",
	"sema-font-weight-compact-xs-default": "400",
	"sema-font-weight-compact-xs-emphasis": "700",
	"sema-font-size-heading-xxs": "14px",
	"sema-font-size-heading-xs": "16px",
	"sema-font-size-heading-sm": "20px",
	"sema-font-size-heading-md": "28px",
	"sema-font-size-heading-lg": "36px",
	"sema-font-size-ui-xs": "12px",
	"sema-font-size-ui-sm": "14px",
	"sema-font-size-ui-md": "16px",
	"sema-font-size-ui-lg": "20px",
	"sema-font-size-body-xs": "12px",
	"sema-font-size-body-sm": "14px",
	"sema-font-size-body-md": "16px",
	"sema-font-size-body-lg": "20px",
	"sema-font-size-compact-xs": "12px",
	"sema-font-family-heading-lg": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-heading-md": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-heading-sm": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-heading-xs": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-heading-xxs": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-ui-lg": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-ui-md": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-ui-sm": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-ui-xs": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-body-lg": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-body-md": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-body-sm": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-body-xs": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-family-compact-xs": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"sema-font-letterspacing-heading-lg": "-0.5px",
	"sema-font-letterspacing-heading-md": "-0.5px",
	"sema-font-letterspacing-heading-sm": "0",
	"sema-font-letterspacing-heading-xs": "0",
	"sema-font-letterspacing-heading-xxs": "0",
	"sema-font-letterspacing-ui-lg": "0",
	"sema-font-letterspacing-ui-md": "0",
	"sema-font-letterspacing-ui-sm": "0",
	"sema-font-letterspacing-ui-xs": "0",
	"sema-font-letterspacing-body-lg": "0",
	"sema-font-letterspacing-body-md": "0",
	"sema-font-letterspacing-body-sm": "0",
	"sema-font-letterspacing-body-xs": "0",
	"sema-font-letterspacing-compact-xs": "0",
	"sema-font-textdecoration-heading-lg": "none",
	"sema-font-textdecoration-heading-md": "none",
	"sema-font-textdecoration-heading-sm": "none",
	"sema-font-textdecoration-heading-xs": "none",
	"sema-font-textdecoration-heading-xxs": "none",
	"sema-font-textdecoration-ui-lg": "none",
	"sema-font-textdecoration-ui-md": "none",
	"sema-font-textdecoration-ui-sm": "none",
	"sema-font-textdecoration-ui-xs": "none",
	"sema-font-textdecoration-body-lg-default": "none",
	"sema-font-textdecoration-body-lg-link": "underline",
	"sema-font-textdecoration-body-lg-emphasis": "none",
	"sema-font-textdecoration-body-md-default": "none",
	"sema-font-textdecoration-body-md-link": "underline",
	"sema-font-textdecoration-body-md-emphasis": "none",
	"sema-font-textdecoration-body-sm-default": "none",
	"sema-font-textdecoration-body-sm-link": "underline",
	"sema-font-textdecoration-body-sm-emphasis": "none",
	"sema-font-textdecoration-body-xs-default": "none",
	"sema-font-textdecoration-body-xs-link": "underline",
	"sema-font-textdecoration-body-xs-emphasis": "none",
	"sema-font-textdecoration-compact-xs-default": "none",
	"sema-font-textdecoration-compact-xs-link": "underline",
	"sema-font-textdecoration-compact-xs-emphasis": "none",
	"sema-font-lineheight-xl": "1.5",
	"sema-font-lineheight-lg": "1.4",
	"sema-font-lineheight-md": "1.3",
	"sema-font-lineheight-sm": "1.2",
	"sema-font-lineheight-xs": "1.1",
	"sema-font-lineheight-heading-lg": "40px",
	"sema-font-lineheight-heading-md": "31px",
	"sema-font-lineheight-heading-sm": "24px",
	"sema-font-lineheight-heading-xs": "22px",
	"sema-font-lineheight-heading-xxs": "20px",
	"sema-font-lineheight-ui-lg": "24px",
	"sema-font-lineheight-ui-md": "19px",
	"sema-font-lineheight-ui-sm": "17px",
	"sema-font-lineheight-ui-xs": "16px",
	"sema-font-lineheight-body-lg": "28px",
	"sema-font-lineheight-body-md": "22px",
	"sema-font-lineheight-body-sm": "20px",
	"sema-font-lineheight-body-xs": "17px",
	"sema-font-lineheight-compact-xs": "14px",
	"sema-opacity-0": "0",
	"sema-opacity-4": "0.04",
	"sema-opacity-20": "0.2",
	"sema-opacity-40": "0.4",
	"sema-opacity-60": "0.6",
	"sema-opacity-80": "0.8",
	"sema-opacity-90": "0.9",
	"sema-opacity-100": "1",
	"sema-rounding-0": "0px",
	"sema-rounding-100": "4px",
	"sema-rounding-200": "8px",
	"sema-rounding-300": "12px",
	"sema-rounding-400": "16px",
	"sema-rounding-500": "20px",
	"sema-rounding-600": "24px",
	"sema-rounding-700": "28px",
	"sema-rounding-800": "32px",
	"sema-rounding-pill": "999px",
	"sema-rounding-circle": "50%",
	"sema-space-0": "0px",
	"sema-space-25": "1px",
	"sema-space-50": "2px",
	"sema-space-100": "4px",
	"sema-space-150": "6px",
	"sema-space-200": "8px",
	"sema-space-300": "12px",
	"sema-space-400": "16px",
	"sema-space-500": "20px",
	"sema-space-600": "24px",
	"sema-space-700": "28px",
	"sema-space-800": "32px",
	"sema-space-900": "36px",
	"sema-space-1000": "40px",
	"sema-space-1100": "44px",
	"sema-space-1200": "48px",
	"sema-space-1300": "52px",
	"sema-space-1400": "56px",
	"sema-space-1500": "60px",
	"sema-space-1600": "64px",
	"sema-space-negative-25": "-1px",
	"sema-space-negative-50": "-2px",
	"sema-space-negative-100": "-4px",
	"sema-space-negative-150": "-6px",
	"sema-space-negative-200": "-8px",
	"sema-space-negative-300": "-12px",
	"sema-space-negative-400": "-16px",
	"sema-space-negative-500": "-20px",
	"sema-space-negative-600": "-24px",
	"sema-space-negative-700": "-28px",
	"sema-space-negative-800": "-32px",
	"sema-space-negative-900": "-36px",
	"sema-space-negative-1000": "-40px",
	"sema-space-negative-1100": "-44px",
	"sema-space-negative-1200": "-48px",
	"sema-space-negative-1300": "-52px",
	"sema-space-negative-1400": "-56px",
	"sema-space-negative-1500": "-60px",
	"sema-space-negative-1600": "-64px",
	"sema-motion-position-fadein-duration": "300ms",
	"sema-motion-position-fadein-easing": "cubic-bezier(0.8, 0, 0.2, 1)",
	"sema-motion-position-fadeout-duration": "200ms",
	"sema-motion-position-fadeout-easing": "cubic-bezier(0.8, 0, 0.2, 1)",
	"sema-motion-position-enter-duration": "300ms",
	"sema-motion-position-enter-easing": "cubic-bezier(0, 0.35, 0, 1.25)",
	"sema-motion-position-exit-duration": "300ms",
	"sema-motion-position-exit-easing": "cubic-bezier(0.3, 0, 0.8, 0.15)",
	"sema-motion-position-on-duration": "300ms",
	"sema-motion-position-on-easing": "cubic-bezier(0, 0.35, 0, 1.25)",
	"sema-motion-position-off-duration": "200ms",
	"sema-motion-position-off-easing": "cubic-bezier(0.8, 0, 0.2, 1)",
	"sema-motion-position-swipe-duration": "400ms",
	"sema-motion-position-swipe-easing": "cubic-bezier(0.8, 0, 0.2, 1)",
	"sema-motion-scale-on-duration": "150ms",
	"sema-motion-scale-on-easing": "cubic-bezier(0, 0, 1, 1)",
	"sema-motion-scale-swipe-duration": "400ms",
	"sema-motion-scale-swipe-easing": "cubic-bezier(0.8, 0, 0.2, 1)",
	"sema-motion-colorchange-duration": "300ms",
	"sema-motion-colorchange-easing": "cubic-bezier(0, 0, 1, 1)",
	"sema-motion-opacity-duration-default": "300ms",
	"sema-motion-opacity-duration-instant": "0ms",
	"sema-motion-opacity-easing-default": "cubic-bezier(0, 0, 1, 1)",
	"sema-motion-opacity-easing-instant": "cubic-bezier(0, 0, 1, 1)",
	"comp-checkbox-motion-background-colorchange-easing": "cubic-bezier(0, 0, 1, 1)",
	"comp-checkbox-motion-background-colorchange-duration": "150ms",
	"comp-checkbox-icon-motion-collapse-in-easing": "cubic-bezier(0.55, 0, 0, 1)",
	"comp-checkbox-icon-motion-collapse-in-duration": "200ms",
	"comp-checkbox-icon-motion-collapse-out-easing": "cubic-bezier(0.3, 0, 0.8, 0.15)",
	"comp-checkbox-icon-motion-collapse-out-duration": "150ms",
	"comp-radiogroupbutton-motion-border-scale-easing": "cubic-bezier(0, 0.35, 0, 1.25)",
	"comp-radiogroupbutton-motion-border-scale-duration": "150ms",
	"comp-radiogroupbutton-motion-border-fade-easing": "cubic-bezier(0.3, 0, 0.8, 0.15)",
	"comp-radiogroupbutton-motion-border-fade-duration": "150ms",
	"comp-spinner-color-background-pink": "#d452d1",
	"comp-spinner-color-background-orange": "#ff7c36",
	"comp-spinner-color-background-blue": "#24ccb0",
	"color-data-visualization-10": "#005062",
	"color-data-visualization-11": "#de2c62",
	"color-data-visualization-12": "#660e00",
	"color-data-visualization-01": "#003c96",
	"color-data-visualization-02": "#11a69c",
	"color-data-visualization-03": "#924af7",
	"color-data-visualization-04": "#d17711",
	"color-data-visualization-05": "#0081fe",
	"color-data-visualization-06": "#ff5383",
	"color-data-visualization-07": "#00ab55",
	"color-data-visualization-08": "#400387",
	"color-data-visualization-09": "#f2681f",
	"color-data-visualization-primary": "#0081fe",
	"color-data-visualization-success-graph": "#a8bb63",
	"color-data-visualization-success-text": "#83a343",
	"color-data-visualization-error-graph": "#ff9494",
	"color-data-visualization-error-text": "#e60023",
	"color-red-pushpin-0": "#ffd3d1",
	"color-red-pushpin-50": "#ffd3d1",
	"color-red-pushpin-100": "#ffd3d1",
	"color-red-pushpin-200": "#ffd3d1",
	"color-red-pushpin-300": "#ff9494",
	"color-red-pushpin-400": "#e60023",
	"color-red-pushpin-450": "#e60023",
	"color-red-pushpin-500": "#b2001a",
	"color-red-pushpin-600": "#b2001a",
	"color-red-pushpin-700": "#8a0f0f",
	"color-red-pushpin-800": "#8a0f0f",
	"color-red-pushpin-900": "#8a0f0f",
	"color-pink-flaminglow-0": "#fcd8fc",
	"color-pink-flaminglow-50": "#fcd8fc",
	"color-pink-flaminglow-100": "#fcd8fc",
	"color-pink-flaminglow-200": "#efadef",
	"color-pink-flaminglow-300": "#efadef",
	"color-pink-flaminglow-400": "#c65dd0",
	"color-pink-flaminglow-450": "#8f4696",
	"color-pink-flaminglow-500": "#8f4696",
	"color-pink-flaminglow-600": "#8f4696",
	"color-pink-flaminglow-700": "#6d4270",
	"color-pink-flaminglow-800": "#6d4270",
	"color-pink-flaminglow-900": "#6d4270",
	"color-blue-skycicle-0": "#c5eaf7",
	"color-blue-skycicle-50": "#c5eaf7",
	"color-blue-skycicle-100": "#c5eaf7",
	"color-blue-skycicle-200": "#c5eaf7",
	"color-blue-skycicle-300": "#7cbede",
	"color-blue-skycicle-400": "#2597d0",
	"color-blue-skycicle-450": "#007db8",
	"color-blue-skycicle-500": "#007db8",
	"color-blue-skycicle-600": "#007db8",
	"color-blue-skycicle-700": "#215d82",
	"color-blue-skycicle-800": "#215d82",
	"color-blue-skycicle-900": "#215d82",
	"color-teal-spabattical-0": "#c5eaf7",
	"color-teal-spabattical-50": "#c5eaf7",
	"color-teal-spabattical-100": "#c5eaf7",
	"color-teal-spabattical-200": "#7cbede",
	"color-teal-spabattical-300": "#7cbede",
	"color-teal-spabattical-400": "#2597d0",
	"color-teal-spabattical-450": "#007db8",
	"color-teal-spabattical-500": "#007db8",
	"color-teal-spabattical-600": "#007db8",
	"color-teal-spabattical-700": "#215d82",
	"color-teal-spabattical-800": "#215d82",
	"color-teal-spabattical-900": "#215d82",
	"color-green-matchacado-0": "#d0e2a8",
	"color-green-matchacado-50": "#d0e2a8",
	"color-green-matchacado-100": "#d0e2a8",
	"color-green-matchacado-200": "#d0e2a8",
	"color-green-matchacado-300": "#a8bb63",
	"color-green-matchacado-400": "#83a343",
	"color-green-matchacado-450": "#517d3b",
	"color-green-matchacado-500": "#517d3b",
	"color-green-matchacado-600": "#517d3b",
	"color-green-matchacado-700": "#265926",
	"color-green-matchacado-800": "#265926",
	"color-green-matchacado-900": "#265926",
	"color-purple-mysticool-0": "#fcd8fc",
	"color-purple-mysticool-50": "#fcd8fc",
	"color-purple-mysticool-100": "#fcd8fc",
	"color-purple-mysticool-200": "#fcd8fc",
	"color-purple-mysticool-300": "#efadef",
	"color-purple-mysticool-400": "#c65dd0",
	"color-purple-mysticool-450": "#8f4696",
	"color-purple-mysticool-500": "#8f4696",
	"color-purple-mysticool-600": "#8f4696",
	"color-purple-mysticool-700": "#6d4270",
	"color-purple-mysticool-800": "#6d4270",
	"color-purple-mysticool-900": "#6d4270",
	"color-orange-firetini-0": "#fde7c9",
	"color-orange-firetini-50": "#fde7c9",
	"color-orange-firetini-100": "#fde7c9",
	"color-orange-firetini-200": "#fde7c9",
	"color-orange-firetini-300": "#fbc55b",
	"color-orange-firetini-400": "#fea239",
	"color-orange-firetini-450": "#f06d22",
	"color-orange-firetini-500": "#f06d22",
	"color-orange-firetini-600": "#f06d22",
	"color-orange-firetini-700": "#9b4b1c",
	"color-orange-firetini-800": "#9b4b1c",
	"color-orange-firetini-900": "#9b4b1c",
	"color-yellow-caramellow-0": "#fde7c9",
	"color-yellow-caramellow-50": "#fde7c9",
	"color-yellow-caramellow-100": "#fde7c9",
	"color-yellow-caramellow-200": "#fbc55b",
	"color-yellow-caramellow-300": "#fbc55b",
	"color-yellow-caramellow-400": "#fea239",
	"color-yellow-caramellow-450": "#f06d22",
	"color-yellow-caramellow-500": "#f06d22",
	"color-yellow-caramellow-600": "#f06d22",
	"color-yellow-caramellow-700": "#9b4b1c",
	"color-yellow-caramellow-800": "#9b4b1c",
	"color-yellow-caramellow-900": "#9b4b1c",
	"color-white-mochimalist-0": "#ffffff",
	"color-gray-roboflow-50": "#fffef7",
	"color-gray-roboflow-100": "#f5f4ed",
	"color-gray-roboflow-200": "#e8e7e1",
	"color-gray-roboflow-300": "#c7c6c1",
	"color-gray-roboflow-400": "#969292",
	"color-gray-roboflow-500": "#757570",
	"color-gray-roboflow-550": "#636361",
	"color-gray-roboflow-600": "#4c4c4a",
	"color-gray-roboflow-700": "#2e2e2d",
	"color-gray-roboflow-800": "#1c1b1b",
	"color-black-cosmicore-900": "#000000",
	"color-transparent": "rgba(255, 255, 255, 0)",
	"color-text-default": "#000000",
	"color-text-subtle": "#636361",
	"color-text-success": "#265926",
	"color-text-disabled": "#969292",
	"color-text-error": "#8a0f0f",
	"color-text-warning": "#9b4b1c",
	"color-text-inverse": "#ffffff",
	"color-text-dark": "#000000",
	"color-text-light": "#ffffff",
	"color-text-shopping": "#215d82",
	"color-text-link": "#215d82",
	"color-icon-default": "#000000",
	"color-icon-subtle": "#636361",
	"color-icon-subtle-accent": "#636361",
	"color-icon-success": "#265926",
	"color-icon-disabled": "#969292",
	"color-icon-error": "#8a0f0f",
	"color-icon-warning": "#9b4b1c",
	"color-icon-info": "#215d82",
	"color-icon-recommendation": "#6d4270",
	"color-icon-inverse": "#ffffff",
	"color-icon-shopping": "#000000",
	"color-icon-brand-primary": "#e60023",
	"color-icon-light": "#ffffff",
	"color-icon-dark": "#000000",
	"color-background-default": "#ffffff",
	"color-background-info-base": "#007db8",
	"color-background-info-weak": "#c5eaf7",
	"color-background-info-strong": "#007db8",
	"color-background-error-base": "#b2001a",
	"color-background-error-weak": "#ffd3d1",
	"color-background-warning-base": "#9b4b1c",
	"color-background-warning-weak": "#fde7c9",
	"color-background-success-base": "#517d3b",
	"color-background-success-weak": "#d0e2a8",
	"color-background-recommendation-base": "#8f4696",
	"color-background-recommendation-weak": "#fcd8fc",
	"color-background-neutral": "#007db8",
	"color-background-shopping": "#ffffff",
	"color-background-primary-base": "#e60023",
	"color-background-primary-weak": "#e60023",
	"color-background-primary-strong": "#e60023",
	"color-background-secondary-base": "#e8e7e1",
	"color-background-secondary-weak": "#e8e7e1",
	"color-background-secondary-strong": "#e8e7e1",
	"color-background-tertiary-base": "#757570",
	"color-background-tertiary-weak": "#757570",
	"color-background-tertiary-strong": "#757570",
	"color-background-selected-base": "#000000",
	"color-background-selected-weak": "#000000",
	"color-background-selected-strong": "#000000",
	"color-background-inverse-base": "#000000",
	"color-background-inverse-strong": "#000000",
	"color-background-brand": "#e60023",
	"color-background-education": "#007db8",
	"color-background-wash-dark": "#ffffff",
	"color-background-wash-light": "#ffffff",
	"color-background-dark": "rgba(0, 0, 0, 0.8)",
	"color-background-light": "rgba(255, 255, 255, 0.9)",
	"color-background-elevation-accent": "#f5f4ed",
	"color-background-elevation-floating": "#ffffff",
	"color-background-elevation-raised": "#ffffff",
	"color-background-badge-neutral-default": "#c7c6c1",
	"color-background-badge-neutral-hover": "#b2b0ae",
	"color-background-badge-info-default": "#c5eaf7",
	"color-background-badge-info-hover": "#a8ddf0",
	"color-background-badge-error-default": "#ffd3d1",
	"color-background-badge-error-hover": "#fbbebb",
	"color-background-badge-warning-default": "#fde7c9",
	"color-background-badge-warning-hover": "#f9d9ae",
	"color-background-badge-success-default": "#d0e2a8",
	"color-background-badge-success-hover": "#bcd090",
	"color-background-badge-recommendation-default": "#fcd8fc",
	"color-background-badge-recommendation-hover": "#fac7fa",
	"color-background-badge-lightwash-default": "rgba(255, 255, 255, 0.9)",
	"color-background-badge-lightwash-hover": "rgba(248, 247, 242, 0.95)",
	"color-background-badge-darkwash-default": "rgba(0, 0, 0, 0.8)",
	"color-background-badge-darkwash-hover": "rgba(36, 36, 35, 0.85)",
	"color-background-button-primary-default": "#e60023",
	"color-background-button-primary-hover": "#bd001c",
	"color-background-button-primary-active": "#9e0017",
	"color-background-button-primary-disabled": "#e8e7e1",
	"color-background-button-secondary-default": "#e8e7e1",
	"color-background-button-secondary-hover": "#d6d4cd",
	"color-background-button-secondary-active": "#c2c1bc",
	"color-background-button-secondary-disabled": "#e8e7e1",
	"color-background-button-tertiary-default": "rgba(255, 255, 255, 0)",
	"color-background-button-tertiary-hover": "rgba(248, 247, 242, 0.95)",
	"color-background-button-tertiary-active": "#ebebe5",
	"color-background-button-tertiary-disabled": "rgba(255, 255, 255, 0)",
	"color-background-button-gray-default": "#757570",
	"color-background-button-gray-hover": "#626260",
	"color-background-button-gray-active": "#585856",
	"color-background-button-gray-disabled": "#e8e7e1",
	"color-background-button-shopping-default": "#e60023",
	"color-background-button-shopping-hover": "#bd001c",
	"color-background-button-shopping-active": "#9e0017",
	"color-background-button-shopping-disabled": "#e8e7e1",
	"color-background-button-semitransparentdefault-default": "rgba(255, 255, 255, 0.9)",
	"color-background-button-semitransparentdefault-hover": "rgba(248, 247, 242, 0.95)",
	"color-background-button-semitransparentdefault-active": "#ebebe5",
	"color-background-button-semitransparentdefault-disabled": "#e8e7e1",
	"color-background-button-semitransparentwhite-default": "rgba(255, 255, 255, 0.9)",
	"color-background-button-semitransparentwhite-hover": "#f8f7f2",
	"color-background-button-semitransparentwhite-active": "#ebebe5",
	"color-background-button-semitransparentwhite-disabled": "rgba(255, 255, 255, 0.9)",
	"color-background-button-semitransparentdark-default": "rgba(0, 0, 0, 0.8)",
	"color-background-button-semitransparentdark-hover": "rgba(36, 36, 35, 0.85)",
	"color-background-button-semitransparentdark-active": "rgba(57, 57, 55, 0.9)",
	"color-background-button-semitransparentdark-disabled": "rgba(0, 0, 0, 0.39)",
	"color-background-button-transparentdarkbackground-default": "rgba(255, 255, 255, 0)",
	"color-background-button-transparentdarkbackground-hover": "rgba(36, 36, 35, 0.85)",
	"color-background-button-transparentdarkbackground-active": "rgba(57, 57, 55, 0.9)",
	"color-background-button-transparentdarkbackground-disabled": "#e8e7e1",
	"color-background-button-white-default": "#ffffff",
	"color-background-button-white-hover": "#f8f7f2",
	"color-background-button-white-active": "#ebebe5",
	"color-background-button-white-disabled": "#e8e7e1",
	"color-background-button-selected-default": "#000000",
	"color-background-button-selected-disabled": "#e8e7e1",
	"color-background-button-disabled-default": "#e8e7e1",
	"color-background-checkbox-checked-default": "#000000",
	"color-background-checkbox-checked-error": "#ffd3d1",
	"color-background-checkbox-disabled": "#e8e7e1",
	"color-background-checkbox-unchecked-default": "#ffffff",
	"color-background-checkbox-unchecked-error": "#ffffff",
	"color-background-datepicker-container": "#ffffff",
	"color-background-datepicker-range-default": "#e8e7e1",
	"color-background-datepicker-range-hover": "#d6d4cd",
	"color-background-datepicker-range-active": "#c2c1bc",
	"color-background-datepicker-button-unselected-default": "#ffffff",
	"color-background-datepicker-button-unselected-hover": "#f8f7f2",
	"color-background-datepicker-button-unselected-active": "#ebebe5",
	"color-background-datepicker-button-selected-default": "#000000",
	"color-background-datepicker-button-selected-hover": "#242423",
	"color-background-datepicker-button-selected-active": "#393937",
	"color-background-semitransparentdark-default": "rgba(0, 0, 0, 0.8)",
	"color-background-semitransparentdark-hover": "rgba(36, 36, 35, 0.85)",
	"color-background-semitransparentdark-active": "rgba(57, 57, 55, 0.9)",
	"color-background-semitransparentdark-disabled": "rgba(0, 0, 0, 0.39)",
	"color-background-switch-default-unselected": "#ffffff",
	"color-background-switch-default-selected": "#000000",
	"color-background-switch-disabled-unselected": "#ffffff",
	"color-background-switch-disabled-selected": "#e8e7e1",
	"color-background-switch-hover-selected": "#242423",
	"color-background-switch-hover-unselected": "#f8f7f2",
	"color-background-switch-pressed-selected": "#393937",
	"color-background-switch-pressed-unselected": "#ebebe5",
	"color-background-tabs-default-base": "rgba(255, 255, 255, 0)",
	"color-background-tabs-default-hover": "#f8f7f2",
	"color-background-tabs-default-active": "#ebebe5",
	"color-background-tabs-transparent-base": "rgba(255, 255, 255, 0)",
	"color-background-tabs-transparent-hover": "#f8f7f2",
	"color-background-tabs-transparent-active": "#ebebe5",
	"color-background-searchguide-default-10": "#fcd8fc",
	"color-background-searchguide-default-11": "#e8e7e1",
	"color-background-searchguide-default-01": "#7cbede",
	"color-background-searchguide-default-02": "#a8bb63",
	"color-background-searchguide-default-03": "#fbc55b",
	"color-background-searchguide-default-04": "#ff9494",
	"color-background-searchguide-default-05": "#efadef",
	"color-background-searchguide-default-06": "#c5eaf7",
	"color-background-searchguide-default-07": "#d0e2a8",
	"color-background-searchguide-default-08": "#fde7c9",
	"color-background-searchguide-default-09": "#ffd3d1",
	"color-background-searchguide-hover-10": "#fac7fa",
	"color-background-searchguide-hover-11": "#d6d4cd",
	"color-background-searchguide-hover-01": "#58a9d0",
	"color-background-searchguide-hover-02": "#93a550",
	"color-background-searchguide-hover-03": "#f8b430",
	"color-background-searchguide-hover-04": "#f87777",
	"color-background-searchguide-hover-05": "#e599e5",
	"color-background-searchguide-hover-06": "#a8ddf0",
	"color-background-searchguide-hover-07": "#bcd090",
	"color-background-searchguide-hover-08": "#f9d9ae",
	"color-background-searchguide-hover-09": "#fbbebb",
	"color-background-searchguide-active-10": "#f8b5f8",
	"color-background-searchguide-active-11": "#c2c1bc",
	"color-background-searchguide-active-01": "#4096bf",
	"color-background-searchguide-active-02": "#81904c",
	"color-background-searchguide-active-03": "#f1a613",
	"color-background-searchguide-active-04": "#ed5a5a",
	"color-background-searchguide-active-05": "#da86da",
	"color-background-searchguide-active-06": "#8ecfe6",
	"color-background-searchguide-active-07": "#a7b97e",
	"color-background-searchguide-active-08": "#f4cc95",
	"color-background-searchguide-active-09": "#f4a8a4",
	"color-border-container": "#c7c6c1",
	"color-border-default": "#757570",
	"color-border-error": "#b2001a",
	"color-border-focus": "#007db8",
	"color-border-badge-default": "#ffffff",
	"color-border-badge-light": "#ffffff",
	"color-border-badge-dark": "#000000",
	"color-border-button-hover": "#626260",
	"color-border-button-pressed": "#585856",
	"color-border-checkbox-checked-default": "#000000",
	"color-border-checkbox-checked-error": "#ffd3d1",
	"color-border-checkbox-disabled": "#e8e7e1",
	"color-border-checkbox-unchecked-default": "#757570",
	"color-border-checkbox-unchecked-error": "#b2001a",
	"color-border-checkbox-unchecked-hover": "#626260",
	"color-border-switch-default-unselected": "#757570",
	"color-border-switch-focus-inner": "#ffffff",
	"color-border-switch-focus-outer": "#007db8",
	"elevation-floating": "0px 4px 16px 0px rgba(0,0,0,0.1), 0px 1px 4px 0px rgba(0,0,0,0.08)",
	"elevation-raised-top": "0px 1px 0px 0.5px rgba(0,0,0,0.06), 0px 2px 8px 0px rgba(0,0,0,0.12), 0px -1px 2px 0px rgba(0,0,0,0.06)",
	"elevation-raised-bottom": "0px -1px 0px 0.5px rgba(0,0,0,0.06), 0px -2px 8px 0px rgba(0,0,0,0.12), 0px -1px 2px 0px rgba(0,0,0,0.06)",
	"font-size-100": "12px",
	"font-size-200": "14px",
	"font-size-300": "16px",
	"font-size-400": "20px",
	"font-size-500": "28px",
	"font-size-600": "36px",
	"font-weight-normal": "400",
	"font-weight-semibold": "500",
	"font-weight-bold": "700",
	"font-family-default-latin": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"font-family-default-japanese": "'SF Pro JP', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'Hiragino Kaku Gothic Pro', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"font-family-code": "'SF Mono', 'Segoe UI Mono', 'Roboto Mono', 'Ubuntu Mono', Menlo, Consolas, Courier, monospace",
	"font-weight-datepicker-date": "400",
	"font-weight-datepicker-heading": "500",
	"font-size-datepicker-date": "16px",
	"font-size-datepicker-heading": "20px",
	"font-family-datepicker-date": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"font-family-datepicker-heading": "'Pin Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, 'ヒラギノ角ゴ Pro W3', 'メイリオ', Meiryo, 'ＭＳ Ｐゴシック', Arial, sans-serif",
	"font-letterspacing-datepicker-date": "0",
	"font-letterspacing-datepicker-heading": "0",
	"font-lineheight-datepicker-date": "22px",
	"font-lineheight-datepicker-heading": "24px",
	date: date,
	"font-textdecoration-datepicker-heading": "none",
	"opacity-100": "0.04",
	"opacity-200": "0.2",
	"opacity-300": "0.4",
	"opacity-400": "0.8",
	"opacity-500": "0.9",
	"opacity-0": "0",
	"rounding-100": "4px",
	"rounding-200": "8px",
	"rounding-300": "12px",
	"rounding-400": "16px",
	"rounding-500": "20px",
	"rounding-600": "24px",
	"rounding-700": "28px",
	"rounding-800": "32px",
	"rounding-0": "0px",
	"rounding-pill": "999px",
	"rounding-circle": "50%",
	"rounding-datepicker-container": "16px",
	"rounding-datepicker-days": "16px",
	"rounding-datepicker-navigation": "12px",
	"rounding-datepicker-range-start": "16px 0px 0px 16px",
	"rounding-datepicker-range-middle": "0px",
	"rounding-datepicker-range-end": "0px 16px 16px 0px",
	"space-100": "4px",
	"space-200": "8px",
	"space-300": "12px",
	"space-400": "16px",
	"space-500": "20px",
	"space-600": "24px",
	"space-700": "28px",
	"space-800": "32px",
	"space-900": "36px",
	"space-1000": "40px",
	"space-1100": "44px",
	"space-1200": "48px",
	"space-1300": "52px",
	"space-1400": "56px",
	"space-1500": "60px",
	"space-1600": "64px",
	"space-0": "0px",
	"space-negative-100": "-4px",
	"space-negative-200": "-8px",
	"space-negative-300": "-12px",
	"space-negative-400": "-16px",
	"space-negative-500": "-20px",
	"space-negative-600": "-24px",
	"space-negative-700": "-28px",
	"space-negative-800": "-32px",
	"space-negative-900": "-36px",
	"space-negative-1000": "-40px",
	"space-negative-1100": "-44px",
	"space-negative-1200": "-48px",
	"space-negative-1300": "-52px",
	"space-negative-1400": "-56px",
	"space-negative-1500": "-60px",
	"space-negative-1600": "-64px"
};

const lightModeTheme = {
    colorSchemeName: 'lightMode',
};
const darkModeTheme = {
    colorSchemeName: 'darkMode',
};
const ThemeContext = createContext(lightModeTheme);
const getLanguageFile = (language) => {
    switch (language) {
        case 'ck':
            return vrCkLineHeightDesignTokens;
        case 'ja':
            return vrJaLineHeightDesignTokens;
        case 'tall':
            return vrTallLineHeightDesignTokens;
        case 'th':
            return vrThLineHeightDesignTokens;
        case 'vi':
            return vrViLineHeightDesignTokens;
        case 'default':
            return vrDefaultLineHeightDesignTokens;
        default:
            return vrDefaultLineHeightDesignTokens;
    }
};
/**
 * Appends tokens as injected CSS tokens
 */
const themeToStyles = (theme, isVisualRefresh, language) => {
    let styles = '';
    Object.keys(theme).forEach((key) => {
        styles += `  --gestalt-theme: ${isVisualRefresh ? 'visualRefresh' : 'classic'}-${
        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ colorSchemeName: "lightMode" | "darkMode"; }'.
        `${theme[key]}_lineHeight_${language}`};\n`;
    });
    if (theme.colorSchemeName === 'darkMode') {
        Object.keys(isVisualRefresh ? vrDarkColorDesignTokens : darkColorDesignTokens).forEach((key) => {
            if (isVisualRefresh && key.match(/lineheight/)) {
                // @ts-expect-error - TS7053
                styles += `  --${key}: ${getLanguageFile(language)[key]};\n`;
            }
            else {
                styles += `  --${key}: ${
                // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ "color-red-pushpin-0": string; "color-red-pushpin-50": string; "color-red-pushpin-100": string; "color-red-pushpin-200": string; "color-red-pushpin-300": string; "color-red-pushpin-400": string; ... 327 more ...; "elevation-datepicker": string; }'.
                (isVisualRefresh ? vrDarkColorDesignTokens : darkColorDesignTokens)[key]};\n`;
            }
        });
    }
    if (theme.colorSchemeName === 'lightMode') {
        Object.keys(isVisualRefresh ? vrLightColorDesignTokens : lightColorDesignTokens).forEach((key) => {
            if (isVisualRefresh && key.match(/lineheight/)) {
                // @ts-expect-error - TS7053
                styles += `  --${key}: ${getLanguageFile(language)[key]};\n`;
            }
            else {
                styles += `  --${key}: ${
                // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ "color-red-pushpin-0": string; "color-red-pushpin-50": string; "color-red-pushpin-100": string; "color-red-pushpin-200": string; "color-red-pushpin-300": string; "color-red-pushpin-400": string; ... 327 more ...; "elevation-datepicker": string; }'.
                (isVisualRefresh ? vrLightColorDesignTokens : lightColorDesignTokens)[key]};\n`;
            }
        });
    }
    return styles;
};
const getTheme = (colorScheme) => colorScheme === 'dark' ||
    (colorScheme === 'userPreference' &&
        typeof window !== 'undefined' &&
        window.matchMedia &&
        window.matchMedia('(prefers-color-scheme: dark)').matches)
    ? darkModeTheme
    : lightModeTheme;
/**
 * [ColorSchemeProvider](https://gestalt.pinterest.systems/web/utilities/colorschemeprovider) is an optional [React context provider](https://reactjs.org/docs/context.html#contextprovider) to enable dark mode.
 */
function ColorSchemeProvider({ children, colorScheme = 'light', fullDimensions = false, id, language = 'default', }) {
    const [theme, setTheme] = useState(getTheme(colorScheme));
    const [languageLineHeight, setLanguageLineHeight] = useState(language);
    const className = id ? `__gestaltTheme${id}` : undefined;
    const selector = className ? `.${className}` : ':root';
    const isInExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const handlePrefChange = (event) => {
        setTheme(getTheme(event.matches ? 'dark' : 'light'));
    };
    useEffect(() => {
        setTheme(getTheme(colorScheme));
        setLanguageLineHeight(language);
        if (colorScheme === 'userPreference' && window.matchMedia) {
            // @ts-expect-error - TS2345 - Argument of type '(event: MediaQueryList) => void' is not assignable to parameter of type '(this: MediaQueryList, ev: MediaQueryListEvent) => any'.
            window.matchMedia('(prefers-color-scheme: dark)').addListener(handlePrefChange);
            return () => 
            // @ts-expect-error - TS2345 - Argument of type '(event: MediaQueryList) => void' is not assignable to parameter of type '(this: MediaQueryList, ev: MediaQueryListEvent) => any'.
            window.matchMedia('(prefers-color-scheme: dark)').removeListener(handlePrefChange);
        }
        return undefined; // Flow doesn't like that only userPreference returns a clean up func
    }, [colorScheme, language]);
    return (jsxRuntime.jsxs(ThemeContext.Provider, { value: theme, children: [jsxRuntime.jsx("style", { 
                // eslint-disable-next-line react/no-danger
                dangerouslySetInnerHTML: {
                    __html: colorScheme === 'userPreference'
                        ? `@media(prefers-color-scheme: dark) {
  ${selector} {
${themeToStyles(darkModeTheme, isInExperiment, languageLineHeight)} }
}`
                        : `${selector} {
${themeToStyles(theme, isInExperiment, languageLineHeight)} }`,
                } }), jsxRuntime.jsx("div", { className: classnames(className, {
                    [Layout.fullHeight]: fullDimensions,
                    [Layout.fullWidth]: fullDimensions,
                }), children: children })] }));
}
function useColorScheme() {
    const { colorSchemeName } = useContext(ThemeContext);
    return { colorSchemeName };
}

const fallbackLabels = {
    Accordion: {
        accessibilityCollapseLabel: 'Collapse section',
        accessibilityExpandLabel: 'Expand section',
    },
    BannerOverlay: {
        accessibilityDismissButtonLabel: 'Dismiss Banner',
    },
    ActivationCard: {
        accessibilityDismissButtonLabel: 'Dismiss',
    },
    BannerCallout: {
        accessibilityDismissButtonLabel: 'Dismiss Banner',
        iconAccessibilityLabelError: 'Error',
        iconAccessibilityLabelInfo: 'Information',
        iconAccessibilityLabelRecommendation: 'Recommendation',
        iconAccessibilityLabelWarning: 'Warning',
        iconAccessibilityLabelSuccess: 'Success',
    },
    ChartGraph: {
        accessibilityLabelPrefixText: 'ChartGraph',
        defaultViewText: 'Default view mode',
        accessibleViewText: 'Visual pattern view',
        tabularData: 'Tabular representation',
        accessibilityLabelDismissModal: 'Dismiss tabular representation modal',
        tableSeriesText: 'Series',
        tableXAxisText: 'x-axis values',
        tableYAxisText: 'y-axis values',
        downloadCsvButtonText: 'Download as .csv',
        cancelButtonText: 'Cancel',
    },
    ComboBox: {
        noResultText: 'No results',
        accessibilityClearButtonLabel: 'Clear input',
    },
    DatePicker: {
        accessibilityDismissButtonLabel: 'Dismiss date picker',
        dismissButton: 'Close',
        openCalendar: 'Open calendar',
        previousMonth: 'Navigate to previou month',
        nextMonth: 'Navigate to next month',
    },
    DateRange: {
        cancelText: 'Cancel',
        applyText: 'Apply',
    },
    Link: {
        accessibilityNewTabLabel: 'Opens a new tab',
        accessibilityDownloadLabel: 'Downloads a file',
    },
    Modal: {
        accessibilityDismissButtonLabel: 'Dismiss modal',
    },
    Popover: {
        accessibilityDismissButtonLabel: 'Dismiss popover',
    },
    OverlayPanel: {
        accessibilityDismissButtonLabel: 'Dismiss overlay panel',
        dismissConfirmationMessage: 'Are you sure you want to dismiss?',
        dismissConfirmationSubtext: 'You will lose all of your changes. This cannot be undone',
        dismissConfirmationPrimaryActionText: 'Yes, dismiss',
        dismissConfirmationPrimaryActionTextLabel: 'Yes, dismiss the overlay panel',
        dismissConfirmationSecondaryActionText: 'No, go back',
        dismissConfirmationSecondaryActionTextLabel: 'No, go back to the overlay panel',
    },
    SheetMobile: {
        accessibilityDismissButtonLabel: 'Dismiss bottom sheet',
        accessibilityGrabberLabel: 'Grabber',
        accessibilityLabel: 'Bottom sheet',
    },
    SideNavigation: {
        accessibilityDismissButtonLabel: 'Dismiss side navigation',
        accessibilityCollapseButtonLabel: 'Navigation expanded. Click button to collapse.',
        accessibilityExpandButtonLabel: 'Navigation collapsed. Click button to expand.',
        accessibilityEllipsisLabel: 'Collapsed navigation items. Expand for more options',
    },
    BannerSlim: {
        accessibilityDismissButtonLabel: 'Dismiss banner',
        iconAccessibilityLabelError: 'Error',
        iconAccessibilityLabelInfo: 'Information',
        iconAccessibilityLabelRecommendation: 'Recommendation',
        iconAccessibilityLabelWarning: 'Warning',
        iconAccessibilityLabelSuccess: 'Success',
    },
    Spinner: {
        accessibilityLabel: 'Loading',
    },
    TableOfContents: {
        accessibilityLabel: 'Table of contents',
    },
    Tag: {
        accessibilityErrorIconLabel: 'Error',
        accessibilityRemoveIconLabel: 'Remove tag',
        accessibilityWarningIconLabel: 'Warning',
    },
    TagData: {
        accessibilityRemoveIconLabel: 'Remove tag',
    },
    TextField: {
        accessibilityHidePasswordLabel: 'Hide password',
        accessibilityShowPasswordLabel: 'Show password',
    },
    HelpButton: {
        tooltipMessage: 'Click to learn more',
    },
    Toast: {
        accessibilityDismissButtonLabel: 'Dismiss message',
        accessibilityIconSuccessLabel: 'Success message',
        accessibilityIconErrorLabel: 'Error message',
        accessibilityProcessingLabel: 'Processing message',
    },
    BannerUpsell: {
        accessibilityDismissButtonLabel: 'Dismiss banner',
    },
    Video: {
        accessibilityMaximizeLabel: 'Maximize',
        accessibilityMinimizeLabel: 'Minimize',
        accessibilityMuteLabel: 'Mute',
        accessibilityPauseLabel: 'Pause',
        accessibilityPlayLabel: 'Play',
        accessibilityProgressLabel: 'Video progress',
        accessibilityUnmuteLabel: 'Unmute',
        accessibilityHideCaptionsLabel: 'Hide captions',
        accessibilityShowCaptionsLabel: 'Show captions',
    },
};
const DefaultLabelContext = createContext(null);
/**
 * [DefaultLabelProvider](https://gestalt.pinterest.systems/web/utilities/defaultlabelprovider) is an optional [React Context provider](https://reactjs.org/docs/context.html#contextprovider) to provide default strings for Gestalt component labels that support it. This allows for faster development by reducing boilerplate props at the callsite.
 */
function DefaultLabelProvider({ children, labels }) {
    return jsxRuntime.jsx(DefaultLabelContext.Provider, { value: labels, children: children });
}
function useDefaultLabelContext(componentName) {
    var _a, _b;
    const labels = useContext(DefaultLabelContext);
    // If no Context value provided, return fallback labels
    if (!labels) {
        return (_a = fallbackLabels[componentName]) !== null && _a !== void 0 ? _a : {};
    }
    return (_b = labels[componentName]) !== null && _b !== void 0 ? _b : {};
}

var styles$Q = {"divider":"DJ9 kVc uNu Pw5 e43 LJB"};

/**
 * [Divider](https://gestalt.pinterest.systems/web/divider) is a light gray 1px horizontal or vertical line which groups and divides content in lists and layouts.
 *
 * ![Divider light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Divider.spec.ts-snapshots/Divider-chromium-darwin.png)
 * ![Divider dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Divider-dark.spec.ts-snapshots/Divider-dark-chromium-darwin.png)
 *
 */
// eslint-disable-next-line no-empty-pattern
function Divider({}) {
    return jsxRuntime.jsx("hr", { className: styles$Q.divider });
}
Divider.displayName = 'Divider';

function getExpandedId(expandedIndex) {
    return Number.isFinite(expandedIndex) ? expandedIndex : null;
}
/**
 * Use [Accordion.Expandable](https://gestalt.pinterest.systems/web/accordion) if your accordion requires expanding and collapsing content.
 */
function AccordionExpandable({ accessibilityExpandLabel, accessibilityCollapseLabel, borderStyle = 'shadow', expandedIndex, id, items, onExpandedChange, size = 'lg', }) {
    const [expandedId, setExpandedId] = useState(getExpandedId(expandedIndex));
    const { accessibilityCollapseLabel: defaultAccessibilityCollapseLabel, accessibilityExpandLabel: defaultAccessibilityExpandLabel, } = useDefaultLabelContext('Accordion');
    const { colorSchemeName } = useColorScheme();
    const isDarkMode = colorSchemeName === 'darkMode';
    const { rounding } = applyModuleDensityStyle(size);
    useEffect(() => {
        setExpandedId(getExpandedId(expandedIndex));
    }, [expandedIndex, setExpandedId]);
    const buildOnAccordionClickHandler = useCallback((index) => (isExpanded) => {
        if (onExpandedChange) {
            onExpandedChange(isExpanded ? null : index);
        }
        setExpandedId(isExpanded ? null : index);
    }, [onExpandedChange]);
    return (jsxRuntime.jsx(BoxWithForwardRef, { borderStyle: borderStyle !== 'none' ? borderStyle : undefined, color: isDarkMode ? 'elevationFloating' : 'default', rounding: rounding, children: items.map(({ badge, children, icon, iconAccessibilityLabel, iconButton, summary, title, type }, index) => (
        // eslint-disable-next-line react/no-array-index-key
        jsxRuntime.jsxs(Fragment, { children: [index > 0 && jsxRuntime.jsx(Divider, {}), jsxRuntime.jsx(AccordionExpandableItem, { accessibilityCollapseLabel: accessibilityCollapseLabel !== null && accessibilityCollapseLabel !== void 0 ? accessibilityCollapseLabel : defaultAccessibilityCollapseLabel, accessibilityExpandLabel: accessibilityExpandLabel !== null && accessibilityExpandLabel !== void 0 ? accessibilityExpandLabel : defaultAccessibilityExpandLabel, badge: badge, icon: icon, iconAccessibilityLabel: iconAccessibilityLabel, iconButton: iconButton, id: `${id}-${index}`, isCollapsed: expandedId !== index, onExpand: buildOnAccordionClickHandler(index), size: size, summary: summary, title: title, type: type, children: children })] }, index))) }));
}
AccordionExpandable.displayName = 'Accordion.Expandable';

/**
 * [Accordion](https://gestalt.pinterest.systems/web/accordion) is a container that can be expanded and collapsed to show content about a single subject. Its contents can be visible at all items, or expand and collapse as an individual item or a group of items.
 *
 * ![Accordion light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Accordion.spec.ts-snapshots/Accordion-chromium-darwin.png)
 * ![Accordion dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Accordion-dark.spec.ts-snapshots/Accordion-dark-chromium-darwin.png)
 *
 */
function Accordion({ badge, borderStyle = 'shadow', children, dataTestId, icon, iconAccessibilityLabel, iconButton, id, title, size = 'lg', type = 'info', }) {
    const { colorSchemeName } = useColorScheme();
    const isDarkMode = colorSchemeName === 'darkMode';
    const { gap, padding, rounding } = applyModuleDensityStyle(size);
    return (jsxRuntime.jsx(BoxWithForwardRef, { borderStyle: borderStyle !== 'none' ? borderStyle : undefined, color: isDarkMode ? 'elevationFloating' : 'default', id: id, padding: padding, rounding: rounding, children: jsxRuntime.jsxs(FlexWithForwardRef, { direction: "column", gap: { column: gap, row: 0 }, children: [title && (jsxRuntime.jsx(AccordionTitle, { badge: badge, dataTestId: dataTestId, icon: icon, iconAccessibilityLabel: iconAccessibilityLabel, iconButton: iconButton, size: size, title: title, type: type })), jsxRuntime.jsx(FlexWithForwardRef.Item, { children: children })] }) }));
}
Accordion.displayName = 'Accordion';
Accordion.Expandable = AccordionExpandable;

var styles$P = {"rtlPos":"TxJ"};

function getAriaLabel({ accessibilityLabel, accessibilityNewTabLabel, target, }) {
    let ariaLabel = accessibilityLabel !== null && accessibilityLabel !== void 0 ? accessibilityLabel : undefined;
    if (ariaLabel && target === 'blank') {
        ariaLabel = `${ariaLabel}; ${accessibilityNewTabLabel}`;
    }
    return ariaLabel;
}

function VisuallyHidden({ children }) {
    return (jsxRuntime.jsx(BoxWithForwardRef, { dangerouslySetInlineStyle: { __style: { display: 'inline' } }, position: "relative", children: jsxRuntime.jsx(BoxWithForwardRef, { display: "visuallyHidden", children: children }) }));
}

function NewTabAccessibilityLabel({ target }) {
    const { accessibilityNewTabLabel } = useDefaultLabelContext('Link');
    return target === 'blank' ? (jsxRuntime.jsx(VisuallyHidden, { children: `; ${accessibilityNewTabLabel}` })) : null;
}

var styles$O = {"button":"RCK Hsu USg adn","buttonVr":"xuB","parentButton":"oRi lnZ wsz","childrenDiv":"hDj _O1 KS5 mQ8 Tbt L4E","sm":"DZT I56 pXK C7G","md":"Vxj aZc pXK _co","lg":"F10 xD4 i1W V92","smVr":"uZs","mdVr":"FID","lgVr":"ChZ","block":"gn8 L4E kVc","inline":"NTm KhY","enabled":"hNT BG7","disabled":"OWt","selected":"G0a","vrFocused":"vrQ","defaultFocus":"dfM","inverseFocus":"q8O","red":"Il7","gray":"a_A","transparent":"qQ7","transparentWhiteText":"LSX","blue":"sKP","semiTransparentWhite":"W6-","white":"bmw"};

const GlobalEventsHandlerContext = 
// @ts-expect-error - TS2554 - Expected 1 arguments, but got 0.
createContext();
const { Provider: Provider$4 } = GlobalEventsHandlerContext;
/**
 * [GlobalEventsHandlerProvider](https://gestalt.pinterest.systems/web/utilities/globaleventshandlerprovider) is a [React context provider](https://react.dev/learn/passing-data-deeply-with-context) that allows sharing global event handlers with consuming components.
 */
function GlobalEventsHandlerProvider({ children, dateFieldHandlers, datePickerHandlers, dateRangeHandlers, sheetMobileHandlers, linkHandlers, radioGroupHandlers, buttonToggleHandlers, }) {
    return (jsxRuntime.jsx(Provider$4, { value: {
            dateFieldHandlers,
            datePickerHandlers,
            dateRangeHandlers,
            sheetMobileHandlers,
            linkHandlers,
            radioGroupHandlers,
            buttonToggleHandlers,
        }, children: children }));
}
function useGlobalEventsHandlerContext() {
    return useContext(GlobalEventsHandlerContext);
}

var styles$N = {"button":"KuF kVc adn yQo","parentButton":"yfm adn yQo lnZ wsz","label":"hW-","enabled":"ncU BG7","disabled":"v07","activeText":"D3G","hoverText":"TGY"};

var styles$M = {"searchguide":"fm6 Hsu USg adn BG7 xD4 S7o","searchguideVr":"juA","parentSearchGuide":"zOt lnZ wsz","childrenDiv":"nOy _O1 KS5 mQ8","imageDiv":"GZi","imageDivVr":"kvJ","selected":"g7R XgI gSJ","selectedVr":"Izy","vrFocused":"yib","color01":"grJ","color02":"CX3","color03":"RtL","color04":"TVr","color05":"s13","color06":"LwP","color07":"sA-","color08":"iK-","color09":"_5W","color10":"cYI","color11":"cRT"};

const InternalLinkWithForwardRef = forwardRef(function Link({ accessibilityCurrent, accessibilityLabel, children, colorClass, dataTestId, disabled, focusColor = 'lightBackground', fullHeight, fullWidth, href, id, innerFocusColor, mouseCursor, onClick, onBlur, onFocus, onKeyDown, onMouseDown, onMouseUp, onMouseEnter, onMouseLeave, rel, tabIndex = 0, rounding, selected, size, tapStyle = 'compress', target, wrappedComponent, }, ref) {
    var _a, _b, _c;
    const innerRef = useRef(null);
    // @ts-expect-error - TS2322 - Type 'HTMLAnchorElement | null' is not assignable to type 'HTMLAnchorElement'.
    useImperativeHandle(ref, () => innerRef.current);
    const { compressStyle, handleBlur, handleMouseDown, handleMouseUp, handleTouchStart, handleTouchMove, handleTouchCancel, handleTouchEnd, isTapping, } = useTapFeedback({
        height: (_a = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight,
        width: (_b = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _b === void 0 ? void 0 : _b.clientWidth,
    });
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const { isFocusVisible } = useFocusVisible();
    const isTapArea = wrappedComponent === 'tapArea';
    const isButton = wrappedComponent === 'button';
    const isIconButton = wrappedComponent === 'iconButton';
    const isSearchGuide = wrappedComponent === 'searchGuide';
    const className = classnames(stylesText.noOutline, stylesText.inheritColor, stylesText.noUnderline, touchableStyles.tapTransition, isTapArea ? getRoundingClassName(rounding || 0) : undefined, !isTapArea && !isInVRExperiment ? getRoundingClassName('pill') : undefined, {
        [touchableStyles.tapCompress]: !disabled && tapStyle === 'compress' && isTapping,
        [focusStyles.hideOutline]: !disabled && !isFocusVisible,
        [focusStyles.accessibilityOutline]: !disabled && isFocusVisible && !isInVRExperiment,
    }, isButton && !isInVRExperiment
        ? {
            [Layout.inlineFlex]: !fullWidth,
            [Layout.flex]: fullWidth,
            [Layout.justifyCenter]: true,
            [Layout.xsItemsCenter]: true,
            [styles$O.button]: true,
            [styles$O.disabled]: disabled,
            [styles$O.selected]: !disabled && selected,
            [styles$O.sm]: size === 'sm',
            [styles$O.md]: size === 'md',
            [styles$O.lg]: size === 'lg',
        }
        : {}, isButton && isInVRExperiment
        ? {
            [Layout.inlineFlex]: !fullWidth,
            [Layout.flex]: fullWidth,
            [Layout.justifyCenter]: true,
            [Layout.xsItemsCenter]: true,
            [styles$O.buttonVr]: true,
            [styles$O.disabled]: disabled,
            [styles$O.selected]: !disabled && selected,
            [styles$O.smVr]: size === 'sm',
            [styles$O.mdVr]: size === 'md',
            [styles$O.lgVr]: size === 'lg',
            [styles$O.vrFocused]: !disabled && isFocusVisible,
            [styles$O.defaultFocus]: !disabled && isFocusVisible && focusColor === 'lightBackground',
            [styles$O.inverseFocus]: !disabled && isFocusVisible && focusColor === 'darkBackground',
        }
        : {}, isButton && colorClass
        ? {
            [styles$O[colorClass]]: !disabled && !selected,
        }
        : {}, isTapArea
        ? {
            [Layout.block]: true,
            [touchableStyles.fullHeight]: fullHeight,
            [touchableStyles.fullWidth]: fullWidth,
            [focusStyles.accessibilityOutlineLightBackground]: isInVRExperiment && focusColor === 'lightBackground' && !disabled && isFocusVisible,
            [focusStyles.accessibilityOutlineDarkBackground]: isInVRExperiment && focusColor === 'darkBackground' && !disabled && isFocusVisible,
            [focusStyles.accessibilityOutlineBorder]: isInVRExperiment && innerFocusColor === 'default' && !disabled && !isFocusVisible,
            [focusStyles.accessibilityOutlineBorderDefault]: isInVRExperiment && innerFocusColor === 'default' && !disabled && isFocusVisible,
            [focusStyles.accessibilityOutlineBorderInverse]: isInVRExperiment && innerFocusColor === 'inverse' && !disabled && isFocusVisible,
        }
        : {}, isTapArea && mouseCursor
        ? {
            [touchableStyles[mouseCursor]]: !disabled,
        }
        : {}, isIconButton
        ? {
            [styles$N.button]: true,
            [styles$N.disabled]: disabled,
            [styles$N.enabled]: !disabled,
        }
        : {});
    const searchGuideClassNames = classnames(stylesText.noUnderline, touchableStyles.tapTransition, isSearchGuide && isInVRExperiment
        ? {
            [styles$M.searchguideVr]: true,
            [focusStyles.hideOutline]: !isFocusVisible,
            [styles$M.vrFocused]: isFocusVisible,
        }
        : {}, isSearchGuide && !isInVRExperiment
        ? {
            [styles$M[colorClass]]: true,
            [styles$M.searchguide]: true,
            [focusStyles.hideOutline]: !isFocusVisible,
            [focusStyles.accessibilityOutline]: isFocusVisible,
        }
        : {});
    // Consumes GlobalEventsHandlerProvider
    const { linkHandlers } = (_c = useGlobalEventsHandlerContext()) !== null && _c !== void 0 ? _c : {
        linkHandlers: { onNavigation: undefined },
    };
    const { onNavigation } = linkHandlers !== null && linkHandlers !== void 0 ? linkHandlers : { onNavigation: undefined };
    const onNavigationHandler = onNavigation === null || onNavigation === void 0 ? void 0 : onNavigation({ href, target });
    const handleKeyPress = (event) => {
        // Check to see if space or enter were pressed
        if (onClick && keyPressShouldTriggerTap(event)) {
            // Prevent the default action to stop scrolling when space is pressed
            event.preventDefault();
            onClick({ event, dangerouslyDisableOnNavigation: () => { } });
        }
    };
    return (jsxRuntime.jsx("a", Object.assign({ ref: innerRef, "aria-current": accessibilityCurrent && accessibilityCurrent !== 'section'
            ? accessibilityCurrent
            : undefined, "aria-label": accessibilityLabel, "aria-selected": accessibilityCurrent && accessibilityCurrent === 'section' ? true : undefined, className: isSearchGuide ? searchGuideClassNames : className, "data-test-id": dataTestId, href: disabled ? undefined : href, id: id, onBlur: (event) => {
            onBlur === null || onBlur === void 0 ? void 0 : onBlur({ event });
            handleBlur();
        }, onClick: (event) => {
            let defaultOnNavigationIsEnabled = true;
            const dangerouslyDisableOnNavigation = () => {
                defaultOnNavigationIsEnabled = false;
            };
            onClick === null || onClick === void 0 ? void 0 : onClick({
                event,
                dangerouslyDisableOnNavigation,
            });
            if (onNavigationHandler && defaultOnNavigationIsEnabled) {
                onNavigationHandler({ event });
            }
        }, onFocus: (event) => {
            onFocus === null || onFocus === void 0 ? void 0 : onFocus({ event });
        }, onKeyDown: (event) => {
            onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown({ event });
        }, onKeyPress: handleKeyPress, onMouseDown: (event) => {
            onMouseDown === null || onMouseDown === void 0 ? void 0 : onMouseDown({ event });
            handleMouseDown();
        }, onMouseEnter: (event) => {
            onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter({ event });
        }, onMouseLeave: (event) => {
            onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave({ event });
        }, onMouseUp: (event) => {
            onMouseUp === null || onMouseUp === void 0 ? void 0 : onMouseUp({ event });
            handleMouseUp();
        }, onTouchCancel: handleTouchCancel, onTouchEnd: handleTouchEnd, onTouchMove: handleTouchMove, onTouchStart: handleTouchStart, rel: [
            ...(target === 'blank' ? ['noopener', 'noreferrer'] : []),
            ...(rel === 'nofollow' ? ['nofollow'] : []),
        ].join(' '), tabIndex: disabled ? undefined : tabIndex }, (tapStyle === 'compress' && compressStyle && !disabled ? { style: compressStyle } : {}), { target: target ? `_${target}` : undefined, children: children })));
});
InternalLinkWithForwardRef.displayName = 'InternalLink';

const DEFAULT_TEXT_COLORS$2 = {
    blue: 'inverse',
    gray: 'default',
    red: 'inverse',
    transparent: 'default',
    semiTransparentWhite: 'default',
    transparentWhiteText: 'inverse',
    white: 'default',
};
const SIZE_NAME_TO_PIXEL$4 = {
    sm: 10,
    md: 12,
    lg: 12,
};
/**
 * [ButtonLink](https://gestalt.pinterest.systems/buttonlink) is mainly used as a navigational element to direct users to a new page or location.
 *
 * ![ButtonLink light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/ButtonLink.spec.ts-snapshots/ButtonLink-chromium-darwin.png)
 * ![ButtonLink dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/ButtonLink-dark.spec.ts-snapshots/ButtonLink-dark-chromium-darwin.png)
 */
const ButtonLinkWithForwardRef = forwardRef(function ButtonLink({ accessibilityLabel, color = 'gray', dataTestId, disabled = false, focusColor, fullWidth = false, iconEnd, iconStart, onClick, tabIndex = 0, size = 'md', text, href, rel = 'none', target = null, }, ref) {
    const textSizesVR = {
        sm: 'xs',
        md: 'sm',
        lg: 'md',
    };
    const innerRef = useRef(null);
    // When using both forwardRef and innerRef, React.useimperativehandle() allows a parent component
    // that renders <ButtonLink ref={inputRef} /> to call inputRef.current.focus()
    // @ts-expect-error - TS2322 - Type 'HTMLAnchorElement | null' is not assignable to type 'HTMLAnchorElement'.
    useImperativeHandle(ref, () => innerRef.current);
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const { accessibilityNewTabLabel } = useDefaultLabelContext('Link');
    const { colorSchemeName } = useColorScheme();
    // We need to make a few exceptions for accessibility reasons in darkMode for red buttons
    const isDarkMode = colorSchemeName === 'darkMode';
    const isDarkModeRed = isDarkMode && color === 'red';
    const textColor = (disabled && 'disabled') || (isDarkModeRed && 'default') || DEFAULT_TEXT_COLORS$2[color];
    const ariaLabel = getAriaLabel({
        target,
        accessibilityLabel,
        accessibilityNewTabLabel,
    });
    const handleClick = ({ event, dangerouslyDisableOnNavigation, }) => onClick
        ? onClick({
            event,
            dangerouslyDisableOnNavigation: dangerouslyDisableOnNavigation !== null && dangerouslyDisableOnNavigation !== void 0 ? dangerouslyDisableOnNavigation : (() => { }),
        })
        : undefined;
    return (jsxRuntime.jsxs(InternalLinkWithForwardRef, { ref: innerRef, accessibilityLabel: ariaLabel, colorClass: color, dataTestId: dataTestId, disabled: disabled, focusColor: focusColor, fullWidth: fullWidth, href: href, onClick: handleClick, rel: rel, selected: false, size: size, tabIndex: tabIndex, target: target, wrappedComponent: "button", children: [jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", gap: { row: 2, column: 0 }, justifyContent: "center", children: [iconStart ? (jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: textColor, icon: iconStart, size: SIZE_NAME_TO_PIXEL$4[size] })) : null, isInVRExperiment ? (jsxRuntime.jsx(TextUIWithForwardRef, { align: "center", color: textColor, overflow: "normal", size: textSizesVR[size], children: text })) : (jsxRuntime.jsx(TextWithForwardRef, { align: "center", color: textColor, overflow: "normal", size: size === 'sm' ? '200' : '300', weight: "bold", children: text })), iconEnd ? (jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: textColor, icon: iconEnd, size: SIZE_NAME_TO_PIXEL$4[size] })) : null] }), jsxRuntime.jsx(NewTabAccessibilityLabel, { target: target })] }));
});
ButtonLinkWithForwardRef.displayName = 'ButtonLink';

var styles$L = {"pog":"x8f _O1 KS5 mQ8","rounding0":"AhM","rounding100":"dMk","rounding200":"lGN","rounding300":"EZV","rounding400":"n4r","roundingCircle":"uwe","disabledSelected":"aw2","selected":"y91","focused":"Xsi C1J","vrFocused":"Cnf","lightOuterFocus":"CeS","inverseOuterFocus":"csD","transparentInnerFocus":"_5q","darkInnerFocus":"zjg","red":"pHl","hovered":"bPW","active":"s4m","disabled":"Ffa","lightGray":"WhU","transparent":"OGJ","transparentDarkBackground":"CQ8","washLight":"fqW","white":"NSs","transparentDarkGray":"lEC","gray":"JhO"};

/**
 * [Pog](https://gestalt.pinterest.systems/web/pog) is a lower-level functional component to show the active, hovered, & focused states of [IconButton](https://gestalt.pinterest.systems/web/iconbutton).
 *
 * This is an abstraction to allow for links that look like IconButton.
 *
 * ![Pog light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Pog.spec.ts-snapshots/Pog-chromium-darwin.png)
 * ![Pog dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Pog-dark.spec.ts-snapshots/Pog-dark-chromium-darwin.png)
 *
 */
function Pog({ accessibilityLabel = '', active = false, bgColor = 'transparent', focusColor = 'lightBackground', dangerouslySetSvgPath, disabled, focused = false, hovered = false, icon, iconColor, padding, rounding, selected = false, size = 'md', }) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const SIZE_NAME_TO_PADDING_PIXEL = isInVRExperiment
        ? {
            xs: 6,
            sm: 6,
            md: 10,
            lg: 14,
            xl: 20,
        }
        : {
            xs: 6,
            sm: 8,
            md: 11,
            lg: 14,
            xl: 16,
        };
    const SIZE_NAME_TO_ICON_SIZE_PIXEL = {
        xs: 12,
        sm: 16,
        md: isInVRExperiment ? 16 : 18,
        lg: isInVRExperiment ? 24 : 20,
        xl: 24,
    };
    const OLD_TO_NEW_COLOR_MAP = {
        brandPrimary: 'brandPrimary',
        dark: 'dark',
        darkGray: 'default',
        gray: 'subtle',
        light: 'light',
        red: 'error',
        white: 'inverse',
    };
    const defaultIconButtonIconColors = {
        gray: 'white',
        lightGray: 'darkGray',
        red: 'white',
        transparent: 'darkGray',
        transparentDarkBackground: 'white',
        transparentDarkGray: isInVRExperiment ? 'light' : 'white',
        washLight: isInVRExperiment ? 'dark' : 'darkGray',
        white: 'darkGray',
    };
    const color = (selected && 'white') || iconColor || defaultIconButtonIconColors[bgColor];
    const iconSizeInPx = SIZE_NAME_TO_ICON_SIZE_PIXEL[size];
    const paddingInPx = padding ? padding * 4 : SIZE_NAME_TO_PADDING_PIXEL[size];
    const sizeInPx = iconSizeInPx + paddingInPx * 2;
    const inlineStyle = {
        height: sizeInPx,
        width: sizeInPx,
    };
    const classes = classnames(styles$L.pog, {
        [styles$L.rounding0]: rounding === '0',
        [styles$L.rounding100]: rounding === '100',
        [styles$L.rounding200]: rounding === '200',
        [styles$L.rounding300]: rounding === '300',
        [styles$L.rounding400]: rounding === '400',
        [styles$L.roundingCircle]: !rounding || rounding === 'circle',
        [styles$L[bgColor]]: !selected,
        [styles$L.selected]: selected,
        [styles$L.active]: active,
        [styles$L.focused]: focused,
        [styles$L.hovered]: hovered && !focused && !active,
    });
    const vrClasses = classnames(styles$L.pog, styles$L[size], {
        [styles$L.rounding0]: rounding === '0',
        [styles$L.rounding100]: (!rounding && size === 'xs') || rounding === '100',
        [styles$L.rounding200]: (!rounding && size === 'sm') || rounding === '200',
        [styles$L.rounding300]: (!rounding && size === 'md') || rounding === '300',
        [styles$L.rounding400]: (!rounding && (size === 'lg' || size === 'xl')) || rounding === '400',
        [styles$L.roundingCircle]: rounding === 'circle',
        [styles$L[bgColor]]: !selected,
        [styles$L.disabled]: disabled && !selected,
        [styles$L.selected]: selected && !disabled,
        [styles$L.disabledSelected]: selected && disabled,
        [styles$L.active]: active,
        [styles$L.vrFocused]: focused,
        [styles$L.transparentInnerFocus]: focused && bgColor === 'transparent',
        [styles$L.lightOuterFocus]: focused && (bgColor === 'washLight' || focusColor === 'darkBackground'),
        [styles$L.inverseOuterFocus]: focused && iconColor === 'white' && bgColor === 'transparentDarkBackground',
        [styles$L.darkInnerFocus]: focused && (bgColor === 'washLight' || focusColor === 'darkBackground'),
        [styles$L.hovered]: hovered && !active,
    });
    return (jsxRuntime.jsx("div", { className: isInVRExperiment ? vrClasses : classes, style: inlineStyle, children: jsxRuntime.jsx(Icon, { accessibilityLabel: accessibilityLabel || '', color: OLD_TO_NEW_COLOR_MAP[color], dangerouslySetSvgPath: dangerouslySetSvgPath, icon: icon, size: iconSizeInPx }) }));
}
Pog.displayName = 'Pog';

const InternalIconButtonWithForwardRef = forwardRef(function IconButton({ accessibilityControls, accessibilityExpanded, accessibilityHaspopup, accessibilityLabel, accessibilityPopupRole, bgColor, focusColor = 'lightBackground', dangerouslySetSvgPath, dataTestId, disabled, icon, iconColor, label, name, onClick, padding, selected, size = 'lg', tabIndex = 0, tooltip, type, }, ref) {
    var _a, _b;
    const innerRef = useRef(null);
    // When using both forwardRef and innerRef, React.useimperativehandle() allows a parent component
    // that renders <IconButton ref={inputRef} /> to call inputRef.current.focus()
    // @ts-expect-error - TS2322 - Type 'HTMLButtonElement | null' is not assignable to type 'HTMLButtonElement'.
    useImperativeHandle(ref, () => innerRef.current);
    const { compressStyle, isTapping, handleBlur, handleMouseDown, handleMouseUp, handleTouchStart, handleTouchMove, handleTouchCancel, handleTouchEnd, } = useTapFeedback({
        height: (_a = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight,
        width: (_b = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _b === void 0 ? void 0 : _b.clientWidth,
    });
    const [isActive, setActive] = useState(false);
    const [isFocused, setFocused] = useState(false);
    const [isHovered, setHovered] = useState(false);
    const { isFocusVisible } = useFocusVisible();
    let labelColor = 'default';
    if (disabled) {
        labelColor = 'disabled';
    }
    else if (bgColor === 'transparentDarkBackground' && iconColor === 'white') {
        labelColor = 'inverse';
    }
    const labelStyle = classnames(styles$N.label, {
        [styles$N.activeText]: isActive && !isHovered,
        [styles$N.hoverText]: isHovered && !isActive,
    });
    const divStyles = classnames(styles$N.button, touchableStyles.tapTransition, {
        [styles$N.disabled]: disabled,
        [styles$N.enabled]: !disabled,
        [touchableStyles.tapCompress]: !disabled && isTapping,
    });
    const buttonComponent = (jsxRuntime.jsx("button", { ref: innerRef, "aria-controls": accessibilityControls, "aria-expanded": accessibilityExpanded, "aria-haspopup": accessibilityPopupRole || accessibilityHaspopup, "aria-label": accessibilityLabel, className: classnames(styles$N.parentButton), "data-test-id": dataTestId, disabled: disabled, name: name, onBlur: () => {
            handleBlur();
            setFocused(false);
        }, onClick: (event) => onClick === null || onClick === void 0 ? void 0 : onClick({ event }), onFocus: () => setFocused(true), onMouseDown: () => {
            handleMouseDown();
            setActive(true);
        }, onMouseEnter: () => setHovered(true), onMouseLeave: () => {
            setActive(false);
            setHovered(false);
        }, onMouseUp: () => {
            handleMouseUp();
            setActive(false);
        }, onTouchCancel: handleTouchCancel, onTouchEnd: handleTouchEnd, 
        // @ts-expect-error - TS2322 - Type '(arg1: TouchEvent<HTMLDivElement>) => void' is not assignable to type 'TouchEventHandler<HTMLButtonElement>'.
        onTouchMove: handleTouchMove, 
        // @ts-expect-error - TS2322 - Type '(arg1: TouchEvent<HTMLDivElement>) => void' is not assignable to type 'TouchEventHandler<HTMLButtonElement>'.
        onTouchStart: handleTouchStart, 
        // @ts-expect-error - TS2322 - Type '0 | -1 | null' is not assignable to type 'number | undefined'.
        tabIndex: disabled ? null : tabIndex, 
        // react/button-has-type is very particular about this verbose syntax
        type: type === 'submit' ? 'submit' : 'button', children: jsxRuntime.jsx("div", { className: divStyles, style: compressStyle || undefined, children: jsxRuntime.jsx(Pog, { active: !disabled && isActive, bgColor: bgColor, dangerouslySetSvgPath: dangerouslySetSvgPath, focusColor: focusColor, focused: !disabled && isFocusVisible && isFocused, hovered: !disabled && isHovered, icon: icon, iconColor: iconColor, padding: padding, selected: selected, size: size }) }) }));
    const labelComponent = (jsxRuntime.jsx("div", { className: labelStyle, children: jsxRuntime.jsx(TextUIWithForwardRef, { align: "center", color: labelColor, lineClamp: 2, size: "xs", children: label }) }));
    const buttonWithTooltip = (tooltip === null || tooltip === void 0 ? void 0 : tooltip.text) ? (jsxRuntime.jsx(Tooltip, { accessibilityLabel: tooltip.accessibilityLabel, idealDirection: tooltip.idealDirection, inline: tooltip.inline, text: tooltip.text, zIndex: tooltip.zIndex, children: buttonComponent })) : (buttonComponent);
    return label && size === 'xl' ? (jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", direction: "column", children: [buttonWithTooltip, labelComponent] })) : (buttonWithTooltip);
});
InternalIconButtonWithForwardRef.displayName = 'IconButton';

/**
 * [IconButton](https://gestalt.pinterest.systems/web/iconbutton) allows users to take actions and make choices with a single click or tap. IconButtons use icons instead of text to convey available actions on a screen. IconButton is typically found in forms, dialogs and toolbars.
 Some buttons are specialized for particular tasks, such as navigation or presenting menus.
 *
 * ![IconButton light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/IconButton.spec.ts-snapshots/IconButton-chromium-darwin.png)
 * ![IconButton dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/IconButton-dark.spec.ts-snapshots/IconButton-dark-chromium-darwin.png)
 *
 */
const IconButtonWithForwardRef = forwardRef(function IconButton({ accessibilityControls, accessibilityExpanded, accessibilityHaspopup, accessibilityLabel, accessibilityPopupRole, bgColor, focusColor = 'lightBackground', dangerouslySetSvgPath, dataTestId, disabled, icon, iconColor, label, name, onClick, padding, selected, size = 'lg', tabIndex = 0, tooltip, type, }, ref) {
    const innerRef = useRef(null);
    // When using both forwardRef and innerRef, React.useimperativehandle() allows a parent component
    // that renders <IconButton ref={inputRef} /> to call inputRef.current.focus()
    // @ts-expect-error - TS2322 - Type 'HTMLButtonElement | null' is not assignable to type 'HTMLButtonElement'.
    useImperativeHandle(ref, () => innerRef.current);
    return (jsxRuntime.jsx(InternalIconButtonWithForwardRef, { ref: innerRef, accessibilityControls: accessibilityControls, accessibilityExpanded: accessibilityExpanded, accessibilityHaspopup: accessibilityHaspopup, accessibilityLabel: accessibilityLabel, accessibilityPopupRole: accessibilityPopupRole, bgColor: bgColor, dangerouslySetSvgPath: dangerouslySetSvgPath, dataTestId: dataTestId, disabled: disabled, focusColor: focusColor, icon: icon, iconColor: iconColor, label: label, name: name, onClick: onClick, padding: padding, selected: selected, size: size, tabIndex: tabIndex, tooltip: tooltip, type: type === 'submit' ? 'submit' : 'button' }));
});
IconButtonWithForwardRef.displayName = 'IconButton';

const STATUS_ICONS = {
    notStarted: undefined,
    pending: { symbol: 'clock', color: 'subtle' },
    needsAttention: { symbol: 'workflow-status-problem', color: 'error' },
    complete: { symbol: 'check-circle', color: 'success' },
};
function ActivationCardLink({ data }) {
    const { accessibilityLabel, href, label, onClick, rel, target } = data;
    return (jsxRuntime.jsx(BoxWithForwardRef, { alignItems: "center", marginEnd: "auto", marginStart: "auto", marginTop: 8, paddingX: 1, rounding: "pill", children: jsxRuntime.jsx(ButtonLinkWithForwardRef, { accessibilityLabel: accessibilityLabel, color: "gray", fullWidth: true, href: href, onClick: onClick, rel: rel, size: "lg", target: target, text: label }) }));
}
function CompletedCard({ dismissButton, message, status, statusMessage, title, }) {
    const icon = STATUS_ICONS[status];
    return (jsxRuntime.jsxs(Fragment, { children: [jsxRuntime.jsxs(BoxWithForwardRef, { display: "flex", children: [icon && (jsxRuntime.jsx(BoxWithForwardRef, { alignContent: "center", display: "flex", children: jsxRuntime.jsx(BoxWithForwardRef, { marginEnd: 4, children: jsxRuntime.jsx(Icon, { accessibilityLabel: statusMessage, color: icon.color, icon: icon.symbol, size: 40 }) }) })), jsxRuntime.jsxs(BoxWithForwardRef, { children: [jsxRuntime.jsx(BoxWithForwardRef, { children: jsxRuntime.jsx(TextWithForwardRef, { size: "400", weight: "bold", children: title }) }), message && (jsxRuntime.jsx(BoxWithForwardRef, { alignContent: "start", direction: "column", flex: "grow", marginTop: 2, children: jsxRuntime.jsx(TextWithForwardRef, { color: "subtle", size: "200", children: message }) }))] })] }), dismissButton && (jsxRuntime.jsx("div", { className: classnames(styles$P.rtlPos), children: jsxRuntime.jsx(IconButtonWithForwardRef, { accessibilityLabel: dismissButton.accessibilityLabel, icon: "cancel", iconColor: "gray", onClick: dismissButton.onDismiss, padding: 4, size: "sm" }) }))] }));
}
function UncompletedCard({ dismissButton, message, link, status, statusMessage, title, }) {
    const isStarted = status !== 'notStarted';
    const icon = STATUS_ICONS[status];
    return (jsxRuntime.jsxs(Fragment, { children: [jsxRuntime.jsxs(BoxWithForwardRef, { alignContent: "center", display: "flex", height: 24, children: [icon && (jsxRuntime.jsx(BoxWithForwardRef, { marginEnd: 2, children: jsxRuntime.jsx(Icon, { accessibilityLabel: statusMessage, color: icon.color, icon: icon.symbol, size: 24 }) })), jsxRuntime.jsx(BoxWithForwardRef, { alignSelf: "center", marginTop: isStarted ? 0 : 1, children: jsxRuntime.jsx(TextWithForwardRef, { color: isStarted ? 'default' : 'subtle', size: "200", weight: "bold", children: statusMessage }) })] }), jsxRuntime.jsx(BoxWithForwardRef, { marginTop: 6, children: jsxRuntime.jsx(TextWithForwardRef, { size: "400", weight: "bold", children: title }) }), message && (jsxRuntime.jsx(BoxWithForwardRef, { alignContent: "start", direction: "column", flex: "grow", marginTop: 2, children: jsxRuntime.jsx(TextWithForwardRef, { color: "subtle", size: "200", children: message }) })), link && (jsxRuntime.jsx(BoxWithForwardRef, { children: jsxRuntime.jsx(ActivationCardLink, { data: link }) })), dismissButton && (jsxRuntime.jsx("div", { className: classnames(styles$P.rtlPos), children: jsxRuntime.jsx(IconButtonWithForwardRef, { accessibilityLabel: dismissButton.accessibilityLabel, icon: "cancel", iconColor: "gray", onClick: dismissButton.onDismiss, padding: 4, size: "sm" }) }))] }));
}
/**
 * [ActivationCards](https://gestalt.pinterest.systems/web/activationcard) are used in groups to communicate a user’s stage in a series of steps toward an overall action.
 *
 * ![ActivationCard light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/ActivationCard.spec.ts-snapshots/ActivationCard-chromium-darwin.png)
 * ![ActivationCard dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/ActivationCard-dark.spec.ts-snapshots/ActivationCard-dark-chromium-darwin.png)
 *
 */
function ActivationCard({ dismissButton, message, link, status, statusMessage, title, }) {
    var _a, _b;
    const isCompleted = status === 'complete';
    const { accessibilityDismissButtonLabel } = useDefaultLabelContext('ActivationCard');
    const { colorSchemeName } = useColorScheme();
    const isDarkMode = colorSchemeName === 'darkMode';
    return (jsxRuntime.jsx(BoxWithForwardRef, { borderStyle: "shadow", color: isDarkMode ? 'elevationFloating' : 'default', direction: "column", display: "flex", flex: "grow", height: "100%", justifyContent: "center", maxWidth: 400, padding: 6, position: "relative", rounding: 4, width: "100%", children: isCompleted ? (jsxRuntime.jsx(CompletedCard, { dismissButton: dismissButton && {
                onDismiss: dismissButton.onDismiss,
                accessibilityLabel: (_a = dismissButton.accessibilityLabel) !== null && _a !== void 0 ? _a : accessibilityDismissButtonLabel,
            }, message: message, status: status, statusMessage: statusMessage, title: title })) : (jsxRuntime.jsx(UncompletedCard, { dismissButton: dismissButton && {
                onDismiss: dismissButton.onDismiss,
                accessibilityLabel: (_b = dismissButton.accessibilityLabel) !== null && _b !== void 0 ? _b : accessibilityDismissButtonLabel,
            }, link: link, message: message, status: status, statusMessage: statusMessage, title: title })) }));
}
ActivationCard.displayName = 'ActivationCard';

const TOKEN_COLOR_GRAY_ROBOFLOW_300 = 'var(--color-gray-roboflow-300)';
const TOKEN_COLOR_TRANSPARENT = 'var(--color-transparent)';
const TOKEN_COLOR_TEXT_DEFAULT = 'var(--color-text-default)';
const TOKEN_COLOR_BACKGROUND_SELECTED_BASE = 'var(--color-background-selected-base)';
const TOKEN_COLOR_BACKGROUND_AVATAR_PLACEHOLDER = 'var(--color-background-avatar-placeholder)';
const TOKEN_COLOR_BACKGROUND_BUTTON_SELECTED_DEFAULT = 'var(--color-background-button-selected-default)';
const TOKEN_COLOR_BACKGROUND_FORMFIELD_PRIMARY = 'var(--color-background-formfield-primary)';
const TOKEN_COLOR_BACKGROUND_TABS_DEFAULT_BASE = 'var(--color-background-tabs-default-base)';
const TOKEN_COLOR_BACKGROUND_TABS_DEFAULT_HOVER = 'var(--color-background-tabs-default-hover)';
const TOKEN_COLOR_BACKGROUND_TABS_DEFAULT_ACTIVE = 'var(--color-background-tabs-default-active)';
const TOKEN_COLOR_BACKGROUND_TABS_TRANSPARENT_BASE = 'var(--color-background-tabs-transparent-base)';
const TOKEN_COLOR_BACKGROUND_TABS_TRANSPARENT_HOVER = 'var(--color-background-tabs-transparent-hover)';
const TOKEN_COLOR_BACKGROUND_TABS_TRANSPARENT_ACTIVE = 'var(--color-background-tabs-transparent-active)';
const TOKEN_COLOR_BORDER_DEFAULT = 'var(--color-border-default)';
const TOKEN_COLOR_BORDER_FOCUS = 'var(--color-border-focus)';
const TOKEN_COLOR_BORDER_TAG_DISABLED = 'var(--color-border-tag-disabled)';
const TOKEN_FONT_SIZE_100 = 'var(--font-size-100)';
const TOKEN_FONT_SIZE_200 = 'var(--font-size-200)';
const TOKEN_FONT_SIZE_300 = 'var(--font-size-300)';
const TOKEN_FONT_SIZE_400 = 'var(--font-size-400)';
const TOKEN_FONT_SIZE_500 = 'var(--font-size-500)';
const TOKEN_FONT_SIZE_600 = 'var(--font-size-600)';
const TOKEN_ROUNDING_0 = 'var(--rounding-0)';
const TOKEN_ROUNDING_300 = 'var(--rounding-300)';
const TOKEN_ROUNDING_400 = 'var(--rounding-400)';
const TOKEN_SPACE_100 = 'var(--space-100)';
const TOKEN_SPACE_400 = 'var(--space-400)';
const TOKEN_SPACE_1200 = 'var(--space-1200)';

var avatarStyles = {"container":"MZd","outline":"F_Z","outlineVR":"MCe","focused":"eKX","imageHovered":"Ij3","imagePressed":"BaB","innerDiv":"xIj","text":"sGz dyH iFc H2s","vrText":"FsB aCi","icon":"XAd","iconFillDefault":"r0-","iconFillDarkMode":"x-f"};

// Need to replace color tokens
const colorTokensLight = Object.freeze({
    'default': {
        base: '#E8E7E1',
        hover: '#D6D4CD',
        pressed: '#C2C1BC',
    },
    1: {
        // redWeak
        base: '#FFD3D1',
        hover: '#FBBEBB',
        pressed: '#F4A8A4',
    },
    2: {
        // redDefault
        base: '#FF9494',
        hover: '#F87777',
        pressed: '#ED5A5A',
    },
    3: {
        // purpleWeak
        base: '#FCD8FC',
        hover: '#FAC7FA',
        pressed: '#F8B5F8',
    },
    4: {
        // purpleDefault
        base: '#EFADEF',
        hover: '#E599E5',
        pressed: '#DA86DA',
    },
    5: {
        // blueWeak
        base: '#C5EAF7',
        hover: '#A8DDF0',
        pressed: '#8ECFE6',
    },
    6: {
        // blueDefault
        base: '#7CBEDE',
        hover: '#58A9D0',
        pressed: '#4096BF',
    },
    7: {
        // greenWeak
        base: '#D0E2A8',
        hover: '#BCD090',
        pressed: '#A7B97E',
    },
    8: {
        // greenDefault
        base: '#A8BB63',
        hover: '#93A550',
        pressed: '#81904C',
    },
    9: {
        // orangeWeak
        base: '#FDE7C9',
        hover: '#F9D9AE',
        pressed: '#F4CC95',
    },
    10: {
        // orangeDefault
        base: '#FBC55B',
        hover: '#F8B430',
        pressed: '#F1A613',
    },
});
const colorTokensDark = Object.freeze({
    'default': {
        base: '#757570',
        hover: '#757570',
        pressed: '#757570',
    },
    1: {
        // redWeak
        base: '#8A0F0F',
        hover: '#8A0F0F',
        pressed: '#8A0F0F',
    },
    2: {
        // redDefault
        base: '#B2001A',
        hover: '#B2001A',
        pressed: '#B2001A',
    },
    3: {
        // purpleWeak
        base: '#6D4270',
        hover: '#6D4270',
        pressed: '#6D4270',
    },
    4: {
        // purpleDefault
        base: '#8F4696',
        hover: '#8F4696',
        pressed: '#8F4696',
    },
    5: {
        // blueWeak
        base: '#215D82',
        hover: '#215D82',
        pressed: '#215D82',
    },
    6: {
        // blueDefault
        base: '#007DB8',
        hover: '#007DB8',
        pressed: '#007DB8',
    },
    7: {
        // greenWeak
        base: '#265926',
        hover: '#265926',
        pressed: '#265926',
    },
    8: {
        // greenDefault
        base: '#517D3B',
        hover: '#517D3B',
        pressed: '#517D3B',
    },
    9: {
        // orangeWeak
        base: '#9B4B1C',
        hover: '#9B4B1C',
        pressed: '#9B4B1C',
    },
    10: {
        // orangeDefault
        base: '#C66F31',
        hover: '#C66F31',
        pressed: '#C66F31',
    },
});
const getAvatarColorToken = (color, isHovered, isPressed, isDarkMode) => {
    const colorToken = isDarkMode ? colorTokensDark[color] : colorTokensLight[color];
    if (!colorToken || !color) {
        throw new Error(`Invalid background color: ${color}`);
    }
    if (isPressed) {
        return colorToken.pressed;
    }
    if (isHovered) {
        return colorToken.hover;
    }
    return colorToken.base;
};

var styles$K = {"overlay":"G9U","translateX10":"CKy"};

const ICON_SIZE_RATIO = (20 / 48) * 100; // For pixel perfect icon button, we use the icon (20px) to parent container (48px) size ratio
function ResponsiveFitSizeBox({ color, content, children, isCollaboratorCount, isHovered, isPressed, outline, }) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const { colorSchemeName } = useColorScheme();
    const isDarkMode = colorSchemeName === 'darkMode';
    const avatarBackgroundColor = content === 'icon' || isCollaboratorCount
        ? getAvatarColorToken('default', isHovered, isPressed, isDarkMode)
        : getAvatarColorToken(color || 'default', isHovered, isPressed, isDarkMode);
    return isInVRExperiment ? (jsxRuntime.jsx("div", { className: classnames({
            [avatarStyles.container]: true,
            [avatarStyles.outlineVR]: isInVRExperiment && outline,
        }), role: "button", style: {
            backgroundColor: avatarBackgroundColor,
        }, children: jsxRuntime.jsx("div", { className: avatarStyles.innerDiv, children: children }) })) : (jsxRuntime.jsx(BoxWithForwardRef, { color: "secondary", dangerouslySetInlineStyle: {
            __style: {
                // When specifying a padding by percentage, it's always based on the width of the parent container so we get a property that's equal to the width.s
                paddingBottom: '100%',
                borderRadius: outline ? `50%` : undefined,
                outline: outline ? `1px solid rgb(255 255 255)` : undefined,
            },
        }, position: "relative", rounding: "circle", children: jsxRuntime.jsx(BoxWithForwardRef, { bottom: true, 
            // top left bottom right constrains the circle to the exact dimensions of the responsive parent square
            display: "flex", justifyContent: "center", left: true, position: "absolute", right: true, top: true, children: children }) }));
}
function AvatarFoundation({ color, children, fontSize, isCollaboratorCount, isHovered, isPressed, outline = false, textAnchor = 'middle', title, translate, content = 'text', }) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const { colorSchemeName } = useColorScheme();
    const isDarkMode = colorSchemeName === 'darkMode';
    return (jsxRuntime.jsxs(ResponsiveFitSizeBox, { color: color, content: content, isCollaboratorCount: isCollaboratorCount, isHovered: isHovered, isPressed: isPressed, outline: outline, children: [content === 'text' ? (jsxRuntime.jsxs("svg", { preserveAspectRatio: "xMidYMid meet", version: "1.1", viewBox: isInVRExperiment ? '-25 -25 50 50' : '-50 -50 100 100', width: "100%", xmlns: "http://www.w3.org/2000/svg", children: [title ? jsxRuntime.jsx("title", { children: title }) : null, jsxRuntime.jsx("text", { className: classnames(translate && styles$K[translate], // if addCollaborator button is present, translateX moves numbers closer to the edge
                        {
                            [avatarStyles.text]: !isInVRExperiment,
                            [avatarStyles.vrText]: isInVRExperiment,
                        }), dy: "0.35em", fill: TOKEN_COLOR_TEXT_DEFAULT, fontSize: !isInVRExperiment ? fontSize : undefined, textAnchor: textAnchor, children: children })] })) : null, content === 'icon' ? (jsxRuntime.jsxs("svg", { className: classnames({
                    [avatarStyles.icon]: true,
                    [avatarStyles.iconFillDefault]: isInVRExperiment && !isDarkMode,
                    [avatarStyles.iconFillDarkMode]: isInVRExperiment && isDarkMode,
                }), preserveAspectRatio: "xMidYMid meet" // percentual width to the parent container, reduces icon to 20px on a 48px parent container and keeps proportions upon resizing
                , role: "img" // full icon size
                , version: "1.1", viewBox: "0 0 24 24", width: `${ICON_SIZE_RATIO}%`, xmlns: "http://www.w3.org/2000/svg", children: [jsxRuntime.jsx("title", { children: "Icon" }), jsxRuntime.jsx("path", { d: (isInVRExperiment ? icons : icons$2)['person-add'] })] })) : null] }));
}

function DefaultAvatar({ accessibilityLabel, color, isHovered, isPressed, name, }) {
    var _a;
    const firstInitial = name ? (_a = Array.from(name)[0]) === null || _a === void 0 ? void 0 : _a.toUpperCase() : '';
    const title = accessibilityLabel !== null && accessibilityLabel !== void 0 ? accessibilityLabel : name;
    return (jsxRuntime.jsx(AvatarFoundation, { color: color, fontSize: "40px", isHovered: isHovered, isPressed: isPressed, textAnchor: "middle", title: title, children: firstInitial }));
}

var styles$J = {"img":"hCL kVc L4E MIw","scaledImg":"N7A XiG"};

const shouldScaleImage = (fit) => fit === 'cover' || fit === 'contain';
/**
 * [Image](https://gestalt.pinterest.systems/web/image) is the workhorse of Pinterest. If you define Pinterest to be all about collecting ideas, then images are how we choose to represent those ideas. In response, we've added a few extra superpowers to the regular img tag to make it even more awesome.
 *
 * ![Image light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Image.spec.ts-snapshots/Image-chromium-darwin.png)
 * ![Image dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Image-dark.spec.ts-snapshots/Image-dark-chromium-darwin.png)
 *
 */
class Image extends PureComponent {
    constructor() {
        super(...arguments);
        this.onLoadCalled = false;
        this.handleLoad = (event) => {
            var _a, _b;
            this.onLoadCalled = true;
            (_b = (_a = this.props).onLoad) === null || _b === void 0 ? void 0 : _b.call(_a, { event });
        };
        this.handleError = (event) => {
            var _a, _b;
            (_b = (_a = this.props).onError) === null || _b === void 0 ? void 0 : _b.call(_a, { event });
        };
        this.refCallback = (node) => {
            const { _fixCompletedOnLoad } = this.props;
            // For certain scenarios, such as server-side rendering, the image may already be loaded by the time the component is rendered resulting in the onLoad event not being triggered.
            // To address these, we can use a ref callback and check whether the image is already loaded - if it is, we trigger the onLoad event manually.
            if (_fixCompletedOnLoad && (node === null || node === void 0 ? void 0 : node.complete) && !this.onLoadCalled) {
                // Since we don't have the SyntheticEvent here,
                // we must create one with the same shape.
                // See https://reactjs.org/docs/events.html
                const loadEvent = new Event('load');
                Object.defineProperty(loadEvent, 'target', { writable: false, value: node });
                this.handleLoad(Object.assign(Object.assign({}, loadEvent), { nativeEvent: loadEvent, currentTarget: node, target: node, isDefaultPrevented: () => false, isPropagationStopped: () => false, persist: () => { }, preventDefault: () => { }, stopPropagation: () => { } }));
            }
        };
    }
    componentDidMount() {
        if (shouldScaleImage(this.props.fit)) {
            this.loadImage();
        }
    }
    componentDidUpdate(prevProps) {
        const { fit, src } = this.props;
        if (shouldScaleImage(fit) && prevProps.src !== src) {
            this.loadImage();
        }
    }
    loadImage() {
        if (typeof window !== 'undefined') {
            const image = new window.Image();
            // @ts-expect-error - TS2322 - Type '(event: SyntheticEvent<HTMLImageElement, Event>) => void' is not assignable to type '(this: GlobalEventHandlers, ev: Event) => any'.
            image.onload = this.handleLoad;
            // @ts-expect-error - TS2322 - Type '(event: SyntheticEvent<HTMLImageElement, Event>) => void' is not assignable to type 'OnErrorEventHandler'.
            image.onerror = this.handleError;
            image.src = this.props.src;
        }
    }
    render() {
        const { alt, color, children, crossOrigin, decoding, elementTiming, fetchPriority, fit, loading, naturalHeight, naturalWidth, role = 'img', sizes, src, srcSet, } = this.props;
        const childContent = children ? (jsxRuntime.jsx(BoxWithForwardRef, { bottom: true, left: true, overflow: "hidden", position: "absolute", right: true, top: true, children: children })) : null;
        const isScaledImage = shouldScaleImage(fit);
        const fitStyles = fit === 'cover' || fit === 'contain' ? styles$J.scaledImg : undefined;
        const imageStyles = classnames(styles$J.img, fitStyles);
        const elementTimingValue = elementTiming ? { elementtiming: elementTiming } : {};
        const styleValue = isScaledImage ? { style: { objectFit: fit } } : {};
        const conditionalProps = Object.assign(Object.assign({}, elementTimingValue), styleValue);
        return (jsxRuntime.jsxs(BoxWithForwardRef, Object.assign({ dangerouslySetInlineStyle: {
                __style: {
                    backgroundColor: color,
                    paddingBottom: isScaledImage ? undefined : `${(naturalHeight / naturalWidth) * 100}%`,
                },
            }, position: "relative" }, (isScaledImage ? { height: '100%' } : {}), { children: [jsxRuntime.jsx("img", Object.assign({ ref: this.refCallback, alt: alt, className: imageStyles, crossOrigin: crossOrigin, decoding: decoding, fetchpriority: fetchPriority, 
                    // @ts-expect-error - TS2322 - Type '"auto" | "lazy" | "eager" | undefined' is not assignable to type '"lazy" | "eager" | undefined'.
                    loading: loading, onError: this.handleError, onLoad: this.handleLoad, role: role === 'presentation' ? 'presentation' : undefined, sizes: sizes, src: src, srcSet: srcSet }, conditionalProps)), childContent] })));
    }
}
Image.defaultProps = {
    color: 'transparent',
    fetchPriority: 'auto',
    fit: 'none',
    loading: 'auto',
};
Image.displayName = 'Image';

var styles$I = {"Mask":"Pj7 sLG XiG","willChangeTransform":"m1e","wash":"KPc MIw ojN Rym p6V QLY"};

/**
 * [Mask](https://gestalt.pinterest.systems/web/mask) is used to display content in a specific shape.
 *
 * ![Mask light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Mask.spec.ts-snapshots/Mask-chromium-darwin.png)
 *
 */
function Mask({ children, rounding = 0, width, height, willChangeTransform = true, wash = false, }) {
    return (jsxRuntime.jsxs("div", { className: classnames(styles$I.Mask, getRoundingClassName(rounding), {
            [styles$I.willChangeTransform]: willChangeTransform,
        }), style: { width, height }, children: [children, wash && jsxRuntime.jsx("div", { className: styles$I.wash })] }));
}
Mask.displayName = 'Mask';

const sizes$1 = {
    xs: 24,
    sm: 32,
    md: 48,
    lg: 64,
    xl: 120,
};
function InternalAvatar(props) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const { accessibilityLabel, color, isHovered, isPressed, name, outline, size = 'fit', src, verified, } = props;
    const [isImageLoaded, setIsImageLoaded] = useState(true);
    const handleImageError = () => setIsImageLoaded(false);
    const width = size === 'fit' ? '100%' : sizes$1[size];
    const height = size === 'fit' ? '' : sizes$1[size];
    return (jsxRuntime.jsxs(BoxWithForwardRef, { dangerouslySetInlineStyle: {
            __style: outline
                ? {
                    outline: isInVRExperiment
                        ? '2px solid var(--sema-color-border-inverse)'
                        : '1px solid rgb(255 255 255)',
                }
                : {},
        }, "data-test-id": "gestalt-avatar-svg", height: height, position: "relative", rounding: "circle", width: width, children: [src && isImageLoaded ? (jsxRuntime.jsx(Mask, { rounding: "circle", wash: true, children: jsxRuntime.jsx("div", { className: classnames({
                        [avatarStyles.imageHovered]: isInVRExperiment && isHovered,
                        [avatarStyles.imagePressed]: isInVRExperiment && isPressed,
                    }), children: jsxRuntime.jsx(Image, { alt: accessibilityLabel !== null && accessibilityLabel !== void 0 ? accessibilityLabel : name, color: TOKEN_COLOR_BACKGROUND_AVATAR_PLACEHOLDER, naturalHeight: 1, naturalWidth: 1, onError: handleImageError, src: src }) }) })) : (jsxRuntime.jsx(DefaultAvatar, { accessibilityLabel: accessibilityLabel, color: color, isHovered: isHovered, isPressed: isPressed, name: name })), verified && (jsxRuntime.jsx(BoxWithForwardRef, { dangerouslySetInlineStyle: {
                    __style: {
                        bottom: '4%',
                        right: '4%',
                    },
                }, height: "25%", minHeight: 12, minWidth: 12, position: "absolute", width: "25%", children: jsxRuntime.jsx(BoxWithForwardRef, { color: "default", height: "100%", rounding: "circle", width: "100%", children: jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: "brandPrimary", icon: "check-circle", size: "100%" }) }) }))] }));
}

/**
 * [Avatar](https://gestalt.pinterest.systems/web/avatar) is used to represent a user. Every Avatar image has a subtle color wash.
 *
 * ![Avatar light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Avatar.spec.ts-snapshots/Avatar-chromium-darwin.png)
 * ![Avatar dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Avatar-dark.spec.ts-snapshots/Avatar-dark-chromium-darwin.png)
 *
 */
function Avatar({ accessibilityLabel, color, name, outline, size, src, verified }) {
    return (jsxRuntime.jsx(InternalAvatar, { accessibilityLabel: accessibilityLabel, color: color, name: name, outline: outline, size: size, src: src, verified: verified }));
}
Avatar.displayName = 'Avatar';

const SIZE_MAP = { xs: 24, sm: 32, md: 48, fit: '100%' };

/**
 *
 * [FixedZIndex](https://gestalt.pinterest.systems/web/zindex_classes#FixedZIndex) is used for setting fixed z-index values. Use this class when you want to create an initial z-index to stack others on top of. FixedZIndex must be instantiated with a number.
 *
 * ![ZIndex light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/ZIndex.spec.ts-snapshots/ZIndex-chromium-darwin.png)
 *
 */
class FixedZIndex {
    constructor(z) {
        this.z = z;
    }
    index() {
        return this.z;
    }
}
/**
 *
 * [CompositeZIndex](https://gestalt.pinterest.systems/web/zindex_classes#CompositeZIndex) is used for dynamically composing z-index values. Use this class to layer components on top of an existing z-index in the stacking context. CompositeZIndex must be instantiated with an array of FixedZIndex or CompositeZIndex instances. CompositeZIndex returns the highest z-index value in the array +1.
 *
 * ![ZIndex light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/ZIndex.spec.ts-snapshots/ZIndex-chromium-darwin.png)
 */
class CompositeZIndex {
    constructor(deps) {
        this.deps = deps;
    }
    index() {
        return Math.max(-1, ...this.deps.map((dep) => dep.index())) + 1;
    }
}

// HoverOverlay adds a pseudo-element on hover so that avatars get covered in a darker wash individually.
function AvatarGroupHoverOverlay({ children, hovered, size }) {
    return (jsxRuntime.jsx(BoxWithForwardRef, { height: SIZE_MAP[size], 
        // position="relative" is required to create a stacking context so that pseudo-elements can be positioned in front of their parent element
        position: "relative", width: SIZE_MAP[size], zIndex: new FixedZIndex(1), children: jsxRuntime.jsx("div", { className: hovered ? classnames(styles$K.overlay) : '', children: children }) }));
}

// PositioningWrapper provides a width and height for each avatar and positions them correctly in the superposed stack.
function PositioningWrapper({ size, pileCount, index, children }) {
    const FIT_SIZING_DENOMINATOR = 2 * pileCount + 1;
    const isFitSize = size === 'fit';
    let marginStart;
    if (isFitSize) {
        // Each avatar superposes a third of the previous one. Each avatar equals 3/3 parts. Two avatars are 5/5, each of them being 3/5 parts of the whole sharing a 1/5 overlapping part, and so forth. To provide a perfect-pixel positioning on any responsive size, we use the 2/3 part on each index position to place the next superposed avatar.
        marginStart = `${((2 * index) / FIT_SIZING_DENOMINATOR) * 100}%`;
    }
    else {
        marginStart = index === 0 ? '0px' : `${(-1 * SIZE_MAP[size]) / 3}px`;
    }
    // To provide a perfect-pixel width for each responsive avatar, we use the ratio of 3 parts of the total parts of the whole AvatarGroup. A 4-avatar component has 9 total parts, and each avatar's witdh is 3/9 of the total width.
    const width = isFitSize ? `${(3 / FIT_SIZING_DENOMINATOR) * 100}%` : undefined;
    return (jsxRuntime.jsx(BoxWithForwardRef, { "aria-hidden": "true", dangerouslySetInlineStyle: {
            __style: {
                marginInlineStart: marginStart,
                top: isFitSize ? 0 : undefined,
            },
        }, position: isFitSize ? 'absolute' : 'static', width: width, children: children }));
}

function AvatarGroupAddCollaboratorsButton({ hovered, isHovered, isPressed, pileCount, size, }) {
    return (jsxRuntime.jsx(PositioningWrapper, { index: pileCount - 1, pileCount: pileCount, size: size, children: jsxRuntime.jsx(AvatarGroupHoverOverlay, { hovered: hovered, size: size, children: jsxRuntime.jsx(AvatarFoundation, { content: "icon", isHovered: isHovered, isPressed: isPressed, outline: true }) }) }));
}

function AvatarGroupCollaboratorAvatar({ color, isHovered, index, name, pileCount, isPressed, size, src, }) {
    return (jsxRuntime.jsx(PositioningWrapper, { index: index, pileCount: pileCount, size: size, children: jsxRuntime.jsx(AvatarGroupHoverOverlay, { hovered: isHovered, size: size, children: jsxRuntime.jsx(InternalAvatar, { color: color, isHovered: isHovered, isPressed: isPressed, name: name, outline: true, size: size, src: src }) }) }));
}

function AvatarGroupCollaboratorsCount({ showAddCollaboratorsButton, pileCount, hovered, isHovered, isPressed, count, size, }) {
    const isOverNineCount = count > 9;
    const isAbove99Count = count > 99;
    let translate;
    if (isOverNineCount && !isAbove99Count && showAddCollaboratorsButton) {
        translate = 'translateX10';
    }
    return (jsxRuntime.jsx(PositioningWrapper, { index: 2, pileCount: pileCount, size: size, children: jsxRuntime.jsx(AvatarGroupHoverOverlay, { hovered: hovered, size: size, children: jsxRuntime.jsx(AvatarFoundation, { fontSize: "40px", isCollaboratorCount: true, isHovered: isHovered, isPressed: isPressed, outline: true, textAnchor: "middle", 
                // @ts-expect-error - TS2322 - Type 'string | undefined' is not assignable to type '"translateX10" | undefined'.
                translate: translate, children: isAbove99Count ? '99+' : count }) }) }));
}

/**
 * [TapAreaLink](https://gestalt.pinterest.systems/tapArea) is mainly used as navigational element
 *
 * ![TapAreaLink](https://raw.githubusercontent.com/pinterest/gestalt/master/docs/graphics/building-blocks/TapArea.svg)
 */
const TapAreaLinkWithForwardRef = forwardRef(function TapAreaLink({ accessibilityLabel, accessibilityCurrent, children, dataTestId, disabled = false, focusColor = 'lightBackground', fullHeight, fullWidth = true, href, innerFocusColor, mouseCursor = 'pointer', onBlur, onKeyDown, onFocus, onMouseDown, onMouseUp, onMouseEnter, onMouseLeave, onTap, tabIndex = 0, rel = 'none', rounding = 0, tapStyle = 'none', target = null, }, ref) {
    const innerRef = useRef(null);
    // When using both forwardRef and innerRef, React.useimperativehandle() allows a parent component
    // that renders <TapArea ref={inputRef} /> to call inputRef.current.focus()
    // @ts-expect-error - TS2322 - Type 'HTMLAnchorElement | null' is not assignable to type 'HTMLAnchorElement'.
    useImperativeHandle(ref, () => innerRef.current);
    const { accessibilityNewTabLabel } = useDefaultLabelContext('Link');
    return (jsxRuntime.jsxs(InternalLinkWithForwardRef, { ref: innerRef, accessibilityCurrent: accessibilityCurrent, accessibilityLabel: getAriaLabel({
            target,
            accessibilityLabel,
            accessibilityNewTabLabel,
        }), dataTestId: dataTestId, disabled: disabled, focusColor: focusColor, fullHeight: fullHeight, fullWidth: fullWidth, href: href, innerFocusColor: innerFocusColor, mouseCursor: mouseCursor, onBlur: ({ event }) => {
            if (!disabled)
                onBlur === null || onBlur === void 0 ? void 0 : onBlur({ event });
        }, onClick: ({ event, dangerouslyDisableOnNavigation }) => {
            if (!disabled) {
                onTap === null || onTap === void 0 ? void 0 : onTap({
                    event,
                    dangerouslyDisableOnNavigation,
                });
            }
        }, onFocus: ({ event }) => {
            if (!disabled)
                onFocus === null || onFocus === void 0 ? void 0 : onFocus({ event });
        }, onKeyDown: ({ event }) => {
            if (!disabled)
                onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown({ event });
        }, onMouseDown: ({ event }) => {
            // @ts-expect-error - TS2322 - Type 'MouseEvent<HTMLAnchorElement, MouseEvent> | MouseEvent<HTMLDivElement, MouseEvent>' is not assignable to type 'MouseEvent<HTMLAnchorElement, MouseEvent>'.
            if (!disabled)
                onMouseDown === null || onMouseDown === void 0 ? void 0 : onMouseDown({ event });
        }, onMouseEnter: ({ event }) => {
            // @ts-expect-error - TS2322 - Type 'MouseEvent<HTMLAnchorElement, MouseEvent> | MouseEvent<HTMLDivElement, MouseEvent>' is not assignable to type 'MouseEvent<HTMLAnchorElement, MouseEvent>'.
            if (!disabled)
                onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter({ event });
        }, onMouseLeave: ({ event }) => {
            // @ts-expect-error - TS2322 - Type 'MouseEvent<HTMLAnchorElement, MouseEvent> | MouseEvent<HTMLDivElement, MouseEvent>' is not assignable to type 'MouseEvent<HTMLAnchorElement, MouseEvent>'.
            if (!disabled)
                onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave({ event });
        }, onMouseUp: ({ event }) => {
            // @ts-expect-error - TS2322 - Type 'MouseEvent<HTMLAnchorElement, MouseEvent> | MouseEvent<HTMLDivElement, MouseEvent>' is not assignable to type 'MouseEvent<HTMLAnchorElement, MouseEvent>'.
            if (!disabled)
                onMouseUp === null || onMouseUp === void 0 ? void 0 : onMouseUp({ event });
        }, rel: rel, rounding: rounding, tabIndex: tabIndex, tapStyle: tapStyle, target: target, wrappedComponent: "tapArea", children: [children, jsxRuntime.jsx(NewTabAccessibilityLabel, { target: target })] }));
});
TapAreaLinkWithForwardRef.displayName = 'TapAreaLink';

const MAX_COLLABORATOR_AVATARS = 3;
/**
 * [AvatarGroup](https://gestalt.pinterest.systems/web/avatargroup) is used to both display a group of user avatars and, optionally, control actions related to the users group.
 *
 * ![AvatarGroup light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/AvatarGroup.spec.ts-snapshots/AvatarGroup-chromium-darwin.png)
 * ![AvatarGroup dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/AvatarGroup-dark.spec.ts-snapshots/AvatarGroup-dark-chromium-darwin.png)
 */
const AvatarGroupWithForwardRef = forwardRef(function AvatarGroup(props, ref) {
    var _a;
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const { accessibilityLabel, accessibilityControls, accessibilityExpanded, accessibilityHaspopup, addCollaborators, collaborators, href, onClick, role, size = isInVRExperiment ? 'md' : 'fit', } = props;
    const isDisplayOnly = !role;
    const isXS = size === 'xs';
    const validCollaborators = collaborators.filter((collaborator) => collaborator && collaborator.name);
    const showCollaboratorsCount = validCollaborators.length > MAX_COLLABORATOR_AVATARS && !isXS;
    const showAddCollaboratorsButton = (_a = (!isDisplayOnly && addCollaborators && !isXS)) !== null && _a !== void 0 ? _a : false;
    const displayedCollaborators = validCollaborators.slice(0, showCollaboratorsCount ? 2 : MAX_COLLABORATOR_AVATARS);
    const pileCount = displayedCollaborators.length +
        (showCollaboratorsCount ? 1 : 0) +
        (showAddCollaboratorsButton ? 1 : 0);
    const { handleOnMouseEnter, handleOnMouseLeave, handleOnBlur, handleOnFocus, handleOnMouseDown, handleOnMouseUp, isHovered, isActive: isPressed, } = useInteractiveStates();
    const collaboratorStack = (jsxRuntime.jsxs(Fragment, { children: [displayedCollaborators.map(({ src, name, color }, index) => (jsxRuntime.jsx(AvatarGroupCollaboratorAvatar
            // eslint-disable-next-line react/no-array-index-key
            , { color: color, index: index, isHovered: isHovered, isPressed: isPressed, name: name, pileCount: pileCount, size: size, src: src || '' }, `collaboratorStack-${name}-${index}`))), showCollaboratorsCount && (jsxRuntime.jsx(AvatarGroupCollaboratorsCount, { count: collaborators.length - 2, hovered: isHovered, isHovered: isHovered, isPressed: isPressed, pileCount: pileCount, showAddCollaboratorsButton: showAddCollaboratorsButton, size: size }, `collaboratorStack-count-${collaborators.length}`)), showAddCollaboratorsButton && (jsxRuntime.jsx(AvatarGroupAddCollaboratorsButton, { hovered: isHovered, isHovered: isHovered, isPressed: isPressed, pileCount: pileCount, size: size }, `collaboratorStack-addButton-${collaborators.length}`))] }));
    const avatarGroupStack = (jsxRuntime.jsx(BoxWithForwardRef, { "aria-label": isDisplayOnly ? accessibilityLabel : undefined, dangerouslySetInlineStyle: { __style: { isolation: 'isolate' } }, position: size === 'fit' ? 'relative' : 'static', children: size === 'fit' ? collaboratorStack : jsxRuntime.jsx(FlexWithForwardRef, { children: collaboratorStack }) }));
    if (!isInVRExperiment && role === 'link' && href) {
        return (jsxRuntime.jsx(TapAreaLinkWithForwardRef, { ref: ref, accessibilityLabel: accessibilityLabel, fullWidth: false, href: href, onBlur: handleOnBlur, onFocus: handleOnFocus, onMouseDown: handleOnMouseDown, onMouseEnter: handleOnMouseEnter, onMouseLeave: handleOnMouseLeave, onMouseUp: handleOnMouseUp, onTap: ({ event, dangerouslyDisableOnNavigation }) => onClick === null || onClick === void 0 ? void 0 : onClick({ event, dangerouslyDisableOnNavigation }), rounding: "pill", tapStyle: "compress", children: avatarGroupStack }));
    }
    if (!isInVRExperiment && role === 'button' && onClick) {
        return (jsxRuntime.jsx(TapAreaWithForwardRef, { ref: ref, accessibilityControls: accessibilityControls, accessibilityExpanded: accessibilityExpanded, accessibilityHaspopup: accessibilityHaspopup, accessibilityLabel: accessibilityLabel, fullWidth: false, onBlur: handleOnBlur, onFocus: handleOnFocus, onMouseDown: handleOnMouseDown, onMouseEnter: handleOnMouseEnter, onMouseLeave: handleOnMouseLeave, onMouseUp: handleOnMouseUp, 
            // @ts-expect-error - TS2345 - Argument of type '{ event: KeyboardEvent<HTMLDivElement> | MouseEvent<HTMLDivElement, MouseEvent>; }' is not assignable to parameter of type '{ event: MouseEvent<HTMLAnchorElement, MouseEvent> | KeyboardEvent<HTMLAnchorElement> | KeyboardEvent<...> | MouseEvent<...>; dangerouslyDisableOnNavigation: () => void; }'.
            onTap: ({ event }) => onClick({ event }), rounding: "pill", tapStyle: "compress", children: avatarGroupStack }));
    }
    if (isInVRExperiment && role === 'link' && href) {
        return (jsxRuntime.jsx(TapAreaLinkWithForwardRef, { ref: ref, accessibilityLabel: accessibilityLabel, fullWidth: false, href: href, onMouseDown: handleOnMouseDown, onMouseEnter: handleOnMouseEnter, onMouseLeave: handleOnMouseLeave, onMouseUp: handleOnMouseUp, onTap: ({ event, dangerouslyDisableOnNavigation }) => onClick === null || onClick === void 0 ? void 0 : onClick({ event, dangerouslyDisableOnNavigation }), rounding: "pill", tabIndex: 0, tapStyle: "compress", children: avatarGroupStack }));
    }
    if (isInVRExperiment && role === 'button' && onClick) {
        return (jsxRuntime.jsx(TapAreaWithForwardRef, { ref: ref, accessibilityControls: accessibilityControls, accessibilityExpanded: accessibilityExpanded, accessibilityHaspopup: accessibilityHaspopup, accessibilityLabel: accessibilityLabel, fullWidth: false, innerFocusColor: "default", onMouseDown: handleOnMouseDown, onMouseEnter: handleOnMouseEnter, onMouseLeave: handleOnMouseLeave, onMouseUp: handleOnMouseUp, 
            // @ts-expect-error - TS2345 - Argument of type '{ event: KeyboardEvent<HTMLDivElement> | MouseEvent<HTMLDivElement, MouseEvent>; }' is not assignable to parameter of type '{ event: MouseEvent<HTMLAnchorElement, MouseEvent> | KeyboardEvent<HTMLAnchorElement> | KeyboardEvent<...> | MouseEvent<...>; dangerouslyDisableOnNavigation: () => void; }'.
            onTap: ({ event }) => onClick({ event }), rounding: "pill", tapStyle: "compress", children: avatarGroupStack }));
    }
    // Display-only role
    return avatarGroupStack;
});
AvatarGroupWithForwardRef.displayName = 'AvatarGroup';

var styles$H = {"dismissButton":"it_","rtlPos":"Jql","smRtlVRPos":"E4Z","lgRtlVRPos":"LEI"};

const SEMA_SPACE_800 = 'var(--sema-space-800)';
const SEMA_SPACE_1200 = 'var(--sema-space-1200)';

function DismissButton({ dismissButton, size = 'lg' }) {
    var _a;
    const { accessibilityDismissButtonLabel } = useDefaultLabelContext('BannerCallout');
    return (jsxRuntime.jsx("div", { className: classnames(styles$H.dismissButton, size === 'lg' ? styles$H.lgRtlVRPos : styles$H.smRtlVRPos), children: jsxRuntime.jsx(IconButtonWithForwardRef, { accessibilityLabel: (_a = dismissButton === null || dismissButton === void 0 ? void 0 : dismissButton.accessibilityLabel) !== null && _a !== void 0 ? _a : accessibilityDismissButtonLabel, icon: "cancel", iconColor: "darkGray", onClick: dismissButton === null || dismissButton === void 0 ? void 0 : dismissButton.onDismiss, size: "sm" }) }));
}

const DEFAULT_TEXT_COLORS$1 = {
    blue: 'inverse',
    gray: 'default',
    red: 'inverse',
    transparent: 'default',
    semiTransparentWhite: 'default',
    transparentWhiteText: 'inverse',
    white: 'default',
};
const SIZE_NAME_TO_PIXEL$3 = {
    sm: 10,
    md: 12,
    lg: 12,
};
function InternalButtonContent({ target, text, textColor, iconStart, iconEnd, size, }) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    return (jsxRuntime.jsxs(Fragment, { children: [jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", gap: { row: isInVRExperiment ? 1.5 : 2, column: 0 }, justifyContent: "center", children: [iconStart && (jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: textColor, icon: iconStart, 
                        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ readonly sm: 10; readonly md: 12; readonly lg: 12; }'.
                        size: SIZE_NAME_TO_PIXEL$3[size] })), text, iconEnd ? (jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: textColor, icon: iconEnd, 
                        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ readonly sm: 10; readonly md: 12; readonly lg: 12; }'.
                        size: SIZE_NAME_TO_PIXEL$3[size] })) : null] }), jsxRuntime.jsx(NewTabAccessibilityLabel, { target: target })] }));
}
/**
 * [Buttons](https://gestalt.pinterest.systems/web/button) allow users to perform actions within a surface. They can be used alone for immediate action, or as a trigger for another component, like [Dropdown](https://gestalt.pinterest.systems/web/dropdown) or [Popover](https://gestalt.pinterest.systems/web/popover).
 *
 * ![Button light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Button.spec.ts-snapshots/Button-chromium-darwin.png)
 * ![Button dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Button-dark.spec.ts-snapshots/Button-dark-chromium-darwin.png)
 *
 */
const ButtonWithForwardRef = forwardRef(function Button({ accessibilityControls, accessibilityExpanded, accessibilityHaspopup, accessibilityLabel, backgroundContext = 'light', color = 'gray', dataTestId, disabled = false, fullWidth = false, iconEnd, iconStart, name, onClick, selected = false, size = 'md', tabIndex = 0, text, type, }, ref) {
    var _a, _b;
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const textSizes = {
        sm: '200',
        md: '300',
        lg: '300',
    };
    const textSizesVR = {
        sm: 'xs',
        md: 'sm',
        lg: 'md',
    };
    const innerRef = useRef(null);
    // When using both forwardRef and innerRef, React.useimperativehandle() allows a parent component
    // that renders <Button ref={inputRef} /> to call inputRef.current.focus()
    // @ts-expect-error - TS2322 - Type 'HTMLButtonElement | null' is not assignable to type 'HTMLButtonElement'.
    useImperativeHandle(ref, () => innerRef.current);
    const { compressStyle, isTapping, handleBlur, handleMouseDown, handleMouseUp, handleTouchStart, handleTouchMove, handleTouchCancel, handleTouchEnd, } = useTapFeedback({
        height: (_a = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight,
        width: (_b = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _b === void 0 ? void 0 : _b.clientWidth,
    });
    const { colorSchemeName } = useColorScheme();
    // We need to make a few exceptions for accessibility reasons in darkMode for red buttons
    const isDarkMode = colorSchemeName === 'darkMode';
    const isDarkModeRed = isDarkMode && color === 'red';
    const colorClass = color === 'transparentWhiteText' && !isInVRExperiment ? 'transparent' : color;
    const { isFocusVisible } = useFocusVisible();
    const sharedTypeClasses = isInVRExperiment
        ? classnames(styles$O.buttonVr, {
            [styles$O.smVr]: size === 'sm',
            [styles$O.mdVr]: size === 'md',
            [styles$O.lgVr]: size === 'lg',
            [styles$O.inline]: !fullWidth,
            [styles$O.block]: fullWidth,
            [focusStyles.hideOutline]: !disabled && !isFocusVisible,
            [styles$O.vrFocused]: !disabled && isFocusVisible,
            [styles$O.defaultFocus]: !disabled && isFocusVisible && backgroundContext === 'light',
            [styles$O.inverseFocus]: !disabled && isFocusVisible && backgroundContext === 'dark',
        })
        : classnames(styles$O.button, {
            [styles$O.inline]: !fullWidth,
            [styles$O.block]: fullWidth,
            [focusStyles.hideOutline]: !disabled && !isFocusVisible,
            [focusStyles.accessibilityOutline]: !disabled && isFocusVisible,
        });
    const baseTypeClasses = isInVRExperiment
        ? classnames(sharedTypeClasses, touchableStyles.tapTransition, {
            [styles$O.selected]: !disabled && selected,
            [styles$O.disabled]: disabled,
            [styles$O.enabled]: !disabled,
            [touchableStyles.tapCompress]: !disabled && isTapping,
        })
        : classnames(sharedTypeClasses, touchableStyles.tapTransition, {
            [styles$O.sm]: size === 'sm',
            [styles$O.md]: size === 'md',
            [styles$O.lg]: size === 'lg',
            [styles$O[colorClass]]: !disabled && !selected,
            [styles$O.selected]: !disabled && selected,
            [styles$O.disabled]: disabled,
            [styles$O.enabled]: !disabled,
            [touchableStyles.tapCompress]: !disabled && isTapping,
        });
    const parentButtonClasses = classnames(sharedTypeClasses, styles$O.parentButton, isInVRExperiment && {
        [styles$O[colorClass]]: !disabled && !selected,
    });
    const childrenDivClasses = classnames(baseTypeClasses, styles$O.childrenDiv);
    const textColor = (disabled && 'disabled') ||
        (selected && 'inverse') ||
        (isDarkModeRed && 'default') ||
        (isInVRExperiment && isDarkMode && color === 'blue' && 'default') ||
        DEFAULT_TEXT_COLORS$1[color];
    const buttonText = isInVRExperiment ? (jsxRuntime.jsx(TextUIWithForwardRef, { align: "center", color: textColor, overflow: "normal", size: textSizesVR[size], children: text })) : (jsxRuntime.jsx(TextWithForwardRef, { align: "center", color: textColor, overflow: "normal", size: textSizes[size], weight: "bold", children: text }));
    if (type === 'submit') {
        return (jsxRuntime.jsx("button", { ref: innerRef, "aria-label": accessibilityLabel, className: baseTypeClasses, "data-test-id": dataTestId, disabled: disabled, name: name, onBlur: handleBlur, onClick: (event) => onClick === null || onClick === void 0 ? void 0 : onClick({ event }), onMouseDown: handleMouseDown, onMouseUp: handleMouseUp, onTouchCancel: handleTouchCancel, onTouchEnd: handleTouchEnd, 
            // @ts-expect-error - TS2322 - Type '(arg1: TouchEvent<HTMLDivElement>) => void' is not assignable to type 'TouchEventHandler<HTMLButtonElement>'.
            onTouchMove: handleTouchMove, 
            // @ts-expect-error - TS2322 - Type '(arg1: TouchEvent<HTMLDivElement>) => void' is not assignable to type 'TouchEventHandler<HTMLButtonElement>'.
            onTouchStart: handleTouchStart, style: compressStyle || undefined, 
            // @ts-expect-error - TS2322 - Type '0 | -1 | null' is not assignable to type 'number | undefined'.
            tabIndex: disabled ? null : tabIndex, type: "submit", children: jsxRuntime.jsx(InternalButtonContent, { iconEnd: iconEnd, size: size, text: buttonText, textColor: textColor }) }));
    }
    return (jsxRuntime.jsx("button", { ref: innerRef, "aria-controls": accessibilityControls, "aria-expanded": accessibilityExpanded, "aria-haspopup": accessibilityHaspopup, "aria-label": accessibilityLabel, className: parentButtonClasses, "data-test-id": dataTestId, disabled: disabled, name: name, onBlur: handleBlur, onClick: (event) => onClick === null || onClick === void 0 ? void 0 : onClick({ event }), onMouseDown: handleMouseDown, onMouseUp: handleMouseUp, onTouchCancel: handleTouchCancel, onTouchEnd: handleTouchEnd, 
        // @ts-expect-error - TS2322 - Type '(arg1: TouchEvent<HTMLDivElement>) => void' is not assignable to type 'TouchEventHandler<HTMLButtonElement>'.
        onTouchMove: handleTouchMove, 
        // @ts-expect-error - TS2322 - Type '(arg1: TouchEvent<HTMLDivElement>) => void' is not assignable to type 'TouchEventHandler<HTMLButtonElement>'.
        onTouchStart: handleTouchStart, style: isInVRExperiment ? compressStyle || undefined : undefined, 
        // @ts-expect-error - TS2322 - Type '0 | -1 | null' is not assignable to type 'number | undefined'.
        tabIndex: disabled ? null : tabIndex, type: "button", children: jsxRuntime.jsx("div", { className: childrenDivClasses, style: compressStyle || undefined, children: iconEnd || iconStart ? (jsxRuntime.jsx(InternalButtonContent, { iconEnd: iconEnd, iconStart: iconStart, size: size, text: buttonText, textColor: textColor })) : (buttonText) }) }));
});
ButtonWithForwardRef.displayName = 'Button';

function Action({ data, level, type, size = 'lg', }) {
    const primaryColor = 'red';
    let secondaryColor = 'white';
    if (type === 'default') {
        secondaryColor = 'gray';
    }
    const color = level === 'primary' ? primaryColor : secondaryColor;
    const { accessibilityLabel, disabled, label } = data;
    return data.role === 'link' ? (jsxRuntime.jsx(ButtonLinkWithForwardRef, { accessibilityLabel: accessibilityLabel, color: color, disabled: disabled, fullWidth: true, href: data.href, onClick: data.onClick, rel: data.rel, size: size, target: data.target, text: label })) : (jsxRuntime.jsx(ButtonWithForwardRef, { accessibilityLabel: accessibilityLabel, color: color, disabled: disabled, fullWidth: true, onClick: data.onClick, size: size, text: label }));
}
function Footer({ secondaryAction, primaryAction, type, checkWrapped = false, marginTop, buttonSize, }) {
    const [isWrapped, setIsWrapped] = useState(false);
    const wrappedRef = useRef(null);
    const checkWrappedButton = useCallback(() => {
        if (wrappedRef.current && !isWrapped && wrappedRef.current.offsetTop > 0) {
            setIsWrapped(true);
        }
        else if (wrappedRef.current && isWrapped && !(wrappedRef.current.offsetTop > 0)) {
            setIsWrapped(false);
        }
    }, [isWrapped]);
    useEffect(() => {
        if (checkWrapped) {
            checkWrappedButton();
            if (typeof window !== 'undefined')
                window.addEventListener('resize', checkWrappedButton);
        }
        return () => {
            if (checkWrapped && typeof window !== 'undefined')
                window === null || window === void 0 ? void 0 : window.removeEventListener('resize', checkWrappedButton);
        };
    }, [checkWrappedButton, checkWrapped]);
    return (jsxRuntime.jsx(BoxWithForwardRef, { marginTop: marginTop, position: "relative", children: jsxRuntime.jsxs(FlexWithForwardRef, { gap: 2, height: "100%", justifyContent: "end", wrap: true, children: [secondaryAction && (jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: isWrapped && checkWrapped ? 'grow' : undefined, children: jsxRuntime.jsx(Action, { data: secondaryAction, level: "secondary", size: buttonSize, type: type }) })), primaryAction && (jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: isWrapped && checkWrapped ? 'grow' : undefined, children: jsxRuntime.jsx(BoxWithForwardRef, { ref: wrappedRef, width: "100%", children: jsxRuntime.jsx(Action, { data: primaryAction, level: "primary", size: buttonSize, type: type }) }) }))] }) }));
}

var styles$G = {"Heading":"lH1 dyH iFc H2s","HeadingVR":"FAo dyH","lg":"opk","md":"I1Q","sm":"gOF","xs":"WN9","xxs":"PRd"};

function isNotNullish$1(val) {
    return val !== null && val !== undefined;
}
const defaultHeadingLevels = {
    '100': 6,
    '200': 5,
    '300': 4,
    '400': 3,
    '500': 2,
    '600': 1,
};
const defaultHeadingLevelsVR = {
    '100': 5,
    '200': 5,
    '300': 4,
    '400': 3,
    '500': 2,
    '600': 1,
};
/**
 * [Heading](https://gestalt.pinterest.systems/web/heading) allows you to add H1–H6 level text on a page. They are generally placed underneath a PageHeader, and provide you with a way to create a logical text hierarchy.
 *
 * ![Heading light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Heading.spec.ts-snapshots/Heading-chromium-darwin.png)
 * ![Heading dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Heading-dark.spec.ts-snapshots/Heading-dark-chromium-darwin.png)
 *
 */
function Heading({ accessibilityLevel, align = 'start', children, color = 'default', lineClamp, id, overflow = 'breakWord', size = '600', }) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const getWordBreakStyle = () => {
        if (overflow === 'breakAll') {
            return typographyStyle.breakAll;
        }
        // default to breakWord if lineClamp is set
        if (overflow === 'breakWord' || isNotNullish$1(lineClamp)) {
            return typographyStyle.breakWord;
        }
        return undefined;
    };
    const cs = classnames({
        [styles$G.Heading]: !isInVRExperiment,
        [styles$G.HeadingVR]: isInVRExperiment,
        [typographyStyle[`fontSize${size}`]]: !isInVRExperiment,
        [styles$G.lg]: isInVRExperiment && size === '600',
        [styles$G.md]: isInVRExperiment && size === '500',
        [styles$G.sm]: isInVRExperiment && size === '400',
        [styles$G.xs]: isInVRExperiment && size === '300',
        [styles$G.xxs]: isInVRExperiment && (size === '200' || size === '100'),
    }, color && semanticColors.includes(color) && stylesText[color], align === 'center' && typographyStyle.alignCenter, 
    // @ts-expect-error - TS2367 - This condition will always return 'false' since the types '"center" | "start" | "end" | "forceLeft" | "forceRight"' and '"justify"' have no overlap.
    align === 'justify' && typographyStyle.alignJustify, align === 'start' && typographyStyle.alignStart, align === 'end' && typographyStyle.alignEnd, align === 'forceLeft' && typographyStyle.alignForceLeft, align === 'forceRight' && typographyStyle.alignForceRight, getWordBreakStyle(), isNotNullish$1(lineClamp) && typographyStyle.lineClamp);
    const headingLevel = accessibilityLevel ||
        (!isInVRExperiment ? defaultHeadingLevels[size] : defaultHeadingLevelsVR[size]);
    let newProps = { className: cs };
    if (id) {
        // @ts-expect-error - TS2322 - Type '{ id: string; className: string; }' is not assignable to type '{ className: string; }'.
        newProps = Object.assign(Object.assign({}, newProps), { id });
    }
    if (isNotNullish$1(lineClamp) && typeof children === 'string') {
        newProps = Object.assign(Object.assign({}, newProps), { 
            // @ts-expect-error - TS2322 - Type '{ style: { WebkitLineClamp: number | undefined; }; title: string; className: string; }' is not assignable to type '{ className: string; }'.
            style: { WebkitLineClamp: lineClamp }, title: children });
    }
    return createElement(headingLevel === 'none' ? 'div' : `h${headingLevel}`, newProps, children);
}
Heading.displayName = 'Heading';

const MESSAGING_ATTRIBUTES = Object.freeze({
    neutral: {
        backgroundColor: 'secondary',
    },
    default: {
        icon: 'pinterest',
        iconColor: 'default',
        color: 'white',
        backgroundColor: 'default',
    },
    success: {
        icon: 'check-circle',
        iconColor: 'success',
        color: 'successBase',
        backgroundColor: 'successWeak',
    },
    info: {
        icon: 'info-circle',
        iconColor: 'info',
        color: 'infoBase',
        backgroundColor: 'infoWeak',
    },
    warning: {
        icon: 'workflow-status-warning',
        iconColor: 'warning',
        color: 'warningBase',
        backgroundColor: 'warningWeak',
    },
    error: {
        icon: 'workflow-status-problem',
        iconColor: 'error',
        color: 'errorBase',
        backgroundColor: 'errorWeak',
    },
    recommendation: {
        icon: 'sparkle',
        iconColor: 'recommendation',
        color: 'recommendationBase',
        backgroundColor: 'recommendationWeak',
    },
});

function HeaderSection({ iconSize, gap, title, message, type, iconAccessibilityLabel, marginBottom, }) {
    var _a, _b;
    const { iconAccessibilityLabelError, iconAccessibilityLabelInfo, iconAccessibilityLabelRecommendation, iconAccessibilityLabelSuccess, iconAccessibilityLabelWarning, } = useDefaultLabelContext('BannerCallout');
    const getDefaultIconAccessibilityLabel = () => {
        switch (type) {
            case 'success':
                return iconAccessibilityLabelSuccess;
            case 'info':
                return iconAccessibilityLabelInfo;
            case 'recommendation':
                return iconAccessibilityLabelRecommendation;
            case 'warning':
                return iconAccessibilityLabelWarning;
            case 'error':
                return iconAccessibilityLabelError;
            default:
                return '';
        }
    };
    return (jsxRuntime.jsxs(BoxWithForwardRef, { marginBottom: marginBottom, children: [jsxRuntime.jsxs(FlexWithForwardRef, { gap: gap, children: [jsxRuntime.jsx(Icon, { accessibilityLabel: iconAccessibilityLabel !== null && iconAccessibilityLabel !== void 0 ? iconAccessibilityLabel : getDefaultIconAccessibilityLabel(), color: (_a = MESSAGING_ATTRIBUTES[type]) === null || _a === void 0 ? void 0 : _a.iconColor, icon: (_b = MESSAGING_ATTRIBUTES[type]) === null || _b === void 0 ? void 0 : _b.icon, size: iconSize }), jsxRuntime.jsx(BoxWithForwardRef, { maxWidth: 648, children: (title || message) && (jsxRuntime.jsxs(FlexWithForwardRef, { direction: "column", gap: 2, width: "100%", children: [title && jsxRuntime.jsx(Heading, { size: "400", children: title }), message && typeof message === 'string' && jsxRuntime.jsx(TextWithForwardRef, { children: message }), message &&
                                    typeof message !== 'string' &&
                                    // @ts-expect-error - TS2339
                                    Children.only(message).type.displayName === 'Text'
                                    ? message
                                    : null] })) })] }), ' '] }));
}

function BannerCallout$1({ dismissButton, iconAccessibilityLabel, message, primaryAction, secondaryAction, type, title, }) {
    var _a;
    const isRtl = typeof document === 'undefined' ? false : (document === null || document === void 0 ? void 0 : document.dir) === 'rtl';
    const largePadding = isRtl
        ? { paddingRight: SEMA_SPACE_800, paddingLeft: SEMA_SPACE_1200 }
        : { paddingRight: SEMA_SPACE_1200, paddingLeft: SEMA_SPACE_800 };
    const backgroundColor = (_a = MESSAGING_ATTRIBUTES[type]) === null || _a === void 0 ? void 0 : _a.backgroundColor;
    return (jsxRuntime.jsxs(BoxWithForwardRef, { width: "100%", children: [jsxRuntime.jsx(BoxWithForwardRef, { borderStyle: type === 'default' ? 'sm' : undefined, color: backgroundColor, display: "block", lgDisplay: "none", padding: 6, position: "relative", rounding: 4, smDisplay: "none", width: "100%", children: jsxRuntime.jsxs(FlexWithForwardRef, { direction: "column", width: "100%", children: [jsxRuntime.jsx(FlexWithForwardRef.Item, { minWidth: 0, children: jsxRuntime.jsx(HeaderSection, { gap: 3, iconAccessibilityLabel: iconAccessibilityLabel, iconSize: 24, marginBottom: primaryAction || secondaryAction ? 4 : undefined, message: message, title: title, type: type }) }), (primaryAction || secondaryAction) && (jsxRuntime.jsx(Footer, { buttonSize: "md", checkWrapped: true, marginTop: 4, primaryAction: primaryAction, secondaryAction: secondaryAction, type: type })), dismissButton && jsxRuntime.jsx(DismissButton, { dismissButton: dismissButton, size: "sm" })] }) }), jsxRuntime.jsx(BoxWithForwardRef, { borderStyle: type === 'default' ? 'sm' : undefined, color: backgroundColor, dangerouslySetInlineStyle: { __style: largePadding }, display: "none", lgDisplay: "none", paddingY: 8, position: "relative", rounding: 4, smDisplay: "block", width: "100%", children: jsxRuntime.jsxs(FlexWithForwardRef, { direction: "column", width: "100%", children: [jsxRuntime.jsx(FlexWithForwardRef.Item, { minWidth: 0, children: jsxRuntime.jsx(HeaderSection, { gap: 6, iconAccessibilityLabel: iconAccessibilityLabel, iconSize: 32, message: message, title: title, type: type }) }), (primaryAction || secondaryAction) && (jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "grow", children: jsxRuntime.jsx(Footer, { buttonSize: "lg", marginTop: 6, primaryAction: primaryAction, secondaryAction: secondaryAction, type: type }) })), dismissButton && jsxRuntime.jsx(DismissButton, { dismissButton: dismissButton })] }) }), jsxRuntime.jsx(BoxWithForwardRef, { borderStyle: type === 'default' ? 'sm' : undefined, color: backgroundColor, dangerouslySetInlineStyle: { __style: largePadding }, display: "none", lgDisplay: "block", paddingY: 8, position: "relative", rounding: 4, smDisplay: "none", width: "100%", children: jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", width: "100%", wrap: true, children: [jsxRuntime.jsx(FlexWithForwardRef.Item, { minWidth: 0, children: jsxRuntime.jsx(HeaderSection, { gap: 6, iconAccessibilityLabel: iconAccessibilityLabel, iconSize: 32, message: message, title: title, type: type }) }), (primaryAction || secondaryAction) && (jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "grow", children: jsxRuntime.jsx(Footer, { buttonSize: "lg", marginTop: 0, primaryAction: primaryAction, secondaryAction: secondaryAction, type: type }) })), dismissButton && jsxRuntime.jsx(DismissButton, { dismissButton: dismissButton })] }) })] }));
}

function addListener(mediaQuery, callback) {
    // addEventListener on mediaQuery is not supported in all browsers (Edge / Safari)
    // https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/addListener
    if (mediaQuery.addEventListener) {
        mediaQuery.addEventListener('change', callback);
    }
    else if (mediaQuery.addListener) {
        mediaQuery.addListener(callback);
    }
}
function removeListener(mediaQuery, callback) {
    if (mediaQuery.removeEventListener) {
        mediaQuery.removeEventListener('change', callback);
    }
    else if (mediaQuery.removeListener) {
        mediaQuery.removeListener(callback);
    }
}

const breakpoints = {
    sm: '(min-width: 576px)',
    md: '(min-width: 768px)',
    lg: '(min-width: 1312px)',
};
function useResponsiveMinWidth() {
    const supportsMatchMedia = typeof window !== 'undefined' && window.matchMedia;
    const mediaQuery = useMemo(() => supportsMatchMedia
        ? {
            lg: window.matchMedia(breakpoints.lg),
            md: window.matchMedia(breakpoints.md),
            sm: window.matchMedia(breakpoints.sm),
        }
        : undefined, [supportsMatchMedia]);
    const getMinWidth = useCallback(() => supportsMatchMedia && mediaQuery
        ? (mediaQuery.lg.matches && 'lg') ||
            (mediaQuery.md.matches && 'md') ||
            (mediaQuery.sm.matches && 'sm') ||
            'xs'
        : undefined, [mediaQuery, supportsMatchMedia]);
    const [minWidth, setMinWidth] = useState(supportsMatchMedia ? getMinWidth() : undefined);
    useEffect(() => {
        if (!supportsMatchMedia) {
            return () => { };
        }
        const handleChange = () => {
            setMinWidth(getMinWidth());
        };
        handleChange();
        if (mediaQuery) {
            addListener(mediaQuery.lg, handleChange);
            addListener(mediaQuery.md, handleChange);
            addListener(mediaQuery.sm, handleChange);
        }
        return () => {
            if (mediaQuery) {
                removeListener(mediaQuery.lg, handleChange);
                removeListener(mediaQuery.md, handleChange);
                removeListener(mediaQuery.sm, handleChange);
            }
        };
    }, [getMinWidth, mediaQuery, supportsMatchMedia]);
    // @ts-expect-error - TS2322 - Type 'string | undefined' is not assignable to type 'MinWidthType | null | undefined'.
    return minWidth;
}

function BannerCalloutAction({ data, stacked, level, type, }) {
    const primaryColor = 'white';
    let secondaryColor = 'transparent';
    if (type === 'default') {
        secondaryColor = 'gray';
    }
    const color = level === 'primary' ? primaryColor : secondaryColor;
    const { accessibilityLabel, disabled, label } = data;
    return (jsxRuntime.jsx(BoxWithForwardRef, { alignItems: "center", display: "block", justifyContent: "center", marginTop: level === 'secondary' && stacked ? 2 : undefined, paddingX: 1, smDisplay: "flex", smMarginBottom: "auto", smMarginTop: "auto", children: data.role === 'link' ? (jsxRuntime.jsx(ButtonLinkWithForwardRef, { accessibilityLabel: accessibilityLabel, color: color, disabled: disabled, fullWidth: true, href: data.href, onClick: data.onClick, rel: data.rel, size: "lg", target: data.target, text: label })) : (jsxRuntime.jsx(ButtonWithForwardRef, { accessibilityLabel: accessibilityLabel, color: color, disabled: disabled, fullWidth: true, onClick: data.onClick, size: "lg", text: label })) }));
}
/**
 * [BannerCallout](https://gestalt.pinterest.systems/web/bannercallout) is a banner displaying short messages with helpful information for a task on the page, or something that requires the user’s attention.
 *
 * ![BannerCallout light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/BannerCallout.spec.ts-snapshots/BannerCallout-chromium-darwin.png)
 * ![BannerCallout dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/BannerCallout-dark.spec.ts-snapshots/BannerCallout-dark-chromium-darwin.png)
 *
 */
function BannerCallout({ dismissButton, iconAccessibilityLabel, message, primaryAction, secondaryAction, type, title, }) {
    var _a, _b, _c, _d;
    const responsiveMinWidth = useResponsiveMinWidth();
    const { accessibilityDismissButtonLabel, iconAccessibilityLabelError, iconAccessibilityLabelInfo, iconAccessibilityLabelRecommendation, iconAccessibilityLabelSuccess, iconAccessibilityLabelWarning, } = useDefaultLabelContext('BannerCallout');
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const getDefaultIconAccessibilityLabel = () => {
        switch (type) {
            case 'success':
                return iconAccessibilityLabelSuccess;
            case 'info':
                return iconAccessibilityLabelInfo;
            case 'recommendation':
                return iconAccessibilityLabelRecommendation;
            case 'warning':
                return iconAccessibilityLabelWarning;
            case 'error':
                return iconAccessibilityLabelError;
            default:
                return '';
        }
    };
    if (isInVRExperiment) {
        return (jsxRuntime.jsx(BannerCallout$1, { dismissButton: dismissButton, iconAccessibilityLabel: iconAccessibilityLabel, message: message, primaryAction: primaryAction, secondaryAction: secondaryAction, title: title, type: type }));
    }
    return (jsxRuntime.jsxs(BoxWithForwardRef, { borderStyle: type === 'default' ? 'sm' : undefined, color: (_a = MESSAGING_ATTRIBUTES[type]) === null || _a === void 0 ? void 0 : _a.backgroundColor, direction: "column", display: "flex", paddingX: 6, paddingY: 6, position: "relative", rounding: 4, smDirection: "row", smPadding: 8, children: [jsxRuntime.jsxs(BoxWithForwardRef, { smDisplay: "flex", smMarginBottom: -3, smMarginTop: -3, width: "100%", wrap: true, children: [jsxRuntime.jsxs(BoxWithForwardRef, { alignItems: "center", direction: "column", display: "flex", justifyContent: "center", marginBottom: primaryAction || secondaryAction ? 4 : undefined, smDirection: "row", smMarginBottom: primaryAction || secondaryAction ? 0 : undefined, smPaddingY: 3, children: [jsxRuntime.jsx(BoxWithForwardRef, { marginBottom: 4, marginTop: 0, smMarginBottom: "auto", smMarginTop: "auto", children: jsxRuntime.jsx(Icon, { accessibilityLabel: iconAccessibilityLabel !== null && iconAccessibilityLabel !== void 0 ? iconAccessibilityLabel : getDefaultIconAccessibilityLabel(), color: (_b = MESSAGING_ATTRIBUTES[type]) === null || _b === void 0 ? void 0 : _b.iconColor, icon: (_c = MESSAGING_ATTRIBUTES[type]) === null || _c === void 0 ? void 0 : _c.icon, size: 32 }) }), jsxRuntime.jsx(BoxWithForwardRef, { marginBottom: "auto", marginTop: "auto", maxWidth: 648, paddingX: 6, children: jsxRuntime.jsxs(BoxWithForwardRef, { alignItems: "center", direction: "column", display: "flex", marginBottom: "auto", marginTop: "auto", smDisplay: "block", children: [title && (jsxRuntime.jsx(BoxWithForwardRef, { marginBottom: 2, children: jsxRuntime.jsx(TextWithForwardRef, { align: responsiveMinWidth === 'xs' ? 'center' : undefined, size: "400", weight: "bold", children: title }) })), typeof message === 'string' && (jsxRuntime.jsx(TextWithForwardRef, { align: responsiveMinWidth === 'xs' ? 'center' : undefined, children: message })), typeof message !== 'string' &&
                                            // @ts-expect-error - TS2339
                                            Children.only(message).type.displayName === 'Text'
                                            ? message
                                            : null] }) })] }), (primaryAction || secondaryAction) && (jsxRuntime.jsxs(BoxWithForwardRef, { marginStart: "auto", smDisplay: "flex", smMarginEnd: 4, smPaddingY: 3, children: [secondaryAction && responsiveMinWidth !== 'xs' && (jsxRuntime.jsx(BannerCalloutAction, { data: secondaryAction, level: "secondary", type: type })), primaryAction && (jsxRuntime.jsx(BannerCalloutAction, { data: primaryAction, level: "primary", type: type })), secondaryAction && responsiveMinWidth === 'xs' && (jsxRuntime.jsx(BannerCalloutAction, { data: secondaryAction, level: "secondary", stacked: !!secondaryAction, type: type }))] }))] }), dismissButton && (jsxRuntime.jsx("div", { className: classnames(styles$H.dismissButton, styles$H.rtlPos), children: jsxRuntime.jsx(IconButtonWithForwardRef, { accessibilityLabel: (_d = dismissButton.accessibilityLabel) !== null && _d !== void 0 ? _d : accessibilityDismissButtonLabel, icon: "cancel", iconColor: "darkGray", onClick: dismissButton.onDismiss, padding: 4, size: "sm" }) }))] }));
}
BannerCallout.displayName = 'BannerCallout';

var styles$F = {"textColorOverrideLight":"f1j","textColorOverrideDark":"VyY","parentButton":"dix adn yQo lnZ wsz"};

function CallToAction(_a) {
    var _b;
    var { accessibilityLabel, label, size = 'lg' } = _a, props = __rest(_a, ["accessibilityLabel", "label", "size"]);
    if (props.role === 'link')
        return (jsxRuntime.jsx("div", { className: styles$F.parentButton, children: jsxRuntime.jsx(ButtonLinkWithForwardRef, { accessibilityLabel: accessibilityLabel, color: props.color, href: (_b = props.href) !== null && _b !== void 0 ? _b : '', onClick: props.onClick, rel: props.rel, size: size, target: props.target, text: label }) }));
    return (jsxRuntime.jsx("div", { className: styles$F.parentButton, children: jsxRuntime.jsx(ButtonWithForwardRef, { accessibilityLabel: accessibilityLabel, color: props.color, onClick: props.onClick, size: size, text: label }) }));
}

/**
 * [ButtonGroup](https://gestalt.pinterest.systems/web/buttongroup) is used to display a series of buttons.
 *
 * ![ButtonGroup light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/ButtonGroup.spec.ts-snapshots/ButtonGroup-chromium-darwin.png)
 * ![ButtonGroup dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/ButtonGroup-dark.spec.ts-snapshots/ButtonGroup-dark-chromium-darwin.png)
 *
 */
function ButtonGroup({ children }) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    if (Children.count(children) === 0) {
        return null;
    }
    if (isInVRExperiment) {
        return (jsxRuntime.jsx(FlexWithForwardRef, { gap: 1, wrap: true, children: children }));
    }
    return (jsxRuntime.jsx(BoxWithForwardRef, { display: "flex", margin: -1, wrap: true, children: Children.map(children, (child) => child !== null && child !== undefined ? jsxRuntime.jsx(BoxWithForwardRef, { padding: 1, children: child }) : null) }));
}
ButtonGroup.displayName = 'ButtonGroup';

const InternalDismissIconButtonWithForwardRef = forwardRef(function IconButton({ accessibilityLabel, accessibilityControls, iconColor = 'darkGray', onClick, size = 'lg', }, ref) {
    var _a, _b;
    const innerRef = useRef(null);
    // When using both forwardRef and innerRef, React.useimperativehandle() allows a parent component
    // that renders <IconButton ref={inputRef} /> to call inputRef.current.focus()
    // @ts-expect-error - TS2322 - Type 'HTMLButtonElement | null' is not assignable to type 'HTMLButtonElement'.
    useImperativeHandle(ref, () => innerRef.current);
    const { compressStyle, isTapping, handleBlur, handleMouseDown, handleMouseUp, handleTouchStart, handleTouchMove, handleTouchCancel, handleTouchEnd, } = useTapFeedback({
        height: (_a = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight,
        width: (_b = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _b === void 0 ? void 0 : _b.clientWidth,
    });
    const [isFocused, setFocused] = useState(false);
    const [isHovered, setHovered] = useState(false);
    const { isFocusVisible } = useFocusVisible();
    const handleClick = (event) => (onClick ? onClick({ event }) : undefined);
    const handleOnBlur = () => setFocused(false);
    const handleOnFocus = () => setFocused(true);
    const handleOnMouseEnter = () => setHovered(true);
    const handleOnMouseLeave = () => setHovered(false);
    return (jsxRuntime.jsx("button", { ref: innerRef, "aria-controls": accessibilityControls, "aria-label": accessibilityLabel, className: classnames(styles$N.parentButton), onBlur: () => {
            handleBlur();
            handleOnBlur();
        }, onClick: handleClick, onFocus: handleOnFocus, onMouseDown: () => handleMouseDown(), onMouseEnter: handleOnMouseEnter, onMouseLeave: handleOnMouseLeave, onMouseUp: () => handleMouseUp(), onTouchCancel: handleTouchCancel, onTouchEnd: handleTouchEnd, 
        // @ts-expect-error - TS2322 - Type '(arg1: TouchEvent<HTMLDivElement>) => void' is not assignable to type 'TouchEventHandler<HTMLButtonElement>'.
        onTouchMove: handleTouchMove, 
        // @ts-expect-error - TS2322 - Type '(arg1: TouchEvent<HTMLDivElement>) => void' is not assignable to type 'TouchEventHandler<HTMLButtonElement>'.
        onTouchStart: handleTouchStart, type: "button", children: jsxRuntime.jsx("div", { className: classnames(styles$N.button, touchableStyles.tapTransition, styles$N.enabled, {
                [touchableStyles.tapCompress]: isTapping,
            }), style: compressStyle || undefined, children: jsxRuntime.jsx(Pog, { bgColor: iconColor === 'white' ? 'transparentDarkBackground' : undefined, focused: isFocusVisible && isFocused, hovered: isHovered, icon: "cancel", iconColor: iconColor, size: size }) }) }));
});
InternalDismissIconButtonWithForwardRef.displayName = 'InternalDismissIconButton';

function AccessibilityLinkActionIcon({ size, color, icon = 'visit' }) {
    const { accessibilityNewTabLabel, accessibilityDownloadLabel } = useDefaultLabelContext('Link');
    const isInExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const classNames = classnames(styles$U.rtlSupport, color ? styles$U[color] : styles$U.inherit, styles$U.icon);
    let titleLabel = '';
    if (icon === 'visit') {
        titleLabel = accessibilityNewTabLabel;
    }
    if (icon === 'download') {
        titleLabel = accessibilityDownloadLabel;
    }
    return (jsxRuntime.jsxs("svg", { className: classNames, height: size, role: "img", viewBox: "0 0 24 24", width: size, children: [jsxRuntime.jsxs("title", { children: [", ", titleLabel] }), jsxRuntime.jsx("path", { d: (isInExperiment ? icons : icons$2)[icon !== null && icon !== void 0 ? icon : 'visit'] })] }));
}

const externalLinkIconMap = {
    '100': 12,
    '200': 14,
    '300': 16,
    '400': 20,
    '500': 28,
    '600': 36,
    sm: 12,
    md: 14,
    lg: 16,
};
/**
 * [Link](https://gestalt.pinterest.systems/web/link) is mainly used as navigational element and usually appear within or directly following a paragraph or sentence.
 *
 * ![Link light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Link.spec.ts-snapshots/Link-chromium-darwin.png)
 * ![Link dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Link-dark.spec.ts-snapshots/Link-dark-chromium-darwin.png)
 *
 */
const LinkWithForwardRef = forwardRef(function Link({ accessibilityLabel, children, dataTestId, display = 'block', externalLinkIcon = 'none', href, id, onBlur, onClick, onFocus, rel = 'none', rounding = 0, underline = 'auto', tapStyle = 'none', target = null, }, ref) {
    var _a, _b, _c, _d;
    const innerRef = useRef(null);
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    // @ts-expect-error - TS2322 - Type 'HTMLAnchorElement | null' is not assignable to type 'HTMLAnchorElement'.
    useImperativeHandle(ref, () => innerRef.current);
    const { compressStyle, isTapping, handleBlur, handleMouseDown, handleMouseUp, handleTouchStart, handleTouchMove, handleTouchCancel, handleTouchEnd, } = useTapFeedback({
        height: (_a = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight,
        width: (_b = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _b === void 0 ? void 0 : _b.clientWidth,
    });
    const { accessibilityNewTabLabel } = useDefaultLabelContext('Link');
    const { isFocusVisible } = useFocusVisible();
    const isInline = ['inline', 'inlineBlock'].includes(display);
    let underlineStyle = isInline ? 'always' : 'hover';
    if (underline && underline !== 'auto') {
        underlineStyle = underline;
    }
    const className = classnames(stylesText.noOutline, stylesText.inheritColor, getRoundingClassName(rounding), Layout[display], touchableStyles.tapTransition, {
        [stylesText.hoverNoUnderline]: underlineStyle === 'always',
        [stylesText.hoverUnderline]: underlineStyle === 'hover',
        [stylesText.underline]: underlineStyle === 'always',
        [stylesText.noUnderline]: underlineStyle === 'hover' || underlineStyle === 'none',
        [stylesText.outlineFocus]: isFocusVisible,
        [focusStyles.hideOutline]: !isFocusVisible,
        [touchableStyles.tapCompress]: tapStyle === 'compress' && isTapping,
    });
    const VRclassName = classnames(stylesText.noOutline, stylesText.inheritColor, getRoundingClassName(rounding), Layout[display], touchableStyles.tapTransition, {
        [stylesText.vrInheritColor]: isInline,
        [stylesText.standalone]: !isInline,
        [stylesText.underline]: underlineStyle === 'always',
        [stylesText.noUnderline]: underlineStyle === 'hover' || underlineStyle === 'none',
        [stylesText.hoverUnderline]: underlineStyle === 'hover',
        [stylesText.outlineFocusVR]: isFocusVisible,
        [typographyStyle.fontWeightSemiBold]: !isInline,
        [focusStyles.hideOutline]: !isFocusVisible,
        [touchableStyles.tapCompress]: tapStyle === 'compress' && isTapping,
    });
    // Consumes GlobalEventsHandlerProvider
    const { linkHandlers } = (_c = useGlobalEventsHandlerContext()) !== null && _c !== void 0 ? _c : {
        linkHandlers: { onNavigation: undefined },
    };
    const { onNavigation } = linkHandlers !== null && linkHandlers !== void 0 ? linkHandlers : { onNavigation: undefined };
    const onNavigationHandler = onNavigation === null || onNavigation === void 0 ? void 0 : onNavigation({ href, target });
    const handleKeyPress = (event) => {
        // Check to see if space or enter were pressed
        if (onClick && keyPressShouldTriggerTap(event)) {
            // Prevent the default action to stop scrolling when space is pressed
            event.preventDefault();
            onClick({ event, dangerouslyDisableOnNavigation: () => { } });
        }
    };
    const ariaLabel = getAriaLabel({
        target,
        accessibilityLabel,
        accessibilityNewTabLabel,
    });
    return (jsxRuntime.jsxs("a", Object.assign({ ref: innerRef, "aria-label": ariaLabel, className: isInVRExperiment ? VRclassName : className, "data-test-id": dataTestId, href: href, id: id, onBlur: (event) => {
            handleBlur();
            onBlur === null || onBlur === void 0 ? void 0 : onBlur({ event });
        }, onClick: (event) => {
            let defaultOnNavigationIsEnabled = true;
            const dangerouslyDisableOnNavigation = () => {
                defaultOnNavigationIsEnabled = false;
            };
            onClick === null || onClick === void 0 ? void 0 : onClick({
                event,
                dangerouslyDisableOnNavigation,
            });
            if (onNavigationHandler && defaultOnNavigationIsEnabled) {
                onNavigationHandler({ event });
            }
        }, onFocus: (event) => {
            onFocus === null || onFocus === void 0 ? void 0 : onFocus({ event });
        }, onKeyPress: handleKeyPress, onMouseDown: handleMouseDown, onMouseUp: handleMouseUp, onTouchCancel: handleTouchCancel, onTouchEnd: handleTouchEnd, onTouchMove: handleTouchMove, onTouchStart: handleTouchStart, rel: [
            ...(target === 'blank' ? ['noopener', 'noreferrer'] : []),
            ...(rel === 'nofollow' ? ['nofollow'] : []),
        ].join(' ') }, (compressStyle && tapStyle === 'compress' ? { style: compressStyle } : {}), { target: target ? `_${target}` : undefined, children: [children, externalLinkIcon === 'none' ? null : (jsxRuntime.jsx(BoxWithForwardRef, { display: "inlineBlock", marginStart: 1, children: jsxRuntime.jsx(AccessibilityLinkActionIcon, { icon: "visit", size: externalLinkIcon === 'default'
                        ? externalLinkIconMap['300']
                        : externalLinkIconMap[(_d = externalLinkIcon === null || externalLinkIcon === void 0 ? void 0 : externalLinkIcon.size) !== null && _d !== void 0 ? _d : '300'] }) }))] })));
});
LinkWithForwardRef.displayName = 'Link';

var styles$E = {"icon":"YHq kVc","spin":"jfh","delay":"O-T"};

var styles$D = {"spinner":"taJ","spinnerFrame":"DVm","spin":"_iM","scale":"XtE","colors":"t8P","dot1":"HhO","dot2":"fKX","dot3":"Unn","delay":"K5N"};

const SIZE_NAME_TO_PIXEL$2 = {
    sm: 32,
    md: 40,
    lg: 48,
};
function Spinner$1({ accessibilityLabel, delay = true, show, size = 'md' }) {
    const { accessibilityLabel: accessibilityLabelDefault } = useDefaultLabelContext('Spinner');
    if (!show)
        return null;
    return (jsxRuntime.jsx(BoxWithForwardRef, { display: "flex", justifyContent: "around", children: jsxRuntime.jsx("div", { "aria-label": accessibilityLabel !== null && accessibilityLabel !== void 0 ? accessibilityLabel : accessibilityLabelDefault, className: classnames(styles$D.spinner, { [styles$D.delay]: delay }), style: {
                '--g-size': `${SIZE_NAME_TO_PIXEL$2[size]}px`,
            }, children: jsxRuntime.jsxs("div", { className: styles$D.spinnerFrame, children: [jsxRuntime.jsx("div", { className: styles$D.dot1 }), jsxRuntime.jsx("div", { className: styles$D.dot2 }), jsxRuntime.jsx("div", { className: styles$D.dot3 })] }) }) }));
}
Spinner$1.displayName = 'Spinner';

const SIZE_NAME_TO_PIXEL$1 = {
    sm: 32,
    md: 40,
};
/**
 * [Spinner](https://gestalt.pinterest.systems/web/spinner ) helps indicate that a surface's content or portion of content is currently loading.
 *
 * ![Spinner](https://raw.githubusercontent.com/pinterest/gestalt/master/docs/graphics/general/Spinner.svg)
 *
 */
function Spinner({ accessibilityLabel, color = 'subtle', delay = true, show, size = 'md', }) {
    const { accessibilityLabel: accessibilityLabelDefault } = useDefaultLabelContext('Spinner');
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    if (isInVRExperiment) {
        return (jsxRuntime.jsx(Spinner$1, { accessibilityLabel: accessibilityLabel, delay: delay, show: show, size: size }));
    }
    return show ? (jsxRuntime.jsx(BoxWithForwardRef, { display: "flex", justifyContent: "around", overflow: "hidden", children: jsxRuntime.jsx("div", { className: classnames(styles$E.icon, { [styles$E.delay]: delay }), children: jsxRuntime.jsx(Icon, { accessibilityLabel: accessibilityLabel !== null && accessibilityLabel !== void 0 ? accessibilityLabel : accessibilityLabelDefault, color: color, icon: "knoop", size: SIZE_NAME_TO_PIXEL$1[size] }) }) })) : (jsxRuntime.jsx("div", {}));
}
Spinner.displayName = 'Spinner';

const SIZE_THUMBNAIL = 32;
const SIZE_ICON = 24;
function Message({ text, textElement, helperLink, textColor, type, }) {
    var _a, _b;
    const isInExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const isError = type === 'error';
    const textRef = useRef(null);
    const [ellipsisActive, setEllipsisActive] = useState(false);
    // There’s two attributes for HTML elements which we can use to check if the text is truncated, offsetHeight and scrollHeight. scrollHeight is the total scrollable content height, and offsetHeight is the visible height on the screen. For an overflow view, the scrollHeight is larger than offsetHeight. We can deduce that if the scrollHeight is larger than the offsetHeight, then the element is truncated.
    const isEllipsisActive = (element) => element.offsetHeight < element.scrollHeight || element.offsetWidth < element.scrollWidth;
    const checkEllipsisActive = useCallback(() => {
        if (textRef.current && !ellipsisActive && isEllipsisActive(textRef === null || textRef === void 0 ? void 0 : textRef.current)) {
            setEllipsisActive(true);
        }
        else if (textRef.current && ellipsisActive && !isEllipsisActive(textRef === null || textRef === void 0 ? void 0 : textRef.current)) {
            setEllipsisActive(false);
        }
    }, [ellipsisActive]);
    useEffect(() => {
        checkEllipsisActive();
        if (typeof window !== 'undefined')
            window.addEventListener('resize', checkEllipsisActive);
        return () => {
            if (typeof window !== 'undefined')
                window === null || window === void 0 ? void 0 : window.removeEventListener('resize', checkEllipsisActive);
        };
    }, [checkEllipsisActive]);
    const isTruncated = !textElement && text && ellipsisActive && !isInExperiment;
    const isTruncatedWithHelperLink = isTruncated && helperLink && !isInExperiment;
    return (jsxRuntime.jsxs(Fragment, { children: [textElement !== null && textElement !== void 0 ? textElement : null, !textElement && text ? (jsxRuntime.jsxs(TextWithForwardRef, { ref: textRef, align: "start", color: textColor, inline: true, lineClamp: isInExperiment ? undefined : 2, title: isTruncated && typeof text === 'string' ? text : undefined, 
                // Set title prop manually if text is truncated
                weight: isError && !isInExperiment ? 'bold' : undefined, children: [text, helperLink ? (jsxRuntime.jsxs(Fragment, { children: [' ', jsxRuntime.jsx(TextWithForwardRef, { color: textColor, inline: true, weight: isError && !isInExperiment ? 'bold' : undefined, children: jsxRuntime.jsx(LinkWithForwardRef, { accessibilityLabel: helperLink.accessibilityLabel, display: "inlineBlock", href: helperLink.href, onClick: helperLink.onClick, target: "blank", children: helperLink.text }) })] })) : null] })) : null, isTruncatedWithHelperLink ? (jsxRuntime.jsx(TextWithForwardRef, { color: textColor, weight: isError ? 'bold' : undefined, children: jsxRuntime.jsx(LinkWithForwardRef, { accessibilityLabel: (_a = helperLink === null || helperLink === void 0 ? void 0 : helperLink.accessibilityLabel) !== null && _a !== void 0 ? _a : '', display: "inlineBlock", href: (_b = helperLink === null || helperLink === void 0 ? void 0 : helperLink.href) !== null && _b !== void 0 ? _b : '', onClick: helperLink === null || helperLink === void 0 ? void 0 : helperLink.onClick, target: "blank", children: helperLink === null || helperLink === void 0 ? void 0 : helperLink.text }) })) : null] }));
}
function ImageThumbnail({ thumbnail }) {
    return (jsxRuntime.jsx(BoxWithForwardRef, { "aria-hidden": true, children: jsxRuntime.jsx(Mask, { height: SIZE_THUMBNAIL, rounding: 2, width: SIZE_THUMBNAIL, children: thumbnail }) }));
}
function IconThumbnail({ thumbnail, overrideColor, }) {
    return (jsxRuntime.jsx(BoxWithForwardRef, { "aria-hidden": true, children: cloneElement(thumbnail, {
            size: SIZE_ICON,
            color: overrideColor !== null && overrideColor !== void 0 ? overrideColor : thumbnail.props.color,
        }) }));
}
function AvatarThumbnail({ thumbnail }) {
    return jsxRuntime.jsx(BoxWithForwardRef, { "aria-hidden": true, children: cloneElement(thumbnail, { size: 'sm' }) });
}
function TypeThumbnail({ type }) {
    const { colorSchemeName } = useColorScheme();
    const { accessibilityIconSuccessLabel, accessibilityIconErrorLabel, accessibilityProcessingLabel, } = useDefaultLabelContext('Toast');
    const isInExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    return (jsxRuntime.jsxs(Fragment, { children: [type === 'error' ? (jsxRuntime.jsx(Icon, { accessibilityLabel: accessibilityIconErrorLabel, color: "inverse", icon: "workflow-status-problem", size: SIZE_ICON })) : null, type === 'success' ? (jsxRuntime.jsx(ColorSchemeProvider, { colorScheme: colorSchemeName === 'darkMode' ? 'light' : 'dark', id: "icon-toast-success", children: jsxRuntime.jsx(Icon, { accessibilityLabel: accessibilityIconSuccessLabel, color: isInExperiment ? 'default' : 'success', icon: "workflow-status-ok", size: SIZE_ICON }) })) : null, type === 'progress' ? (jsxRuntime.jsx(Spinner, { accessibilityLabel: accessibilityProcessingLabel, color: "default", show: true, size: "sm" })) : null] }));
}

const DEFAULT_COLORS$1 = {
    lightModeBackground: 'default',
    darkModeBackground: 'elevationFloating',
    textColor: 'default',
    iconColor: 'white',
};
/**
 * [BannerOverlays](https://gestalt.pinterest.systems/web/banneroverlay) displays short educational messages when users have performed actions that indicate some intent, such as a related pin tap or idea pin swipe. It is scrim-less, meaning users can scroll content underneath without having a wash layer on top of the content.
 *
 * BannerOverlay is a sticky component triggered by scroll, on tap or long-press, placed at the bottom of the screen.
 * ![BannerOverlay light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/BannerOverlay.spec.ts-snapshots/BannerOverlay-chromium-darwin.png)
 */
function BannerOverlay({ message, title, onDismiss, primaryAction, secondaryAction, offset = { top: 0, bottom: 0, reverseOffset: false }, thumbnail, zIndex, }) {
    const { colorSchemeName } = useColorScheme();
    const isDarkMode = colorSchemeName === 'darkMode';
    const isMobileDevice = useDeviceType() === 'mobile';
    let messageTextElement;
    if (typeof message === 'string') {
        messageTextElement = message;
    }
    // If `message` is a Text component, we need to override any text colors within to ensure they all match
    const checkTextNode = () => {
        const messageIsTextNode = typeof message !== 'string' &&
            // @ts-expect-error - TS2339
            Children.only(message).type.displayName === 'Text';
        if (messageIsTextNode) {
            const textColorOverrideStyles = isDarkMode
                ? styles$F.textColorOverrideDark
                : styles$F.textColorOverrideLight;
            messageTextElement = jsxRuntime.jsx("span", { className: textColorOverrideStyles, children: message });
        }
        return messageIsTextNode;
    };
    const { accessibilityDismissButtonLabel: accessibilityDismissButtonLabelDefault } = useDefaultLabelContext('BannerOverlay');
    const { lightModeBackground, darkModeBackground, textColor } = DEFAULT_COLORS$1;
    const dismissButtonComponent = (jsxRuntime.jsx(InternalDismissIconButtonWithForwardRef, { accessibilityLabel: accessibilityDismissButtonLabelDefault, iconColor: "darkGray", onClick: onDismiss, size: "xs" }));
    const getPosition = () => {
        if (!offset.reverseOffset && isMobileDevice)
            return { bottom: offset.bottom, top: 'unset' };
        if (!offset.reverseOffset && !isMobileDevice)
            return { bottom: 'unset', top: offset.top };
        if (offset.reverseOffset && !isMobileDevice)
            return { bottom: offset.bottom, top: 'unset' };
        if (offset.reverseOffset && isMobileDevice)
            return { bottom: 'unset', top: offset.top };
        return { bottom: 0, top: 0 };
    };
    const isMessageTextNode = checkTextNode();
    return (jsxRuntime.jsxs(Fragment, { children: [jsxRuntime.jsx(BoxWithForwardRef, { display: "none", smDisplay: "flex", children: jsxRuntime.jsxs(BoxWithForwardRef, { alignContent: "center", borderStyle: "shadow", color: isDarkMode ? darkModeBackground : lightModeBackground, dangerouslySetInlineStyle: {
                        __style: {
                            position: 'fixed',
                            bottom: getPosition().bottom,
                            top: getPosition().top,
                            left: '50%',
                            transform: 'translateX(-50%)',
                        },
                    }, direction: "row", display: "flex", fit: true, justifyContent: "between", maxWidth: 900, paddingX: 4, paddingY: 3, position: "fixed", rounding: 4, smPaddingY: 4, width: "calc(100% - 32px)", zIndex: zIndex, children: [jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", gap: 4, children: [!!(thumbnail === null || thumbnail === void 0 ? void 0 : thumbnail.image) &&
                                    // @ts-expect-error TS2339 - Property 'image' does not exist.
                                    Children.only(thumbnail.image).type.displayName === 'Image' ? (jsxRuntime.jsx(FlexWithForwardRef.Item, { alignSelf: "center", children: jsxRuntime.jsx(ImageThumbnail, { thumbnail: thumbnail.image }) })) : null, !!(thumbnail === null || thumbnail === void 0 ? void 0 : thumbnail.icon) &&
                                    // @ts-expect-error TS2339 - Property 'icon' does not exist.
                                    Children.only(thumbnail.icon).type.displayName === 'Icon' ? (jsxRuntime.jsx(FlexWithForwardRef.Item, { alignSelf: "center", children: jsxRuntime.jsx(IconThumbnail, { thumbnail: thumbnail.icon }) })) : null, !!(thumbnail === null || thumbnail === void 0 ? void 0 : thumbnail.avatar) &&
                                    // @ts-expect-error TS2339 - Property 'avatar' does not exist.
                                    Children.only(thumbnail.avatar).type.displayName === 'Avatar' ? (jsxRuntime.jsx(FlexWithForwardRef.Item, { alignSelf: "center", children: jsxRuntime.jsx(AvatarThumbnail, { thumbnail: thumbnail.avatar }) })) : null, jsxRuntime.jsxs(FlexWithForwardRef.Item, { flex: "grow", children: [jsxRuntime.jsx(FlexWithForwardRef, { direction: "row", justifyContent: "between", children: title ? (jsxRuntime.jsx(TextWithForwardRef, { weight: "bold", children: title })) : (jsxRuntime.jsx(Message, { text: isMessageTextNode ? undefined : messageTextElement, textColor: textColor, textElement: isMessageTextNode ? messageTextElement : undefined })) }), title && (jsxRuntime.jsx(Message, { text: isMessageTextNode ? undefined : messageTextElement, textColor: textColor, textElement: isMessageTextNode ? messageTextElement : undefined }))] })] }), jsxRuntime.jsxs(FlexWithForwardRef, { alignSelf: "center", direction: "row", gap: 4, children: [jsxRuntime.jsxs(ButtonGroup, { children: [secondaryAction && (jsxRuntime.jsx(FlexWithForwardRef.Item, { children: secondaryAction.role === 'link' ? (jsxRuntime.jsx(CallToAction, { accessibilityLabel: secondaryAction.accessibilityLabel, color: "gray", href: secondaryAction.href, label: secondaryAction.label, onClick: secondaryAction.onClick, rel: secondaryAction === null || secondaryAction === void 0 ? void 0 : secondaryAction.rel, role: "link", size: "sm", target: secondaryAction === null || secondaryAction === void 0 ? void 0 : secondaryAction.target })) : (jsxRuntime.jsx(CallToAction, { accessibilityLabel: secondaryAction.accessibilityLabel, color: "gray", label: secondaryAction.label, onClick: secondaryAction.onClick, role: "button", size: "sm" })) })), primaryAction && (jsxRuntime.jsx(FlexWithForwardRef.Item, { children: primaryAction.role === 'link' ? (jsxRuntime.jsx(CallToAction, { accessibilityLabel: primaryAction.accessibilityLabel, color: "red", href: primaryAction.href, label: primaryAction.label, onClick: primaryAction.onClick, rel: primaryAction === null || primaryAction === void 0 ? void 0 : primaryAction.rel, role: "link", size: "sm", target: primaryAction === null || primaryAction === void 0 ? void 0 : primaryAction.target })) : (jsxRuntime.jsx(CallToAction, { accessibilityLabel: primaryAction.accessibilityLabel, color: "red", label: primaryAction.label, onClick: primaryAction.onClick, role: "button", size: "sm" })) }))] }), !!onDismiss && jsxRuntime.jsx(FlexWithForwardRef.Item, { alignSelf: "center", children: dismissButtonComponent })] })] }) }), jsxRuntime.jsx(BoxWithForwardRef, { display: "flex", smDisplay: "none", children: jsxRuntime.jsxs(BoxWithForwardRef, { alignContent: "stretch", borderStyle: "shadow", color: isDarkMode ? darkModeBackground : lightModeBackground, dangerouslySetInlineStyle: {
                        __style: {
                            position: 'fixed',
                            bottom: getPosition().bottom,
                            top: getPosition().top,
                            left: '50%',
                            transform: 'translateX(-50%)',
                        },
                    }, direction: "column", display: "flex", fit: true, justifyContent: "center", maxWidth: 348, paddingX: 4, paddingY: 3, position: "fixed", rounding: 4, smPaddingY: 4, width: "calc(100% - 32px)", zIndex: zIndex, children: [jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", gap: 4, children: [!!(thumbnail === null || thumbnail === void 0 ? void 0 : thumbnail.image) &&
                                    // @ts-expect-error - TS2339 - Property 'image' does not exist.
                                    Children.only(thumbnail.image).type.displayName === 'Image' ? (jsxRuntime.jsx(FlexWithForwardRef.Item, { alignSelf: "baseline", children: jsxRuntime.jsx(ImageThumbnail, { thumbnail: thumbnail.image }) })) : null, !!(thumbnail === null || thumbnail === void 0 ? void 0 : thumbnail.icon) &&
                                    // @ts-expect-error - TS2339 - Property 'icon' does not exist.
                                    Children.only(thumbnail.icon).type.displayName === 'Icon' ? (jsxRuntime.jsx(FlexWithForwardRef.Item, { alignSelf: "baseline", children: jsxRuntime.jsx(IconThumbnail, { thumbnail: thumbnail.icon }) })) : null, !!(thumbnail === null || thumbnail === void 0 ? void 0 : thumbnail.avatar) &&
                                    // @ts-expect-error - TS2339 - Property 'avatar' does not exist.
                                    Children.only(thumbnail.avatar).type.displayName === 'Avatar' ? (jsxRuntime.jsx(FlexWithForwardRef.Item, { alignSelf: "baseline", children: jsxRuntime.jsx(AvatarThumbnail, { thumbnail: thumbnail.avatar }) })) : null, jsxRuntime.jsxs(FlexWithForwardRef.Item, { flex: "grow", children: [jsxRuntime.jsxs(FlexWithForwardRef, { direction: "row", justifyContent: "between", children: [title ? (jsxRuntime.jsx(TextWithForwardRef, { weight: "bold", children: title })) : (jsxRuntime.jsx(BoxWithForwardRef, { marginBottom: 2, children: jsxRuntime.jsx(Message, { text: isMessageTextNode ? undefined : messageTextElement, textColor: textColor, textElement: isMessageTextNode ? messageTextElement : undefined }) })), !!onDismiss && (jsxRuntime.jsx(FlexWithForwardRef.Item, { alignSelf: title ? 'end' : 'start', children: dismissButtonComponent }))] }), title && (jsxRuntime.jsx(BoxWithForwardRef, { marginBottom: 2, children: jsxRuntime.jsx(Message, { text: isMessageTextNode ? undefined : messageTextElement, textColor: textColor, textElement: isMessageTextNode ? messageTextElement : undefined }) }))] })] }), jsxRuntime.jsx(FlexWithForwardRef, { alignSelf: "end", direction: "row", gap: 4, children: jsxRuntime.jsxs(ButtonGroup, { children: [secondaryAction && (jsxRuntime.jsx(FlexWithForwardRef.Item, { children: secondaryAction.role === 'link' ? (jsxRuntime.jsx(CallToAction, { accessibilityLabel: secondaryAction.accessibilityLabel, color: "gray", href: secondaryAction.href, label: secondaryAction.label, onClick: secondaryAction.onClick, rel: secondaryAction === null || secondaryAction === void 0 ? void 0 : secondaryAction.rel, role: "link", size: "sm", target: secondaryAction === null || secondaryAction === void 0 ? void 0 : secondaryAction.target })) : (jsxRuntime.jsx(CallToAction, { accessibilityLabel: secondaryAction.accessibilityLabel, color: "gray", label: secondaryAction.label, onClick: secondaryAction.onClick, role: "button", size: "sm" })) })), primaryAction && (jsxRuntime.jsx(FlexWithForwardRef.Item, { children: primaryAction.role === 'link' ? (jsxRuntime.jsx(CallToAction, { accessibilityLabel: primaryAction.accessibilityLabel, color: "red", href: primaryAction.href, label: primaryAction.label, onClick: primaryAction.onClick, rel: primaryAction === null || primaryAction === void 0 ? void 0 : primaryAction.rel, role: "link", size: "sm", target: primaryAction === null || primaryAction === void 0 ? void 0 : primaryAction.target })) : (jsxRuntime.jsx(CallToAction, { accessibilityLabel: primaryAction.accessibilityLabel, color: "red", label: primaryAction.label, onClick: primaryAction.onClick, role: "button", size: "sm" })) }))] }) })] }) })] }));
}
BannerOverlay.displayName = 'BannerOverlay';

function HelperLink({ accessibilityLabel, href, onClick, target, text }) {
    return (jsxRuntime.jsx(TextWithForwardRef, { inline: true, children: jsxRuntime.jsx(LinkWithForwardRef, { accessibilityLabel: accessibilityLabel, display: "inlineBlock", href: href, onClick: onClick, target: target, children: text }) }));
}
function PrimaryAction$3(_a) {
    var { accessibilityLabel, disabled, label } = _a, props = __rest(_a, ["accessibilityLabel", "disabled", "label"]);
    return props.role === 'link' ? (jsxRuntime.jsx(ButtonLinkWithForwardRef, { accessibilityLabel: accessibilityLabel, color: "white", disabled: disabled, fullWidth: true, href: props.href, onClick: props.onClick, rel: props.rel, size: "sm", target: props.target, text: label })) : (jsxRuntime.jsx(ButtonWithForwardRef, { accessibilityLabel: accessibilityLabel, color: "white", disabled: disabled, fullWidth: true, onClick: props.onClick, size: "sm", text: label }));
}
/**
 * [BannerSlim](https://gestalt.pinterest.systems/web/bannerslim) conveys brief information related to a specific section of a page. The message can relay success, warning, error or general information. Since they are about a specific section of a page or surface, BannerSlim sits inside of a container, and not at the top of the page. For alerts that apply to the whole page, use [BannerCallout](https://gestalt.pinterest.systems/web/bannercallout).
 *
 * ![BannerSlim light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/BannerSlim.spec.ts-snapshots/BannerSlim-chromium-darwin.png)
 * ![BannerSlim dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/BannerSlim-dark.spec.ts-snapshots/BannerSlim-dark-chromium-darwin.png)
 *
 */
function BannerSlim({ helperLink, iconAccessibilityLabel, message, onDismiss, primaryAction, type = 'neutral', }) {
    var _a, _b, _c;
    const isBare = type.endsWith('Bare');
    const isDefault = type === 'neutral';
    const status = Object.freeze({
        'neutral': 'neutral',
        'success': 'success',
        'successBare': 'success',
        'info': 'info',
        'infoBare': 'info',
        'recommendation': 'recommendation',
        'recommendationBare': 'recommendation',
        'warning': 'warning',
        'warningBare': 'warning',
        'error': 'error',
        'errorBare': 'error',
    });
    const { accessibilityDismissButtonLabel } = useDefaultLabelContext('BannerSlim');
    const { iconAccessibilityLabelError, iconAccessibilityLabelInfo, iconAccessibilityLabelRecommendation, iconAccessibilityLabelSuccess, iconAccessibilityLabelWarning, } = useDefaultLabelContext('BannerSlim');
    const getDefaultIconAccessibilityLabel = () => {
        switch (type) {
            case 'success':
            case 'successBare':
                return iconAccessibilityLabelSuccess;
            case 'info':
            case 'infoBare':
                return iconAccessibilityLabelInfo;
            case 'recommendation':
            case 'recommendationBare':
                return iconAccessibilityLabelRecommendation;
            case 'warning':
            case 'warningBare':
                return iconAccessibilityLabelWarning;
            case 'error':
            case 'errorBare':
                return iconAccessibilityLabelError;
            default:
                return '';
        }
    };
    // Buttons not allowed on compact BannerSlims
    const shouldShowButtons = !isBare && (primaryAction || onDismiss);
    return (jsxRuntime.jsxs(BoxWithForwardRef, { alignItems: "center", color: isBare ? 'transparent' : (_a = MESSAGING_ATTRIBUTES[status[type]]) === null || _a === void 0 ? void 0 : _a.backgroundColor, direction: "column", display: "flex", mdDirection: "row", padding: isBare ? 0 : 4, paddingY: isBare ? 1 : 0, rounding: 4, width: "100%", children: [jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "start", flex: "grow", gap: { row: isBare ? 2 : 4, column: 0 }, mdAlignItems: "center", width: "100%", children: [!isDefault && (jsxRuntime.jsx(FlexWithForwardRef.Item, { alignSelf: shouldShowButtons ? undefined : 'start', children: jsxRuntime.jsx(Icon, { accessibilityLabel: iconAccessibilityLabel !== null && iconAccessibilityLabel !== void 0 ? iconAccessibilityLabel : getDefaultIconAccessibilityLabel(), color: (_b = MESSAGING_ATTRIBUTES[status[type]]) === null || _b === void 0 ? void 0 : _b.iconColor, icon: (_c = MESSAGING_ATTRIBUTES[status[type]]) === null || _c === void 0 ? void 0 : _c.icon, size: 16 }) })), jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "grow", children: jsxRuntime.jsxs(BoxWithForwardRef, { dangerouslySetInlineStyle: {
                                __style: !isDefault ? { marginTop: '-1px' } : {},
                            }, children: [typeof message === 'string' ? (jsxRuntime.jsxs(TextWithForwardRef, { inline: true, children: [message, helperLink ? (jsxRuntime.jsxs(Fragment, { children: [' ', jsxRuntime.jsx(HelperLink, Object.assign({}, helperLink))] })) : null] })) : null, typeof message !== 'string' &&
                                    // @ts-expect-error - TS2339
                                    Children.only(message).type.displayName === 'Text'
                                    ? message
                                    : null] }) }), shouldShowButtons && (jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "none", children: jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", gap: { row: 4, column: 0 }, children: [primaryAction && (jsxRuntime.jsx(BoxWithForwardRef, { display: "none", flex: "none", mdDisplay: "flex", children: jsxRuntime.jsx(PrimaryAction$3, Object.assign({}, primaryAction)) })), onDismiss && (jsxRuntime.jsx(IconButtonWithForwardRef, { accessibilityLabel: accessibilityDismissButtonLabel, icon: "cancel", iconColor: "darkGray", onClick: onDismiss, size: "xs" }))] }) }))] }), !isBare && primaryAction && (jsxRuntime.jsx(BoxWithForwardRef, { alignSelf: "end", display: "flex", flex: "none", marginTop: 4, mdDisplay: "none", children: jsxRuntime.jsx(PrimaryAction$3, Object.assign({}, primaryAction)) }))] }));
}
BannerSlim.displayName = 'BannerSlim';

var styles$C = {"rtlPos":"pit","textColorOverrideLight":"oLj","textColorOverrideDark":"bGp","textAligmentOverrideCenter":"yc4","textAligmentOverrideStart":"sZI"};

/**
 * [BannerUpsell.Form](https://gestalt.pinterest.systems/web/bannerupsell#BannerUpsell.Form) can be used to add a short form to BannerUpsell for collecting data from the user.
 */
function BannerUpsellForm({ children, onSubmit, submitButtonText, submitButtonAccessibilityLabel, submitButtonDisabled, }) {
    const responsiveMinWidth = useResponsiveMinWidth();
    const isXsWidth = responsiveMinWidth === 'xs';
    return (
    // @ts-expect-error - TS2322 - Type 'FormEvent<HTMLFormElement>' is not assignable to type 'MouseEvent<HTMLButtonElement, MouseEvent> | KeyboardEvent<HTMLButtonElement> | MouseEvent<HTMLAnchorElement, MouseEvent> | KeyboardEvent<...>'.
    jsxRuntime.jsx("form", { onSubmit: (event) => onSubmit({ event }), style: { width: '100%' }, children: jsxRuntime.jsxs(FlexWithForwardRef, { direction: isXsWidth ? 'column' : 'row', gap: isXsWidth ? { column: 2, row: 0 } : { row: 2, column: 0 }, justifyContent: "end", wrap: true, children: [jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: isXsWidth ? 'shrink' : 'grow', children: jsxRuntime.jsx(BoxWithForwardRef, { marginBottom: 0, smMarginBottom: 2, children: children }) }), jsxRuntime.jsx(FlexWithForwardRef.Item, { children: jsxRuntime.jsx(ButtonWithForwardRef, { accessibilityLabel: submitButtonAccessibilityLabel, color: "red", disabled: submitButtonDisabled, fullWidth: isXsWidth, text: submitButtonText, type: "submit" }) })] }) }));
}
BannerUpsellForm.displayName = 'BannerUpsell.Form';

function UpsellAction({ data, stacked, type }) {
    var _a;
    const color = type === 'primary' ? 'red' : 'gray';
    const { accessibilityLabel, disabled, label } = data;
    return (jsxRuntime.jsx(BoxWithForwardRef, { alignItems: "center", display: "block", justifyContent: "center", marginTop: type === 'secondary' && stacked ? 2 : undefined, paddingX: 1, smDisplay: "flex", smMarginBottom: "auto", smMarginTop: "auto", children: data.role === 'link' ? (jsxRuntime.jsx(ButtonLinkWithForwardRef, { accessibilityLabel: accessibilityLabel, color: color, disabled: disabled, fullWidth: true, href: (_a = data.href) !== null && _a !== void 0 ? _a : '', onClick: data.onClick, rel: data.rel, size: "lg", target: data.target, text: label })) : (jsxRuntime.jsx(ButtonWithForwardRef, { accessibilityLabel: accessibilityLabel, color: color, disabled: disabled, fullWidth: true, onClick: data.onClick, size: "lg", text: label })) }));
}
/**
 * [BannerUpsells](https://gestalt.pinterest.systems/web/bannerupsell) are banners that display short messages that focus on promoting an action or upgrading something the user already has.
 *
 *
 * ![BannerUpsell light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/BannerUpsell.spec.ts-snapshots/BannerUpsell-chromium-darwin.png)
 * ![BannerUpsell dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/BannerUpsell-dark.spec.ts-snapshots/BannerUpsell-dark-chromium-darwin.png)
 */
function BannerUpsell({ children, dismissButton, imageData, message, primaryAction, secondaryAction, title, }) {
    var _a, _b, _c;
    const isImage = (imageData === null || imageData === void 0 ? void 0 : imageData.component) && imageData.component.type === Image;
    const responsiveMinWidth = useResponsiveMinWidth();
    const { accessibilityDismissButtonLabel } = useDefaultLabelContext('BannerUpsell');
    const hasActions = Boolean(primaryAction || secondaryAction);
    const { colorSchemeName } = useColorScheme();
    const isDarkMode = colorSchemeName === 'darkMode';
    let messageElement;
    if (typeof message === 'string') {
        messageElement = (jsxRuntime.jsx(TextWithForwardRef, { align: responsiveMinWidth === 'xs' ? 'center' : undefined, children: message }));
    }
    // If `text` is a Text component, we need to override any text colors within to ensure they all match
    if (typeof message !== 'string' &&
        // @ts-expect-error - TS2339
        Children.only(message).type.displayName === 'Text') {
        const textColorOverrideStyles = isDarkMode
            ? styles$C.textColorOverrideDark
            : styles$C.textColorOverrideLight;
        const textAligmentOverrideStyles = responsiveMinWidth === 'xs'
            ? styles$C.textAligmentOverrideCenter
            : styles$C.textAligmentOverrideStart;
        messageElement = (jsxRuntime.jsx("span", { className: classnames(textColorOverrideStyles, textAligmentOverrideStyles), children: message }));
    }
    return (jsxRuntime.jsxs(BoxWithForwardRef, { borderStyle: "shadow", color: isDarkMode ? 'elevationFloating' : 'default', direction: "column", display: "flex", paddingX: 12, paddingY: 6, position: "relative", rounding: 4, smDirection: "row", smPadding: 8, children: [jsxRuntime.jsxs(BoxWithForwardRef, { smDisplay: "flex", smMarginBottom: -3, smMarginTop: -3, width: "100%", wrap: true, children: [jsxRuntime.jsxs(BoxWithForwardRef, { alignItems: "center", direction: "column", display: "flex", flex: children ? 'grow' : 'shrink', justifyContent: "center", marginBottom: primaryAction || secondaryAction ? 4 : undefined, smDirection: "row", smMarginBottom: primaryAction || secondaryAction ? 0 : undefined, smPaddingY: 3, children: [imageData && (jsxRuntime.jsx(BoxWithForwardRef, { alignSelf: responsiveMinWidth === 'xs' ? 'center' : undefined, flex: "none", marginBottom: 4, smMarginBottom: 0, width: isImage ? Math.min(imageData.width || 128, 128) : undefined, children: jsxRuntime.jsx(Mask, { rounding: ((_a = imageData.mask) === null || _a === void 0 ? void 0 : _a.rounding) || 0, wash: ((_b = imageData.mask) === null || _b === void 0 ? void 0 : _b.wash) || false, children: imageData.component }) })), jsxRuntime.jsxs(BoxWithForwardRef, { alignItems: "center", direction: "column", display: "flex", flex: children ? 'grow' : 'shrink', marginBottom: "auto", marginEnd: 0, marginStart: 0, marginTop: "auto", smDisplay: "block", smMarginEnd: 6, smMarginStart: imageData ? 6 : 0, children: [title && (jsxRuntime.jsx(BoxWithForwardRef, { marginBottom: 2, children: jsxRuntime.jsx(TextWithForwardRef, { align: responsiveMinWidth === 'xs' ? 'center' : 'start', size: "400", weight: "bold", children: title }) })), messageElement, children && (jsxRuntime.jsx(BoxWithForwardRef, { flex: "grow", justifyContent: "end", marginTop: responsiveMinWidth === 'xs' ? 2 : undefined, smDisplay: "flex", smMarginEnd: 4, smPaddingY: 3, width: "100%", children: children }))] })] }), !children && hasActions && (jsxRuntime.jsxs(BoxWithForwardRef, { marginStart: "auto", smDisplay: "flex", smMarginEnd: 4, smPaddingY: 3, children: [secondaryAction && responsiveMinWidth !== 'xs' && (jsxRuntime.jsx(UpsellAction, { data: secondaryAction, type: "secondary" })), primaryAction && jsxRuntime.jsx(UpsellAction, { data: primaryAction, type: "primary" }), secondaryAction && responsiveMinWidth === 'xs' && (jsxRuntime.jsx(UpsellAction, { data: secondaryAction, stacked: !!secondaryAction, type: "secondary" }))] }))] }), dismissButton && (jsxRuntime.jsx("div", { className: classnames(styles$C.rtlPos), children: jsxRuntime.jsx(IconButtonWithForwardRef, { accessibilityLabel: (_c = dismissButton.accessibilityLabel) !== null && _c !== void 0 ? _c : accessibilityDismissButtonLabel, icon: "cancel", iconColor: "darkGray", onClick: dismissButton.onDismiss, padding: 4, size: "sm" }) }))] }));
}
BannerUpsell.Form = BannerUpsellForm;
BannerUpsell.displayName = 'BannerUpsell';

var styles$B = {"button":"akY KI_ Hsu USg","buttonVr":"_ym","rounding600":"jKZ","rounding400":"JkZ","rounding300":"igh","rounding200":"BcD","rounding100":"jTw","parentButton":"xuZ lnZ wsz adn","colorPickerButton":"GtQ adn","thumbnailDark":"YKy","colorPickerButtonDark":"uAs","thumbnailDisabled":"EDb","colorPickerButtonDisabled":"dbv","childrenDiv":"d24 _O1 KS5 mQ8 Tbt L4E","sm":"_Fs I56 pXK C7G","md":"bMz aZc pXK _co","lg":"LDc xD4 i1W V92","smVr":"O2c","mdVr":"Pen","lgVr":"VEB","compact":"Y2T","thumbnailSm":"Hik I56 S7o","thumbnailMd":"KFx aZc hjq _co","thumbnailLg":"dng xD4 pXK _co","enabled":"z_v BG7","activeBorderVr":"Y2e","disabledBorderVr":"rL_","disabledTransparentBorderVr":"f9N","disabled":"vNn","disabledTransparent":"vGC","disabledRed":"sHD","selected":"kJo gSJ","selectedDisabled":"VZW XgI","accessibilityOutlineLightBackground":"Oga","interactiveBorder":"w0f","red":"Rk4","transparent":"ROv"};

var styles$A = {"colorPicker":"Sqz"};

const outlineWidth = 2;
const heights = {
    sm: 32,
    md: 40,
    lg: 48,
};
const widths = {
    sm: 60,
    md: 72,
    lg: 88,
};
const rounding = {
    sm: 8,
    md: 12,
    lg: 16,
};
const skinColor = {
    skinTone1: '#F0E3DC',
    skinTone2: '#F8D7D8',
    skinTone3: '#F2D7BE',
    skinTone4: '#F7C3AF',
    skinTone5: '#DEBAB0',
    skinTone6: '#E0999A',
    skinTone7: '#DDA67C',
    skinTone8: '#D98A64',
    skinTone9: '#9A6B52',
    skinTone10: '#A25847',
    skinTone11: '#B37143',
    skinTone12: '#BF6951',
    skinTone13: '#683929',
    skinTone14: '#34261F',
    skinTone15: '#64281B',
    skinTone16: '#4F2221',
};
function getOutlineColor(hovered, selected, focused) {
    // Selection state takes precedence
    if (selected && !focused) {
        return TOKEN_COLOR_BACKGROUND_BUTTON_SELECTED_DEFAULT;
    }
    if (hovered && !focused) {
        return TOKEN_COLOR_BORDER_DEFAULT;
    }
    if (focused) {
        return TOKEN_COLOR_BORDER_FOCUS;
    }
    return 'transparent';
}
function ColorPicker({ colors, selected, isHovered, isFocused, size }) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const vrFocus = isFocused && isInVRExperiment;
    const hasBorder = isHovered || selected || vrFocus || isFocused;
    const filtersContainerHeightPx = heights[size] - (hasBorder ? outlineWidth : 0);
    const filtersContainerWidthPx = widths[size] - (hasBorder ? outlineWidth : 0);
    const outlineStyle = `${outlineWidth + ((selected && isFocused) || (!isInVRExperiment && isFocused) ? 2 : 0)}px solid ${getOutlineColor(isHovered, selected, isFocused)}`;
    return (jsxRuntime.jsx(BoxWithForwardRef, { alignContent: "center", color: "default", dangerouslySetInlineStyle: hasBorder
            ? {
                __style: {
                    outline: outlineStyle,
                    outlineOffset: isInVRExperiment || !isFocused ? outlineWidth : 0,
                    margin: outlineWidth / 2,
                },
            }
            : undefined, display: "flex", height: filtersContainerHeightPx, justifyContent: "center", overflow: "hidden", rounding: isInVRExperiment
            ? (rounding[size] / 4)
            : 'pill', width: filtersContainerWidthPx, wrap: true, children: jsxRuntime.jsx("div", { className: styles$A.colorPicker, style: { borderRadius: rounding[size] }, children: colors.map((color, index) => (jsxRuntime.jsx(BoxWithForwardRef
            // eslint-disable-next-line react/no-array-index-key
            , { dangerouslySetInlineStyle: {
                    __style: { backgroundColor: skinColor[color] },
                }, height: filtersContainerHeightPx / 2, width: filtersContainerWidthPx / 2 }, `${color}-${index}`))) }) }));
}

function ThumbnailButton({ graphicSrc, text, textColor }) {
    return (jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", direction: "column", justifyContent: "center", children: [jsxRuntime.jsx(BoxWithForwardRef, { alignItems: "center", display: "flex", justifyContent: "center", children: jsxRuntime.jsx(ImageThumbnail, { thumbnail: jsxRuntime.jsx(Image, { alt: text, naturalHeight: 1, naturalWidth: 1, src: graphicSrc }) }) }), jsxRuntime.jsx(FlexWithForwardRef, { alignSelf: "end", direction: "row", justifyContent: "center", children: jsxRuntime.jsx(TextWithForwardRef, { align: "center", color: textColor, overflow: "breakWord", size: "200", weight: "bold", children: text }) })] }));
}

var styles$z = {"tapScaleDown":"_eX","scale-down":"K2e","tapScaleUp":"t53","scale-up":"Vz_"};

const shouldKeyPressTriggerTap = (event) => ['Space', 'Enter'].includes(event.code);
function useTapScaleAnimation() {
    const elementRef = useRef(null);
    const [animatingScaleDown, setAnimatingScaleDown] = useState(false);
    const [animatingScaleUp, setAnimatingScaleUp] = useState(false);
    const [isTapping, setTapping] = useState(false);
    const handleMouseDown = () => {
        if (isTapping)
            return;
        setTapping(true);
        setAnimatingScaleDown(true);
        setAnimatingScaleUp(false);
    };
    const handleMouseUp = () => {
        setTapping(false);
        if (!animatingScaleDown)
            setAnimatingScaleUp(true);
    };
    const handleKeyDown = (event) => {
        if (shouldKeyPressTriggerTap(event))
            handleMouseDown();
    };
    const handleKeyUp = (event) => {
        if (shouldKeyPressTriggerTap(event))
            handleMouseUp();
    };
    useEffect(() => {
        const element = elementRef.current;
        const handleAnimationEnd = () => {
            setAnimatingScaleUp(!isTapping && animatingScaleDown);
            setAnimatingScaleDown(false);
        };
        element === null || element === void 0 ? void 0 : element.addEventListener('animationend', handleAnimationEnd);
        return () => {
            element === null || element === void 0 ? void 0 : element.removeEventListener('animationend', handleAnimationEnd);
        };
    }, [animatingScaleDown, isTapping]);
    const classes = classnames({
        [styles$z.tapScaleDown]: isTapping || animatingScaleDown,
        [styles$z.tapScaleUp]: animatingScaleUp,
    });
    return {
        elementRef,
        classes,
        handleMouseDown,
        handleMouseUp,
        handleKeyDown,
        handleKeyUp,
    };
}

const DEFAULT_TEXT_COLORS = {
    red: 'inverse',
    transparent: 'default',
};
const SIZE_NAME_TO_PIXEL = {
    sm: 10,
    md: 12,
    lg: 12,
};
const textSizes = {
    sm: '200',
    md: '300',
    lg: '300',
};
const textSizesVR = {
    sm: 'xs',
    md: 'sm',
    lg: 'md',
};
/**
 * [ButtonToggle](https://gestalt.pinterest.systems/web/buttontoggle) is a larger alternative to selection components such as [Checkbox](https://gestalt.pinterest.systems/web/checkbox), [RadioButton](https://gestalt.pinterest.systems/web/radiobutton), and [Switch](https://gestalt.pinterest.systems/web/switch). It enables users to choose between two states - selected or unselected.
 *
 * ![ButtonToggle light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/ButtonToggle.spec.ts-snapshots/ButtonToggle-chromium-darwin.png)
 * ![ButtonToggle dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/ButtonToggle-dark.spec.ts-snapshots/ButtonToggle-dark-chromium-darwin.png)
 *
 */
const ButtonToggleWithForwardRef = forwardRef(function ButtonToggle({ accessibilityLabel, accessibilityExpanded, color = 'transparent', dataTestId, disabled = false, hasDropdown, graphicSrc, iconStart, onBlur, onClick, onFocus, selected, size = 'md', text, accessibilityControls, }, ref) {
    var _a, _b, _c;
    if (text.length === 0 && accessibilityLabel === undefined)
        throw new Error('ButtonToggle: When text is empty, accessibilityLabel is required.');
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const innerRef = useRef(null);
    // When using both forwardRef and innerRef, React.useimperativehandle() allows a parent component
    // that renders <ButtonToggle ref={inputRef} /> to call inputRef.current.focus()
    // @ts-expect-error - TS2322 - Type 'HTMLButtonElement | null' is not assignable to type 'HTMLButtonElement'.
    useImperativeHandle(ref, () => innerRef.current);
    const { compressStyle, handleBlur, handleMouseDown, handleMouseUp, handleTouchStart, handleTouchMove, handleTouchCancel, handleTouchEnd, } = useTapFeedback({
        height: (_a = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight,
        width: (_b = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _b === void 0 ? void 0 : _b.clientWidth,
    });
    const { isHovered, handleOnMouseEnter, handleOnMouseLeave, isFocused, handleOnFocus, handleOnBlur, } = useInteractiveStates();
    const { colorSchemeName } = useColorScheme();
    // We need to make a few exceptions for accessibility reasons in darkMode for red buttons
    const isDarkMode = colorSchemeName === 'darkMode';
    const isDarkModeRed = isDarkMode && color === 'red';
    const { isFocusVisible } = useFocusVisible();
    const buttonToggleAnimation = useTapScaleAnimation();
    const borderClasses = isInVRExperiment
        ? {
            [styles$B.rounding200]: size === 'sm',
            [styles$B.rounding300]: size === 'md',
            [styles$B.rounding400]: size === 'lg',
            [styles$B.activeBorderVr]: !disabled,
            [styles$B.disabledBorderVr]: disabled && (color !== 'transparent' || selected),
            [styles$B.disabledTransparentBorderVr]: disabled && color === 'transparent' && !selected,
        }
        : {
            [styles$B.rounding600]: !graphicSrc,
            [styles$B.rounding300]: graphicSrc && size === 'lg',
            [styles$B.rounding200]: graphicSrc && size === 'md',
            [styles$B.rounding100]: graphicSrc && size === 'sm',
        };
    const sharedTypeClasses = classnames(isInVRExperiment ? styles$B.buttonVr : styles$B.button, borderClasses, {
        [focusStyles.hideOutline]: !disabled && !isFocusVisible,
        [focusStyles.accessibilityOutline]: !disabled && isFocusVisible && !isInVRExperiment,
        [styles$B.accessibilityOutlineLightBackground]: !disabled && isFocused && isFocusVisible && isInVRExperiment,
    });
    // Consume GlobalEventsHandlerProvider
    const { buttonToggleHandlers } = (_c = useGlobalEventsHandlerContext()) !== null && _c !== void 0 ? _c : {
        buttonToggleHandlers: undefined,
    };
    const sizeStyles = classnames(isInVRExperiment
        ? {
            [styles$B.lgVr]: size === 'lg' && !graphicSrc,
            [styles$B.mdVr]: size === 'md' && !graphicSrc,
            [styles$B.smVr]: size === 'sm' && !graphicSrc,
        }
        : {
            [styles$B.lg]: size === 'lg' && !graphicSrc,
            [styles$B.md]: size === 'md' && !graphicSrc,
            [styles$B.sm]: size === 'sm' && !graphicSrc,
        });
    const parentButtonClasses = classnames(sharedTypeClasses, styles$B.parentButton, borderClasses, {
        [styles$B.compact]: text.length === 0,
    });
    if (color instanceof Array) {
        return (jsxRuntime.jsx("button", { ref: innerRef, "aria-controls": accessibilityControls, "aria-expanded": accessibilityExpanded, "aria-haspopup": hasDropdown, "aria-label": accessibilityLabel || text, "aria-pressed": selected, className: classnames(borderClasses, styles$B.colorPickerButton, focusStyles.hideOutline, {
                [styles$B.colorPickerButtonDisabled]: disabled,
            }), "data-test-id": dataTestId, disabled: disabled, onBlur: (event) => {
                handleOnBlur();
                onBlur === null || onBlur === void 0 ? void 0 : onBlur({ event });
            }, onClick: (event) => {
                var _a;
                (_a = buttonToggleHandlers === null || buttonToggleHandlers === void 0 ? void 0 : buttonToggleHandlers.onClick) === null || _a === void 0 ? void 0 : _a.call(buttonToggleHandlers);
                onClick === null || onClick === void 0 ? void 0 : onClick({ event });
            }, onFocus: (event) => {
                handleOnFocus();
                onFocus === null || onFocus === void 0 ? void 0 : onFocus({ event });
            }, onKeyDown: (e) => {
                if (isInVRExperiment) {
                    buttonToggleAnimation.handleKeyDown(e);
                }
            }, onKeyUp: (e) => {
                if (isInVRExperiment) {
                    buttonToggleAnimation.handleKeyUp(e);
                }
            }, onMouseDown: () => {
                handleMouseDown();
                if (isInVRExperiment)
                    buttonToggleAnimation.handleMouseDown();
            }, onMouseEnter: handleOnMouseEnter, onMouseLeave: handleOnMouseLeave, onMouseUp: () => {
                handleMouseUp();
                if (isInVRExperiment)
                    buttonToggleAnimation.handleMouseUp();
            }, onTouchCancel: handleTouchCancel, onTouchEnd: handleTouchEnd, 
            // @ts-expect-error - TS2322 - Type '(arg1: TouchEvent<HTMLDivElement>) => void' is not assignable to type 'TouchEventHandler<HTMLButtonElement>'.
            onTouchMove: handleTouchMove, 
            // @ts-expect-error - TS2322 - Type '(arg1: TouchEvent<HTMLDivElement>) => void' is not assignable to type 'TouchEventHandler<HTMLButtonElement>'.
            onTouchStart: handleTouchStart, type: "button", children: jsxRuntime.jsx("div", { ref: buttonToggleAnimation.elementRef, className: classnames({
                    [buttonToggleAnimation.classes]: isInVRExperiment,
                }), children: jsxRuntime.jsx(ColorPicker, { colors: color, disabled: disabled, isFocused: isFocused && isFocusVisible, isHovered: isHovered, selected: selected, size: size }) }) }));
    }
    const childrenDivClasses = classnames(sharedTypeClasses, sizeStyles, styles$B.childrenDiv, {
        [buttonToggleAnimation.classes]: isInVRExperiment,
        [touchableStyles.tapTransition]: !isInVRExperiment,
        [styles$B.compact]: text.length === 0,
        [styles$B.disabled]: disabled && (color !== 'red' || selected),
        [styles$B.disabledRed]: disabled && color === 'red' && !selected,
        [styles$B.disabledTransparent]: disabled && color === 'transparent' && !selected,
        [styles$B.enabled]: !disabled,
        [borderStyles.noBorder]: color === 'red' && !selected,
        [styles$B.selected]: !disabled && selected,
        [styles$B.selectedDisabled]: disabled && selected,
        [styles$B.thumbnailDark]: graphicSrc && isDarkMode !== selected,
        [styles$B.thumbnailDisabled]: graphicSrc && disabled,
        [styles$B.thumbnailLg]: size === 'lg' && graphicSrc,
        [styles$B.thumbnailMd]: size === 'md' && graphicSrc,
        [styles$B.thumbnailSm]: size === 'sm' && graphicSrc,
        [styles$B[color]]: !disabled && !selected,
        [styles$B.interactiveBorder]: !disabled && !selected && !isFocused && color === 'transparent' && isInVRExperiment,
    });
    const textColor = (disabled && 'disabled') ||
        (selected && 'inverse') ||
        (selected && 'default') ||
        (isDarkModeRed && 'default') ||
        DEFAULT_TEXT_COLORS[color];
    const content = graphicSrc ? (jsxRuntime.jsx(ThumbnailButton, { graphicSrc: graphicSrc, text: text, textColor: textColor })) : (jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", gap: { row: isInVRExperiment ? 1.5 : 2, column: 0 }, justifyContent: "center", children: [iconStart && (jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: textColor, icon: iconStart, size: SIZE_NAME_TO_PIXEL[size] })), isInVRExperiment ? (jsxRuntime.jsx(TextUIWithForwardRef, { align: "center", color: textColor, overflow: "breakWord", size: textSizesVR[size], children: text })) : (jsxRuntime.jsx(TextWithForwardRef, { align: "center", color: textColor, overflow: "breakWord", size: textSizes[size], weight: "bold", children: text })), hasDropdown && (jsxRuntime.jsx(Icon, { accessibilityLabel: "dropdown", color: textColor, icon: "arrow-down", size: SIZE_NAME_TO_PIXEL[size] }))] }));
    return (jsxRuntime.jsx("button", { ref: innerRef, "aria-controls": accessibilityControls, "aria-expanded": accessibilityExpanded, "aria-haspopup": hasDropdown, "aria-label": accessibilityLabel || text, "aria-pressed": selected, className: parentButtonClasses, "data-test-id": dataTestId, disabled: disabled, onBlur: (event) => {
            handleBlur();
            handleOnBlur();
            onBlur === null || onBlur === void 0 ? void 0 : onBlur({ event });
        }, onClick: (event) => {
            var _a;
            (_a = buttonToggleHandlers === null || buttonToggleHandlers === void 0 ? void 0 : buttonToggleHandlers.onClick) === null || _a === void 0 ? void 0 : _a.call(buttonToggleHandlers);
            onClick === null || onClick === void 0 ? void 0 : onClick({ event });
        }, onFocus: (event) => {
            handleOnFocus();
            onFocus === null || onFocus === void 0 ? void 0 : onFocus({ event });
        }, onKeyDown: (e) => {
            if (isInVRExperiment) {
                buttonToggleAnimation.handleKeyDown(e);
            }
        }, onKeyUp: (e) => {
            if (isInVRExperiment) {
                buttonToggleAnimation.handleKeyUp(e);
            }
        }, onMouseDown: () => {
            handleMouseDown();
            if (isInVRExperiment)
                buttonToggleAnimation.handleMouseDown();
        }, onMouseUp: () => {
            handleMouseUp();
            if (isInVRExperiment)
                buttonToggleAnimation.handleMouseUp();
        }, onTouchCancel: handleTouchCancel, onTouchEnd: handleTouchEnd, 
        // @ts-expect-error - TS2322 - Type '(arg1: TouchEvent<HTMLDivElement>) => void' is not assignable to type 'TouchEventHandler<HTMLButtonElement>'.
        onTouchMove: handleTouchMove, 
        // @ts-expect-error - TS2322 - Type '(arg1: TouchEvent<HTMLDivElement>) => void' is not assignable to type 'TouchEventHandler<HTMLButtonElement>'.
        onTouchStart: handleTouchStart, type: "button", children: jsxRuntime.jsx("div", { ref: buttonToggleAnimation.elementRef, className: childrenDivClasses, style: compressStyle || undefined, children: content }) }));
});
ButtonToggleWithForwardRef.displayName = 'ButtonToggle';

var styles$y = {"sizeSm":"n_6","sizeMd":"rKi","enabled":"LnX","disabled":"mCN","checked":"ovY","errorChecked":"tHS","error":"XaH","border":"Q9m","borderSelected":"PO8","borderDisabled":"t4K","borderErrorChecked":"UuW","borderErrorUnchecked":"egs","borderHovered":"Wqy","borderHoveredError":"TbM","borderPressed":"ecS","borderPressedError":"TJ3","hovered":"jX2","focus":"yKe","hoveredError":"R9K","pressed":"UNR","pressedError":"GJu","borderRadiusSm":"QsN Pja","borderRadiusMd":"my7 DUt","vrBorderRadiusSm":"MgF","vrBorderRadiusMd":"yDE","check":"Zm- kVc Hsu _O1 KS5 mQ8 Pw5","vrCheckBackground":"hWu","vrCheckIconWrapper":"Jpr sLG","vrCheckIconEnterTransition":"QRS","vrCheckIconExitTransition":"HHG","sizeLg":"Wd9","thinBorder":"bq0 daS","thickBorder":"Nlr XgI","inputEnabled":"KVp BG7","readOnly":"BSN","input":"sGt MIw QLY e43"};

var labelStyles = {"label":"LTD kVc BG7"};

function InternalLabel({ children, htmlFor, _labelDisplay }) {
    return (jsxRuntime.jsx("label", { className: classnames(labelStyles.label, {
            [boxStyles.visuallyHidden]: _labelDisplay === 'hidden',
        }), htmlFor: htmlFor, children: children }));
}

/**
 * Use the [Label](https://gestalt.pinterest.systems/web/label) component to connect a label with a form component in an accessible way.
 *
 * ![Label light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Label.spec.ts-snapshots/Label-chromium-darwin.png)
 * ![Label dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Label-dark.spec.ts-snapshots/Label-dark-chromium-darwin.png)
 *
 */
function Label({ children, htmlFor }) {
    return jsxRuntime.jsx(InternalLabel, { htmlFor: htmlFor, children: children });
}
Label.displayName = 'Label';

var styles$x = {"formErrorMessage":"MFi"};

var styles$w = {"noStartPadding":"_g0","sm_topPadding":"DYw","sm_startPadding":"eSk","vr_sm_topPadding":"GY6","vr_sm_startPadding":"PN4","md_topPadding":"VgP","md_startPadding":"LP6","vr_md_topPadding":"G0M","vr_md_startPadding":"cOA","lg_topPadding":"lh1","lg_startPadding":"soS","vr_lg_topPadding":"xen","vr_lg_startPadding":"Jb0"};

function FormErrorMessage({ id, size, text = '', noPadding: noStartPadding, }) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    return (jsxRuntime.jsx("div", { className: classnames({
            // none
            [styles$w.noStartPadding]: noStartPadding,
            // sm
            [styles$w.sm_startPadding]: !isInVRExperiment && size === 'sm' && !noStartPadding,
            [styles$w.sm_topPadding]: !isInVRExperiment && size === 'sm',
            [styles$w.vr_sm_startPadding]: isInVRExperiment && size === 'sm' && !noStartPadding,
            [styles$w.vr_sm_topPadding]: isInVRExperiment && size === 'sm',
            // md
            [styles$w.md_startPadding]: !isInVRExperiment && size === 'md' && !noStartPadding,
            [styles$w.md_topPadding]: !isInVRExperiment && size === 'md',
            [styles$w.vr_md_startPadding]: isInVRExperiment && size === 'md' && !noStartPadding,
            [styles$w.vr_md_topPadding]: isInVRExperiment && size === 'md',
            // lg
            [styles$w.lg_startPadding]: !isInVRExperiment && size === 'lg' && !noStartPadding,
            [styles$w.lg_topPadding]: !isInVRExperiment && size === 'lg',
            [styles$w.vr_lg_startPadding]: isInVRExperiment && size === 'lg' && !noStartPadding,
            [styles$w.vr_lg_topPadding]: isInVRExperiment && size === 'lg',
        }), id: id, children: jsxRuntime.jsx(TextWithForwardRef, { color: "error", size: "100", children: jsxRuntime.jsx("span", { className: styles$x.formErrorMessage, id: id, children: jsxRuntime.jsx(BoxWithForwardRef, { role: "alert", children: jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: isInVRExperiment ? 'start' : 'center', gap: size === 'sm' || isInVRExperiment ? 1 : 2, children: [jsxRuntime.jsx(BoxWithForwardRef, { dangerouslySetInlineStyle: {
                                    __style: isInVRExperiment ? { marginTop: '2px' } : {},
                                }, children: jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: "error", icon: "workflow-status-problem", size: isInVRExperiment || size === 'sm' ? 12 : 16 }) }), text] }) }) }) }) }));
}

function FormHelperTextCounter({ disabled, currentLength, maxLength }) {
    var _a, _b, _c;
    const ref = useRef(null);
    const [width, setWidth] = useState(undefined);
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    useEffect(() => {
        var _a;
        const containerWidth = (_a = ref === null || ref === void 0 ? void 0 : ref.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width;
        setWidth(containerWidth ? Math.ceil(containerWidth) : undefined);
    }, [ref]);
    const maxLengthChars = (_a = maxLength === null || maxLength === void 0 ? void 0 : maxLength.characterCount.toString()) !== null && _a !== void 0 ? _a : '';
    const maxLengthReached = (currentLength !== null && currentLength !== void 0 ? currentLength : 0) >= ((_b = maxLength.characterCount) !== null && _b !== void 0 ? _b : 0);
    let icon = 'workflow-status-warning';
    let textColor = 'warning';
    if (typeof currentLength === 'number' &&
        typeof (maxLength === null || maxLength === void 0 ? void 0 : maxLength.characterCount) === 'number' &&
        currentLength > (maxLength === null || maxLength === void 0 ? void 0 : maxLength.characterCount)) {
        icon = 'workflow-status-problem';
        textColor = 'error';
    }
    if (disabled) {
        textColor = 'disabled';
    }
    return (jsxRuntime.jsxs(Fragment, { children: [jsxRuntime.jsx(BoxWithForwardRef, { ref: ref, dangerouslySetInlineStyle: { __style: { visibility: 'hidden' } }, position: "absolute", children: jsxRuntime.jsx(TextWithForwardRef, { color: disabled ? 'disabled' : 'subtle', size: "100", children: `${maxLengthChars}/${maxLengthChars}` }) }), jsxRuntime.jsxs(FlexWithForwardRef, { gap: 1, justifyContent: "center", children: [maxLengthReached ? (jsxRuntime.jsxs(Fragment, { children: [jsxRuntime.jsx(BoxWithForwardRef, { display: "visuallyHidden", role: "alert", children: maxLength === null || maxLength === void 0 ? void 0 : maxLength.errorAccessibilityLabel }), jsxRuntime.jsx(BoxWithForwardRef, { alignItems: "center", "aria-hidden": true, display: "flex", height: "100%", children: jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: textColor, icon: icon, size: isInVRExperiment ? 12 : 16 }) })] })) : (jsxRuntime.jsx(BoxWithForwardRef, { width: isInVRExperiment ? 12 : 16 })), jsxRuntime.jsx(FlexWithForwardRef, { justifyContent: "end", width: width, children: jsxRuntime.jsxs(TextWithForwardRef, { align: "end", color: maxLengthReached || disabled ? textColor : 'subtle', size: "100", children: [jsxRuntime.jsx(BoxWithForwardRef, { display: "visuallyHidden", children: "," }), `${(_c = currentLength === null || currentLength === void 0 ? void 0 : currentLength.toString()) !== null && _c !== void 0 ? _c : ''}/${maxLengthChars}`] }) })] })] }));
}

function FormHelperText({ disabled, id, currentLength, text, maxLength, size, noPadding: noStartPadding, }) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    return (
    // id is required for all helper texts accompanying an individual form element, not for groups of form elements such as RadioGroup.
    jsxRuntime.jsx("div", { className: classnames({
            // none
            [styles$w.noStartPadding]: !isInVRExperiment && noStartPadding,
            // sm
            [styles$w.sm_startPadding]: !isInVRExperiment && size === 'sm' && !noStartPadding,
            [styles$w.sm_topPadding]: !isInVRExperiment && size === 'sm',
            [styles$w.vr_sm_startPadding]: isInVRExperiment && size === 'sm' && !noStartPadding,
            [styles$w.vr_sm_topPadding]: isInVRExperiment && size === 'sm',
            // md
            [styles$w.md_startPadding]: !isInVRExperiment && size === 'md' && !noStartPadding,
            [styles$w.md_topPadding]: !isInVRExperiment && size === 'md',
            [styles$w.vr_md_startPadding]: isInVRExperiment && size === 'md' && !noStartPadding,
            [styles$w.vr_md_topPadding]: isInVRExperiment && size === 'md',
            // lg
            [styles$w.lg_startPadding]: !isInVRExperiment && size === 'lg' && !noStartPadding,
            [styles$w.lg_topPadding]: !isInVRExperiment && size === 'lg',
            [styles$w.vr_lg_startPadding]: isInVRExperiment && size === 'lg' && !noStartPadding,
            [styles$w.vr_lg_topPadding]: isInVRExperiment && size === 'lg',
        }), id: id, children: jsxRuntime.jsxs(FlexWithForwardRef, { gap: 4, children: [jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "grow", children: text ? (jsxRuntime.jsx(TextWithForwardRef, { color: disabled ? 'disabled' : 'subtle', size: "100", children: text })) : null }), maxLength ? (jsxRuntime.jsx(FormHelperTextCounter, { currentLength: currentLength, disabled: disabled, maxLength: maxLength })) : null] }) }));
}

const InternalCheckboxWithForwardRef = forwardRef(function Checkbox({ checked = false, disabled = false, errorMessage, helperText, id, image, indeterminate = false, label, labelDisplay = 'visible', name, onChange, onClick, readOnly = false, size = 'md', style, }, ref) {
    const innerRef = useRef(null);
    // When using both forwardRef and innerRef, React.useimperativehandle() allows a parent component
    // that renders <Checkbox ref={inputRef} /> to call inputRef.current.focus()
    // @ts-expect-error - TS2322 - Type 'HTMLInputElement | null' is not assignable to type 'HTMLInputElement'.
    useImperativeHandle(ref, () => innerRef.current);
    useEffect(() => {
        if (innerRef && innerRef.current) {
            innerRef.current.indeterminate = indeterminate;
        }
    }, [indeterminate]);
    const handleChange = (event) => {
        if (onChange) {
            onChange({ event, checked: event.target.checked });
        }
    };
    const handleClick = (event) => {
        if (onClick) {
            onClick({ event, checked: event.currentTarget.checked });
        }
    };
    const { handleOnMouseEnter, handleOnMouseLeave, handleOnBlur, handleOnFocus, handleOnMouseDown, handleOnMouseUp, isFocused, isHovered, isActive, } = useInteractiveStates();
    const { isFocusVisible } = useFocusVisible();
    const tapScaleAnimation = useTapScaleAnimation();
    let ariaDescribedby;
    if (errorMessage) {
        ariaDescribedby = `${id}-error`;
    }
    if (label && helperText) {
        ariaDescribedby = `${id}-helperText`;
    }
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    }) && !style;
    const iconSizes = {
        sm: 8,
        md: 12,
    };
    const vrIconSizes = {
        sm: 12,
        md: 16,
    };
    const borderRadiusStyle = size === 'sm' ? styles$y.borderRadiusSm : styles$y.borderRadiusMd;
    const borderRadiusStyleVr = size === 'sm' ? styles$y.vrBorderRadiusSm : styles$y.vrBorderRadiusMd;
    const styleSize = size === 'sm' ? styles$y.sizeSm : styles$y.sizeMd;
    const vrTextColor = disabled ? 'disabled' : undefined;
    const textColor = disabled ? 'subtle' : undefined;
    const vrIconColorEnabled = errorMessage ? 'error' : 'inverse';
    const vrIconColor = disabled ? 'disabled' : vrIconColorEnabled;
    const unchecked = !(checked || indeterminate);
    const bgStyle = classnames({
        [styles$y.enabled]: !isInVRExperiment && !disabled && unchecked,
        [styles$y.disabled]: disabled,
        [styles$y.checked]: !unchecked && !disabled,
        [styles$y.error]: isInVRExperiment && errorMessage && unchecked,
        [styles$y.errorChecked]: isInVRExperiment && errorMessage && !unchecked,
        [styles$y.hovered]: isInVRExperiment && !disabled && isHovered && !isActive && !errorMessage && !unchecked,
        [styles$y.hoveredError]: !disabled && isHovered && !isActive && isInVRExperiment && errorMessage && !unchecked,
        [styles$y.pressed]: isInVRExperiment && isActive && !disabled && !unchecked && !errorMessage,
        [styles$y.pressedError]: isInVRExperiment && isActive && !disabled && !unchecked && errorMessage,
    });
    const borderStyle = classnames({
        [styles$y.border]: !disabled && unchecked && !errorMessage && !isHovered,
        [styles$y.borderDisabled]: disabled,
        [styles$y.borderSelected]: !disabled && !unchecked,
        [styles$y.borderErrorUnchecked]: errorMessage && unchecked,
        [styles$y.borderErrorChecked]: errorMessage && !unchecked && isInVRExperiment,
        [styles$y.borderHovered]: !disabled && isHovered && !isActive && unchecked && (isInVRExperiment || !errorMessage),
        [styles$y.borderHoveredError]: !disabled && isHovered && !isActive && isInVRExperiment && errorMessage && unchecked,
        [styles$y.borderPressed]: isInVRExperiment && isActive && !disabled && unchecked && !errorMessage,
        [styles$y.borderPressedError]: isInVRExperiment && isActive && !disabled && unchecked && errorMessage,
    });
    const divStyles = classnames(bgStyle, borderStyle, isInVRExperiment ? borderRadiusStyleVr : borderRadiusStyle, styleSize, styles$y.check, {
        [styles$y.thickBorder]: !isInVRExperiment || (errorMessage && unchecked) || isHovered || isActive,
        [styles$y.thinBorder]: isInVRExperiment &&
            !((isFocused && isFocusVisible) || isHovered || isActive || errorMessage),
        [focusStyles.accessibilityOutlineFocus]: isFocused && isFocusVisible && !isInVRExperiment,
        [styles$y.focus]: isFocused && isFocusVisible && isInVRExperiment,
        [tapScaleAnimation.classes]: isInVRExperiment,
        [styles$y.vrCheckBackground]: isInVRExperiment,
    });
    const inputStyles = classnames(styles$y.input, styleSize, {
        [styles$y.inputEnabled]: !disabled,
        [styles$y.readOnly]: readOnly,
    });
    const iconWrapperStyles = classnames(styles$y.vrCheckIconWrapper, {
        [styles$y.vrCheckIconEnterTransition]: !unchecked,
        [styles$y.vrCheckIconExitTransition]: unchecked,
    });
    return (jsxRuntime.jsx(BoxWithForwardRef, { children: jsxRuntime.jsxs(BoxWithForwardRef, { alignItems: "start", display: "flex", justifyContent: "start", marginEnd: -1, marginStart: -1, children: [jsxRuntime.jsxs(BoxWithForwardRef, { paddingX: 1, position: "relative", children: [jsxRuntime.jsx("div", { ref: tapScaleAnimation.elementRef, className: divStyles, style: style, children: isInVRExperiment ? (jsxRuntime.jsx("div", { style: { width: vrIconSizes[size] }, children: jsxRuntime.jsx("div", { className: iconWrapperStyles, style: { width: checked || indeterminate ? vrIconSizes[size] : 0 }, children: jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: isInVRExperiment ? vrIconColor : 'inverse', icon: indeterminate ? 'dash' : 'check', size: isInVRExperiment ? vrIconSizes[size] : iconSizes[size] }) }) })) : ((checked || indeterminate) && (jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: "inverse", icon: indeterminate ? 'dash' : 'check', size: iconSizes[size] }))) }), jsxRuntime.jsx("input", { 
                            // checking for "focused" is not required by screenreaders but it prevents a11y integration tests to complain about missing label, as aria-describedby seems to shadow label in tests though it's a W3 accepeted pattern https://www.w3.org/TR/WCAG20-TECHS/ARIA1.html
                            ref: innerRef, "aria-describedby": isFocused ? ariaDescribedby : undefined, "aria-hidden": readOnly ? true : undefined, "aria-invalid": errorMessage ? 'true' : 'false', checked: checked, className: inputStyles, disabled: readOnly || disabled, id: id, name: name, onBlur: handleOnBlur, onChange: handleChange, 
                            // @ts-expect-error - TS2322 - Type '(event: React.ChangeEvent<HTMLInputElement>) => void' is not assignable to type 'MouseEventHandler<HTMLInputElement>'.
                            onClick: handleClick, onFocus: handleOnFocus, onMouseDown: () => {
                                handleOnMouseDown();
                                if (isInVRExperiment)
                                    tapScaleAnimation.handleMouseDown();
                            }, onMouseEnter: handleOnMouseEnter, onMouseLeave: handleOnMouseLeave, onMouseUp: () => {
                                handleOnMouseUp();
                                if (isInVRExperiment)
                                    tapScaleAnimation.handleMouseUp();
                            }, type: "checkbox" })] }), Boolean(image) && jsxRuntime.jsx(BoxWithForwardRef, { paddingX: 1, children: image }), label && (jsxRuntime.jsxs(BoxWithForwardRef, { dangerouslySetInlineStyle: {
                        __style: { marginTop: size === 'md' ? '2px' : '-1px' },
                    }, 
                    //  marginTop: '-1px'/'2px' is needed to  visually align the label text & radiobutton input
                    display: labelDisplay === 'hidden' ? 'visuallyHidden' : 'block', children: [jsxRuntime.jsx(Label, { htmlFor: id, children: jsxRuntime.jsx(BoxWithForwardRef, { paddingX: 1, children: jsxRuntime.jsx(TextWithForwardRef, { color: isInVRExperiment ? vrTextColor : textColor, size: size === 'sm' ? '200' : '300', children: label }) }) }), jsxRuntime.jsxs(BoxWithForwardRef, { paddingX: 1, children: [helperText ? (jsxRuntime.jsx(FormHelperText, { disabled: disabled, id: `${id}-helperText`, noPadding: true, size: size, text: helperText })) : null, errorMessage ? (jsxRuntime.jsx(FormErrorMessage, { id: `${id}-error`, noPadding: true, size: size, text: errorMessage })) : null] })] }))] }) }));
});
InternalCheckboxWithForwardRef.displayName = 'InternalCheckbox';

/**
 * [Checkbox](https://gestalt.pinterest.systems/web/checkbox) is used for multiple choice selection. They are independent of each other in a list, and therefore, different from [RadioButton](https://gestalt.pinterest.systems/web/radiobutton), one selection does not affect other checkboxes in the same list.
 *
 * ![Checkbox light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Checkbox.spec.ts-snapshots/Checkbox-chromium-darwin.png)
 * ![Checkbox dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Checkbox-dark.spec.ts-snapshots/Checkbox-dark-chromium-darwin.png)
 *
 */
const CheckboxWithForwardRef = forwardRef(function Checkbox({ checked = false, disabled = false, errorMessage, helperText, id, image, indeterminate = false, label, labelDisplay = 'visible', name, onChange, onClick, size = 'md', }, ref) {
    return (jsxRuntime.jsx(InternalCheckboxWithForwardRef, { ref: ref, checked: checked, disabled: disabled, errorMessage: errorMessage, helperText: helperText, id: id, image: image, indeterminate: indeterminate, label: label, labelDisplay: labelDisplay, name: name, onChange: onChange, onClick: onClick, size: size }));
});
CheckboxWithForwardRef.displayName = 'Checkbox';

function Collection(props) {
    const { Item, layout = [], renderItem, viewportTop = 0, viewportLeft = 0 } = props;
    // Calculate the full dimensions of the item layer
    const width = Math.max(...layout.map((item) => item.left + item.width));
    const height = Math.max(...layout.map((item) => item.top + item.height));
    // Default the viewport to being the full width of the content layer
    const { viewportWidth = width, viewportHeight = height } = props;
    // Calculates which items from the item layer to render in the viewport
    // layer.
    const items = layout.reduce((acc, position, idx) => {
        const newAcc = [...acc];
        if (position.top + position.height > viewportTop &&
            position.top < viewportHeight + viewportTop &&
            position.left < viewportWidth + viewportLeft &&
            position.left + position.width > viewportLeft) {
            newAcc.push(Object.assign({ idx }, position));
        }
        return newAcc;
    }, []);
    return (jsxRuntime.jsx("div", { className: Layout.relative, style: { width, height }, children: items.map((_a) => {
            var { idx } = _a, style = __rest(_a, ["idx"]);
            return (jsxRuntime.jsx("div", { className: Layout.absolute, style: style, children: renderItem ? renderItem({ idx }) : Item && jsxRuntime.jsx(Item, { idx: idx }) }, idx));
        }) }));
}

/*

This function just implements the design constraints for asymetrical columns in
a very simple way. It's not perfect, but it's very predictible. If you do
anything, improve it so that it takes these constraints and generates them
for n > 4.

1 + n columns:
  first column is 50/50
  can't have 3 columns in a row be 50/50

*/
const UP = [0.75, 0.25];
const DOWN = [0.25, 0.75];
const MID = [0.5, 0.5];
const columnLayout = (numOfColumns) => {
    switch (numOfColumns) {
        case 1:
            return [[MID], [UP], [DOWN]];
        case 2:
            return [
                [UP, MID],
                [DOWN, MID],
                [MID, UP],
                [MID, DOWN],
            ];
        case 4:
            return [
                [MID, UP, MID, MID],
                [MID, DOWN, MID, MID],
                [MID, MID, UP, MID],
                [MID, MID, DOWN, MID],
                [MID, UP, MID, DOWN],
                [MID, DOWN, MID, UP],
            ];
        case 3:
        default:
            return [
                [MID, UP, MID],
                [MID, DOWN, MID],
                [MID, MID, UP],
                [MID, MID, DOWN],
            ];
    }
};
const paddingAll = (gutter, positions) => positions.map(({ top, left, width, height }) => ({
    top,
    left,
    width: width - gutter,
    height: height - gutter,
}));
const mindex$1 = (arr) => (arr.length ? arr.indexOf(Math.min(...arr)) : 0);
const columnsForCollageWithCover = (numOfColumns) => (numOfColumns === 4 ? 2 : 1);
function getCollageLayout({ gutter, cover, columns: numCols, height: h, width: w, layoutKey, }) {
    let positions = [];
    const width = w + gutter;
    const height = h + gutter;
    // If there's a cover image, we'll add that later. It should be a little
    // less than half the width of the collage. We do this now (and not later
    // when we add the cover image) because of `columnLayout`'s constraints
    // needing the exact number of columns that are displayed.
    const gridCols = cover ? columnsForCollageWithCover(numCols) : numCols;
    // Selects the layout that we're going to use for the grid
    const columns = columnLayout(gridCols);
    const layoutIdx = layoutKey % columns.length;
    const layout = columns[layoutIdx];
    // This does a really simple version of our masonry layout. Why replicate
    // that here? a.) fewer dependencies and b.) we need the algorithm to
    // roughly preserve the order of the collages from when they were ordered
    // by Masonry.
    const colHeights = new Array(gridCols).fill(0);
    const colCounts = new Array(gridCols).fill(0);
    // We iterate over every position that we think we could _potentially_ have
    // so that we can fill them with empty sections if need be.
    for (let i = 0; i < 2 * gridCols; i += 1) {
        const col = mindex$1(colHeights);
        const colIdx = colCounts[col];
        const itemHeight = layout[col][colIdx] * height;
        positions.push({
            top: colHeights[col],
            left: col * (width / numCols),
            width: width / numCols,
            height: itemHeight,
        });
        colHeights[col] = colHeights[col] + itemHeight;
        colCounts[col] = colCounts[col] + 1;
    }
    // If we have a cover image, figure out how big it is, then move all the
    // existing columns over.
    if (cover) {
        const coverImageWidth = Math.ceil(numCols / 2) * (width / numCols);
        positions = positions.map((position) => (Object.assign(Object.assign({}, position), { left: coverImageWidth + position.left })));
        positions.unshift({ top: 0, left: 0, width: coverImageWidth, height });
    }
    // This adds the space between any items that we have. It's nice to do
    // this as a separate pass after everything else, because the math earlier
    // becomes easier and it's less brittle to change.
    if (gutter) {
        positions = paddingAll(gutter, positions);
    }
    return positions;
}
/**
 *  [Collage](https://gestalt.pinterest.systems/web/collage), similarly to [Masonry](https://gestalt.pinterest.systems/web/masonry), creates a deterministic grid layout that can absolutely position and virtualize images.
 *
 * ![Collage light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Collage.spec.ts-snapshots/Collage-chromium-darwin.png)
 * ![Collage dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Collage-dark.spec.ts-snapshots/Collage-dark-chromium-darwin.png)
 *
 */
function Collage(props) {
    const { columns, cover, gutter, height, layoutKey, renderImage, width } = props;
    const positions = getCollageLayout({
        columns,
        cover: !!cover,
        width,
        height,
        gutter: gutter || 0,
        layoutKey: layoutKey || 0,
    });
    return (jsxRuntime.jsx(Collection, { layout: positions, renderItem: ({ idx: index }) => renderImage({
            index,
            width: positions[index].width,
            height: positions[index].height,
        }) }));
}
Collage.displayName = 'Collage';

var styles$v = {"col":"pjY","xsCol1":"wA7","xsCol2":"sxy","xsCol3":"xEW","xsCol4":"MRE","xsCol5":"tYG","xsCol6":"UHc","xsCol7":"ojd","xsCol8":"PX-","xsCol9":"Qfr","xsCol10":"vdP","xsCol11":"kaP","xsCol12":"L4E","smCol1":"Djc","smCol2":"tar","smCol3":"QS3","smCol4":"V_L","smCol5":"kh1","smCol6":"Fue","smCol7":"cgB","smCol8":"DkM","smCol9":"AXh","smCol10":"UtM","smCol11":"Wyy","smCol12":"dXC","mdCol1":"U8q","mdCol2":"shx","mdCol3":"EGm","mdCol4":"XMp","mdCol5":"H2Q","mdCol6":"HHc","mdCol7":"JWr","mdCol8":"h5B","mdCol9":"Eeb","mdCol10":"TIo","mdCol11":"rPE","mdCol12":"QwK","lgCol1":"VSa","lgCol2":"aml","lgCol3":"huk","lgCol4":"Vnj","lgCol5":"KgZ","lgCol6":"c2A","lgCol7":"IGd","lgCol8":"hMf","lgCol9":"swh","lgCol10":"Hs0","lgCol11":"YXE","lgCol12":"XTp"};

/**
 * Use [Column](https://gestalt.pinterest.systems/web/column) to implement a 12-column system.
 *
 * ![Column light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Column.spec.ts-snapshots/Column-chromium-darwin.png)
 *
 */
function Column(props) {
    const { children } = props;
    const cs = classnames(
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore cannot infer type with dynamic property name
    props.span != null && styles$v[`xsCol${props.span}`], 
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore cannot infer type with dynamic property name
    props.smSpan != null && styles$v[`smCol${props.smSpan}`], 
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore cannot infer type with dynamic property name
    props.mdSpan != null && styles$v[`mdCol${props.mdSpan}`], 
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore cannot infer type with dynamic property name
    props.lgSpan != null && styles$v[`lgCol${props.lgSpan}`]);
    return jsxRuntime.jsx("div", { className: cs, children: children });
}
Column.displayName = 'Column';

var styles$u = {"item":"iQD","hoveredItem":"q9L"};

const ComboBoxItemWithForwardRef = forwardRef(function OptionItem({ isHovered, id, index, isSelected, label, onSelect, setHoveredItemIndex, subtext, value, }, ref) {
    const handleEventPreventDefault = (event) => event.preventDefault();
    const handleOnTap = (event) => onSelect === null || onSelect === void 0 ? void 0 : onSelect({ event, item: { label, value, subtext } });
    const handleOnMouseEnter = () => setHoveredItemIndex(index);
    return (jsxRuntime.jsx("div", { 
        // @ts-expect-error - TS2322 - Type 'ForwardedRef<HTMLElement | null | undefined>' is not assignable to type 'LegacyRef<HTMLDivElement> | undefined'.
        ref: isHovered ? ref : null, "aria-selected": isSelected, className: classnames(focusStyles.hideOutline, touchableStyles.fullWidth, touchableStyles.pointer), id: `${id}-item-${index}`, 
        // @ts-expect-error - TS2322 - Type '(event: React.ChangeEvent<HTMLInputElement>) => void | undefined' is not assignable to type 'MouseEventHandler<HTMLDivElement>'.
        onClick: handleOnTap, 
        // @ts-expect-error - TS2322 - Type '(event: React.ChangeEvent<HTMLDivElement>) => void' is not assignable to type 'KeyboardEventHandler<HTMLDivElement>'.
        onKeyPress: handleEventPreventDefault, 
        // @ts-expect-error - TS2322 - Type '(event: React.ChangeEvent<HTMLDivElement>) => void' is not assignable to type 'MouseEventHandler<HTMLDivElement>'.
        onMouseDown: handleEventPreventDefault, onMouseEnter: handleOnMouseEnter, role: "option", tabIndex: -1, children: jsxRuntime.jsxs("div", { className: classnames(flexStyles.Flex, borderStyles.rounding2, boxWhitespace.paddingX200, boxWhitespace.paddingY200, {
                [styles$u.hoveredItem]: isHovered,
                [styles$u.item]: !isHovered,
            }), children: [jsxRuntime.jsxs("div", { className: classnames(Layout.flexGrow, flexStyles.Flex, Layout.flexColumn), children: [jsxRuntime.jsx(TextWithForwardRef, { color: "default", inline: true, lineClamp: 1, children: label }), subtext && (jsxRuntime.jsx(TextWithForwardRef, { color: "subtle", inline: true, lineClamp: 2, size: "200", children: subtext }))] }), jsxRuntime.jsx("div", { className: classnames(flexStyles.Flex, Layout.xsItemsCenter, Layout.justifyCenter), children: isSelected ? (jsxRuntime.jsx(Icon, { accessibilityLabel: "Selected item", color: "default", icon: "check", size: 12 })) : (jsxRuntime.jsx("div", { style: { width: '12px' } })) })] }) }));
});
ComboBoxItemWithForwardRef.displayName = 'ComboBoxItem';

function InternalPopover({ accessibilityLabel, accessibilityDismissButtonLabel, anchor, children, showDismissButton, onKeyDown, id, idealDirection, forceDirection, onDismiss, color = 'white', role, shouldFocus, showCaret, size = 'sm', disablePortal, scrollBoundary, hideWhenReferenceHidden, onPositioned, disableFocusTrap = false, overflow = 'auto', }) {
    const { accessibilityDismissButtonLabel: accessibilityDismissButtonLabelDefault } = useDefaultLabelContext('Popover');
    const dismissButtonRef = useRef(null);
    if (!anchor) {
        return null;
    }
    return (jsxRuntime.jsxs(Controller, { accessibilityLabel: accessibilityLabel, anchor: anchor, bgColor: color, border: true, caret: showCaret, disablePortal: disablePortal, forceDirection: forceDirection, hideWhenReferenceHidden: hideWhenReferenceHidden, id: id, idealDirection: idealDirection, onDismiss: onDismiss, onKeyDown: onKeyDown, onPositioned: onPositioned, overflow: overflow, role: role, rounding: 4, scrollBoundary: scrollBoundary, shouldFocus: shouldFocus, shouldTrapFocus: !disableFocusTrap, size: size === 'flexible' ? undefined : size, children: [showDismissButton && (jsxRuntime.jsx(FlexWithForwardRef, { direction: "column", children: jsxRuntime.jsx(BoxWithForwardRef, { alignSelf: "end", padding: 2, children: jsxRuntime.jsx(InternalDismissIconButtonWithForwardRef, { ref: dismissButtonRef, accessibilityLabel: accessibilityDismissButtonLabel !== null && accessibilityDismissButtonLabel !== void 0 ? accessibilityDismissButtonLabel : accessibilityDismissButtonLabelDefault, iconColor: color === 'white' ? 'darkGray' : 'white', onClick: onDismiss, size: "xs" }) }) })), children] }));
}

var styles$t = {"inputParent":"BzO","input":"qJm","inliner":"xnj","disabled":"tjR","disabledText":"N7Q","enabledText":"dAg","enabled":"lPb","borderFocus":"Orw","errorBorderFocus":"iaU","enabledBorder":"QxL","enabledBorderHover":"Szt","errorBorder":"A4G","errorBorderHover":"Z1j","label":"jG_","sm_input":"Hvi","sm_input_text":"Pnj D7e pS1","sm_inputHorizontalPadding":"wTF","sm_visibleLabel":"yqe","sm_noLabel":"Ubd","sm_actionButton":"DVi","md_input":"xfm","md_input_text":"tFp Q1L Ucg","md_inputHorizontalPadding":"O0N","md_visibleLabel":"N5i","md_noLabel":"LOq","md_label":"WJk","md_labelPos":"ih3","sm_label":"RGi","sm_labelPos":"EDy","md_actionButton":"sfy","lg_input":"bH9","lg_input_text":"P94 Q1L Ucg","lg_inputHorizontalPadding":"YT4","lg_visibleLabel":"F_8","lg_noLabel":"Pzb","lg_label":"Fsn","lg_labelPos":"hZ9","lg_actionButton":"gdC"};

const TagAreaWithForwardRef = forwardRef(function TagArea({ accessibilityControls, accessibilityActiveDescendant, dataTestId, disabled = false, errorMessage, hasError = false, helperText, iconButton, id, label, labelDisplay, maxLength, name, onBlur, onChange, onClick, onFocus, onKeyDown, placeholder, readOnly, readOnlyNoIconButton, size, tags, value, }, ref) {
    var _a;
    const innerRef = useRef(null);
    const labelRef = useRef(null);
    // @ts-expect-error - TS2322 - Type 'HTMLDivElement | HTMLTextAreaElement | null' is not assignable to type 'HTMLTextAreaElement'.
    useImperativeHandle(ref, () => innerRef.current);
    // ==== STATE ====
    const [currentLength, setCurrentLength] = useState((_a = value === null || value === void 0 ? void 0 : value.length) !== null && _a !== void 0 ? _a : 0);
    const [ellipsisActive, setEllipsisActive] = useState(false);
    const { handleOnBlur, handleOnFocus, handleOnMouseEnter, handleOnMouseLeave, isHovered, isFocused, } = useInteractiveStates();
    const isEllipsisActive = (element) => element.offsetHeight < element.scrollHeight || element.offsetWidth < element.scrollWidth;
    const checkEllipsisActive = useCallback(() => {
        if (labelRef.current && !ellipsisActive && isEllipsisActive(labelRef === null || labelRef === void 0 ? void 0 : labelRef.current)) {
            setEllipsisActive(true);
        }
        else if (labelRef.current && ellipsisActive && !isEllipsisActive(labelRef === null || labelRef === void 0 ? void 0 : labelRef.current)) {
            setEllipsisActive(false);
        }
    }, [ellipsisActive]);
    // ==== VARIABLES ====
    const hasErrorMessage = Boolean(errorMessage);
    const isLabelVisible = labelDisplay === 'visible';
    const isSM = size === 'sm';
    const isMD = size === 'md';
    const isLG = size === 'lg';
    let ariaDescribedby;
    if (hasErrorMessage) {
        ariaDescribedby = `${id}-error`;
    }
    if (helperText || maxLength) {
        ariaDescribedby = `${id}-helperText`;
    }
    useEffect(() => {
        if (!label)
            return () => { };
        checkEllipsisActive();
        if (typeof window !== 'undefined')
            window.addEventListener('resize', checkEllipsisActive);
        return () => {
            if (typeof window !== 'undefined')
                window === null || window === void 0 ? void 0 : window.removeEventListener('resize', checkEllipsisActive);
        };
    }, [label, checkEllipsisActive]);
    return (jsxRuntime.jsxs(Fragment, { children: [jsxRuntime.jsx("div", { ref: innerRef, onMouseEnter: handleOnMouseEnter, onMouseLeave: handleOnMouseLeave, children: jsxRuntime.jsxs("div", { className: classnames(styles$t.inputParent, {
                        [styles$t.disabled]: disabled,
                        [styles$t.disabledText]: disabled,
                        [styles$t.enabled]: !disabled,
                        [styles$t.enabledText]: !disabled,
                        [styles$t.borderFocus]: !disabled && isFocused && !hasErrorMessage,
                        [styles$t.errorBorderFocus]: !disabled && isFocused && hasErrorMessage,
                        [styles$t.enabledBorder]: !disabled && !isFocused && !hasErrorMessage && !isHovered,
                        [styles$t.enabledBorderHover]: !disabled && !isFocused && !hasErrorMessage && isHovered,
                        [styles$t.errorBorder]: !disabled && !isFocused && hasErrorMessage,
                        [styles$t.errorBorderHover]: !disabled && !isFocused && hasErrorMessage && isHovered,
                        // sm
                        [styles$t.sm_input]: isSM,
                        [styles$t.sm_inputHorizontalPadding]: isSM,
                        [styles$t.sm_visibleLabel]: isSM && label && isLabelVisible,
                        [styles$t.sm_noLabel]: (isSM && !label) || (label && !isLabelVisible),
                        [styles$t.sm_actionButton]: isSM && iconButton,
                        // md
                        [styles$t.md_input]: isMD,
                        [styles$t.md_inputHorizontalPadding]: isMD,
                        [styles$t.md_visibleLabel]: isMD && label && isLabelVisible,
                        [styles$t.md_noLabel]: (isMD && !label) || (label && !isLabelVisible),
                        [styles$t.md_actionButton]: isMD && iconButton,
                        // lg
                        [styles$t.lg_input]: isLG,
                        [styles$t.lg_inputHorizontalPadding]: isLG,
                        [styles$t.lg_visibleLabel]: isLG && label && isLabelVisible,
                        [styles$t.lg_noLabel]: (isLG && !label) || (label && !isLabelVisible),
                        [styles$t.lg_actionButton]: isLG && iconButton,
                    }), children: [label && (jsxRuntime.jsx("label", { className: classnames(styles$t.label, {
                                // sm
                                [styles$t.sm_label]: isSM,
                                [styles$t.sm_labelPos]: isSM,
                                // md
                                [styles$t.md_label]: isMD,
                                [styles$t.md_labelPos]: isMD,
                                // lg
                                [styles$t.lg_label]: isLG,
                                [styles$t.lg_labelPos]: isLG,
                                [boxStyles.visuallyHidden]: !isLabelVisible,
                            }), htmlFor: id, children: jsxRuntime.jsx(TextUIWithForwardRef, { ref: labelRef, color: disabled ? 'disabled' : 'default', lineClamp: 1, size: "xs", title: ellipsisActive ? label : '', children: label }) })), jsxRuntime.jsx(FlexWithForwardRef, { gap: 1, children: jsxRuntime.jsxs(FlexWithForwardRef, { wrap: true, children: [tags.map((tag, tagIndex) => (jsxRuntime.jsx(BoxWithForwardRef
                                    // eslint-disable-next-line react/no-array-index-key
                                    , { dangerouslySetInlineStyle: {
                                            __style: {
                                                marginBottom: size === 'sm' || size === 'md' ? '2px' : TOKEN_SPACE_100,
                                            },
                                        }, marginEnd: 1, children: cloneElement(tag, {
                                            size: size === 'lg' ? 'md' : 'sm',
                                            disabled: disabled || readOnly,
                                        }) }, tagIndex))), jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "grow", children: jsxRuntime.jsx("input", { "aria-activedescendant": accessibilityActiveDescendant, "aria-controls": accessibilityControls, "aria-describedby": isFocused ? ariaDescribedby : undefined, "aria-invalid": hasErrorMessage || hasError ? 'true' : 'false', className: classnames(styles$t.input, {
                                                // sm
                                                [styles$t.sm_input_text]: isSM,
                                                // md
                                                [styles$t.md_input_text]: isMD,
                                                // lg
                                                [styles$t.lg_input_text]: isLG,
                                            }), "data-test-id": dataTestId, disabled: disabled, id: id, maxLength: maxLength === null || maxLength === void 0 ? void 0 : maxLength.characterCount, name: name, onBlur: (event) => {
                                                handleOnBlur();
                                                onBlur === null || onBlur === void 0 ? void 0 : onBlur({ event, value: event.currentTarget.value });
                                            }, onChange: (event) => {
                                                var _a, _b;
                                                setCurrentLength((_b = (_a = event.currentTarget.value) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0);
                                                onChange({ event, value: event.currentTarget.value });
                                            }, onClick: (event) => onClick === null || onClick === void 0 ? void 0 : onClick({ event, value: event.currentTarget.value }), onFocus: (event) => {
                                                handleOnFocus();
                                                onFocus === null || onFocus === void 0 ? void 0 : onFocus({ event, value: event.currentTarget.value });
                                            }, onKeyDown: (event) => onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown({ event, value: event.currentTarget.value }), placeholder: placeholder, readOnly: readOnly, value: value }) })] }) }), !disabled && !readOnlyNoIconButton && iconButton] }) }), (helperText || maxLength) && !hasErrorMessage ? (jsxRuntime.jsx(FormHelperText, { currentLength: currentLength, disabled: disabled, id: `${id}-helperText`, maxLength: maxLength, size: "md", text: helperText })) : null, !disabled && hasErrorMessage ? (jsxRuntime.jsx(FormErrorMessage, { id: `${id}-error`, size: "md", text: errorMessage })) : null] }));
});
TagAreaWithForwardRef.displayName = 'TagArea';

var styles$s = {"textField":"D8X Hsu tBJ dyH iFc L4E","sm":"LaU","md":"O2L","lg":"ybQ","unstyledTextField":"_2W YMx tBJ dyH iFc sAJ MIw Rym QLY p6V ojN","textFieldSpacer":"IWB YMx tBJ dyH iFc sAJ","textFieldWrapper":"rNx","actionButton":"BMi","actionButtonContainer":"DmS"};

function MaybeTooltip$2({ children, tooltipText, }) {
    return tooltipText ? (jsxRuntime.jsx(Tooltip, { inline: true, text: tooltipText, children: children })) : (children);
}
function IconButtonEnd$1({ accessibilityChecked, accessibilityHidden, accessibilityLabel, hoverStyle = 'default', icon, onClick, pogPadding = 1, role, tapStyle, tooltipText, }) {
    const [focused, setFocused] = useState(false);
    return (
    // styles.actionButtonContainer is required for RTL positioning
    jsxRuntime.jsx("div", { className: classnames(styles$s.actionButtonContainer), children: jsxRuntime.jsx(BoxWithForwardRef, { alignItems: "center", "aria-hidden": accessibilityHidden, display: "flex", height: "100%", marginEnd: 2, rounding: "circle", children: jsxRuntime.jsx(MaybeTooltip$2, { tooltipText: tooltipText, children: jsxRuntime.jsx(TapAreaWithForwardRef, { accessibilityChecked: accessibilityChecked, accessibilityLabel: accessibilityLabel, onBlur: () => setFocused(false), onFocus: () => setFocused(true), onKeyDown: ({ event }) => {
                        if ([ENTER$1, SPACE$1].includes(event.keyCode))
                            onClick();
                        if (event.keyCode !== TAB$1)
                            event.preventDefault();
                    }, onMouseEnter: () => setFocused(true), onMouseLeave: () => setFocused(false), onTap: onClick, role: role, rounding: "circle", tabIndex: accessibilityHidden ? -1 : 0, tapStyle: tapStyle, children: jsxRuntime.jsx(Pog, { accessibilityLabel: "", bgColor: focused && hoverStyle === 'default' ? 'lightGray' : 'transparent', icon: icon, iconColor: "darkGray", padding: pogPadding, size: "xs" }) }) }) }) }));
}

var formElement = {"base":"mbr iyn","sm":"e0w","md":"zlS","lg":"oVz","normal":"Et3 LJB","disabled":"FOU Fvo","errored":"ykM","enabled":"fSK","enabledTransparent":"VvI","unstyled":"YMx"};

var formLabelStyles = {"formLabel":"p5q","formLabelLarge":"vhU"};

const applyDensityStyle$2 = (size) => size === 'lg' ? formLabelStyles.formLabelLarge : formLabelStyles.formLabel;
function FormLabel({ id, label, labelDisplay, size }) {
    const cs = applyDensityStyle$2(size);
    return (jsxRuntime.jsx(InternalLabel, { _labelDisplay: labelDisplay, htmlFor: id, children: jsxRuntime.jsx("div", { className: cs, children: jsxRuntime.jsx(TextWithForwardRef, { size: "100", children: label }) }) }));
}

const applyDensityStyle$1 = (size) => styles$s[`${size}`];
const InternalTextFieldWithForwardRef$1 = forwardRef(function TextField({ accessibilityControls, accessibilityActiveDescendant, autoComplete, dataTestId, disabled = false, errorMessage, hasError = false, helperText, id, iconButton, label, labelDisplay, max, maxLength, mobileEnterKeyHint, mobileInputMode, min, name, onBlur, onChange, onClick, onFocus, onKeyDown, placeholder, readOnly, size = 'md', step, tags, type = 'text', value, }, ref) {
    var _a;
    // ==== REFS ====
    const innerRef = useRef(null);
    // When using both forwardRef and innerRefs, useimperativehandle() allows to externally set focus via the ref prop: textfieldRef.current.focus()
    // @ts-expect-error - TS2322 - Type 'HTMLDivElement | HTMLInputElement | null' is not assignable to type 'HTMLInputElement'.
    useImperativeHandle(ref, () => innerRef.current);
    // ==== STATE ====
    const [focused, setFocused] = useState(false);
    const [currentLength, setCurrentLength] = useState((_a = value === null || value === void 0 ? void 0 : value.length) !== null && _a !== void 0 ? _a : 0);
    // ==== HANDLERS ====
    const handleBlur = (event) => {
        setFocused(false);
        onBlur === null || onBlur === void 0 ? void 0 : onBlur({ event, value: event.currentTarget.value });
    };
    const handleClick = (event) => onClick === null || onClick === void 0 ? void 0 : onClick({ event, value: event.currentTarget.value });
    const handleChange = (event) => {
        var _a, _b;
        setCurrentLength((_b = (_a = event.currentTarget.value) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0);
        onChange({ event, value: event.currentTarget.value });
    };
    const handleFocus = (event) => {
        setFocused(true);
        onFocus === null || onFocus === void 0 ? void 0 : onFocus({ event, value: event.currentTarget.value });
    };
    const handleKeyDown = (event) => onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown({ event, value: event.currentTarget.value });
    // ==== STYLING ====
    const hasErrorMessage = Boolean(errorMessage);
    const styledClasses = classnames(styles$s.textField, formElement.base, disabled ? formElement.disabled : formElement.enabled, (hasError || hasErrorMessage) && !focused ? formElement.errored : formElement.normal, {
        [formElement.sm]: size === 'sm',
        [formElement.md]: size === 'md',
        [formElement.lg]: size === 'lg',
        // note: layout CSS controls min-height of element
        [Layout.small]: size === 'sm',
        [Layout.medium]: size === 'md',
        [Layout.large]: size === 'lg',
        [styles$s.actionButton]: iconButton,
    }, applyDensityStyle$1(size), tags
        ? {
            [focusStyles.accessibilityOutlineFocus]: focused,
            [styles$s.textFieldWrapper]: true,
        }
        : { [typographyStyle.truncate]: true });
    const unstyledClasses = classnames(styles$s.unstyledTextField);
    if (maxLength && maxLength.characterCount < 0) {
        throw new Error('`maxLength` must be an integer value 0 or higher.');
    }
    let ariaDescribedby;
    if (hasErrorMessage) {
        ariaDescribedby = `${id}-error`;
    }
    if (helperText || maxLength) {
        ariaDescribedby = `${id}-helperText`;
    }
    const inputElement = (jsxRuntime.jsx("input", Object.assign({ "aria-activedescendant": accessibilityActiveDescendant, "aria-controls": accessibilityControls, "aria-describedby": focused ? ariaDescribedby : undefined, "aria-invalid": hasErrorMessage || hasError ? 'true' : 'false', autoComplete: autoComplete, className: tags ? unstyledClasses : styledClasses, "data-test-id": dataTestId, disabled: disabled, enterKeyHint: mobileEnterKeyHint, id: id, inputMode: mobileInputMode, max: type === 'number' ? max : undefined, maxLength: maxLength === null || maxLength === void 0 ? void 0 : maxLength.characterCount, min: type === 'number' ? min : undefined, name: name, onBlur: handleBlur, onChange: handleChange, 
        // @ts-expect-error - TS2322 - Type '(event: React.ChangeEvent<HTMLInputElement>) => void | undefined' is not assignable to type 'MouseEventHandler<HTMLInputElement>'.
        onClick: handleClick, onFocus: handleFocus, onKeyDown: handleKeyDown, 
        // type='number' doesn't work on ios safari without a pattern
        // https://stackoverflow.com/questions/14447668/input-type-number-is-not-showing-a-number-keypad-on-ios
        pattern: type === 'number' ? '\\d*' : undefined, placeholder: placeholder, readOnly: readOnly, 
        // This config is required to prevent exposing passwords and usernames to spell-checking servers during login processes. More info here: https://www.androidpolice.com/google-chrome-servers-get-passwords-enhanced-spell-check/
        spellCheck: ['email', 'password'].includes(type) ? false : undefined, step: type === 'number' ? step : undefined }, (tags ? {} : { ref: innerRef }), { type: type, value: value })));
    // Explicit margin for the small size, we don't have a token for 2px
    const tagMarginY = size === 'sm' || size === 'md' ? '2px' : TOKEN_SPACE_100;
    return (jsxRuntime.jsxs("span", { children: [label && jsxRuntime.jsx(FormLabel, { id: id, label: label, labelDisplay: labelDisplay, size: size }), jsxRuntime.jsxs(BoxWithForwardRef, { position: "relative", children: [tags ? (jsxRuntime.jsxs("div", Object.assign({ className: styledClasses }, (tags ? { ref: innerRef } : {}), { children: [tags.map((tag, tagIndex) => (jsxRuntime.jsx(BoxWithForwardRef
                            // eslint-disable-next-line react/no-array-index-key
                            , { dangerouslySetInlineStyle: {
                                    __style: { marginBottom: tagMarginY },
                                }, marginEnd: 1, children: cloneElement(tag, { size: size === 'lg' ? 'md' : 'sm' }) }, tagIndex))), jsxRuntime.jsxs(BoxWithForwardRef, { flex: "grow", marginEnd: 2, maxWidth: "100%", position: "relative", children: [jsxRuntime.jsx("div", { "aria-hidden": true, className: styles$s.textFieldSpacer, children: value }), inputElement] })] }))) : (inputElement), !disabled && iconButton] }), (helperText || maxLength) && !errorMessage ? (jsxRuntime.jsx(FormHelperText, { currentLength: currentLength, id: `${id}-helperText`, maxLength: maxLength, size: size, text: helperText })) : null, hasErrorMessage ? (jsxRuntime.jsx(FormErrorMessage, { id: `${id}-error`, size: size, text: errorMessage })) : null] }));
});
InternalTextFieldWithForwardRef$1.displayName = 'InternalTextField';

var styles$r = {"enabledText":"Bbb","disabledText":"mey","enabled":"GrY","disabled":"oy1","enabledBorder":"XAs","errorBorder":"Yei","disabledBorder":"BNX","inputParent":"zjZ","input":"sj_","label":"rRt","visuallyHidden":"C5Q","endIconContainer":"InA","sm_input":"uJQ D7e pS1","sm_inputLabelPadding":"P9S","sm_inputNoLabelPadding":"d7q","sm_inputStartPadding":"Ch7","sm_inputNoEndButtonEndPadding":"vda","sm_inputEndButtonEndPadding":"DmD","sm_labelTopPosition":"p5Y","sm_labelPosition":"RWL","sm_endIconContainer":"jqK","md_input":"_AK Q1L Ucg","md_inputLabelPadding":"_DV","md_inputNoLabelPadding":"et2","md_inputStartPadding":"DIv","md_inputNoEndButtonEndPadding":"VtI","md_inputEndButtonEndPadding":"CiX","md_labelTopPosition":"C0Y","md_labelPosition":"Kci","md_endIconContainer":"cJ1","lg_input":"eyl Q1L Ucg","lg_inputLabelPadding":"lKP","lg_inputNoLabelPadding":"xvy","lg_inputStartPadding":"w8q","lg_inputNoEndButtonEndPadding":"qZi","lg_inputEndButtonEndPadding":"r8T","lg_labelTopPosition":"bg4","lg_labelPosition":"pru","lg_endIconContainer":"OcR"};

const InternalTextFieldWithForwardRef = forwardRef(function TextField({ accessibilityControls, accessibilityActiveDescendant, autoComplete, dataTestId, disabled = false, errorMessage, hasError = false, helperText, id, iconButton, label, labelDisplay = 'visible', max, maxLength, mobileEnterKeyHint, mobileInputMode, min, name, onBlur, onChange, onClick, onFocus, onKeyDown, placeholder, readOnly, readOnlyNoIconButton, size = 'md', step, 
// eslint-disable-next-line @typescript-eslint/no-unused-vars
tags, type = 'text', value, }, ref) {
    var _a;
    const innerRef = useRef(null);
    const labelRef = useRef(null);
    // @ts-expect-error - TS2322 - Type 'HTMLDivElement | HTMLInputElement | null' is not assignable to type 'HTMLInputElement'.
    useImperativeHandle(ref, () => innerRef.current);
    const hasErrorMessage = Boolean(errorMessage);
    const isLabelVisible = labelDisplay === 'visible';
    const isSM = size === 'sm';
    const isMD = size === 'md';
    const isLG = size === 'lg';
    // ==== STATE ====
    const [focused, setFocused] = useState(false);
    const [currentLength, setCurrentLength] = useState((_a = value === null || value === void 0 ? void 0 : value.length) !== null && _a !== void 0 ? _a : 0);
    const [ellipsisActive, setEllipsisActive] = useState(false);
    // ==== A11Y ====
    let ariaDescribedby;
    if (hasErrorMessage) {
        ariaDescribedby = `${id}-error`;
    }
    if (helperText || maxLength) {
        ariaDescribedby = `${id}-helperText`;
    }
    const isEllipsisActive = (element) => element.offsetHeight < element.scrollHeight || element.offsetWidth < element.scrollWidth;
    const checkEllipsisActive = useCallback(() => {
        if (labelRef.current && !ellipsisActive && isEllipsisActive(labelRef === null || labelRef === void 0 ? void 0 : labelRef.current)) {
            setEllipsisActive(true);
        }
        else if (labelRef.current && ellipsisActive && !isEllipsisActive(labelRef === null || labelRef === void 0 ? void 0 : labelRef.current)) {
            setEllipsisActive(false);
        }
    }, [ellipsisActive]);
    useEffect(() => {
        if (!label)
            return () => { };
        checkEllipsisActive();
        if (typeof window !== 'undefined')
            window.addEventListener('resize', checkEllipsisActive);
        return () => {
            if (typeof window !== 'undefined')
                window === null || window === void 0 ? void 0 : window.removeEventListener('resize', checkEllipsisActive);
        };
    }, [label, checkEllipsisActive]);
    return (jsxRuntime.jsxs("div", { children: [jsxRuntime.jsxs("div", { className: classnames(styles$r.inputParent), children: [label && (jsxRuntime.jsx("label", { className: classnames(styles$r.label, {
                            [boxStyles.visuallyHidden]: !isLabelVisible,
                            // sm
                            [styles$r.sm_labelTopPosition]: isSM,
                            [styles$r.sm_labelPosition]: isSM,
                            // md
                            [styles$r.md_labelTopPosition]: isMD,
                            [styles$r.md_labelPosition]: isMD,
                            // lg
                            [styles$r.lg_labelTopPosition]: isLG,
                            [styles$r.lg_labelPosition]: isLG,
                        }), htmlFor: id, children: jsxRuntime.jsx(TextUIWithForwardRef, { ref: labelRef, color: disabled ? 'disabled' : 'default', lineClamp: 1, size: "xs", title: ellipsisActive ? label : '', children: label }) })), jsxRuntime.jsx("input", { ref: innerRef, "aria-activedescendant": accessibilityActiveDescendant, "aria-controls": accessibilityControls, "aria-describedby": focused ? ariaDescribedby : undefined, "aria-invalid": hasErrorMessage || hasError ? 'true' : 'false', autoComplete: autoComplete, className: classnames(styles$r.input, typographyStyle.truncate, typographyStyle.lineClamp, {
                            [styles$r.enabled]: !disabled,
                            [styles$r.enabledText]: !disabled,
                            [styles$r.enabledBorder]: !disabled && !hasErrorMessage,
                            [styles$r.errorBorder]: !disabled && hasErrorMessage,
                            [styles$r.disabled]: disabled,
                            [styles$r.disabledText]: disabled,
                            [styles$r.disabledBorder]: disabled,
                            // sm
                            [styles$r.sm_input]: isSM,
                            [styles$r.sm_inputPadding]: isSM,
                            [styles$r.sm_inputLabelPadding]: isSM && label && isLabelVisible,
                            [styles$r.sm_inputNoLabelPadding]: isSM && (!label || (label && !isLabelVisible)),
                            [styles$r.sm_inputStartPadding]: isSM,
                            [styles$r.sm_inputEndButtonEndPadding]: isSM && iconButton,
                            [styles$r.sm_inputNoEndButtonEndPadding]: isSM && !iconButton,
                            // md
                            [styles$r.md_input]: isMD,
                            [styles$r.md_inputPadding]: isMD,
                            [styles$r.md_inputLabelPadding]: isMD && label && isLabelVisible,
                            [styles$r.md_inputNoLabelPadding]: isMD && (!label || (label && !isLabelVisible)),
                            [styles$r.md_inputStartPadding]: isMD,
                            [styles$r.md_inputEndButtonEndPadding]: isMD && iconButton,
                            [styles$r.sm_inputNoEndButtonEndPadding]: isMD && !iconButton,
                            // lg
                            [styles$r.lg_input]: isLG,
                            [styles$r.lg_inputPadding]: isLG,
                            [styles$r.lg_inputLabelPadding]: isLG && label && isLabelVisible,
                            [styles$r.lg_inputNoLabelPadding]: isLG && (!label || (label && !isLabelVisible)),
                            [styles$r.lg_inputStartPadding]: isLG,
                            [styles$r.lg_inputEndButtonEndPadding]: isLG && iconButton,
                            [styles$r.lg_inputNoEndButtonEndPadding]: isLG && !iconButton,
                        }), "data-test-id": dataTestId, disabled: disabled, enterKeyHint: mobileEnterKeyHint, id: id, inputMode: mobileInputMode, max: type === 'number' ? max : undefined, maxLength: maxLength === null || maxLength === void 0 ? void 0 : maxLength.characterCount, min: type === 'number' ? min : undefined, name: name, onBlur: (event) => {
                            setFocused(false);
                            onBlur === null || onBlur === void 0 ? void 0 : onBlur({ event, value: event.currentTarget.value });
                        }, onChange: (event) => {
                            var _a, _b;
                            setCurrentLength((_b = (_a = event.currentTarget.value) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0);
                            onChange({ event, value: event.currentTarget.value });
                        }, onClick: (event) => onClick === null || onClick === void 0 ? void 0 : onClick({ event, value: event.currentTarget.value }), onFocus: (event) => {
                            setFocused(true);
                            onFocus === null || onFocus === void 0 ? void 0 : onFocus({ event, value: event.currentTarget.value });
                        }, onKeyDown: (event) => onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown({ event, value: event.currentTarget.value }), pattern: type === 'number' ? '\\d*' : undefined, placeholder: placeholder, readOnly: readOnly, spellCheck: ['email', 'password'].includes(type) ? false : undefined, step: type === 'number' ? step : undefined, type: type, value: value }), !disabled && !readOnlyNoIconButton && iconButton] }), (helperText || maxLength) && !hasErrorMessage ? (jsxRuntime.jsx(FormHelperText, { currentLength: currentLength, disabled: disabled, id: `${id}-helperText`, maxLength: maxLength, size: size, text: helperText })) : null, !disabled && hasErrorMessage ? (jsxRuntime.jsx(FormErrorMessage, { id: `${id}-error`, size: size, text: errorMessage })) : null] }));
});
InternalTextFieldWithForwardRef.displayName = 'InternalTextField';

const KEYS$1 = {
    UP: -1,
    DOWN: 1,
    ENTER: 0,
};
const handleContainerScrolling = ({ direction, containerRef, currentHoveredOption }) => {
    var _a, _b;
    const container = containerRef === null || containerRef === void 0 ? void 0 : containerRef.current;
    // Based on keyboard navigation we get the next or previous option
    // When we reach the start or end of the list, move to the start or end of the list based on the direction
    const nextOption = direction === KEYS$1.DOWN
        ? currentHoveredOption === null || currentHoveredOption === void 0 ? void 0 : currentHoveredOption.nextSibling
        : currentHoveredOption === null || currentHoveredOption === void 0 ? void 0 : currentHoveredOption.previousSibling;
    // Handles which option to display once we've hit the end of the list range
    const endRangeOption = direction === KEYS$1.DOWN ? container === null || container === void 0 ? void 0 : container.firstChild : container === null || container === void 0 ? void 0 : container.lastChild;
    const nextSelectedOption = nextOption !== null && nextOption !== void 0 ? nextOption : endRangeOption;
    // If one of these nodes is missing, exit early
    if (!container || !nextSelectedOption)
        return;
    const containerHeight = (_b = (_a = container.getClientRects()[0]) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : 0;
    const overScroll = nextSelectedOption instanceof HTMLElement && (nextSelectedOption === null || nextSelectedOption === void 0 ? void 0 : nextSelectedOption.offsetHeight)
        ? nextSelectedOption.offsetHeight / 3
        : 0;
    const scrollPos = nextSelectedOption instanceof HTMLElement
        ? nextSelectedOption.offsetTop +
            nextSelectedOption.clientHeight -
            containerHeight +
            overScroll
        : 0;
    container.scrollTop = scrollPos;
};

/**
 * [ComboBox](https://gestalt.pinterest.systems/web/combobox) is the combination of a [Textfield](https://gestalt.pinterest.systems/web/textfield) and an associated [Dropdown](https://gestalt.pinterest.systems/web/dropdown) that allows the user to filter a list when selecting an option. ComboBox allows users to type the full option, type part of the option and narrow the results, or select an option from the list.
 *
 * ![Combobox closed light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/ComboBox-closed.spec.ts-snapshots/ComboBox-closed-chromium-darwin.png)
 * ![Combobox open light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/ComboBox-open.spec.ts-snapshots/ComboBox-open-chromium-darwin.png)
 * ![Combobox closed dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/ComboBox-closed-dark.spec.ts-snapshots/ComboBox-closed-dark-chromium-darwin.png)
 * ![Combobox open dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/ComboBox-open-dark.spec.ts-snapshots/ComboBox-open-dark-chromium-darwin.png)
 *
 */
const ComboBoxWithForwardRef = forwardRef(function ComboBox({ accessibilityClearButtonLabel, disabled = false, errorMessage, helperText, id, inputValue: controlledInputValue = null, label, labelDisplay = 'visible', noResultText, onBlur, onChange, onClear, onFocus, onKeyDown, onSelect, options, placeholder, readOnly, size = 'md', selectedOption, tags, zIndex, }, ref) {
    var _a;
    const { accessibilityClearButtonLabel: accessibilityClearButtonLabelDefault, noResultText: noResultTextDefault, } = useDefaultLabelContext('ComboBox');
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    // ==== REFS ====
    const innerRef = useRef(null);
    const optionRef = useRef(null);
    const dropdownRef = useRef(null);
    // When using both forwardRef and innerRefs, useimperativehandle() allows to externally set focus via the ref prop: textfieldRef.current.focus()
    // @ts-expect-error - TS2322 - Type 'HTMLInputElement | null' is not assignable to type 'HTMLInputElement'.
    useImperativeHandle(ref, () => innerRef.current);
    // ==== STATE ====
    const [hoveredItemIndex, setHoveredItemIndex] = useState(null);
    const [showOptionsList, setShowOptionsList] = useState(false);
    const [selectedItem, setSelectedItem] = useState(null);
    const [suggestedOptions, setSuggestedOptions] = useState(options);
    const [textfieldInput, setTextfieldInput] = useState('');
    const isControlledInput = !(controlledInputValue === null || controlledInputValue === undefined);
    const isNotControlled = !isControlledInput && !tags;
    // ==== TAGS: Force disable state in Tags if ComboBox is disabled as well ====
    let selectedTags = tags;
    if (disabled && !!tags && tags.length > 0) {
        selectedTags = tags === null || tags === void 0 ? void 0 : tags.map((tag) => cloneElement(tag, { disabled: true }));
    }
    // ==== UNCONTROLLED COMBOBOX: Set suggestions ====
    useEffect(() => {
        if (isNotControlled) {
            if (!selectedItem)
                setHoveredItemIndex(null);
            if (showOptionsList && !selectedItem) {
                const filteredOptions = options.filter(({ label: optionLabel }) => optionLabel.toLowerCase().includes(textfieldInput.toLowerCase()));
                setSuggestedOptions(filteredOptions);
            }
            else {
                setSuggestedOptions(options);
            }
        }
    }, [isNotControlled, options, selectedItem, showOptionsList, textfieldInput]);
    // ==== CONTROLLED COMBOBOX: Set all variables ====
    useEffect(() => {
        if (isControlledInput) {
            if (!selectedOption) {
                setHoveredItemIndex(null);
            }
            else {
                suggestedOptions.forEach((option, index) => {
                    if (option.value === selectedOption.value)
                        setHoveredItemIndex(index);
                });
            }
            setSuggestedOptions(options);
        }
    }, [isControlledInput, options, selectedOption, suggestedOptions]);
    // ==== EVENT HANDLING: ComboBoxItem ====
    const handleSelectItem = useCallback(({ event, item, }) => {
        onSelect === null || onSelect === void 0 ? void 0 : onSelect({ event, item });
        if (isNotControlled) {
            setSelectedItem(item);
            setTextfieldInput(item.label);
        }
        setShowOptionsList(false);
    }, [isNotControlled, onSelect]);
    // ==== KEYBOARD NAVIGATION LOGIC: Keyboard navigation is handled by ComboBox while onClick selection is handled in ComboBoxItem ====
    const handleKeyNavigation = useCallback((event, direction) => {
        if (!showOptionsList)
            setShowOptionsList(true);
        const getNextHoveredIndex = (keyboardDirection) => {
            if (keyboardDirection === UP_ARROW) {
                return direction + (hoveredItemIndex || 0);
            }
            return hoveredItemIndex === null ? 0 : direction + hoveredItemIndex;
        };
        const nextHoveredIndex = getNextHoveredIndex(direction);
        const optionsCount = suggestedOptions.length - 1;
        // If there's an existing item, navigate from that position
        let cursorIndex = nextHoveredIndex;
        // If we've reached the end, start at the top
        if (nextHoveredIndex > optionsCount) {
            cursorIndex = 0;
        }
        // If we're at the top going backwards, start at the last item
        else if (nextHoveredIndex < 0) {
            cursorIndex = optionsCount;
        }
        // IMPORTANT: handleContainerScrolling must be placed before we update hoveredItemIndex
        handleContainerScrolling({
            direction,
            containerRef: dropdownRef,
            currentHoveredOption: optionRef.current,
        });
        setHoveredItemIndex(cursorIndex);
        const optionItem = suggestedOptions[cursorIndex];
        if (optionItem && direction === KEYS$1.ENTER) {
            handleSelectItem({ event, item: optionItem });
        }
    }, [handleSelectItem, hoveredItemIndex, showOptionsList, suggestedOptions]);
    // ==== EVENT HANDLING: Popover ====
    const handleKeyDown = useCallback(({ event }) => {
        var _a;
        const { keyCode } = event;
        if (keyCode === UP_ARROW) {
            handleKeyNavigation(event, KEYS$1.UP);
            event.preventDefault();
        }
        else if (keyCode === DOWN_ARROW) {
            handleKeyNavigation(event, KEYS$1.DOWN);
            event.preventDefault();
        }
        else if (keyCode === ENTER$1) {
            handleKeyNavigation(event, KEYS$1.ENTER);
            event.stopPropagation();
        }
        else if (keyCode === ESCAPE) {
            if (innerRef)
                (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        }
        else if (keyCode === TAB$1) {
            setShowOptionsList(false);
        }
    }, [handleKeyNavigation]);
    const handleOnDismiss = useCallback(() => setShowOptionsList(false), []);
    // ==== EVENT HANDLING: InternalTextField ====
    const handleOnBlur = useCallback(({ event, value }) => onBlur === null || onBlur === void 0 ? void 0 : onBlur({ event, value }), [onBlur]);
    const handleOnFocus = useCallback(({ event, value }) => onFocus === null || onFocus === void 0 ? void 0 : onFocus({ event, value }), [onFocus]);
    const handleSetShowOptionsList = useCallback(() => setShowOptionsList(true), []);
    const handleOnChange = useCallback(({ event, value }) => {
        setHoveredItemIndex(null);
        if (isNotControlled) {
            setSelectedItem(null);
            setTextfieldInput(value);
        }
        if (showOptionsList === false)
            setShowOptionsList(true);
        onChange === null || onChange === void 0 ? void 0 : onChange({ event, value });
    }, [isNotControlled, onChange, showOptionsList]);
    const handleOnClickIconButtonClear = useCallback(() => {
        var _a;
        setHoveredItemIndex(null);
        if (isNotControlled) {
            setSelectedItem(null);
            setTextfieldInput('');
            setSuggestedOptions(options);
        }
        onClear === null || onClear === void 0 ? void 0 : onClear();
        (_a = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }, [isNotControlled, onClear, options]);
    const handleOnKeyDown = useCallback(({ event, value }) => {
        if (!showOptionsList && event.keyCode !== TAB$1)
            setShowOptionsList(true);
        onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown({ event, value });
    }, [onKeyDown, showOptionsList]);
    // ==== MAPPING ComboBoxItem ====
    const comboBoxItemList = useMemo(() => suggestedOptions.map(({ label: comboBoxItemlabel, subtext, value }, index) => {
        var _a;
        const isSelectedValue = ((_a = selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.value) !== null && _a !== void 0 ? _a : selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.value) === value;
        return (jsxRuntime.jsx(ComboBoxItemWithForwardRef
        // eslint-disable-next-line react/no-array-index-key
        , { ref: optionRef, id: id, index: index, isHovered: index === hoveredItemIndex, isSelected: isSelectedValue, label: comboBoxItemlabel, onSelect: handleSelectItem, setHoveredItemIndex: setHoveredItemIndex, subtext: subtext, value: value }, `${id}${index}`));
    }), [
        suggestedOptions,
        handleSelectItem,
        hoveredItemIndex,
        id,
        selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.value,
        selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.value,
    ]);
    return (jsxRuntime.jsxs(Fragment, { children: [jsxRuntime.jsxs(BoxWithForwardRef, { "aria-autocomplete": "list", "aria-expanded": showOptionsList, "aria-haspopup": true, "aria-owns": id, position: "relative", role: "combobox", children: [isInVRExperiment && !tags && (jsxRuntime.jsx(InternalTextFieldWithForwardRef, { ref: innerRef, accessibilityActiveDescendant: showOptionsList && innerRef.current && hoveredItemIndex !== null
                            ? `${id}-item-${hoveredItemIndex}`
                            : undefined, accessibilityControls: showOptionsList && innerRef.current ? id : undefined, autoComplete: "off", disabled: disabled, errorMessage: errorMessage, hasError: !!errorMessage, helperText: helperText, iconButton: controlledInputValue || textfieldInput ? (jsxRuntime.jsx(IconButtonEnd$1, { accessibilityLabel: accessibilityClearButtonLabel !== null && accessibilityClearButtonLabel !== void 0 ? accessibilityClearButtonLabel : accessibilityClearButtonLabelDefault, icon: "cancel", onClick: handleOnClickIconButtonClear })) : (jsxRuntime.jsx(IconButtonEnd$1, { accessibilityHidden: true, icon: "arrow-down", onClick: handleSetShowOptionsList })), id: `combobox-${id}`, label: label, labelDisplay: labelDisplay, onBlur: handleOnBlur, onChange: handleOnChange, onClick: handleSetShowOptionsList, onFocus: handleOnFocus, onKeyDown: handleOnKeyDown, placeholder: placeholder, readOnly: readOnly, readOnlyNoIconButton: readOnly, size: size, type: "text", value: controlledInputValue !== null && controlledInputValue !== void 0 ? controlledInputValue : textfieldInput })), isInVRExperiment && tags && selectedTags && (jsxRuntime.jsx(TagAreaWithForwardRef
                    // @ts-expect-error - TS2322
                    // add accessibilityControls once the option list element exists
                    , { 
                        // @ts-expect-error - TS2322
                        // add accessibilityControls once the option list element exists
                        ref: innerRef, 
                        // add accessibilityActiveDescendant once the option list element exists
                        accessibilityActiveDescendant: showOptionsList && innerRef.current && hoveredItemIndex !== null
                            ? `${id}-item-${hoveredItemIndex}`
                            : undefined, accessibilityControls: showOptionsList && innerRef.current ? id : undefined, autoComplete: "off", disabled: disabled, errorMessage: errorMessage, hasError: !!errorMessage, helperText: helperText, iconButton: controlledInputValue || textfieldInput || tags.length > 0 ? (jsxRuntime.jsx(IconButtonEnd$1, { accessibilityLabel: accessibilityClearButtonLabel !== null && accessibilityClearButtonLabel !== void 0 ? accessibilityClearButtonLabel : accessibilityClearButtonLabelDefault, icon: "cancel", onClick: handleOnClickIconButtonClear })) : (jsxRuntime.jsx(IconButtonEnd$1, { accessibilityHidden: true, icon: "arrow-down", onClick: handleSetShowOptionsList })), id: `combobox-${id}`, label: label, labelDisplay: labelDisplay, onBlur: handleOnBlur, onChange: handleOnChange, onClick: handleSetShowOptionsList, onFocus: handleOnFocus, onKeyDown: handleOnKeyDown, placeholder: tags && tags.length > 0 ? '' : placeholder, readOnly: readOnly, readOnlyNoIconButton: readOnly, size: size, tags: selectedTags, type: "text", value: controlledInputValue !== null && controlledInputValue !== void 0 ? controlledInputValue : textfieldInput })), !isInVRExperiment && (jsxRuntime.jsx(InternalTextFieldWithForwardRef$1
                    // add accessibilityControls once the option list element exists
                    , { 
                        // add accessibilityControls once the option list element exists
                        ref: innerRef, 
                        // add accessibilityActiveDescendant once the option list element exists
                        accessibilityActiveDescendant: showOptionsList && innerRef.current && hoveredItemIndex !== null
                            ? `${id}-item-${hoveredItemIndex}`
                            : undefined, accessibilityControls: showOptionsList && innerRef.current ? id : undefined, autoComplete: "off", disabled: disabled, errorMessage: errorMessage, hasError: !!errorMessage, helperText: helperText, iconButton: controlledInputValue || textfieldInput || (tags && tags.length > 0) ? (jsxRuntime.jsx(IconButtonEnd$1, { accessibilityLabel: accessibilityClearButtonLabel !== null && accessibilityClearButtonLabel !== void 0 ? accessibilityClearButtonLabel : accessibilityClearButtonLabelDefault, hoverStyle: "default", icon: "cancel", onClick: handleOnClickIconButtonClear, pogPadding: size === 'lg' ? 2 : 1, tapStyle: "compress" })) : (jsxRuntime.jsx(IconButtonEnd$1, { accessibilityHidden: true, hoverStyle: "none", icon: "arrow-down", onClick: handleSetShowOptionsList, pogPadding: size === 'lg' ? 2 : 1, tapStyle: "none" })), id: `combobox-${id}`, label: label, labelDisplay: labelDisplay, onBlur: handleOnBlur, onChange: handleOnChange, onClick: handleSetShowOptionsList, onFocus: handleOnFocus, onKeyDown: handleOnKeyDown, placeholder: tags && tags.length > 0 ? '' : placeholder, readOnly: readOnly, size: size, tags: selectedTags, type: "text", value: controlledInputValue !== null && controlledInputValue !== void 0 ? controlledInputValue : textfieldInput }))] }), showOptionsList && innerRef.current && !readOnly ? (jsxRuntime.jsx(Layer, { zIndex: zIndex, children: jsxRuntime.jsx(InternalPopover, { anchor: innerRef.current, color: "white", disablePortal: true, hideWhenReferenceHidden: true, idealDirection: "down", onDismiss: handleOnDismiss, onKeyDown: handleKeyDown, role: "listbox", shouldFocus: false, showCaret: false, size: "flexible", children: jsxRuntime.jsx(BoxWithForwardRef, { ref: dropdownRef, alignItems: "center", direction: "column", display: "flex", flex: "grow", id: id, maxHeight: "30vh", overflow: "auto", padding: 2, rounding: 4, width: (_a = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _a === void 0 ? void 0 : _a.offsetWidth, children: suggestedOptions.length > 0 ? (comboBoxItemList) : (jsxRuntime.jsx(BoxWithForwardRef, { paddingX: 2, paddingY: 4, width: "100%", children: jsxRuntime.jsx(TextWithForwardRef, { color: "subtle", lineClamp: 1, children: noResultText !== null && noResultText !== void 0 ? noResultText : noResultTextDefault }) })) }) }) })) : null] }));
});
ComboBoxWithForwardRef.displayName = 'ComboBox';

/**
 * [Containers](https://gestalt.pinterest.systems/web/container ) are useful in responsively laying out content on different screens.
 *
 * ![Container light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Container.spec.ts-snapshots/Container-chromium-darwin.png)
 *
 */
function Container({ children }) {
    return (jsxRuntime.jsx(BoxWithForwardRef, { display: "flex", justifyContent: "center", children: jsxRuntime.jsx(BoxWithForwardRef, { maxWidth: 800, width: "100%", children: children }) }));
}
Container.displayName = 'Container';

const TREND_COLOR_MAP = {
    good: 'success',
    bad: 'error',
    neutral: 'default',
};
function getValueColor({ sentiment, value }) {
    if (sentiment === 'auto') {
        if (value === 0) {
            return 'default';
        }
        return value > 0 ? 'success' : 'error';
    }
    return TREND_COLOR_MAP[sentiment];
}
function Trend({ disabled = false, iconAccessibilityLabel, sentiment = 'auto', value, }) {
    const color = disabled ? 'subtle' : getValueColor({ sentiment, value });
    return (jsxRuntime.jsxs(FlexWithForwardRef, { gap: { column: 0, row: 1 }, children: [value !== 0 && (jsxRuntime.jsx(Icon, { accessibilityLabel: iconAccessibilityLabel, color: color, icon: value > 0 ? 'sort-ascending' : 'sort-descending', size: 16 })), jsxRuntime.jsx(TextWithForwardRef, { color: color, size: "200", weight: "bold", children: `${Math.abs(value)}%` })] }));
}

function AccessibilityPause() {
    return jsxRuntime.jsx(VisuallyHidden, { children: "," });
}

function MaybeMinWidth({ minWidth, maxWidth, numTitleRows, children, }) {
    return minWidth ? (jsxRuntime.jsx(BoxWithForwardRef, { maxWidth: maxWidth, minHeight: `${numTitleRows || 1}em`, minWidth: minWidth, children: children })) : (children);
}
function InternalDatapoint({ badge, disabled = false, lineClamp, minTitleWidth, maxTitleWidth, numTitleRows, size = 'md', title, tooltipText, tooltipZIndex, trend, trendSentiment = 'auto', value, }) {
    const textColor = disabled ? 'subtle' : 'default';
    return (jsxRuntime.jsxs(FlexWithForwardRef, { direction: "column", gap: { column: 1, row: 0 }, children: [jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", gap: { row: 1, column: 0 }, minHeight: 24, children: [jsxRuntime.jsx(MaybeMinWidth, { maxWidth: maxTitleWidth, minWidth: minTitleWidth, numTitleRows: numTitleRows, children: jsxRuntime.jsxs(TextWithForwardRef, { color: textColor, lineClamp: lineClamp, size: "200", children: [title, jsxRuntime.jsx(AccessibilityPause, {})] }) }), tooltipText && (jsxRuntime.jsx(Tooltip, { accessibilityLabel: "", idealDirection: "up", text: tooltipText, zIndex: tooltipZIndex, children: jsxRuntime.jsx(TapAreaWithForwardRef, { accessibilityLabel: tooltipText, rounding: "circle", tapStyle: "none", children: jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: "subtle", icon: "info-circle", size: 16 }) }) })), badge && jsxRuntime.jsx(Badge, { text: badge.text, type: badge.type })] }), jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", gap: size === 'lg' ? 4 : 2, children: [jsxRuntime.jsxs(TextWithForwardRef, { color: textColor, size: size === 'lg' ? '500' : '400', weight: "bold", children: [value, jsxRuntime.jsx(AccessibilityPause, {})] }), trend && (jsxRuntime.jsx(Trend, { disabled: disabled, iconAccessibilityLabel: trend.accessibilityLabel, sentiment: trendSentiment, value: trend.value }))] })] }));
}

/**
 * [Datapoint](https://gestalt.pinterest.systems/web/datapoint) displays at-a-glance data for a user to quickly view key metrics.
 *
 * ![Datapoint light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Datapoint.spec.ts-snapshots/Datapoint-chromium-darwin.png)
 * ![Datapoint dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Datapoint-dark.spec.ts-snapshots/Datapoint-dark-chromium-darwin.png)
 *
 */
function Datapoint({ badge, size = 'md', title, tooltipText, tooltipZIndex, trend, trendSentiment = 'auto', value, }) {
    return (jsxRuntime.jsx(InternalDatapoint, { badge: badge, size: size, title: title, tooltipText: tooltipText, tooltipZIndex: tooltipZIndex, trend: trend, trendSentiment: trendSentiment, value: value }));
}
Datapoint.displayName = 'Datapoint';

/**
 * https://gestalt.pinterest.systems/web/utilities/usereducedmotion
 */
function useReducedMotion() {
    var _a;
    const supportsMatchMedia = typeof window !== 'undefined' && window.matchMedia;
    const [matches, setMatch] = useState(supportsMatchMedia ? !!((_a = window.matchMedia('(prefers-reduced-motion: reduce)')) === null || _a === void 0 ? void 0 : _a.matches) : false);
    useEffect(() => {
        if (!supportsMatchMedia) {
            return () => { };
        }
        const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
        if (!mediaQuery) {
            return () => { };
        }
        const handleChange = () => {
            setMatch(mediaQuery.matches);
        };
        handleChange();
        addListener(mediaQuery, handleChange);
        return () => {
            removeListener(mediaQuery, handleChange);
        };
    }, [supportsMatchMedia]);
    return matches;
}

const ANIMATION_STATE = {
    animatedOpening: 'animatedOpening',
    animatedClosing: 'animatedClosing',
    unmount: 'unmount',
    hidden: 'hidden',
};
// CONTEXT
const initialState$1 = {
    // null here is used to mount OverlayPanel with reduced motion, no animation.
    animationState: null,
    setAnimationState: () => { },
};
const AnimationContext = createContext(initialState$1);
// PROVIDER
function AnimationProvider({ children }) {
    const [animationState, setAnimationState] = useState(useReducedMotion() ? null : ANIMATION_STATE.hidden);
    return (jsxRuntime.jsx(AnimationContext.Provider, { value: useMemo(() => ({ animationState, setAnimationState }), [animationState]), children: children }));
}
// HELPER
const flushSync = (callback) => {
    /*
      A backward-compatible shim for React < 18
      flushSync is needed in React 18+ to ensure that the animation is finished before the onDismiss callback is called.
    */
    if (ReactDOM__default.flushSync) {
        ReactDOM__default.flushSync(callback);
    }
    else {
        callback();
    }
};
// HOOK
function useAnimation() {
    const reducedMotion = useReducedMotion();
    const { animationState, setAnimationState } = useContext(AnimationContext);
    /*
      onAnimatedDismiss is ultimately the callback that triggers unmounting with/without animation externally.
    */
    const handleExternalDismiss = useCallback(() => {
        flushSync(() => setAnimationState(reducedMotion ? ANIMATION_STATE.unmount : ANIMATION_STATE.animatedClosing));
    }, [reducedMotion, setAnimationState]);
    const handleAnimationEnd = useCallback(() => {
        if (!reducedMotion &&
            // @ts-expect-error - TS2345 - Argument of type 'AnimationStateType' is not assignable to parameter of type '"animatedOpening" | "animatedClosing"'.
            [ANIMATION_STATE.animatedOpening, ANIMATION_STATE.animatedClosing].includes(animationState))
            flushSync(() => setAnimationState(
            /*
              null here is used to used to mount OverlayPanel with motion.
              ANIMATION_STATE.unmount here isets the component to internally unmount before onDismiss gets called and full component gets unmounted
            */
            animationState === ANIMATION_STATE.animatedOpening ? null : ANIMATION_STATE.unmount));
    }, [animationState, setAnimationState, reducedMotion]);
    return {
        animationState,
        setAnimationState,
        handleExternalDismiss,
        handleAnimationEnd,
    };
}

// CONTEXT
const initialState = {
    handleRequestAnimationFrame: () => { },
    onExternalDismiss: () => { },
};
const RequestAnimationFrameContext = createContext(initialState);
// HELPERS
// requestAnimationFrame
function getRequestAnimationFrame(callback) {
    if (typeof window === 'undefined' ||
        !Object.prototype.hasOwnProperty.call(window, 'requestAnimationFrame')) {
        if (callback) {
            callback();
        }
    }
    /* the callback routine must itself call requestAnimationFrame() again to animate another frame at the next repaint. requestAnimationFrame() is 1 shot. */
    let requestId;
    /* update the requestId each time requestAnimationFrame is called */
    requestId = window.requestAnimationFrame(() => {
        requestId = window.requestAnimationFrame(() => {
            if (callback) {
                callback();
            }
        });
    });
    return requestId;
}
// cancelAnimationFrame
function cancelRequestAnimationFrame({ requestAnimationFrameId, }) {
    if (typeof window !== 'undefined' &&
        Object.prototype.hasOwnProperty.call(window, 'cancelAnimationFrame') &&
        requestAnimationFrameId) {
        /* the cancellation uses the last requestId */
        window.cancelAnimationFrame(requestAnimationFrameId);
        return null;
    }
    return requestAnimationFrameId;
}
// PROVIDER
function RequestAnimationFrameProvider({ children, }) {
    const reducedMotion = useReducedMotion();
    const { animationState, setAnimationState, handleExternalDismiss } = useAnimation();
    const requestAnimationFrameId = useRef(null);
    /*
    Summary to understand what event controls requestAnimationFrame during the lifecycle of the component
      "in" animation
        animation starts (requestAnimationFrame): useEffect (mounting)
        animation ends (cancelAnimationFrame): handleRequestAnimationFrame (onAnimationEnd)
  
      "out" animation
        animation starts (requestAnimationFrame): onExternalDismiss (onDismiss)
        animation ends (cancelAnimationFrame): useEffect (unmounting)
    */
    /*
    useEffect (mounting/unmounting)
  
      This useEffect controls requestAnimationFrame on the "in" animation when mounting and cancelAnimationFrame on the "out" animation when unmounting
    */
    useEffect(() => {
        // requestAnimationFrame manages the initial rendering of the component when component is animated
        requestAnimationFrameId.current = getRequestAnimationFrame(() => {
            if (!reducedMotion && !!requestAnimationFrameId.current) {
                setAnimationState === null || setAnimationState === void 0 ? void 0 : setAnimationState(ANIMATION_STATE.animatedOpening);
            }
        });
        // On unmounting, cancelAnimationFrame always gets executed
        return () => {
            requestAnimationFrameId.current = cancelRequestAnimationFrame({
                requestAnimationFrameId: requestAnimationFrameId.current,
            });
        };
    }, [reducedMotion, setAnimationState]);
    /*
    onExternalDismiss (onDismiss)
  
      onExternalDismiss controls requestAnimationFrame for the "out" animation
      onExternalDismiss can be accessed via render props in the API (onDismissStart)
      handleExternalDismiss is ultimately the callback that triggers unmounting with/without animation externally
    */
    const onExternalDismiss = useCallback(() => {
        if (!reducedMotion) {
            requestAnimationFrameId.current = getRequestAnimationFrame(() => handleExternalDismiss());
        }
        else {
            handleExternalDismiss();
        }
    }, [reducedMotion, handleExternalDismiss]);
    /*
    handleRequestAnimationFrame (onAnimationEnd)
  
      handleRequestAnimationFrame controls cancelAnimationFrame only after the "in" animation ends, not after the "out" animation as the previous useEffect takes care of it when unmounting
  
      handleRequestAnimationFrame is only called within the onAnimationEnd event.
  
      handleAnimationEnd && handleRequestAnimationFrame are separate functions as handleRequestAnimationFrame only handles animations out, not both in/out
    */
    const handleRequestAnimationFrame = useCallback(() => {
        if (!reducedMotion && animationState === ANIMATION_STATE.animatedOpening) {
            requestAnimationFrameId.current = cancelRequestAnimationFrame({
                requestAnimationFrameId: requestAnimationFrameId.current,
            });
        }
    }, [animationState, reducedMotion]);
    // We don't put RequestAnimationFrameProvider within AnimationProvider to prevent circular dependencies
    return (jsxRuntime.jsx(RequestAnimationFrameContext.Provider, { value: useMemo(() => ({ handleRequestAnimationFrame, onExternalDismiss }), [handleRequestAnimationFrame, onExternalDismiss]), children: children }));
}
// HOOK
function useRequestAnimationFrame() {
    return useContext(RequestAnimationFrameContext);
}

const initialContextState$1 = {
    id: '',
    hoveredItemIndex: -1,
    setHoveredItemIndex: () => { },
    setOptionRef: () => { },
};
const context$1 = createContext(initialContextState$1);
const DropdownContextProvider = context$1.Provider;
const DropdownContextConsumer = context$1.Consumer;

const OptionItemWithForwardRef = forwardRef(function OptionItem({ badge, children, dataTestId, disabled, onSelect, hoveredItemIndex, href, id, index, iconEnd, onClick, option, selected, setHoveredItemIndex, textWeight = 'normal', }, ref) {
    const deviceType = useDeviceType();
    const isMobile = deviceType === 'mobile';
    const { onExternalDismiss } = useRequestAnimationFrame();
    const matches = (Array.isArray(selected) ? selected : []).filter(({ value }) => value === option.value);
    // Determine if the option is a current selected item
    const isSelectedItem = matches.length > 0 || JSON.stringify(option) === JSON.stringify(selected);
    const handleOnTap = (event) => {
        if (!href && !children) {
            event.preventDefault();
        }
        if (disabled)
            return;
        onSelect === null || onSelect === void 0 ? void 0 : onSelect({ event, item: option });
    };
    const { isFocusVisible } = useFocusVisible();
    const className = classnames(getRoundingClassName(2), {
        [focusStyles.hideOutline]: !isFocusVisible,
        [focusStyles.accessibilityOutline]: isFocusVisible,
        [focusStyles.accessibilityOutlineFocusWithin]: isFocusVisible,
        [touchableStyles.fullWidth]: true,
        [touchableStyles.pointer]: !disabled,
        [touchableStyles.noDrop]: disabled,
    });
    const textColor = disabled ? 'subtle' : 'default';
    const optionItemContent = (jsxRuntime.jsxs(FlexWithForwardRef, { children: [jsxRuntime.jsxs(FlexWithForwardRef, { direction: "column", flex: "grow", gap: { column: 1, row: 0 }, children: [jsxRuntime.jsx(FlexWithForwardRef, { alignItems: "center", children: children || (jsxRuntime.jsxs(Fragment, { children: [jsxRuntime.jsx(TextWithForwardRef, { color: textColor, inline: true, lineClamp: 1, title: disabled ? '' : undefined, weight: textWeight, children: option === null || option === void 0 ? void 0 : option.label }), badge && !disabled && (jsxRuntime.jsxs(BoxWithForwardRef, { marginStart: 2, marginTop: 1, children: [jsxRuntime.jsx(BoxWithForwardRef, { display: "visuallyHidden", children: `, ` }), jsxRuntime.jsx(Badge, { text: badge.text, type: badge.type || 'info' })] }))] })) }), option.subtext && (jsxRuntime.jsx(TextWithForwardRef, { color: "subtle", size: "200", children: option.subtext }))] }), jsxRuntime.jsx(BoxWithForwardRef, { alignItems: "center", color: "transparent", display: !iconEnd ? 'flex' : 'none', justifyContent: "center", children: isSelectedItem && !iconEnd ? (jsxRuntime.jsx(Icon, { accessibilityLabel: "Selected item", color: "default", icon: "check", size: 12 })) : (jsxRuntime.jsx(BoxWithForwardRef, { width: 12 })) }), iconEnd && (jsxRuntime.jsx(BoxWithForwardRef, { alignItems: "center", color: "transparent", display: "flex", justifyContent: "center", 
                // marginStart is for spacing relative to Badge, should not be moved to parent Flex's gap
                marginStart: 2, children: jsxRuntime.jsx(AccessibilityLinkActionIcon, { color: textColor, icon: iconEnd, size: 12 }) }))] }));
    return (jsxRuntime.jsx("div", { 
        // @ts-expect-error - TS2322 - Type 'ForwardedRef<HTMLElement | null | undefined>' is not assignable to type 'LegacyRef<HTMLDivElement> | undefined'.
        ref: index === hoveredItemIndex ? ref : null, "aria-disabled": disabled, className: className, "data-test-id": dataTestId, 
        // These event.stopPropagation are important so interactive anchors don't receive the onFocus/onBlur event
        id: `${id}-item-${index}`, onBlur: (event) => event.stopPropagation(), 
        // @ts-expect-error - TS2322 - Type '(event: React.ChangeEvent<HTMLInputElement>) => void' is not assignable to type 'MouseEventHandler<HTMLDivElement>'.
        onClick: handleOnTap, 
        // This event.stopPropagation is important so interactive anchors don't compress with the onMouseDown event
        onFocus: (event) => event.stopPropagation(), onKeyPress: (event) => {
            event.preventDefault();
        }, onMouseDown: (event) => {
            event.stopPropagation();
            event.preventDefault();
        }, onMouseEnter: () => {
            if (!disabled) {
                setHoveredItemIndex(index);
            }
        }, role: "menuitem", rounding: 2, tabIndex: isMobile && !disabled ? 0 : -1, children: jsxRuntime.jsx(BoxWithForwardRef, { color: index === hoveredItemIndex && !disabled ? 'secondary' : 'transparent', direction: "column", display: "flex", padding: 2, rounding: 2, children: href && !disabled ? (jsxRuntime.jsx(LinkWithForwardRef, { href: href, onClick: ({ event, dangerouslyDisableOnNavigation }) => onClick === null || onClick === void 0 ? void 0 : onClick({
                    event,
                    dangerouslyDisableOnNavigation,
                    mobileOnDismissStart: isMobile ? onExternalDismiss : () => { },
                }), target: iconEnd === 'visit' ? 'blank' : 'self', underline: "none", children: optionItemContent })) : (optionItemContent) }) }));
});
OptionItemWithForwardRef.displayName = 'OptionItem';

/**
 * Use [Dropdown.Item](https://gestalt.pinterest.systems/web/dropdown#Dropdown.Item) for action & selection, when the Dropdown item triggers an action or selects an option.
 */
function DropdownItem({ badge, children, dataTestId, disabled, _index = 0, onSelect, option, selected, }) {
    return (jsxRuntime.jsx(DropdownContextConsumer, { children: ({ id, hoveredItemIndex, setHoveredItemIndex, setOptionRef }) => (jsxRuntime.jsx(OptionItemWithForwardRef, { ref: setOptionRef, badge: badge, dataTestId: dataTestId, disabled: disabled, hoveredItemIndex: hoveredItemIndex, id: id, index: _index, onSelect: onSelect, option: option, selected: selected, setHoveredItemIndex: setHoveredItemIndex, textWeight: "bold", children: children }, `${option.value + _index}`)) }));
}
// displayName is necessary for children identification in Dropdown
DropdownItem.displayName = 'Dropdown.Item';

/**
 * Use [Dropdown.Link](https://gestalt.pinterest.systems/dropdownDropdown.Link) for navigation, when the Dropdown item navigates to a new page.
 */
function DropdownLink({ badge, children, dataTestId, disabled, href, _index = 0, iconEnd, onClick, option, }) {
    return (jsxRuntime.jsx(DropdownContextConsumer, { children: ({ id, hoveredItemIndex, setHoveredItemIndex, setOptionRef }) => (jsxRuntime.jsx(OptionItemWithForwardRef, { ref: setOptionRef, badge: badge, dataTestId: dataTestId, disabled: disabled, hoveredItemIndex: hoveredItemIndex, href: href, iconEnd: iconEnd, id: id, index: _index, onClick: onClick, option: option, setHoveredItemIndex: setHoveredItemIndex, textWeight: "bold", children: children }, `${option.value + _index}`)) }));
}
// displayName is necessary for children identification in Dropdown
DropdownLink.displayName = 'Dropdown.Link';

var styles$q = {"DropdownSection":"mPu"};

/**
 * Use [Dropdown.Section](https://gestalt.pinterest.systems/web/dropdown#Dropdown.Section) to create hierarchy within a single Dropdown.
 */
function DropdownSection({ label, children }) {
    return (jsxRuntime.jsxs("div", { "aria-label": label, className: styles$q.DropdownSection, children: [jsxRuntime.jsx(BoxWithForwardRef, { display: "flex", padding: 2, role: "presentation", children: jsxRuntime.jsx(TextWithForwardRef, { size: "100", children: label }) }), children] }));
}
// displayName is necessary for children identification in Dropdown
DropdownSection.displayName = 'Dropdown.Section';

function ContentContainer({ children, header, footer, padding }) {
    const [showTopShadow, setShowTopShadow] = useState(false);
    const [showBottomShadow, setShowBottomShadow] = useState(false);
    const contentRef = useRef(null);
    const updateShadows = useCallback(() => {
        const target = contentRef.current;
        if (!target)
            return;
        const hasVerticalScrollbar = (target === null || target === void 0 ? void 0 : target.clientHeight) < (target === null || target === void 0 ? void 0 : target.scrollHeight);
        setShowTopShadow(hasVerticalScrollbar && target.scrollTop > 0);
        setShowBottomShadow(hasVerticalScrollbar && target.offsetHeight + target.scrollTop < target.scrollHeight);
    }, []);
    useEffect(() => {
        updateShadows();
    }, [updateShadows]);
    useEffect(() => {
        window === null || window === void 0 ? void 0 : window.addEventListener('resize', updateShadows);
        return () => {
            window === null || window === void 0 ? void 0 : window.removeEventListener('resize', updateShadows);
        };
    }, [updateShadows]);
    return (jsxRuntime.jsxs(BoxWithForwardRef, { direction: "column", display: "flex", position: "relative", width: "100%", children: [jsxRuntime.jsx(BoxWithForwardRef, { borderStyle: showTopShadow ? 'raisedTopShadow' : undefined, fit: true, padding: 4, position: "relative", children: header }), jsxRuntime.jsx(BoxWithForwardRef
            // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLElement | null | undefined>' is not assignable to type 'LegacyRef<HTMLElement> | undefined'.
            , { 
                // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLElement | null | undefined>' is not assignable to type 'LegacyRef<HTMLElement> | undefined'.
                ref: contentRef, flex: "grow", onScroll: updateShadows, overflow: "auto", paddingX: padding === 'none' ? 0 : 4, paddingY: 2, children: children }), Boolean(footer) && (jsxRuntime.jsx(BoxWithForwardRef, { borderStyle: showBottomShadow ? 'raisedBottomShadow' : undefined, fit: true, position: "relative", children: jsxRuntime.jsx(BoxWithForwardRef, { padding: 4, children: footer }) }))] }));
}

function PrimaryAction$2(_a) {
    var { accessibilityLabel, label, size = 'lg' } = _a, props = __rest(_a, ["accessibilityLabel", "label", "size"]);
    if (props.role === 'link')
        return (jsxRuntime.jsx(ButtonLinkWithForwardRef, { accessibilityLabel: accessibilityLabel, color: "red", href: props.href || '', onClick: props.onClick, rel: props.rel, size: size, target: props.target, text: label }));
    return (jsxRuntime.jsx(ButtonWithForwardRef, { accessibilityLabel: accessibilityLabel, color: "red", onClick: props.onClick, size: size, text: label }));
}

function Header$1({ backIconButton, id, showDismissButton, heading, subHeading, forwardIconButton, onDismiss, primaryAction, showGrabber, align, }) {
    const { accessibilityDismissButtonLabel, accessibilityGrabberLabel } = useDefaultLabelContext('SheetMobile');
    const { onExternalDismiss } = useRequestAnimationFrame();
    const dismissButtonRef = useRef(null);
    const grabberRef = useRef(null);
    useEffect(() => {
        if (!showGrabber && dismissButtonRef.current) {
            dismissButtonRef.current.focus();
        }
        if (grabberRef.current) {
            grabberRef.current.focus();
        }
    }, [dismissButtonRef, showGrabber]);
    return (jsxRuntime.jsxs(Fragment, { children: [showGrabber ? (jsxRuntime.jsx(FlexWithForwardRef, { justifyContent: "center", children: jsxRuntime.jsx(BoxWithForwardRef, { marginBottom: 2, children: jsxRuntime.jsx(TapAreaWithForwardRef
                    // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLDivElement | HTMLAnchorElement | null>' is not assignable to type 'LegacyRef<HTMLDivElement> | undefined'.
                    , { 
                        // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLDivElement | HTMLAnchorElement | null>' is not assignable to type 'LegacyRef<HTMLDivElement> | undefined'.
                        ref: grabberRef, accessibilityLabel: accessibilityGrabberLabel, fullWidth: false, rounding: 7, children: jsxRuntime.jsx(BoxWithForwardRef, { color: "secondary", height: 5, rounding: 7, width: 37 }) }) }) })) : null, jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", gap: 4, justifyContent: "center", children: [backIconButton ? (jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "none", children: jsxRuntime.jsx(IconButtonWithForwardRef, { accessibilityLabel: backIconButton.accessibilityLabel, icon: "arrow-back", iconColor: "darkGray", onClick: ({ event }) => backIconButton === null || backIconButton === void 0 ? void 0 : backIconButton.onClick({
                                event,
                                onDismissStart: onExternalDismiss,
                            }), size: "lg" }) })) : null, !backIconButton && showDismissButton ? (jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "none", children: jsxRuntime.jsx(InternalDismissIconButtonWithForwardRef
                        // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLAnchorElement | HTMLButtonElement | null>' is not assignable to type 'LegacyRef<HTMLButtonElement> | undefined'.
                        , { 
                            // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLAnchorElement | HTMLButtonElement | null>' is not assignable to type 'LegacyRef<HTMLButtonElement> | undefined'.
                            ref: dismissButtonRef, accessibilityControls: id, accessibilityLabel: accessibilityDismissButtonLabel, onClick: onDismiss !== null && onDismiss !== void 0 ? onDismiss : onExternalDismiss, size: "lg" }) })) : null, jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "grow", children: heading ? (jsxRuntime.jsxs(FlexWithForwardRef, { direction: "column", children: [typeof heading === 'string' ? (jsxRuntime.jsx(Heading, { accessibilityLevel: 1, align: align, lineClamp: 2, size: "300", children: heading })) : (heading), subHeading && (jsxRuntime.jsx(TextWithForwardRef, { align: align, size: "100", children: subHeading }))] })) : null }), forwardIconButton && !primaryAction ? (jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "none", children: jsxRuntime.jsx(IconButtonWithForwardRef, { accessibilityLabel: forwardIconButton.accessibilityLabel, icon: "arrow-forward", iconColor: "darkGray", onClick: ({ event }) => forwardIconButton === null || forwardIconButton === void 0 ? void 0 : forwardIconButton.onClick({
                                event,
                                onDismissStart: onExternalDismiss,
                            }), size: "lg" }) })) : null, primaryAction ? (
                    // Allow button text to wrap on mobile
                    jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "shrink", children: primaryAction.href ? (jsxRuntime.jsx(PrimaryAction$2, { accessibilityLabel: primaryAction.accessibilityLabel, href: primaryAction.href, label: primaryAction.label, onClick: ({ event }) => primaryAction === null || primaryAction === void 0 ? void 0 : primaryAction.onClick({
                                event,
                                onDismissStart: onExternalDismiss,
                            }), rel: primaryAction.rel, role: "link", target: primaryAction === null || primaryAction === void 0 ? void 0 : primaryAction.target })) : (jsxRuntime.jsx(PrimaryAction$2, { accessibilityLabel: primaryAction.accessibilityLabel, label: primaryAction.label, onClick: ({ event }) => primaryAction === null || primaryAction === void 0 ? void 0 : primaryAction.onClick({
                                event,
                                onDismissStart: onExternalDismiss,
                            }), role: "button" })) })) : null] })] }));
}

var animation = {"slideInRtlInitialize":"Xjn","animationInSide":"Ve3","slide-in-ltr":"FuY","slide-in-rtl":"_Ud","animationOutSide":"TC3","slide-out-ltr":"Pmg","slide-out-rtl":"JYg","slideUpInitialize":"D_U","animationInBottom":"BND","slide-up":"YAI","animationOutBottom":"k78","slide-down":"Yls"};

var styles$p = {"backdrop":"JJV MIw Rym QLY p6V ojN Cii","initialize":"UxA","backdropAnimationIn":"hkP","fade-in":"UVU","backdropAnimationOut":"tb3","fade-out":"Wl2","zoomOut":"kOw Smz"};

function Backdrop({ children, closeOnOutsideClick, onClick }) {
    const { animationState } = useAnimation();
    return (jsxRuntime.jsxs(Fragment, { children: [jsxRuntime.jsx("div", { className: classnames(styles$p.backdrop, {
                    [styles$p.initialize]: animationState === ANIMATION_STATE.hidden,
                    [styles$p.backdropAnimationIn]: animationState === ANIMATION_STATE.animatedOpening,
                    [styles$p.backdropAnimationOut]: animationState === ANIMATION_STATE.animatedClosing,
                    [styles$p.zoomOut]: closeOnOutsideClick,
                }), onClick: (event) => {
                    if (event.target !== event.currentTarget)
                        return;
                    onClick === null || onClick === void 0 ? void 0 : onClick(event);
                } }), children] }));
}

class NoScrollBehavior extends Component {
    constructor(props) {
        super(props);
        this.prevOverflow = null;
    }
    componentDidMount() {
        if (typeof window !== 'undefined') {
            this.prevOverflow = window.document.body.style.overflow;
            window.document.body.style.overflow = 'hidden';
        }
    }
    componentWillUnmount() {
        if (typeof window !== 'undefined') {
            // @ts-expect-error - TS2322 - Type 'string | null' is not assignable to type 'string'.
            window.document.body.style.overflow = this.prevOverflow;
        }
    }
    render() {
        return this.props.children;
    }
}

function queryFocusableAll(el) {
    // Focusable, interactive elements that could possibly be in children
    const selector = [
        'a[href]',
        'area[href]',
        'input:not([disabled])',
        'select:not([disabled])',
        'textarea:not([disabled])',
        'button:not([disabled])',
        'iframe',
        'object',
        'embed',
        '[tabindex="-1"]',
        '[tabindex="0"]',
        '[contenteditable]',
        'audio[controls]',
        'video[controls]',
        'summary',
    ].join(',');
    return el.querySelectorAll(selector);
}
const focusElement = (el) => {
    // https://github.com/facebook/flow/issues/8705
    if (typeof el.focus === 'function') {
        el.focus();
    }
};
/**
 * TrapFocusBehavior is used by components like Modal and OverlayPanel to ensure that only elements within children components can be focused.
 */
function TrapFocusBehavior({ children }) {
    const elRef = useRef(null);
    const previouslyFocusedElRef = useRef(null);
    const setElRef = (el) => {
        if (el) {
            elRef.current = el;
        }
    };
    useEffect(() => {
        const { current: element } = elRef;
        // Focus the first child element among all the focusable, interactive elements within `children`
        const focusFirstChild = () => {
            const withinIframe = window !== window.parent;
            if (element && !withinIframe) {
                // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                focusElement(queryFocusableAll(element)[0]);
            }
        };
        const handleFocus = (event) => {
            if (!element || (event.target instanceof Node && element.contains(event.target))) {
                return;
            }
            // This prevents stack overflow when multiple TrapFocusBehaviors are rendered
            if (event.target instanceof Element && event.target.closest('[name="trap-focus"]') !== null) {
                return;
            }
            event.stopPropagation();
            event.preventDefault();
            focusFirstChild();
        };
        // If an element has focus currently, keep a reference to that element
        // @ts-expect-error - TS2322 - Type 'Element | null' is not assignable to type 'HTMLElement | null | undefined'.
        previouslyFocusedElRef.current = document.activeElement;
        focusFirstChild();
        document.addEventListener('focus', handleFocus, true);
        return function cleanup() {
            const { current: previouslyFocusedEl } = previouslyFocusedElRef;
            document.removeEventListener('focus', handleFocus, true);
            // If we previously stored a reference to a focused element, return focus to that element
            if (previouslyFocusedEl) {
                focusElement(previouslyFocusedEl);
            }
        };
    }, [elRef, previouslyFocusedElRef]);
    return (
    // @ts-expect-error - TS2322 - Type '{ children: ReactNode; ref: (el?: HTMLDivElement | null | undefined) => void; name: string; }' is not assignable to type 'DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>'.
    jsxRuntime.jsx("div", { ref: setElRef, name: "trap-focus", children: children }));
}

var sheetMobileStyles = {"container":"aQn _he Hsu _O1 mQ8 Rym QLY L4E","fullPageContainer":"f-j KS5","partialPageContainer":"I4V iJk","fullPageWrapper":"TjE XiG XbT _O1","wrapper":"A2V XiG XbT _O1","defaultWrapper":"lpe","autoWrapper":"pZq"};

function PartialPage({ accessibilityLabel, align, backIconButton, children, closeOnOutsideClick = true, onAnimationEnd, onDismiss, onOutsideClick, footer, forwardIconButton, padding, primaryAction, heading, role, showDismissButton, size, subHeading, zIndex, }) {
    var _a;
    const id = useId$1();
    // Consumes DefaultLabelProvider
    const { accessibilityLabel: defaultAccessibilityLabel } = useDefaultLabelContext('SheetMobile');
    // Consumes GlobalEventsHandlerProvider
    const { sheetMobileHandlers } = (_a = useGlobalEventsHandlerContext()) !== null && _a !== void 0 ? _a : {
        sheetMobileHandlers: { onOpen: () => { }, onClose: () => { } },
    };
    const { onClose, onOpen } = sheetMobileHandlers !== null && sheetMobileHandlers !== void 0 ? sheetMobileHandlers : {
        onOpen: () => { },
        onClose: () => { },
    };
    useEffect(() => {
        onOpen === null || onOpen === void 0 ? void 0 : onOpen();
        return function cleanup() {
            onClose === null || onClose === void 0 ? void 0 : onClose();
        };
    }, [onClose, onOpen]);
    // Consumes AnimationProvider & RequestAnimationFrameProvider
    const { animationState, handleAnimationEnd } = useAnimation();
    const { handleRequestAnimationFrame, onExternalDismiss } = useRequestAnimationFrame();
    const handleOnAnimationEnd = useCallback(() => {
        handleAnimationEnd();
        handleRequestAnimationFrame();
        onAnimationEnd === null || onAnimationEnd === void 0 ? void 0 : onAnimationEnd({
            animationState: animationState === ANIMATION_STATE.animatedOpening ? 'in' : 'out',
        });
    }, [animationState, onAnimationEnd, handleAnimationEnd, handleRequestAnimationFrame]);
    // Handle onDismiss triggering from ESC keyup event
    useEffect(() => {
        function handleKeyDown(event) {
            if (event.keyCode === ESCAPE) {
                onExternalDismiss();
            }
        }
        // @ts-expect-error - TS2769 - No overload matches this call.
        window.addEventListener('keydown', handleKeyDown);
        return function cleanup() {
            // @ts-expect-error - TS2769 - No overload matches this call.
            window.removeEventListener('keydown', handleKeyDown);
        };
    }, [onExternalDismiss]);
    // When SheetMobile is full page displayed in mobile browser, the body scroll is still accessible. Here we disable to just allow the scrolling within Modal
    useEffect(() => {
        var _a, _b;
        let prevOverflowStyle = 'auto';
        // @ts-expect-error - TS2339 - Property 'body' does not exist on type 'Window & typeof globalThis'.
        if (window && ((_b = (_a = window.body) === null || _a === void 0 ? void 0 : _a.style) === null || _b === void 0 ? void 0 : _b.overflow)) {
            // @ts-expect-error - TS2339 - Property 'body' does not exist on type 'Window & typeof globalThis'.
            prevOverflowStyle = window.body.style.overflow;
            // @ts-expect-error - TS2339 - Property 'body' does not exist on type 'Window & typeof globalThis'.
            window.body.style.overflow = 'hidden';
        }
        return () => {
            var _a, _b;
            // @ts-expect-error - TS2339 - Property 'body' does not exist on type 'Window & typeof globalThis'.
            if (window && ((_b = (_a = window.body) === null || _a === void 0 ? void 0 : _a.style) === null || _b === void 0 ? void 0 : _b.overflow)) {
                // @ts-expect-error - TS2339 - Property 'body' does not exist on type 'Window & typeof globalThis'.
                window.body.style.overflow = prevOverflowStyle;
            }
        };
    }, []);
    // Use useLayoutEffect instead of useEffect as we need to close the component synchronously after all DOM mutations, useEffect was needed to prevent changing state while still rendering but useEffect will create a ms blink of the full OverlayPanel after closing which gets prevented with useLayoutEffect
    useLayoutEffect(() => {
        if (animationState === ANIMATION_STATE.unmount) {
            onDismiss();
        }
    }, [animationState, onDismiss]);
    // Handle click outside the bottom sheet
    const handleBackdropClick = useCallback((event) => {
        onOutsideClick === null || onOutsideClick === void 0 ? void 0 : onOutsideClick({ event });
        if (closeOnOutsideClick) {
            onExternalDismiss();
        }
    }, [closeOnOutsideClick, onExternalDismiss, onOutsideClick]);
    return (jsxRuntime.jsx(NoScrollBehavior, { children: jsxRuntime.jsx(TrapFocusBehavior, { children: jsxRuntime.jsx("div", { className: classnames(sheetMobileStyles.container, sheetMobileStyles.partialPageContainer), style: zIndex ? { zIndex: zIndex.index() } : undefined, children: jsxRuntime.jsx(Backdrop, { closeOnOutsideClick: closeOnOutsideClick, onClick: handleBackdropClick, children: jsxRuntime.jsx("div", { "aria-label": accessibilityLabel !== null && accessibilityLabel !== void 0 ? accessibilityLabel : defaultAccessibilityLabel, className: classnames(sheetMobileStyles.wrapper, focusStyles.hideOutline, {
                            [sheetMobileStyles.defaultWrapper]: size === 'default',
                            [sheetMobileStyles.autoWrapper]: size === 'auto',
                            [animation.slideUpInitialize]: animationState === ANIMATION_STATE.hidden,
                            [animation.animationInBottom]: animationState === ANIMATION_STATE.animatedOpening,
                            [animation.animationOutBottom]: animationState === ANIMATION_STATE.animatedClosing,
                        }), id: id, onAnimationEnd: handleOnAnimationEnd, role: role, style: { width: '100%' }, tabIndex: -1, children: jsxRuntime.jsx(ContentContainer, { footer: footer, header: jsxRuntime.jsx(Header$1, { align: align, backIconButton: backIconButton, forwardIconButton: forwardIconButton, heading: heading, id: id, primaryAction: primaryAction, showDismissButton: showDismissButton, showGrabber: true, subHeading: subHeading }), padding: padding, children: children }) }) }) }) }) }));
}

const KEYS = {
    UP: -1,
    DOWN: 1,
    ENTER: 0,
};
const dropdownItemDisplayNames = ['Dropdown.Item', 'Dropdown.Link'];
// @ts-expect-error - TS7006 - Parameter 'childrenArray' implicitly has an 'any' type.
function getChildrenOptions(childrenArray) {
    // @ts-expect-error - TS2347 - Untyped function calls may not accept type arguments. | TS7006 - Parameter 'accumulatedChildren' implicitly has an 'any' type. | TS7006 - Parameter 'currentChild' implicitly has an 'any' type.
    return childrenArray.reduce((accumulatedChildren, currentChild) => {
        const { props: { children: currentItemChildren }, type, type: { displayName }, } = currentChild;
        if ((currentItemChildren && displayName === 'Dropdown.Section') || type === Fragment) {
            return [
                ...accumulatedChildren,
                ...(Array.isArray(currentItemChildren)
                    ? currentItemChildren.flat()
                    : [currentItemChildren]),
            ];
        }
        if (dropdownItemDisplayNames.includes(displayName)) {
            return [...accumulatedChildren, currentChild];
        }
        // eslint-disable-next-line no-console
        console.error('Only children of type Dropdown.Item, Dropdown.Link, or Dropdown.Section are allowed.');
        return [...accumulatedChildren];
    }, []);
}
/* In order to properly supply a consecutive index to each Dropdown.Item,
 * used for keyboard navigation,
 * we must clone the item and inject the index prop
 */
// @ts-expect-error - TS7006 - Parameter 'dropdownChildren' implicitly has an 'any' type.
const renderDropdownItemsWithIndex = (dropdownChildren, idxBase) => 
// @ts-expect-error - TS7006 - Parameter 'child' implicitly has an 'any' type. | TS7006 - Parameter 'idx' implicitly has an 'any' type.
dropdownChildren.map((child, idx) => {
    if (dropdownItemDisplayNames.includes(child.type.displayName)) {
        const index = idx + idxBase;
        return cloneElement(child, { _index: index });
    }
    return child;
});
// @ts-expect-error - TS7006 - Parameter 'childrenArray' implicitly has an 'any' type.
const renderChildrenWithIndex = (childrenArray) => {
    let numItemsRendered = 0;
    // @ts-expect-error - TS2347 - Untyped function calls may not accept type arguments. | TS7006 - Parameter 'acc' implicitly has an 'any' type. | TS7006 - Parameter 'child' implicitly has an 'any' type.
    return childrenArray.reduce((acc, child) => {
        const subSectionChildren = child.props.children;
        const childDisplayName = child.type.displayName;
        if ((subSectionChildren && childDisplayName === 'Dropdown.Section') ||
            child.type === Fragment) {
            // @ts-expect-error - TS2558 - Expected 0 type arguments, but got 1.
            const sectionChildrenArray = Children.toArray(subSectionChildren).flat();
            const childWithIndex = cloneElement(child, {
                children: renderDropdownItemsWithIndex(sectionChildrenArray, numItemsRendered),
            });
            numItemsRendered += sectionChildrenArray.length;
            return [...acc, childWithIndex];
        }
        if (dropdownItemDisplayNames.includes(childDisplayName)) {
            const childWithIndex = cloneElement(child, { _index: numItemsRendered });
            numItemsRendered += 1;
            return [...acc, childWithIndex];
        }
        return acc;
    }, []);
};
/**
 * [Dropdown](https://gestalt.pinterest.systems/web/dropdown) displays a list of actions, options or links. It is triggered when a user interacts with a Button, Textfield or other control. Dropdown allows for complex functionality that can’t be accomplished with SelectList.
 *
 * ![Dropdown open light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Dropdown-open.spec.ts-snapshots/Dropdown-open-chromium-darwin.png)
 * ![Dropdown open dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Dropdown-open-dark.spec.ts-snapshots/Dropdown-open-dark-chromium-darwin.png)
 *
 */
function Dropdown({ anchor, children, isWithinFixedContainer = false, headerContent, id, idealDirection = 'down', forceDirection = false, onDismiss, zIndex, maxHeight, mobileOnAnimationEnd, disableMobileUI = false, }) {
    const [isPopoverPositioned, setIsPopoverPositioned] = useState(false);
    const deviceType = useDeviceType();
    const isMobile = deviceType === 'mobile';
    const [hoveredItemIndex, setHoveredItemIndex] = useState(isMobile ? undefined : 0);
    // @ts-expect-error - TS2558 - Expected 0 type arguments, but got 1.
    const dropdownChildrenArray = Children.toArray(children);
    const allowedChildrenOptions = getChildrenOptions(dropdownChildrenArray);
    let selectedElement;
    const setOptionRef = (optionRef) => {
        // Prevent focusing on element until Popover is correctly positioned
        if (!isPopoverPositioned)
            return;
        selectedElement = optionRef;
        const linkElement = selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.getElementsByTagName('a')[0];
        if (linkElement) {
            linkElement.focus();
        }
        else if (selectedElement) {
            selectedElement.focus();
        }
    };
    const handleKeyNavigation = (event, direction, index) => {
        var _a;
        const newIndex = direction + (index !== null && index !== void 0 ? index : 0);
        const optionsCount = allowedChildrenOptions.length - 1;
        // If there's an existing item, navigate from that position
        let cursorIndex = newIndex;
        // If we've reached the end, start at the top
        if (newIndex > optionsCount) {
            cursorIndex = 0;
        }
        // If we're at the top going backwards, start at the last item
        else if (newIndex < 0) {
            cursorIndex = optionsCount;
        }
        const { props: cursorOption } = allowedChildrenOptions[cursorIndex];
        if (cursorOption) {
            const item = cursorOption.option;
            setHoveredItemIndex(cursorIndex);
            if (direction === KEYS.ENTER && !cursorOption.disabled) {
                (_a = cursorOption.onSelect) === null || _a === void 0 ? void 0 : _a.call(cursorOption, {
                    event,
                    item,
                });
            }
        }
    };
    const onKeyDown = ({ event }) => {
        const { keyCode } = event;
        if (keyCode === UP_ARROW) {
            handleKeyNavigation(event, KEYS.UP, hoveredItemIndex);
            event.preventDefault();
        }
        else if (keyCode === DOWN_ARROW) {
            handleKeyNavigation(event, KEYS.DOWN, hoveredItemIndex);
            event.preventDefault();
        }
        else if (keyCode === ENTER$1) {
            event.stopPropagation();
            handleKeyNavigation(event, KEYS.ENTER, hoveredItemIndex);
        }
        else if ([ESCAPE, TAB$1].includes(keyCode)) {
            anchor === null || anchor === void 0 ? void 0 : anchor.focus();
            onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss();
        }
        else if (keyCode === SPACE$1) {
            event.preventDefault();
        }
    };
    if (isMobile && !disableMobileUI) {
        return (jsxRuntime.jsx(AnimationProvider, { children: jsxRuntime.jsx(RequestAnimationFrameProvider, { children: jsxRuntime.jsxs(PartialPage, { align: "start", 
                    // @ts-expect-error - TS2322 - Type '((arg1: { animationState: "in" | "out"; }) => void) | undefined' is not assignable to type '(arg1: { animationState: "in" | "out"; }) => void | null | undefined'.
                    onAnimationEnd: mobileOnAnimationEnd, onDismiss: onDismiss, padding: "default", role: "dialog", showDismissButton: true, size: "auto", zIndex: zIndex, children: [headerContent, jsxRuntime.jsx(DropdownContextProvider, { value: {
                                id,
                                hoveredItemIndex,
                                setHoveredItemIndex,
                                setOptionRef,
                            }, children: renderChildrenWithIndex(dropdownChildrenArray) })] }) }) }));
    }
    const dropdown = (jsxRuntime.jsx(InternalPopover, { accessibilityLabel: "Dropdown", anchor: anchor, color: "white", disablePortal: true, forceDirection: forceDirection, hideWhenReferenceHidden: true, id: id, idealDirection: idealDirection, onDismiss: onDismiss, onKeyDown: onKeyDown, onPositioned: () => setIsPopoverPositioned(true), role: "menu", shouldFocus: true, showCaret: false, size: "xl", children: jsxRuntime.jsxs(BoxWithForwardRef, { alignItems: "center", direction: "column", display: "flex", flex: "grow", margin: 2, maxHeight: maxHeight, children: [Boolean(headerContent) && jsxRuntime.jsx(BoxWithForwardRef, { padding: 2, children: headerContent }), jsxRuntime.jsx(DropdownContextProvider, { value: { id, hoveredItemIndex, setHoveredItemIndex, setOptionRef }, children: renderChildrenWithIndex(dropdownChildrenArray) })] }) }));
    return isWithinFixedContainer ? dropdown : jsxRuntime.jsx(Layer, { zIndex: zIndex, children: dropdown });
}
Dropdown.Item = DropdownItem;
Dropdown.Link = DropdownLink;
Dropdown.Section = DropdownSection;
Dropdown.displayName = 'Dropdown';

var Whitespace = {"m0":"e43","p0":"yQo"};

/**
 * [Fieldset](https://gestalt.pinterest.systems/web/fieldset) creates a fieldset and legend for a group of related form items, like [RadioButtons](https://gestalt.pinterest.systems/web/radiobutton) or [CheckBoxes](https://gestalt.pinterest.systems/web/checkbox), in order to clearly indicate related form items."
 *
 * ![Fieldset light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Fieldset.spec.ts-snapshots/Fieldset-chromium-darwin.png)
 * ![Fieldset dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Fieldset-dark.spec.ts-snapshots/Fieldset-dark-chromium-darwin.png)
 *
 */
function Fieldset({ id = '', errorMessage, legend, legendDisplay = 'visible', children, }) {
    if (errorMessage && id === '') {
        // eslint-disable-next-line no-console
        console.error('Please provide an id property to <Fieldset />');
    }
    return (jsxRuntime.jsxs("fieldset", { "aria-describedby": errorMessage ? `${id}-error` : undefined, className: classnames(formElement.unstyled, Whitespace.p0, Whitespace.m0), children: [jsxRuntime.jsx("legend", { className: classnames(labelStyles.label, formLabelStyles.formLabel, boxWhitespace.paddingX0, // Needed to remove the default legend  padding
                {
                    [boxStyles.visuallyHidden]: legendDisplay === 'hidden',
                }), children: jsxRuntime.jsx(TextWithForwardRef, { size: "100", children: legend }) }), children, errorMessage && jsxRuntime.jsx(FormErrorMessage, { id: `${id}-error`, text: errorMessage })] }));
}
Fieldset.displayName = 'Fieldset';

var styles$o = {"textColorOverrideLight":"OU1","textColorOverrideDark":"fS4"};

/**
 * [HelpButton](https://gestalt.pinterest.systems/web/helpbutton) is an affordance that accompanies an element on the screen. It helps describe or provide assistance on how to use the accompanying element.
 */
function HelpButton({ accessibilityLabel, accessibilityPopoverLabel, idealDirection = 'down', isWithinFixedContainer = false, link, onClick, text, zIndex, }) {
    var _a;
    const tapAreaRef = useRef(null);
    const textRef = useRef(null);
    const [open, setOpen] = useState(false);
    const [hovered, setHovered] = useState(false);
    const [focused, setFocused] = useState(false);
    // Define where the focused content stays
    const [innerModalFocus, setInnerModalFocus] = useState(false);
    const { colorSchemeName } = useColorScheme();
    const popoverId = useId$1();
    const { tooltipMessage } = useDefaultLabelContext('HelpButton');
    const handlePopoverKeyDown = ({ event }) => {
        var _a, _b, _c;
        // Avoid others KeyDown events to listen this call
        if (innerModalFocus)
            event.stopPropagation();
        // # Manual trap focus
        // If `TAB is clicked` when the focus is on `lastElement` of popover
        // the focus back to `textRef` element.
        const elementsInnerPopover = document.querySelectorAll([
            `div[id="helpButtonText-${popoverId}"]`, // Text query
            `a[href="${(_a = link === null || link === void 0 ? void 0 : link.href) !== null && _a !== void 0 ? _a : ''}"]`, // Link query
        ].join(' ,'));
        const lastElement = elementsInnerPopover[elementsInnerPopover.length - 1];
        if (innerModalFocus && event.keyCode === TAB$1 && lastElement === event.target) {
            event.preventDefault();
            (_b = textRef.current) === null || _b === void 0 ? void 0 : _b.focus();
        }
        // If the popover was closed pressing `ESCAPE`, the focus back to TapArea element
        if (event.keyCode === ESCAPE && open) {
            setOpen(false);
            (_c = tapAreaRef.current) === null || _c === void 0 ? void 0 : _c.focus();
        }
    };
    const handleTapAreaKeyDown = ({ event }) => {
        var _a;
        if (event.keyCode === TAB$1 && open) {
            event.preventDefault();
            (_a = textRef.current) === null || _a === void 0 ? void 0 : _a.focus();
            setInnerModalFocus(true);
        }
        // Avoid others KeyDown events to listen this call
        event.stopPropagation();
    };
    const toggleView = () => {
        setOpen((currVal) => !currVal);
    };
    const onHandleTap = (...args) => {
        toggleView();
        // @ts-expect-error - TS2556 - A spread argument must either have a tuple type or be passed to a rest parameter.
        onClick === null || onClick === void 0 ? void 0 : onClick(...args);
    };
    const bgIconColor = open || hovered || focused ? 'selected' : 'tertiary';
    const tooltipZIndex = zIndex !== null && zIndex !== void 0 ? zIndex : new FixedZIndex(1);
    const zIndexWrapper = new CompositeZIndex([tooltipZIndex]);
    // Overriding color of `Text` components
    const isDarkMode = colorSchemeName === 'darkMode';
    const textColorOverrideStyles = isDarkMode
        ? styles$o.textColorOverrideLight
        : styles$o.textColorOverrideDark;
    const textElement = typeof text === 'string' ? (jsxRuntime.jsx(TextWithForwardRef, { align: "start", children: text })) : (jsxRuntime.jsx("span", { className: textColorOverrideStyles, children: text }));
    const popoverElement = (jsxRuntime.jsx(InternalPopover, { accessibilityLabel: accessibilityPopoverLabel, anchor: tapAreaRef.current, color: "white", disablePortal: isWithinFixedContainer, hideWhenReferenceHidden: true, id: popoverId, idealDirection: idealDirection, onDismiss: toggleView, onKeyDown: handlePopoverKeyDown, role: "dialog", shouldFocus: true, showCaret: false, size: "sm", children: jsxRuntime.jsxs(BoxWithForwardRef, { height: "auto", padding: 5, rounding: 4, children: [jsxRuntime.jsx(BoxWithForwardRef, { ref: textRef, id: `helpButtonText-${popoverId}`, tabIndex: 0, children: textElement }), link && (link === null || link === void 0 ? void 0 : link.href) && (jsxRuntime.jsx(BoxWithForwardRef, { display: "block", marginTop: 3, width: "100%", children: jsxRuntime.jsx(TextWithForwardRef, { children: jsxRuntime.jsx(LinkWithForwardRef
                        // @ts-expect-error - TS2322 - Type 'Ref<"a"> | undefined' is not assignable to type 'LegacyRef<HTMLAnchorElement> | undefined'.
                        , { 
                            // @ts-expect-error - TS2322 - Type 'Ref<"a"> | undefined' is not assignable to type 'LegacyRef<HTMLAnchorElement> | undefined'.
                            ref: link.ref, accessibilityLabel: link.accessibilityLabel, externalLinkIcon: link.externalLinkIcon, href: link.href, onBlur: () => setFocused(false), onClick: link.onClick, onFocus: () => setFocused(true), target: (_a = link.target) !== null && _a !== void 0 ? _a : 'blank', underline: "always", children: link.text }) }) }))] }) }));
    return (
    // The only purpose of this Flex is to make zIndex work (Tooltip over Popover).
    jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", flex: "none", justifyContent: "center", children: [jsxRuntime.jsx(Tooltip, { accessibilityLabel: "", idealDirection: idealDirection, text: tooltipMessage, zIndex: tooltipZIndex, children: jsxRuntime.jsx(TapAreaWithForwardRef
                // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLDivElement | HTMLAnchorElement | null>' is not assignable to type 'LegacyRef<HTMLDivElement> | undefined'.
                , { 
                    // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLDivElement | HTMLAnchorElement | null>' is not assignable to type 'LegacyRef<HTMLDivElement> | undefined'.
                    ref: tapAreaRef, accessibilityControls: popoverId, accessibilityExpanded: open, accessibilityLabel: accessibilityLabel, fullWidth: false, onBlur: () => setFocused(false), onFocus: () => setFocused(true), onKeyDown: handleTapAreaKeyDown, onMouseEnter: () => setHovered(true), onMouseLeave: () => setHovered(false), onTap: onHandleTap, role: "button", rounding: "circle", children: jsxRuntime.jsx(BoxWithForwardRef, { alignItems: "center", color: bgIconColor, display: "flex", height: 16, justifyContent: "center", rounding: "circle", width: 16, children: jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: "inverse", icon: "question-mark", size: 8 }) }) }) }), open &&
                (isWithinFixedContainer ? (
                // This Box is  handling the zIndex work (Tooltip over Popover)
                jsxRuntime.jsx(BoxWithForwardRef, { "data-test-id": "zIndexLayer", zIndex: zIndexWrapper, children: popoverElement })) : (jsxRuntime.jsx(Layer, { zIndex: zIndexWrapper, children: popoverElement })))] }));
}
HelpButton.displayName = 'HelpButton';

/**
 * [IconButtonFloating](https://gestalt.pinterest.systems/web/iconbuttonfloating) represents the primary or most common action on the screen. As the name suggests, it floats over the content and is always on top of everything on the screen. Similar to [IconButton](https://gestalt.pinterest.systems/web/iconbutton), the floating version uses icons instead of text to convey available actions. However, it is used when the action needs to be visible at all times in a sticky way where content can scroll underneath. IconButtonFloating remains in place on scroll.
 *
 * By default, it has a circular shape with a [floating elevation](https://gestalt.pinterest.systems/foundations/elevation) shadow style built-in. When pressed, it will open more related actions by triggering [Dropdown](https://gestalt.pinterest.systems/web/dropdown) or [Modal](https://gestalt.pinterest.systems/web/modal).
 *
 * IconButtonFloating is typically found in the Home feed, boards, and dashboards, allowing Pinners to perform core actions.
 *
 * ![IconButtonFloating light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/IconButtonFloating.spec.ts-snapshots/IconButtonFloating-chromium-darwin.png)
 * ![IconButtonFloating dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/IconButtonFloating-dark.spec.ts-snapshots/IconButtonFloating-dark-chromium-darwin.png)
 *
 */
const IconButtonFloatingWithForwardRef = forwardRef(function IconButtonFloating({ accessibilityControls, accessibilityExpanded, accessibilityPopupRole, accessibilityLabel, dangerouslySetSvgPath, disabled, icon, onClick, selected, tooltip, }, ref) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    return (jsxRuntime.jsx(BoxWithForwardRef, { borderStyle: "shadow", color: "default", rounding: isInVRExperiment ? 4 : 'circle', children: jsxRuntime.jsx(InternalIconButtonWithForwardRef, { ref: ref, accessibilityControls: accessibilityControls, accessibilityExpanded: accessibilityExpanded, accessibilityLabel: accessibilityLabel, accessibilityPopupRole: accessibilityPopupRole, bgColor: "transparent", dangerouslySetSvgPath: dangerouslySetSvgPath, disabled: disabled, icon: icon, onClick: onClick, selected: selected, size: "xl", tooltip: tooltip }) }));
});
IconButtonFloatingWithForwardRef.displayName = 'IconButtonFloating';

/**
 * [IconButtonLink](https://gestalt.pinterest.systems/web/iconbuttonlink) is mainly used as navigational element.
 *
 * ![IconButton light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/IconButton.spec.ts-snapshots/IconButton-chromium-darwin.png)
 * ![IconButton dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/IconButton-dark.spec.ts-snapshots/IconButton-dark-chromium-darwin.png)
 *
 */
const IconButtonLinkWithForwardRef = forwardRef(function IconButtonLink({ active, href, rel, target, accessibilityLabel, bgColor, dangerouslySetSvgPath, dataTestId, disabled, focusColor, icon, iconColor, onClick, padding, tabIndex = 0, tooltip, size = 'lg', }, ref) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const innerRef = useRef(null);
    // When using both forwardRef and innerRef, React.useimperativehandle() allows a parent component
    // that renders <IconButton ref={inputRef} /> to call inputRef.current.focus()
    // @ts-expect-error - TS2322 - Type 'HTMLAnchorElement | null' is not assignable to type 'HTMLAnchorElement'.
    useImperativeHandle(ref, () => innerRef.current);
    const { handleOnFocus, handleOnBlur, handleOnMouseEnter, handleOnMouseLeave, handleOnMouseDown, handleOnMouseUp, isHovered, isActive, isFocused, } = useInteractiveStates();
    const { accessibilityNewTabLabel } = useDefaultLabelContext('Link');
    const buttonComponent = (jsxRuntime.jsxs(InternalLinkWithForwardRef, { ref: innerRef, accessibilityCurrent: active, accessibilityLabel: getAriaLabel({
            target,
            accessibilityLabel,
            accessibilityNewTabLabel,
        }), dataTestId: dataTestId, disabled: disabled, href: href, onBlur: handleOnBlur, onClick: ({ event, dangerouslyDisableOnNavigation }) => {
            onClick === null || onClick === void 0 ? void 0 : onClick({
                event,
                dangerouslyDisableOnNavigation,
            });
        }, onFocus: handleOnFocus, onMouseDown: handleOnMouseDown, onMouseEnter: handleOnMouseEnter, onMouseLeave: handleOnMouseLeave, onMouseUp: handleOnMouseUp, rel: rel, tabIndex: tabIndex, target: target, wrappedComponent: "iconButton", children: [jsxRuntime.jsx(Pog, { active: !disabled && isActive, bgColor: bgColor, dangerouslySetSvgPath: dangerouslySetSvgPath, focusColor: focusColor, focused: isInVRExperiment && isFocused, hovered: !disabled && isHovered, icon: icon, iconColor: iconColor, padding: padding, selected: active && ['page', 'section'].includes(active), size: size }), jsxRuntime.jsx(NewTabAccessibilityLabel, { target: target })] }));
    return (tooltip === null || tooltip === void 0 ? void 0 : tooltip.text) ? (jsxRuntime.jsx(Tooltip, { accessibilityLabel: tooltip.accessibilityLabel, idealDirection: tooltip.idealDirection, inline: tooltip.inline, text: tooltip.text, zIndex: tooltip.zIndex, children: buttonComponent })) : (buttonComponent);
});
IconButtonLinkWithForwardRef.displayName = 'IconButtonLink';

// @ts-expect-error - TS2322 - Type 'string[]' is not assignable to type 'readonly ("replace" | "search" | "link" | "text" | "dash" | "3D" | "3D-move" | "360" | "accessibility" | "ad" | "ad-group" | "add" | "add-circle" | "add-layout" | "add-pin" | "add-section" | ... 317 more ... | "wave")[]'.
const IconNames = Object.keys(icons$1);
/**
 * [Icons](https://gestalt.pinterest.systems/web/icon) are the symbolic representation of an action or information, providing visual context and improving usability.
 *
 * See the [Iconography and SVG guidelines](https://gestalt.pinterest.systems/foundations/iconography/library) to explore the full icon library.
 *
 * ![Icon light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Icon-list.spec.ts-snapshots/Icon-list-chromium-darwin.png)
 * ![Icon dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Icon-list-dark.spec.ts-snapshots/Icon-list-dark-chromium-darwin.png)
 *
 */
function IconCompact({ accessibilityLabel, color = 'subtle', dangerouslySetSvgPath, dataTestId, icon, inline = false, size = 16, }) {
    return (jsxRuntime.jsx(InternalIcon, { accessibilityLabel: accessibilityLabel, color: color, dangerouslySetSvgPath: dangerouslySetSvgPath, dataTestId: dataTestId, icon: icon, inline: inline, size: size }));
}
IconCompact.icons = IconNames;
IconCompact.displayName = 'IconCompact';

/*
  Much of the math and understanding about this component comes from @vjeaux's
  excellent blog post on image resizing.

  http://blog.vjeux.com/2013/image/css-container-and-cover.html

  I highly recommend you read that first before continuing on reading.
*/
const aspectRatio = (width, height) => width / height;
/**
 * [Letterbox](https://gestalt.pinterest.systems/web/letterbox) is useful if you have some source media which is larger than the area you want to display it in. For instance, you might have a really tall image and want it to be displayed in a neatly cropped square. While the ideal solution to this problem is to update the source image, this might not always be possible for either cost or performance reasons.
 *
 * Letterbox should be used in situations where you would otherwise use the CSS property `background-size: cover`.
 *
 * ![Letterbox light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Letterbox.spec.ts-snapshots/Letterbox-chromium-darwin.png)

 */
function Letterbox({ children, contentAspectRatio, height, width }) {
    const viewportAspectRatio = aspectRatio(width, height);
    let contentHeight;
    let contentWidth;
    if (contentAspectRatio < viewportAspectRatio) {
        contentWidth = width;
        contentHeight = width / contentAspectRatio;
    }
    else {
        contentWidth = height * contentAspectRatio;
        contentHeight = height;
    }
    const offsetTop = (contentHeight - height) / -2;
    const offsetLeft = (contentWidth - width) / -2;
    return (jsxRuntime.jsx(Mask, { height: height, width: width, children: jsxRuntime.jsx("div", { style: { marginTop: offsetTop, marginLeft: offsetLeft }, children: jsxRuntime.jsx(Mask, { height: contentHeight, width: contentWidth, children: children }) }) }));
}
Letterbox.displayName = 'Letterbox';

const ALLOWED_CHILDREN_BY_PARENT = {
    List: ['List.Item'],
    ListItem: ['List', 'InternalList', 'List.Item'],
};
const getChildrenToArray$2 = ({ children, filterLevel, }) => {
    // @ts-expect-error - TS7034 - Variable 'navigationChildren' implicitly has type 'any[]' in some locations where its type cannot be determined.
    const navigationChildren = [];
    let recursionLevel = 0;
    const getChildren = ({ nodeChildren }) => Children.toArray(nodeChildren).forEach((child) => {
        // We need to check for Fragment first, so we can check for display namevalid
        // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        if ((child === null || child === void 0 ? void 0 : child.type) === Fragment) {
            recursionLevel += 1;
            if (recursionLevel < 2) {
                // @ts-expect-error - TS2339 - Property 'props' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
                return getChildren({ nodeChildren: child.props.children });
            }
        }
        // Detect incorrect nested component usage
        // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        if (!ALLOWED_CHILDREN_BY_PARENT[filterLevel].includes(child.type.displayName)) {
            throw new Error(
            // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
            `Gestalt ${child.type.displayName} cannot be used within Gestalt ${filterLevel}`);
        }
        // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        if (ALLOWED_CHILDREN_BY_PARENT[filterLevel].includes(child.type.displayName)) {
            if (filterLevel === 'List') {
                return navigationChildren.push(child);
            }
            if (filterLevel === 'ListItem' &&
                // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
                ['List', 'InternalList'].includes(child.type.displayName)) {
                return navigationChildren.push(child);
            }
            // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
            if (filterLevel === 'ListItem' && child.type.displayName === 'List.Item') {
                return navigationChildren.push(child);
            }
        }
        // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        throw new Error(`${child.type.displayName} cannot be used with Gestalt List`);
    });
    getChildren({ nodeChildren: children });
    // @ts-expect-error - TS7005 - Variable 'navigationChildren' implicitly has an 'any[]' type.
    return navigationChildren.map((child, idx) => cloneElement(child, { key: idx }));
};

var ListStyles = {"parentList":"pp-","list":"KvG","bulletList":"s69","listItem":"Czi","listItemCondensed":"lWm","noStyle":"am2","ulItemDot":"y1w","ulItemCircle":"bwM","olItem1":"rRX","olItemA":"XmT","olItema":"G_y","textColorOverrideLight":"ke7","textColorOverrideDark":"MlF"};

function ListText({ size, text }) {
    var _a;
    const { colorSchemeName } = useColorScheme();
    // Flow shuold catch if text is missing. In case Flow is not enabled and text is missing, the errors are not that helpful. This surfaces the problem more explicitly.
    if (!text) {
        throw new Error(`Gestalt List is missing \`label\` prop or a \`text\` prop within List.Item.`);
    }
    if (typeof text === 'string') {
        return jsxRuntime.jsx(TextWithForwardRef, { size: size || undefined, children: text });
    }
    // If `text` is a Text component, we need to override any text colors within to ensure they all match
    // @ts-expect-error - TS2339
    if (typeof text !== 'string' && ((_a = Children.only(text)) === null || _a === void 0 ? void 0 : _a.type.displayName) === 'Text') {
        const isDarkMode = colorSchemeName === 'darkMode';
        const textColorOverrideStyles = isDarkMode
            ? ListStyles.textColorOverrideLight
            : ListStyles.textColorOverrideDark;
        return (jsxRuntime.jsx("span", { className: textColorOverrideStyles, children: cloneElement(text, { size: size || undefined }) }));
    }
    throw new Error(`Gestalt List has a \`label\` prop or a \`text\` prop that is not a string nor a Text component.`);
}

const ListContext = createContext({
    type: null,
    size: null,
    spacing: null,
    style: null,
});
const { Provider: Provider$3 } = ListContext;
function ListProvider({ children, type, size, spacing, style }) {
    const { type: inheritedType, spacing: inheritedSpacing, size: inheritedFontSize, } = useContext(ListContext);
    return (jsxRuntime.jsx(Provider$3, { value: {
            // List Provider is within List. Only List has a type prop. The type set on the component has prevalence above the inherit in the provider.
            type: type !== null && type !== void 0 ? type : inheritedType,
            // List Provider is within List. Only List has a spacing prop. The spacing set on the List must be passed down on the nested providers so it does not get overriden. However, the top provider needs the spacing value set on List.
            spacing: inheritedSpacing !== null && inheritedSpacing !== void 0 ? inheritedSpacing : spacing,
            size: inheritedFontSize !== null && inheritedFontSize !== void 0 ? inheritedFontSize : size,
            style,
        }, children: children }));
}
function useList() {
    const { type, size, spacing, style } = useContext(ListContext);
    return { type, size, spacing, style };
}

const NestingContext = createContext({
    nestedLevel: 0,
});
const { Provider: Provider$2 } = NestingContext;
function NestingProvider({ componentName, children, maxNestedLevels }) {
    const { nestedLevel } = useContext(NestingContext);
    const nextNestedLevel = (nestedLevel !== null && nestedLevel !== void 0 ? nestedLevel : 0) + 1;
    if (nextNestedLevel > maxNestedLevels) {
        throw new Error(`Gestalt ${componentName} does not allow more than ${maxNestedLevels} nested levels`);
    }
    return (jsxRuntime.jsx(Provider$2, { value: {
            nestedLevel: nextNestedLevel,
        }, children: children }));
}
function useNesting() {
    const { nestedLevel } = useContext(NestingContext);
    return { nestedLevel: nestedLevel !== null && nestedLevel !== void 0 ? nestedLevel : 0 };
}

const UNORDERED_SEQUENCE = ['desc', 'circle'];
const ORDERED_SEQUENCE = ['decimal', 'upper-latin', 'lower-latin'];
// These sequences are used to style list-style-type in List.Item. Lists can mix ordered and unordered list. These sequences support carrying the item style independently from the nested level.
const STYLE_SEQUENCE_UNORDERED = Object.freeze([
    ...UNORDERED_SEQUENCE,
    ...UNORDERED_SEQUENCE,
    ...UNORDERED_SEQUENCE,
]);
const STYLE_SEQUENCE_ORDERED = Object.freeze([...ORDERED_SEQUENCE, ...ORDERED_SEQUENCE]);
function InternalList({ label, labelDisplay = 'visible', spacing = 'regular', size = '300', type, children, }) {
    var _a;
    const id = useId$1();
    const { nestedLevel } = useNesting();
    const { type: inheritedType, style: inheritedStyle, size: inheritedFontSize } = useList();
    const listType = (_a = type !== null && type !== void 0 ? type : inheritedType) !== null && _a !== void 0 ? _a : 'unordered';
    const hiddenLabel = labelDisplay === 'hidden';
    const ListElement = listType === 'ordered' ? 'ol' : 'ul';
    const listChildren = getChildrenToArray$2({ children, filterLevel: 'List' });
    const isListParent = nestedLevel === 0;
    const className = classnames(ListStyles.list, {
        [ListStyles.bulletList]: type !== 'bare',
        [ListStyles.parentList]: isListParent,
    });
    // Check if a nested List get a type value different from the inherited one.
    const didTypeChanged = !!type && inheritedType !== type;
    // If a nested List type didn't change, slice the inherited style sequence for the type selected so the children have access to the correct sequence left.
    const newInheritedStyleOl = !didTypeChanged && listType === 'ordered' ? inheritedStyle === null || inheritedStyle === void 0 ? void 0 : inheritedStyle.ol.slice(1) : inheritedStyle === null || inheritedStyle === void 0 ? void 0 : inheritedStyle.ol;
    const newInheritedStyleUl = !didTypeChanged && listType === 'unordered' ? inheritedStyle === null || inheritedStyle === void 0 ? void 0 : inheritedStyle.ul.slice(1) : inheritedStyle === null || inheritedStyle === void 0 ? void 0 : inheritedStyle.ul;
    const formattedListElement = isListParent ? (jsxRuntime.jsx(TextWithForwardRef, { children: jsxRuntime.jsx(ListElement, { "aria-labelledby": label && id, className: className, children: listChildren }) })) : (jsxRuntime.jsx(ListElement, { "aria-labelledby": id, className: className, children: listChildren }));
    return (jsxRuntime.jsx(ListProvider, { size: size, spacing: spacing, style: isListParent
            ? { ol: STYLE_SEQUENCE_ORDERED, ul: STYLE_SEQUENCE_UNORDERED }
            : { ol: newInheritedStyleOl !== null && newInheritedStyleOl !== void 0 ? newInheritedStyleOl : [], ul: newInheritedStyleUl !== null && newInheritedStyleUl !== void 0 ? newInheritedStyleUl : [] }, type: listType, children: jsxRuntime.jsx(NestingProvider, { componentName: "List", maxNestedLevels: 6, children: label && isListParent ? (jsxRuntime.jsxs(FlexWithForwardRef, { direction: "column", children: [jsxRuntime.jsx(BoxWithForwardRef, { display: hiddenLabel ? 'visuallyHidden' : 'block', id: id, marginBottom: hiddenLabel ? 0 : 4, children: jsxRuntime.jsx(ListText, { size: inheritedFontSize, text: label }) }), formattedListElement] })) : (formattedListElement) }) }));
}
InternalList.displayName = 'InternalList';

/**
 * [List.Item](https://gestalt.pinterest.systems/web/list#List.Item) is a subcomponent of [List](https://gestalt.pinterest.systems/web/list). List.Item represents the `<li>` tag nested within a `<ul>` or `<ol>` list tag.
 *
 * Lists that don't require a alternating between "ordered", "unordered" or "base" can just nest List.Item into each other to build nested lists. If type alternation is required, use [List](https://gestalt.pinterest.systems/web/list#List)
 *
 */
function ListItem({ text, children }) {
    var _a, _b;
    const { type: inheritedType, spacing: inheritedSpacing, style: inheritedStyle, size: inheritedFontSize, } = useList();
    const sizeMap = {
        '100': TOKEN_FONT_SIZE_100,
        '200': TOKEN_FONT_SIZE_200,
        '300': TOKEN_FONT_SIZE_300,
        '400': TOKEN_FONT_SIZE_400,
        '500': TOKEN_FONT_SIZE_500,
        '600': TOKEN_FONT_SIZE_600,
    };
    const isOrdered = inheritedType === 'ordered';
    const isUnordered = inheritedType === 'unordered';
    let listChildren = null;
    if (children) {
        listChildren = getChildrenToArray$2({ children, filterLevel: 'ListItem' });
        if (listChildren.length > 1) {
            listChildren = (jsxRuntime.jsx(InternalList, { type: inheritedType !== null && inheritedType !== void 0 ? inheritedType : 'unordered', children: listChildren.filter((child) => {
                    var _a;
                    if (((_a = child === null || child === void 0 ? void 0 : child.type) === null || _a === void 0 ? void 0 : _a.displayName) === 'List.Item')
                        return true;
                    throw new Error(`Gestalt List.Item children can only be a wrapping List or a group of List.Item, but not mixed.`);
                }) }));
        }
        // @ts-expect-error - TS7053
        if (((_b = (_a = listChildren[0]) === null || _a === void 0 ? void 0 : _a.type) === null || _b === void 0 ? void 0 : _b.displayName) === 'List.Item') {
            listChildren = jsxRuntime.jsx(InternalList, { type: inheritedType !== null && inheritedType !== void 0 ? inheritedType : 'unordered', children: listChildren });
        }
    }
    const className = classnames({
        [ListStyles.noStyle]: inheritedType === 'bare',
        [ListStyles.listItem]: inheritedSpacing === 'regular',
        [ListStyles.listItemCondensed]: inheritedSpacing === 'condensed',
        [ListStyles.ulItemDot]: isUnordered && (inheritedStyle === null || inheritedStyle === void 0 ? void 0 : inheritedStyle.ul[0]) === 'desc',
        [ListStyles.ulItemCircle]: isUnordered && (inheritedStyle === null || inheritedStyle === void 0 ? void 0 : inheritedStyle.ul[0]) === 'circle',
        [ListStyles.olItem1]: isOrdered && (inheritedStyle === null || inheritedStyle === void 0 ? void 0 : inheritedStyle.ol[0]) === 'decimal',
        [ListStyles.olItemA]: isOrdered && (inheritedStyle === null || inheritedStyle === void 0 ? void 0 : inheritedStyle.ol[0]) === 'upper-latin',
        [ListStyles.olItema]: isOrdered && (inheritedStyle === null || inheritedStyle === void 0 ? void 0 : inheritedStyle.ol[0]) === 'lower-latin',
    });
    return (
    // @ts-expect-error - TS2322 - Type 'string | null | undefined' is not assignable to type 'FontSize<string | number> | undefined'.
    jsxRuntime.jsxs("li", { className: className, style: { fontSize: inheritedFontSize && sizeMap[inheritedFontSize] }, children: [jsxRuntime.jsx(ListText, { size: inheritedFontSize || undefined, text: text }), listChildren] }));
}
ListItem.displayName = 'List.Item';

/**
 * [List](https://gestalt.pinterest.systems/web/list) allows users to view individual, but related, text items grouped together.
 * ![List light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/List.spec.ts-snapshots/List-chromium-darwin.png)
 * ![List dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/List-dark.spec.ts-snapshots/List-dark-chromium-darwin.png)
 */
function List({ label, labelDisplay = 'visible', spacing = 'regular', size = '300', type, children, }) {
    return (
    // We need this InternalList to avoid the circular dependency src/List.tsx -> src/ListItem.tsx -> src/List.tsx
    jsxRuntime.jsx(InternalList, { label: label, labelDisplay: labelDisplay, size: size, spacing: spacing, type: type, children: children }));
}
List.displayName = 'List';
List.Item = ListItem;

/**
 * debounce prevents a particular function from being called until after a given
 * cooldown period (default 100ms). Every time the function is called, it resets
 * the cooldown.
 */
function debounce(fn, threshhold = 100) {
    let deferTimer = null;
    const debounced = (...args) => {
        if (deferTimer) {
            clearTimeout(deferTimer);
        }
        // @ts-expect-error - TS2322 - Type 'Timeout' is not assignable to type 'number'.
        deferTimer = setTimeout(() => {
            deferTimer = null;
            fn(...args);
        }, threshhold);
    };
    debounced.clearTimeout = () => {
        if (deferTimer) {
            clearTimeout(deferTimer);
        }
    };
    return debounced;
}

/**
 * FetchItems is a logic component that renders no content itself. Its job
 * is to manage when the given fetchMore method should be called based on
 * the given scroll/size props.
 *
 * While no element is actually passed to FetchItems, it is intended to be used
 * in conjunction with a large scroll container that uses async fetching to
 * load and render additional data. Based on the height of this container and
 * its current scroll position, FetchItems is responsible for triggering future
 * fetch calls.
 */
function FetchItems({ containerHeight, fetchMore, isAtEnd, isFetching, scrollHeight, scrollTop, }) {
    const check = () => {
        if (isAtEnd || isFetching || !fetchMore) {
            return;
        }
        const scrollBuffer = containerHeight * 3;
        if (scrollTop + scrollBuffer > scrollHeight) {
            fetchMore();
        }
    };
    // Note: purposefully supplying no dependency array so `check` is run on every render
    useEffect(() => {
        const timeoutId = setTimeout(check);
        return () => {
            clearTimeout(timeoutId);
        };
    });
    return null;
}

var styles$n = {"Masonry":"vbI XiG","Masonry__Item":"Yl- MIw","Masonry__Item__Mounted":"Hb7"};

function isBelowArea(area, position) {
    return position.left < area.right && position.left + position.width > area.left;
}
function recalcHeights({ items, changedItem, newHeight, positionStore, measurementStore, }) {
    const changedItemPosition = positionStore.get(changedItem);
    if (!changedItemPosition ||
        newHeight === 0 ||
        Math.floor(changedItemPosition.height) === Math.floor(newHeight)) {
        return false;
    }
    const { top, left, width, height } = changedItemPosition;
    const heightDelta = newHeight - height;
    items
        .map((item) => {
        const position = positionStore.get(item);
        return position && position.top >= changedItemPosition.top + changedItemPosition.height
            ? { item, position }
            : undefined;
    })
        .filter((itemPosition) => !!itemPosition)
        .sort((a, b) => a.position.top - b.position.top)
        .reduce((area, { item, position }) => {
        if (isBelowArea(area, position)) {
            positionStore.set(item, Object.assign(Object.assign({}, position), { top: position.top + heightDelta }));
            return {
                left: Math.min(area.left, position.left),
                right: Math.max(area.right, position.left + position.width),
            };
        }
        return area;
    }, { left, right: left + width });
    measurementStore.set(changedItem, newHeight);
    positionStore.set(changedItem, { top, left, width, height: newHeight });
    return true;
}

function getHeightAndGutter(height, gutter) {
    return height > 0 ? height + gutter : 0;
}
function offscreen$1(width, height = Infinity) {
    return {
        top: -9999,
        left: -9999,
        width,
        height,
    };
}

function isLoadingStateItem(item, renderLoadingState) {
    return Boolean(renderLoadingState && item && typeof item === 'object' && 'height' in item);
}
function isLoadingStateItems(items, renderLoadingState) {
    return items.some((item) => isLoadingStateItem(item, renderLoadingState));
}

function mindex(arr) {
    return arr.length ? arr.indexOf(Math.min(...arr)) : 0;
}

class GraphNode {
    constructor(data) {
        this.data = data;
        this.edges = [];
    }
    addEdge(node, score) {
        this.edges = [...this.edges, { node, score }];
    }
    removeEdge(node) {
        if (this.isEdge(node)) {
            const index = this.edges.map((edge) => edge.node).indexOf(node);
            const edgesCopy = [...this.edges];
            edgesCopy.splice(index, 1);
            this.edges = edgesCopy;
            return node;
        }
        return null;
    }
    getEdges() {
        return this.edges;
    }
    isEdge(node) {
        return this.edges.map((edge) => edge.node).includes(node);
    }
}

class Graph {
    constructor() {
        this.nodes = new Map();
    }
    addEdge(source, destination, edgeScore) {
        const sourceNode = this.addNode(source);
        const destinationNode = this.addNode(destination);
        sourceNode.addEdge(destinationNode, edgeScore);
        return [sourceNode, destinationNode];
    }
    addNode(data) {
        if (this.nodes.has(data)) {
            const nodeData = this.nodes.get(data);
            if (nodeData) {
                return nodeData;
            }
        }
        const node = new GraphNode(data);
        this.nodes.set(data, node);
        return node;
    }
    removeNode(data) {
        const current = this.nodes.get(data);
        if (current) {
            current.edges.forEach(({ node }) => {
                node.removeEdge(current);
            });
        }
        return this.nodes.delete(data);
    }
    removeEdge(source, destination) {
        const sourceNode = this.nodes.get(source);
        const destinationNode = this.nodes.get(destination);
        if (sourceNode && destinationNode) {
            sourceNode.removeEdge(destinationNode);
        }
        return [sourceNode, destinationNode];
    }
    findLowestScore(startNode) {
        // @ts-expect-error - TS7034 - Variable 'lowestScore' implicitly has type 'any' in some locations where its type cannot be determined.
        let lowestScore = null;
        let lowestScoreNode = startNode;
        const findLowestScoreRecursive = (node) => {
            node.getEdges().forEach((edge) => {
                const { score, node: edgeNode } = edge;
                // @ts-expect-error - TS7005 - Variable 'lowestScore' implicitly has an 'any' type. | TS7005 - Variable 'lowestScore' implicitly has an 'any' type.
                if (lowestScore === null || score < lowestScore) {
                    lowestScore = score;
                    lowestScoreNode = edgeNode.data;
                }
                findLowestScoreRecursive(edgeNode);
            });
        };
        const startGraphNode = this.nodes.get(startNode);
        if (startGraphNode) {
            findLowestScoreRecursive(startGraphNode);
        }
        return { lowestScore, lowestScoreNode };
    }
}

// When there's a multi column item in the most recently fetched batch of items, we need to measure more items to ensure we have enough possible layouts to minimize whitespace above the 2-col item
// This may need to be tweaked to balance the tradeoff of delayed rendering vs having enough possible layouts
const MULTI_COL_ITEMS_MEASURE_BATCH_SIZE = 5;
// maps the number of columns to a grid breakpoint
// sm: 2 columns
// md: 3-4 columns
// lg: 5-8 columns
// xl: 9+ columns
function columnCountToGridSize(columnCount) {
    if (columnCount <= 2) {
        return 'sm';
    }
    if (columnCount <= 4) {
        return 'md';
    }
    if (columnCount <= 8) {
        return 'lg';
    }
    return 'xl';
}
function getPositionsOnly(positions) {
    return positions.map(({ position }) => position);
}
function calculateActualColumnSpan(props) {
    var _a;
    const { columnCount, item, _getColumnSpanConfig } = props;
    const columnSpanConfig = _getColumnSpanConfig(item);
    const gridSize = columnCountToGridSize(columnCount);
    const columnSpan = typeof columnSpanConfig === 'number' ? columnSpanConfig : (_a = columnSpanConfig[gridSize]) !== null && _a !== void 0 ? _a : 1;
    // a multi column item can never span more columns than there are in the grid
    return Math.min(columnSpan, columnCount);
}
function getAdjacentWhitespaceOnIndex(heights, columnSpan, index) {
    const subArray = heights.slice(index, index + columnSpan);
    const maxHeight = Math.max(...subArray);
    return subArray.map((h) => maxHeight - h);
}
function getAdjacentColumnHeightDeltas(heights, columnSpan) {
    const adjacentHeightDeltas = [];
    for (let i = 0; i < heights.length - 1; i += 1) {
        adjacentHeightDeltas.push(Math.abs(heights[i] - heights[i + 1]));
    }
    if (columnSpan === 2) {
        return adjacentHeightDeltas;
    }
    // When column span is more than 2 the deltas are not enough to know the best placement,
    // in this case we get the avgs of the deltas required to position the module
    const adjacentDeltaAvgs = [];
    for (let i = 0; i + columnSpan - 2 < adjacentHeightDeltas.length; i += 1) {
        const sum = adjacentHeightDeltas
            .slice(i, i + columnSpan - 1)
            .reduce((acc, delta) => acc + delta, 0);
        adjacentDeltaAvgs.push(sum / (columnSpan - 1));
    }
    return adjacentDeltaAvgs;
}
function calculateMultiColumnModuleWidth(columnWidth, gutter, columnSpan) {
    return columnWidth * columnSpan + gutter * (columnSpan - 1);
}
function calculateSplitIndex({ oneColumnItemsLength, multiColumnIndex, emptyColumns, fitsFirstRow, replaceWithOneColItems, }) {
    // multi column item is on its original position
    if (fitsFirstRow) {
        return multiColumnIndex;
    }
    // We use as many one col items as empty columns to fill first row
    if (replaceWithOneColItems) {
        return emptyColumns;
    }
    // If two column module is near the end of the batch
    // we move the index so it has enough items for the graph
    if (multiColumnIndex + MULTI_COL_ITEMS_MEASURE_BATCH_SIZE > oneColumnItemsLength) {
        return Math.max(oneColumnItemsLength - MULTI_COL_ITEMS_MEASURE_BATCH_SIZE, 
        // We have to keep at least the items for the empty columns to fill
        emptyColumns);
    }
    return multiColumnIndex;
}
function initializeHeightsArray({ centerOffset, columnCount, columnWidthAndGutter, gutter, items, positionCache, _getColumnSpanConfig, }) {
    const heights = new Array(columnCount).fill(0);
    items.forEach((item) => {
        const position = positionCache === null || positionCache === void 0 ? void 0 : positionCache.get(item);
        if (position) {
            const col = (position.left - centerOffset) / columnWidthAndGutter;
            const columnSpan = calculateActualColumnSpan({ columnCount, item, _getColumnSpanConfig });
            // the height of the column is just the sum of the top and height of the item
            const absoluteHeight = position.top + position.height + gutter;
            for (let i = col; i < col + columnSpan; i += 1) {
                // for each column the module spans -
                // if we've already set a taller height, we don't want to override it
                // otherwise, override the height of the column
                if (absoluteHeight > heights[i]) {
                    heights[i] = absoluteHeight;
                }
            }
        }
    });
    return heights;
}
function getOneColumnItemPositions({ centerOffset, columnWidth, columnWidthAndGutter, gutter, heights: heightsArg, items, measurementCache, positionCache, }) {
    const heights = [...heightsArg];
    const positions = items.reduce((positionsSoFar, item) => {
        const height = measurementCache.get(item);
        const cachedPosition = positionCache === null || positionCache === void 0 ? void 0 : positionCache.get(item);
        if (cachedPosition) {
            return [...positionsSoFar, { item, position: cachedPosition }];
        }
        if (height != null) {
            const heightAndGutter = getHeightAndGutter(height, gutter);
            const col = mindex(heights);
            const top = heights[col];
            const left = col * columnWidthAndGutter + centerOffset;
            heights[col] = heights[col] + heightAndGutter;
            return [
                ...positionsSoFar,
                {
                    item,
                    position: {
                        top,
                        left,
                        width: columnWidth,
                        height,
                    },
                },
            ];
        }
        return positionsSoFar;
    }, []);
    return { positions, heights };
}
function getMultiColItemPosition({ centerOffset, columnWidth, columnWidthAndGutter, gutter, heights: heightsArg, item, columnSpan, measurementCache, fitsFirstRow, }) {
    const heights = [...heightsArg];
    const height = measurementCache.get(item);
    if (height == null) {
        return {
            additionalWhitespace: null,
            heights,
            position: offscreen$1(columnWidth),
        };
    }
    const heightAndGutter = getHeightAndGutter(height, gutter);
    // Find height deltas for each column as compared to the next column
    const adjacentColumnHeightDeltas = getAdjacentColumnHeightDeltas(heights, columnSpan);
    const lowestAdjacentColumnHeightDeltaIndex = fitsFirstRow
        ? heights.indexOf(0)
        : adjacentColumnHeightDeltas.indexOf(Math.min(...adjacentColumnHeightDeltas));
    const lowestAdjacentColumnHeights = heights.slice(lowestAdjacentColumnHeightDeltaIndex, lowestAdjacentColumnHeightDeltaIndex + columnSpan);
    // Find the tallest column on the lowest adjacent heights
    const tallestColumn = lowestAdjacentColumnHeightDeltaIndex +
        lowestAdjacentColumnHeights.indexOf(Math.max(...lowestAdjacentColumnHeights));
    const top = heights[tallestColumn];
    const left = lowestAdjacentColumnHeightDeltaIndex * columnWidthAndGutter + centerOffset;
    // Increase the heights of both adjacent columns
    const tallestColumnFinalHeight = heights[tallestColumn] + heightAndGutter;
    const additionalWhitespace = getAdjacentWhitespaceOnIndex(heights, columnSpan, lowestAdjacentColumnHeightDeltaIndex);
    for (let i = 0; i < columnSpan; i += 1) {
        heights[i + lowestAdjacentColumnHeightDeltaIndex] = tallestColumnFinalHeight;
    }
    return {
        additionalWhitespace,
        heights,
        position: {
            top,
            left,
            width: calculateMultiColumnModuleWidth(columnWidth, gutter, columnSpan),
            height,
        },
    };
}
function getGraphPositions(_a) {
    var { items, positions, heights, whitespaceThreshold, columnSpan } = _a, commonGetPositionArgs = __rest(_a, ["items", "positions", "heights", "whitespaceThreshold", "columnSpan"]);
    // When whitespace threshold is set this variables store the score and node if found
    let bailoutScore;
    let bailoutNode;
    let numberOfIterations = 0; // For logging purposes
    // Initialize the graph
    const graph = new Graph();
    // Start node will be what's been painted so far
    const startNodeData = {
        id: 'start',
        heights,
        positions,
    };
    graph.addNode(startNodeData);
    const startingAdjacentColumnHeightDeltas = getAdjacentColumnHeightDeltas(heights, columnSpan);
    const startingLowestAdjacentColumnHeightDelta = Math.min(...startingAdjacentColumnHeightDeltas);
    // Recursive function to add possible layouts to the graph
    function addPossibleLayout({ item, i, arr, prevNode, heightsArr, itemsSoFar = [], }) {
        if (bailoutNode) {
            return;
        }
        // Copy the heights array so we don't mutate
        const heightsSoFar = [...heightsArr];
        // Get the positions and heights after adding this item
        const { positions: updatedPositions, heights: updatedHeights } = getOneColumnItemPositions(Object.assign({ items: [...itemsSoFar, item], heights: heightsSoFar }, commonGetPositionArgs));
        // Add the new node to the graph
        const paintedItemData = {
            id: item,
            heights: updatedHeights,
            positions: updatedPositions,
        };
        const adjacentColumnHeightDeltas = getAdjacentColumnHeightDeltas(updatedHeights, columnSpan);
        const lowestAdjacentColumnHeightDelta = Math.min(...adjacentColumnHeightDeltas);
        graph.addNode(paintedItemData);
        graph.addEdge(prevNode, paintedItemData, lowestAdjacentColumnHeightDelta);
        numberOfIterations += 1;
        if (typeof whitespaceThreshold === 'number' &&
            lowestAdjacentColumnHeightDelta < whitespaceThreshold) {
            bailoutScore = lowestAdjacentColumnHeightDelta;
            bailoutNode = paintedItemData;
            return;
        }
        // If there are items remaining in the array that haven't yet been laid out, keep going
        if (arr.length > 1) {
            const otherItems = [...arr];
            otherItems.splice(i, 1);
            otherItems.forEach((otherItem, index, array) => {
                addPossibleLayout({
                    item: otherItem,
                    i: index,
                    arr: array,
                    heightsArr,
                    prevNode: paintedItemData,
                    itemsSoFar: [...itemsSoFar, item],
                });
            });
        }
    }
    // For each unpainted item, start generating possible layouts
    items.forEach((item, i, arr) => {
        addPossibleLayout({
            item,
            i,
            arr,
            heightsArr: heights,
            prevNode: startNodeData,
        });
    });
    const { lowestScoreNode, lowestScore } = bailoutNode
        ? {
            lowestScoreNode: bailoutNode,
            lowestScore: bailoutScore !== null && bailoutScore !== void 0 ? bailoutScore : 0,
        }
        : graph.findLowestScore(startNodeData);
    // const { lowestScoreNode, lowestScore } = graph.findLowestScore(startNodeData);
    // The best solution may be "no solution", i.e. laying out the multi column item first
    const winningNode = lowestScore === null || lowestScore < startingLowestAdjacentColumnHeightDelta
        ? lowestScoreNode
        : startNodeData;
    return { winningNode, numberOfIterations };
}
function getPositionsWithMultiColumnItem(_a) {
    var { multiColumnItem, itemsToPosition, heights, prevPositions, earlyBailout, columnCount, logWhitespace, _getColumnSpanConfig } = _a, commonGetPositionArgs = __rest(_a, ["multiColumnItem", "itemsToPosition", "heights", "prevPositions", "earlyBailout", "columnCount", "logWhitespace", "_getColumnSpanConfig"]);
    const { positionCache } = commonGetPositionArgs;
    // This is the index inside the items to position array
    const multiColumnIndex = itemsToPosition.indexOf(multiColumnItem);
    const oneColumnItems = itemsToPosition.filter((item) => calculateActualColumnSpan({ columnCount, item, _getColumnSpanConfig }) === 1);
    // The empty columns can be different from columnCount if there are
    // items already positioned from previous batches
    const emptyColumns = heights.reduce((acc, height) => (height === 0 ? acc + 1 : acc), 0);
    const multiColumnItemColumnSpan = calculateActualColumnSpan({
        columnCount,
        item: multiColumnItem,
        _getColumnSpanConfig,
    });
    // Skip the graph logic if the two column item can be displayed on the first row,
    // this means graphBatch is empty and multi column item is positioned on its
    // original position (twoColumnIndex)
    const fitsFirstRow = emptyColumns >= multiColumnItemColumnSpan + multiColumnIndex;
    // When multi column item is the last item of the first row but can't fit
    // we need to fill those spaces with one col items
    const replaceWithOneColItems = !fitsFirstRow && multiColumnIndex < emptyColumns;
    // Calculate how many items are on pre array and how many on graphBatch
    // pre items are positioned before the two column item
    const splitIndex = calculateSplitIndex({
        oneColumnItemsLength: oneColumnItems.length,
        multiColumnIndex,
        emptyColumns,
        fitsFirstRow,
        replaceWithOneColItems,
    });
    const pre = oneColumnItems.slice(0, splitIndex);
    const graphBatch = fitsFirstRow
        ? []
        : oneColumnItems.slice(splitIndex, splitIndex + MULTI_COL_ITEMS_MEASURE_BATCH_SIZE);
    // Get positions and heights for painted items
    const { positions: paintedItemPositions, heights: paintedItemHeights } = getOneColumnItemPositions(Object.assign({ items: pre, heights }, commonGetPositionArgs));
    // Adding the extra prev column items to the position cache
    paintedItemPositions.forEach(({ item, position }) => {
        positionCache.set(item, position);
    });
    const whitespaceThreshold = earlyBailout === null || earlyBailout === void 0 ? void 0 : earlyBailout(multiColumnItemColumnSpan);
    // Get a node with the required whitespace
    const { winningNode, numberOfIterations } = getGraphPositions(Object.assign({ items: graphBatch, positions: paintedItemPositions, heights: paintedItemHeights, whitespaceThreshold, columnSpan: multiColumnItemColumnSpan }, commonGetPositionArgs));
    // Insert multi column item(s)
    const { heights: updatedHeights, position: multiColItemPosition, additionalWhitespace, } = getMultiColItemPosition(Object.assign({ item: multiColumnItem, heights: winningNode.heights, columnSpan: multiColumnItemColumnSpan, fitsFirstRow }, commonGetPositionArgs));
    // Combine winning positions and multi column item position, add to cache
    const winningPositions = winningNode.positions.concat({
        item: multiColumnItem,
        position: multiColItemPosition,
    });
    const positionedItems = new Set(winningPositions.map(({ item }) => item));
    // depending on where the multi column item is positioned, there may be items that are still not positioned
    // calculate the remaining items and add them to the list of final positions
    const remainingItems = itemsToPosition.filter((item) => !positionedItems.has(item));
    const { heights: finalHeights, positions: remainingItemPositions } = getOneColumnItemPositions(Object.assign({ items: remainingItems, heights: updatedHeights }, commonGetPositionArgs));
    const finalPositions = winningPositions.concat(remainingItemPositions);
    // Log additional whitespace shown above the multi column module
    // This may need to be tweaked or removed if pin leveling is implemented
    if (additionalWhitespace) {
        logWhitespace === null || logWhitespace === void 0 ? void 0 : logWhitespace(additionalWhitespace, numberOfIterations, multiColumnItemColumnSpan);
    }
    finalPositions.forEach(({ item, position }) => {
        positionCache.set(item, position);
    });
    // FUTURE OPTIMIZATION - do we want a min threshold for an acceptably low score?
    // If so, we could save the multi column item somehow and try again with the next batch of items
    return { positions: prevPositions.concat(finalPositions), heights: finalHeights };
}
const multiColumnLayout = ({ items, gutter = 14, columnWidth = 236, columnCount = 2, centerOffset = 0, logWhitespace, measurementCache, positionCache, earlyBailout, _getColumnSpanConfig, }) => {
    if (!items.every((item) => measurementCache.has(item))) {
        return items.map((item) => {
            const itemColumnSpan = calculateActualColumnSpan({ columnCount, item, _getColumnSpanConfig });
            if (itemColumnSpan > 1) {
                const columnSpan = Math.min(itemColumnSpan, columnCount);
                return offscreen$1(columnWidth * columnSpan + gutter * (columnSpan - 1));
            }
            return offscreen$1(columnWidth);
        });
    }
    const columnWidthAndGutter = columnWidth + gutter;
    // the total height of each column
    const heights = initializeHeightsArray({
        centerOffset,
        columnCount,
        columnWidthAndGutter,
        gutter,
        items,
        positionCache,
        _getColumnSpanConfig,
    });
    const itemsWithPositions = items.filter((item) => positionCache === null || positionCache === void 0 ? void 0 : positionCache.has(item));
    const itemsWithoutPositions = items.filter((item) => !(positionCache === null || positionCache === void 0 ? void 0 : positionCache.has(item)));
    const multiColumnItems = itemsWithoutPositions.filter((item) => calculateActualColumnSpan({ columnCount, item, _getColumnSpanConfig }) > 1);
    const commonGetPositionArgs = {
        centerOffset,
        columnWidth,
        columnWidthAndGutter,
        gutter,
        measurementCache,
        positionCache,
    };
    if (multiColumnItems.length > 0) {
        const batchSize = multiColumnItems.length;
        const batches = Array.from({ length: batchSize }, () => []).map((batch, i) => {
            const startIndex = i === 0 ? 0 : itemsWithoutPositions.indexOf(multiColumnItems[i]);
            const endIndex = i + 1 === multiColumnItems.length
                ? itemsWithoutPositions.length
                : itemsWithoutPositions.indexOf(multiColumnItems[i + 1]);
            return itemsWithoutPositions.slice(startIndex, endIndex);
        });
        const { positions: paintedItemPositions, heights: paintedItemHeights } = getOneColumnItemPositions(Object.assign({ items: itemsWithPositions, heights }, commonGetPositionArgs));
        const { positions: currentPositions, } = batches.reduce((acc, itemsToPosition, i) => getPositionsWithMultiColumnItem(Object.assign({ multiColumnItem: multiColumnItems[i], itemsToPosition, heights: acc.heights, prevPositions: acc.positions, earlyBailout,
            logWhitespace,
            columnCount,
            _getColumnSpanConfig }, commonGetPositionArgs)), { heights: paintedItemHeights, positions: paintedItemPositions });
        return getPositionsOnly(currentPositions);
    }
    const { positions: itemPositions } = getOneColumnItemPositions(Object.assign({ items,
        heights }, commonGetPositionArgs));
    itemPositions.forEach(({ item, position }) => {
        positionCache === null || positionCache === void 0 ? void 0 : positionCache.set(item, position);
    });
    return getPositionsOnly(itemPositions);
};

const calculateCenterOffset = ({ align, columnCount, columnWidthAndGutter, gutter, layout, rawItemCount, width, }) => {
    if (layout === 'basicCentered') {
        const contentWidth = Math.min(rawItemCount, columnCount) * columnWidthAndGutter + gutter;
        return Math.max(Math.floor((width - contentWidth) / 2), 0);
    }
    if (align === 'center') {
        return Math.max(Math.floor((width - columnWidthAndGutter * columnCount + gutter) / 2), 0);
    }
    if (align === 'end') {
        return width - (columnWidthAndGutter * columnCount - gutter);
    }
    return 0;
};
const defaultLayout = (_a) => {
    var { align, columnWidth = 236, gutter = 14, layout, minCols = 2, rawItemCount, width, measurementCache, _getColumnSpanConfig, renderLoadingState } = _a, otherProps = __rest(_a, ["align", "columnWidth", "gutter", "layout", "minCols", "rawItemCount", "width", "measurementCache", "_getColumnSpanConfig", "renderLoadingState"]);
    return (items) => {
        if (width == null) {
            return items.map(() => offscreen$1(columnWidth));
        }
        const columnWidthAndGutter = columnWidth + gutter;
        const columnCount = Math.max(Math.floor((width + gutter) / columnWidthAndGutter), minCols);
        // the total height of each column
        const heights = new Array(columnCount).fill(0);
        const centerOffset = calculateCenterOffset({
            columnCount,
            columnWidthAndGutter,
            gutter,
            align,
            layout,
            rawItemCount,
            width,
        });
        return _getColumnSpanConfig && !isLoadingStateItems(items, renderLoadingState)
            ? multiColumnLayout(Object.assign({ items,
                columnWidth,
                columnCount,
                centerOffset,
                gutter,
                measurementCache,
                _getColumnSpanConfig }, otherProps))
            : items.map((item) => {
                const height = isLoadingStateItem(item, renderLoadingState)
                    ? item.height
                    : measurementCache.get(item);
                if (height == null) {
                    return offscreen$1(columnWidth);
                }
                const heightAndGutter = getHeightAndGutter(height, gutter);
                const col = mindex(heights);
                const top = heights[col];
                const left = col * columnWidthAndGutter + centerOffset;
                heights[col] = heights[col] + heightAndGutter;
                return { top, left, width: columnWidth, height };
            });
    };
};

const fullWidthLayout = (_a) => {
    var { width, idealColumnWidth = 240, gutter = 0, minCols = 2, measurementCache, _getColumnSpanConfig, renderLoadingState } = _a, otherProps = __rest(_a, ["width", "idealColumnWidth", "gutter", "minCols", "measurementCache", "_getColumnSpanConfig", "renderLoadingState"]);
    if (width == null) {
        return (items) => items.map(() => ({
            top: Infinity,
            left: Infinity,
            width: Infinity,
            height: Infinity,
        }));
    }
    // "This is kind of crazy!" - you
    // Yes, indeed. The "guessing" here is meant to replicate the pass that the
    // original implementation takes with CSS.
    const colguess = Math.floor(width / idealColumnWidth);
    const columnCount = Math.max(Math.floor((width - colguess * gutter) / idealColumnWidth), minCols);
    const columnWidth = Math.floor(width / columnCount) - gutter;
    const columnWidthAndGutter = columnWidth + gutter;
    const centerOffset = gutter / 2;
    return (items) => {
        const heights = new Array(columnCount).fill(0);
        return _getColumnSpanConfig && !isLoadingStateItems(items, renderLoadingState)
            ? multiColumnLayout(Object.assign({ items,
                columnWidth,
                columnCount,
                centerOffset,
                gutter,
                measurementCache,
                _getColumnSpanConfig }, otherProps))
            : items.reduce((acc, item) => {
                var _a;
                const positions = acc;
                const height = isLoadingStateItem(item, renderLoadingState)
                    ? item.height
                    : measurementCache.get(item);
                let position;
                if (height == null) {
                    position = {
                        top: Infinity,
                        left: Infinity,
                        width: columnWidth,
                        height: Infinity,
                    };
                }
                else {
                    const heightAndGutter = getHeightAndGutter(height, gutter);
                    const col = mindex(heights);
                    const top = heights[col];
                    const left = col * columnWidthAndGutter + centerOffset;
                    heights[col] = ((_a = heights[col]) !== null && _a !== void 0 ? _a : 0) + heightAndGutter;
                    position = {
                        top,
                        left,
                        width: columnWidth,
                        height,
                    };
                }
                positions.push(position);
                return positions;
            }, []);
    };
};

const offscreen = (width, height = Infinity) => ({
    top: -9999,
    left: -9999,
    width,
    height,
});
function calculateColumnCountAndWidth({ columnWidth: idealColumnWidth, flexible, gutter, minCols, width, }) {
    if (flexible) {
        const colguess = Math.floor(width / idealColumnWidth);
        const columnCount = Math.max(Math.floor((width - colguess * gutter) / idealColumnWidth), minCols);
        const columnWidth = Math.floor(width / columnCount) - gutter;
        const columnWidthAndGutter = columnWidth + gutter;
        return {
            columnCount,
            columnWidth,
            columnWidthAndGutter,
        };
    }
    const columnWidthAndGutter = idealColumnWidth + gutter;
    const columnCount = Math.max(Math.floor((width + gutter) / columnWidthAndGutter), minCols);
    return {
        columnCount,
        columnWidth: idealColumnWidth,
        columnWidthAndGutter,
    };
}
const uniformRowLayout = ({ cache, columnWidth: idealColumnWidth = 236, flexible = false, gutter = 14, width, minCols = 3, renderLoadingState, }) => (items) => {
    if (width == null) {
        return items.map(() => offscreen(idealColumnWidth));
    }
    const { columnWidth, columnWidthAndGutter, columnCount } = calculateColumnCountAndWidth({
        columnWidth: idealColumnWidth,
        flexible,
        gutter,
        minCols,
        width,
    });
    const heights = [];
    return items.map((item, i) => {
        const height = isLoadingStateItem(item, renderLoadingState) ? item.height : cache.get(item);
        if (height == null) {
            return offscreen(columnWidth);
        }
        const column = i % columnCount;
        const row = Math.floor(i / columnCount);
        if (column === 0 || height > heights[row]) {
            heights[row] = height;
        }
        const top = row > 0 ? heights.slice(0, row).reduce((sum, y) => sum + y + gutter, 0) : 0;
        return {
            top,
            left: column * columnWidthAndGutter,
            width: columnWidth,
            height,
        };
    });
};

function getLayoutAlgorithm({ align, columnWidth, gutter, items, layout, measurementStore, minCols, positionStore, width, _getColumnSpanConfig, _logTwoColWhitespace, _loadingStateItems = [], renderLoadingState, _earlyBailout, }) {
    if ((layout === 'flexible' || layout === 'serverRenderedFlexible') && width !== null) {
        return fullWidthLayout({
            gutter,
            measurementCache: measurementStore,
            positionCache: positionStore,
            minCols,
            idealColumnWidth: columnWidth,
            width,
            logWhitespace: _logTwoColWhitespace,
            _getColumnSpanConfig,
            renderLoadingState,
            earlyBailout: _earlyBailout,
        });
    }
    if (layout.startsWith('uniformRow')) {
        return uniformRowLayout({
            cache: measurementStore,
            columnWidth,
            gutter,
            flexible: layout === 'uniformRowFlexible',
            minCols,
            width,
            renderLoadingState,
        });
    }
    return defaultLayout({
        align,
        measurementCache: measurementStore,
        positionCache: positionStore,
        columnWidth,
        gutter,
        layout,
        logWhitespace: _logTwoColWhitespace,
        minCols,
        rawItemCount: renderLoadingState ? _loadingStateItems.length : items.length,
        width,
        _getColumnSpanConfig,
        renderLoadingState,
        earlyBailout: _earlyBailout,
    });
}

// workaround to prevent useLayoutEffect from throwing on the server
// can be removed whenever the next React release happens: https://github.com/facebook/react/pull/26395
const useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;

function ItemResizeObserverWrapper({ resizeObserver, idx, children, }) {
    const ref = useRef(null);
    useIsomorphicLayoutEffect(() => {
        const el = ref.current;
        if (resizeObserver && el) {
            resizeObserver.observe(el);
        }
        return () => {
            if (resizeObserver && el) {
                resizeObserver.unobserve(el);
            }
        };
    }, [resizeObserver]);
    return (jsxRuntime.jsx("div", { ref: ref, "data-grid-item-idx": idx, children: children }));
}

class MeasurementStore {
    constructor() {
        this.map = new WeakMap();
    }
    get(key) {
        return this.map.get(key);
    }
    has(key) {
        return this.map.has(key);
    }
    set(key, value) {
        this.map.set(key, value);
    }
    reset() {
        this.map = new WeakMap();
    }
}

/**
 * ScrollContainer is a pass-through component that simply sets up an onScroll
 * handler on the given scrollContainer element (or the element that is
 * returned as result of calling the scrollContainer method). This allows for
 * the event listener subscription of the scrollContainer to be managed inside
 * the React lifecycle without adding bloat to Masonry or other onScroll
 * subscribers.
 *
 * Note that this Component renders its children without creating any
 * additional content. Also note that, while the component is built to manage
 * onScroll inside of the React lifecycle, it doesn't change onScroll events
 * or the API at all, so it could easily be adapted to other event types.
 */
function getScrollContainer(scrollContainer) {
    return typeof scrollContainer === 'function' ? scrollContainer() : scrollContainer;
}
class ScrollContainer extends Component {
    constructor() {
        super(...arguments);
        // This is used in Masonry
        // eslint-disable-next-line react/no-unused-class-component-methods
        this.getScrollContainerRef = () => this.scrollContainer;
        this.handleScroll = (event) => {
            this.props.onScroll(event);
        };
    }
    componentDidMount() {
        const scrollContainer = getScrollContainer(this.props.scrollContainer);
        if (scrollContainer) {
            this.updateScrollContainer(scrollContainer);
        }
    }
    componentDidUpdate() {
        const nextScrollContainer = getScrollContainer(this.props.scrollContainer);
        if (nextScrollContainer && nextScrollContainer !== this.scrollContainer) {
            this.updateScrollContainer(nextScrollContainer);
        }
    }
    componentWillUnmount() {
        if (this.scrollContainer) {
            this.scrollContainer.removeEventListener('scroll', this.handleScroll);
        }
    }
    updateScrollContainer(scrollContainer) {
        if (this.scrollContainer) {
            // cleanup existing scroll container if it exists
            this.scrollContainer.removeEventListener('scroll', this.handleScroll);
        }
        this.scrollContainer = scrollContainer;
        this.scrollContainer.addEventListener('scroll', this.handleScroll);
    }
    render() {
        // Ensure that we only ever have a single child element
        return Children.only(this.props.children);
    }
}

/**
 * Measuring scroll positions, element heights, etc is different between
 * different browsers and the window object vs other DOM nodes. These
 * utils abstract away these differences.
 */
function getElementHeight(element) {
    // @ts-expect-error - TS2367 - This condition will always return 'false' since the types 'HTMLElement' and 'Window & typeof globalThis' have no overlap. | TS2339 - Property 'innerHeight' does not exist on type 'never'.
    return element === window ? window.innerHeight : element.clientHeight;
}
function getWindowScrollPos() {
    if (window.scrollY !== undefined) {
        // Modern browser
        return window.scrollY;
    }
    if (document.documentElement && document.documentElement.scrollTop !== undefined) {
        // IE support.
        return document.documentElement.scrollTop;
    }
    return 0;
}
function getRelativeScrollTop(element) {
    // @ts-expect-error - TS2367 - This condition will always return 'false' since the types 'HTMLElement' and 'Window & typeof globalThis' have no overlap.
    return element === window
        ? getWindowScrollPos()
        : element.scrollTop - element.getBoundingClientRect().top;
}
function getScrollHeight(element) {
    // @ts-expect-error - TS2367 - This condition will always return 'false' since the types 'HTMLElement' and 'Window & typeof globalThis' have no overlap.
    return element === window && document.documentElement
        ? document.documentElement.scrollHeight
        : element.scrollHeight;
}
function getScrollPos(element) {
    // @ts-expect-error - TS2367 - This condition will always return 'false' since the types 'HTMLElement' and 'Window & typeof globalThis' have no overlap.
    return element === window ? getWindowScrollPos() : element.scrollTop;
}

/**
 * throttle limits the number of times a function can be called to a
 * given threshhold (100ms by default). The function is always called
 * on the leading and trailing edge.
 */
function throttle(fn, threshhold = 100) {
    let last;
    let deferTimer;
    const throttled = (...args) => {
        const now = Date.now();
        if (last !== undefined && now - last < threshhold) {
            clearTimeout(deferTimer);
            // @ts-expect-error - TS2322 - Type 'Timeout' is not assignable to type 'number'.
            deferTimer = setTimeout(() => {
                last = now;
                fn(...args);
            }, threshhold - (now - (last !== null && last !== void 0 ? last : 0)));
        }
        else {
            last = now;
            fn(...args);
        }
    };
    throttled.clearTimeout = () => {
        if (deferTimer) {
            clearTimeout(deferTimer);
        }
    };
    return throttled;
}

const RESIZE_DEBOUNCE$1 = 300;
const layoutNumberToCssDimension$1 = (n) => {
    if (n) {
        return n !== Infinity ? n : undefined;
    }
    return undefined;
};
/**
 * [Masonry](https://gestalt.pinterest.systems/web/masonry) creates a deterministic grid layout, positioning items based on available vertical space. It contains performance optimizations like virtualization and support for infinite scrolling.
 *
 * ![Masonry light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Masonry.spec.ts-snapshots/Masonry-chromium-darwin.png)
 *
 */
class Masonry$1 extends Component {
    static createMeasurementStore() {
        return new MeasurementStore();
    }
    constructor(props) {
        super(props);
        this.insertAnimationFrame = null;
        /**
         * Delays resize handling in case the scroll container is still being resized.
         */
        this.handleResize = debounce(() => {
            if (this.gridWrapper) {
                this.setState({ width: this.gridWrapper.clientWidth });
            }
        }, RESIZE_DEBOUNCE$1);
        // Using throttle here to schedule the handler async, outside of the event
        // loop that produced the event.
        this.updateScrollPosition = throttle(() => {
            if (!this.scrollContainer) {
                return;
            }
            const scrollContainer = this.scrollContainer.getScrollContainerRef();
            if (!scrollContainer) {
                return;
            }
            this.setState({
                scrollTop: getScrollPos(scrollContainer),
            });
        });
        this.measureContainerAsync = debounce(() => {
            this.measureContainer();
        }, 0);
        this.setGridWrapperRef = (ref) => {
            this.gridWrapper = ref;
        };
        this.setScrollContainerRef = (ref) => {
            this.scrollContainer = ref;
        };
        this.fetchMore = () => {
            const { loadItems, items } = this.props;
            if (loadItems && typeof loadItems === 'function') {
                this.setState({
                    isFetching: true,
                }, () => loadItems({ from: items.length }));
            }
        };
        this.renderMasonryComponent = (itemData, idx, position) => {
            const { renderItem, scrollContainer, virtualize, virtualBoundsTop, virtualBoundsBottom, virtualBufferFactor, } = this.props;
            const { top, left, width, height } = position;
            let isVisible;
            if (scrollContainer && virtualBufferFactor) {
                const virtualBuffer = this.containerHeight * virtualBufferFactor;
                const offsetScrollPos = this.state.scrollTop - this.containerOffset;
                const viewportTop = virtualBoundsTop
                    ? offsetScrollPos - virtualBoundsTop
                    : offsetScrollPos - virtualBuffer;
                const viewportBottom = virtualBoundsBottom
                    ? offsetScrollPos + this.containerHeight + virtualBoundsBottom
                    : offsetScrollPos + this.containerHeight + virtualBuffer;
                isVisible = !(position.top + position.height < viewportTop || position.top > viewportBottom);
            }
            else {
                // if no scroll container is passed in, items should always be visible
                isVisible = true;
            }
            // This assumes `document.dir` exists, since this method is only invoked
            // on the client. If that assumption changes, this will need to be revisited
            const isRtl = (document === null || document === void 0 ? void 0 : document.dir) === 'rtl';
            const itemComponent = (jsxRuntime.jsx("div", { className: [styles$n.Masonry__Item, styles$n.Masonry__Item__Mounted].join(' '), "data-grid-item": true, role: "listitem", style: Object.assign(Object.assign({ top: 0 }, (isRtl ? { right: 0 } : { left: 0 })), { transform: `translateX(${isRtl ? left * -1 : left}px) translateY(${top}px)`, WebkitTransform: `translateX(${isRtl ? left * -1 : left}px) translateY(${top}px)`, width: layoutNumberToCssDimension$1(width), height: layoutNumberToCssDimension$1(height) }), children: jsxRuntime.jsx(ItemResizeObserverWrapper, { idx: idx, resizeObserver: this.resizeObserver, children: renderItem({ data: itemData, itemIdx: idx, isMeasuring: false }) }) }, `item-${idx}`));
            return virtualize ? (isVisible && itemComponent) || null : itemComponent;
        };
        this.renderLoadingStateComponent = ({ itemData, idx, position }) => {
            const { _renderLoadingStateItems } = this.props;
            const { top, left, width, height } = position;
            if (_renderLoadingStateItems) {
                return (jsxRuntime.jsx("div", { className: [styles$n.Masonry__Item, styles$n.Masonry__Item__Mounted].join(' '), "data-grid-item": true, role: "listitem", style: {
                        top,
                        left,
                        width: layoutNumberToCssDimension$1(width),
                        height: layoutNumberToCssDimension$1(height),
                    }, children: _renderLoadingStateItems({ data: itemData, itemIdx: idx }) }, `item-${idx}`));
            }
            return null;
        };
        this.containerHeight = 0;
        this.containerOffset = 0;
        const measurementStore = props.measurementStore || Masonry$1.createMeasurementStore();
        this.positionStore = props.positionStore || Masonry$1.createMeasurementStore();
        this.resizeObserver =
            /* eslint-disable-next-line no-underscore-dangle */
            props._dynamicHeights && typeof window !== 'undefined' && this.positionStore
                ? new ResizeObserver((entries) => {
                    let triggerUpdate = false;
                    entries.forEach(({ target, contentRect }) => {
                        const idx = Number(target.getAttribute('data-grid-item-idx'));
                        if (typeof idx === 'number') {
                            const changedItem = this.state.items[idx];
                            const newHeight = contentRect.height;
                            triggerUpdate =
                                recalcHeights({
                                    items: this.state.items,
                                    changedItem,
                                    newHeight,
                                    positionStore: this.positionStore,
                                    measurementStore: this.state.measurementStore,
                                }) || triggerUpdate;
                        }
                    });
                    if (triggerUpdate) {
                        this.forceUpdate();
                    }
                })
                : undefined;
        this.state = {
            hasPendingMeasurements: props.items.some((item) => !!item && !measurementStore.has(item)),
            isFetching: false,
            items: props.items,
            measurementStore,
            scrollTop: 0,
            width: undefined,
        };
    }
    /**
     * Adds hooks after the component mounts.
     */
    componentDidMount() {
        window.addEventListener('resize', this.handleResize);
        this.measureContainer();
        let { scrollTop } = this.state;
        if (this.scrollContainer != null) {
            const scrollContainer = this.scrollContainer.getScrollContainerRef();
            if (scrollContainer) {
                scrollTop = getScrollPos(scrollContainer);
            }
        }
        this.setState((prevState) => ({
            scrollTop,
            width: this.gridWrapper ? this.gridWrapper.clientWidth : prevState.width,
        }));
    }
    componentDidUpdate(prevProps, prevState) {
        const { items } = this.props;
        const { measurementStore } = this.state;
        this.measureContainerAsync();
        if (prevState.width != null && this.state.width !== prevState.width) {
            measurementStore.reset();
            this.positionStore.reset();
        }
        // calculate whether we still have pending measurements
        const hasPendingMeasurements = items.some((item) => !!item && !measurementStore.has(item));
        // Per Yen-Wei, we may be able to remove this after https://github.com/pinterest/gestalt/pull/228
        if (hasPendingMeasurements ||
            hasPendingMeasurements !== this.state.hasPendingMeasurements ||
            prevState.width == null) {
            // This helps prevent jank
            // Revisit this with React 18!
            this.insertAnimationFrame = requestAnimationFrame(() => {
                this.setState({
                    hasPendingMeasurements,
                });
            });
        }
    }
    /**
     * Remove listeners when unmounting.
     */
    componentWillUnmount() {
        if (this.insertAnimationFrame) {
            cancelAnimationFrame(this.insertAnimationFrame);
        }
        // Make sure async methods are cancelled.
        this.measureContainerAsync.clearTimeout();
        this.handleResize.clearTimeout();
        this.updateScrollPosition.clearTimeout();
        window.removeEventListener('resize', this.handleResize);
    }
    static getDerivedStateFromProps(props, state) {
        const { items } = props;
        const { measurementStore } = state;
        // whenever we're receiving new props, determine whether any items need to be measured
        // TODO - we should treat items as immutable
        const hasPendingMeasurements = items.some((item) => !measurementStore.has(item));
        // Shallow compare all items, if any change reflow the grid.
        for (let i = 0; i < items.length; i += 1) {
            // We've reached the end of our current props and everything matches.
            // If we hit this case it means we need to insert new items.
            if (state.items[i] === undefined) {
                return {
                    hasPendingMeasurements,
                    items,
                    isFetching: false,
                };
            }
            // Reset grid items when:
            if (
            // An item object ref does not match.
            items[i] !== state.items[i] ||
                // Or less items than we currently have are passed in.
                items.length < state.items.length) {
                return {
                    hasPendingMeasurements,
                    items,
                    isFetching: false,
                };
            }
        }
        // Reset items if new items array is empty.
        if (items.length === 0 && state.items.length > 0) {
            return {
                hasPendingMeasurements,
                items,
                isFetching: false,
            };
        }
        if (hasPendingMeasurements !== state.hasPendingMeasurements) {
            // make sure we always update hasPendingMeasurements
            return {
                hasPendingMeasurements,
                items,
            };
        }
        // Return null to indicate no change to state.
        return null;
    }
    measureContainer() {
        if (this.scrollContainer != null) {
            const { scrollContainer } = this;
            const scrollContainerRef = scrollContainer.getScrollContainerRef();
            if (scrollContainerRef) {
                this.containerHeight = getElementHeight(scrollContainerRef);
                const el = this.gridWrapper;
                if (el instanceof HTMLElement) {
                    const relativeScrollTop = getRelativeScrollTop(scrollContainerRef);
                    this.containerOffset = el.getBoundingClientRect().top + relativeScrollTop;
                }
            }
        }
    }
    /**
     * Clear measurements/positions and force a reflow of the entire grid.
     * Only use this if absolutely necessary - ex: We need to reflow items if the
     * number of columns we would display should change after a resize.
     */
    reflow() {
        const { measurementStore } = this.props;
        if (measurementStore) {
            measurementStore.reset();
        }
        this.state.measurementStore.reset();
        this.positionStore.reset();
        this.measureContainer();
        this.forceUpdate();
    }
    render() {
        const { align = 'center', columnWidth, gutterWidth: gutter, items, layout = 'basic', minCols, renderItem, scrollContainer, _logTwoColWhitespace, _getColumnSpanConfig, _loadingStateItems = [], _renderLoadingStateItems, _earlyBailout, } = this.props;
        const { hasPendingMeasurements, measurementStore, width } = this.state;
        const { positionStore } = this;
        const renderLoadingState = Boolean(items.length === 0 && _loadingStateItems && _renderLoadingStateItems);
        const getPositions = getLayoutAlgorithm({
            align,
            columnWidth,
            gutter,
            items,
            layout,
            measurementStore,
            positionStore,
            minCols,
            width,
            _getColumnSpanConfig,
            _logTwoColWhitespace,
            _loadingStateItems,
            renderLoadingState,
            _earlyBailout,
        });
        let gridBody;
        if (width == null && hasPendingMeasurements) {
            // When hyrdating from a server render, we don't have the width of the grid
            // and the measurement store is empty
            gridBody = (jsxRuntime.jsx("div", { ref: this.setGridWrapperRef, className: styles$n.Masonry, role: "list", style: { height: 0, width: '100%' }, children: items.filter(Boolean).map((item, i) => {
                    var _a;
                    const columnSpanConfig = (_a = _getColumnSpanConfig === null || _getColumnSpanConfig === void 0 ? void 0 : _getColumnSpanConfig(item)) !== null && _a !== void 0 ? _a : 1;
                    return (jsxRuntime.jsx("div", { ref: (el) => {
                            // purposely not checking for layout === 'serverRenderedFlexible' here
                            if (el && layout !== 'flexible') {
                                // if we're hydrating from the server, we should only measure items on the initial render pass
                                // if we're not rendering a flexible layout.  "serverRenderedFlexible" is an exception because we assume
                                // that the caller has added the proper CSS to ensure the layout is correct during server render
                                measurementStore.set(item, el.clientHeight);
                            }
                        }, className: "static", "data-column-span": typeof columnSpanConfig === 'number'
                            ? columnSpanConfig
                            : btoa(JSON.stringify(columnSpanConfig)), "data-grid-item": true, role: "listitem", style: {
                            top: 0,
                            left: 0,
                            transform: 'translateX(0px) translateY(0px)',
                            WebkitTransform: 'translateX(0px) translateY(0px)',
                            width: layout === 'flexible' ||
                                layout === 'serverRenderedFlexible' ||
                                typeof columnSpanConfig === 'object'
                                ? undefined // we can't set a width for server rendered flexible items
                                : layoutNumberToCssDimension$1(typeof columnSpanConfig === 'number' &&
                                    columnWidth != null &&
                                    gutter != null
                                    ? columnWidth * columnSpanConfig + gutter * (columnSpanConfig - 1)
                                    : columnWidth),
                        }, children: renderItem({ data: item, itemIdx: i, isMeasuring: false }) }, i));
                }) }));
        }
        else if (width == null) {
            // When the width is empty (usually after a re-mount) render an empty
            // div to collect the width for layout
            gridBody = jsxRuntime.jsx("div", { ref: this.setGridWrapperRef, style: { width: '100%' } });
        }
        else if (renderLoadingState) {
            const positions = getPositions(_loadingStateItems);
            const height = positions.length
                ? Math.max(...positions.map((pos) => pos.top + pos.height))
                : 0;
            gridBody = (jsxRuntime.jsx("div", { ref: this.setGridWrapperRef, style: { width: '100%' }, children: jsxRuntime.jsx("div", { className: styles$n.Masonry, role: "list", style: { height, width }, children: _loadingStateItems.map((itemData, idx) => this.renderLoadingStateComponent({
                        itemData,
                        idx,
                        position: positions[idx],
                    })) }) }));
        }
        else {
            // Full layout is possible
            const itemsToRender = items.filter((item) => item && measurementStore.has(item));
            const itemsWithoutPositions = items.filter((item) => item && !positionStore.has(item));
            const hasMultiColumnItems = _getColumnSpanConfig &&
                itemsWithoutPositions.some((item) => _getColumnSpanConfig(item) !== 1);
            // If there are 2-col items, we need to measure more items to ensure we have enough possible layouts to find a suitable one
            // we need the batch size (number of one column items for the graph) + 1 (two column item)
            const itemsToMeasureCount = hasMultiColumnItems
                ? MULTI_COL_ITEMS_MEASURE_BATCH_SIZE + 1
                : minCols;
            const itemsToMeasure = items
                .filter((item) => item && !measurementStore.has(item))
                .slice(0, itemsToMeasureCount);
            const positions = getPositions(itemsToRender);
            const measuringPositions = getPositions(itemsToMeasure);
            // Math.max() === -Infinity when there are no positions
            const height = positions.length
                ? Math.max(...positions.map((pos) => pos.top + pos.height))
                : 0;
            gridBody = (jsxRuntime.jsxs("div", { ref: this.setGridWrapperRef, style: { width: '100%' }, children: [jsxRuntime.jsx("div", { className: styles$n.Masonry, role: "list", style: { height, width }, children: itemsToRender.map((item, i) => {
                            var _a;
                            return this.renderMasonryComponent(item, i, 
                            // If we have items in the positionStore (newer way of tracking positions used for 2-col support), use that. Otherwise fall back to the classic way of tracking positions
                            // this is only required atm because the two column layout doesn't not return positions in their original item order
                            (_a = positionStore.get(item)) !== null && _a !== void 0 ? _a : positions[i]);
                        }) }), jsxRuntime.jsx("div", { className: styles$n.Masonry, style: { width }, children: itemsToMeasure.map((data, i) => {
                            // itemsToMeasure is always the length of minCols, so i will always be 0..minCols.length
                            // we normalize the index here relative to the item list as a whole so that itemIdx is correct
                            // and so that React doesnt reuse the measurement nodes
                            const measurementIndex = itemsToRender.length + i;
                            const position = measuringPositions[i];
                            return (jsxRuntime.jsx("div", { ref: (el) => {
                                    if (el) {
                                        measurementStore.set(data, el.clientHeight);
                                    }
                                }, style: {
                                    visibility: 'hidden',
                                    position: 'absolute',
                                    top: layoutNumberToCssDimension$1(position.top),
                                    left: layoutNumberToCssDimension$1(position.left),
                                    width: layoutNumberToCssDimension$1(position.width),
                                    height: layoutNumberToCssDimension$1(position.height),
                                }, children: renderItem({
                                    data,
                                    itemIdx: measurementIndex,
                                    isMeasuring: true,
                                }) }, `measuring-${measurementIndex}`));
                        }) }), this.scrollContainer && (jsxRuntime.jsx(FetchItems, { containerHeight: this.containerHeight, fetchMore: this.fetchMore, isFetching: this.state.isFetching || this.state.hasPendingMeasurements, scrollHeight: height + this.containerOffset, scrollTop: this.state.scrollTop }))] }));
        }
        return scrollContainer ? (jsxRuntime.jsx(ScrollContainer, { ref: this.setScrollContainerRef, onScroll: this.updateScrollPosition, scrollContainer: scrollContainer, children: gridBody })) : (gridBody);
    }
}
Masonry$1.defaultProps = {
    columnWidth: 236,
    align: 'center',
    minCols: 3,
    layout: 'basic',
    loadItems: () => { },
    virtualBufferFactor: 0.7,
    virtualize: false,
};
Masonry$1.displayName = 'Masonry';

const RESIZE_DEBOUNCE = 300;
const layoutNumberToCssDimension = (n) => (n !== Infinity ? n : undefined);
/**
 * [Masonry](https://gestalt.pinterest.systems/web/masonry) creates a deterministic grid layout, positioning items based on available vertical space. It contains performance optimizations like virtualization and support for infinite scrolling.
 *
 * ![Masonry light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Masonry.spec.ts-snapshots/Masonry-chromium-darwin.png)
 *
 */
function createMeasurementStore() {
    return new MeasurementStore();
}
// helper hook to force update a component
function useForceUpdate() {
    // @ts-expect-error - TS2554 - Expected 3 arguments, but got 2. | TS7006 - Parameter 'x' implicitly has an 'any' type.
    const [, forceUpdate] = useReducer((x) => x + 1, 0);
    return forceUpdate;
}
// useElementWidth returns the width of the gridWrapper element
// and uses useSyncExternalStore to subscribe to window resize events
function useElementWidth(element) {
    const prevElementRef = useRef(null);
    const elementWidthRef = useRef(null);
    // update elementWidthRef whenever element changes
    if (element && element !== prevElementRef.current) {
        elementWidthRef.current = element.clientWidth;
        prevElementRef.current = element;
    }
    const updateElementWidth = useCallback(() => {
        if (element) {
            elementWidthRef.current = element.clientWidth;
        }
    }, [element]);
    const subscribeToResizeEvent = useCallback((callback) => {
        const handler = debounce(() => {
            // update elementWidthRef whenever we have a resize event
            updateElementWidth();
            callback();
        }, RESIZE_DEBOUNCE);
        window.addEventListener('resize', handler);
        return () => {
            window.removeEventListener('resize', handler);
        };
    }, [updateElementWidth]);
    const width = useSyncExternalStore(subscribeToResizeEvent, () => elementWidthRef.current, () => null);
    return [updateElementWidth, width];
}
function useScrollContainer({ gridWrapper, scrollContainer, }) {
    const containerHeight = useRef(0);
    const containerOffset = useRef(0);
    const scrollPos = useRef(0);
    const measureContainer = useCallback(() => {
        if (scrollContainer) {
            containerHeight.current = getElementHeight(scrollContainer);
            if (gridWrapper instanceof HTMLElement) {
                // todo - look into using IntersectionObserver instead
                containerOffset.current =
                    gridWrapper.getBoundingClientRect().top + getRelativeScrollTop(scrollContainer);
            }
        }
    }, [gridWrapper, scrollContainer]);
    // created a debounced version of measureContainer to avoid measuring the container on every render
    // this is mostly because the calls to getBoundingClientRect are expensive and result in forced reflows
    const measureContainerAsync = useMemo(() => debounce(measureContainer, 100), [measureContainer]);
    if (containerHeight.current === 0 && containerOffset.current === 0) {
        // initialize value on first render
        // doing this here vs in the `useRef` to avoid measureContainer always being called
        // https://18.react.dev/reference/react/useRef#avoiding-recreating-the-ref-contents
        measureContainer();
    }
    const subscribeToScrollEvent = useCallback((callback) => {
        const handler = throttle(() => {
            // update elementWidthRef whenever we have a resize event
            scrollPos.current = scrollContainer ? getScrollPos(scrollContainer) : 0;
            callback();
        });
        scrollContainer === null || scrollContainer === void 0 ? void 0 : scrollContainer.addEventListener('scroll', handler);
        return () => {
            scrollContainer === null || scrollContainer === void 0 ? void 0 : scrollContainer.removeEventListener('scroll', handler);
        };
    }, [scrollContainer]);
    const scrollTop = useSyncExternalStore(subscribeToScrollEvent, () => scrollPos.current, () => 0);
    useEffect(() => {
        // trigger an async measurement whenever an update occurs
        // todo - followup on this and figure out a more ideal way to handle this.
        measureContainerAsync();
    });
    return {
        containerHeight: containerHeight.current,
        containerOffset: containerOffset.current,
        scrollTop,
    };
}
function useFetchOnScroll({ containerHeight, containerOffset, hasPendingMeasurements, height, items, loadItems, scrollTop, scrollContainerElement, width, }) {
    const isFetching = useRef(false);
    const itemLength = items.length;
    const scrollHeight = height + containerOffset;
    const scrollBuffer = containerHeight * 3;
    const shouldFetchMore = loadItems &&
        typeof loadItems === 'function' &&
        scrollContainerElement &&
        width != null &&
        !isFetching.current &&
        !hasPendingMeasurements &&
        scrollTop + scrollBuffer > scrollHeight;
    useEffect(() => {
        // indicate that we're no longer fetching once we've detected a change in item length
        isFetching.current = false;
    }, [itemLength]);
    useEffect(() => {
        // after each render, if we've indicated that we should fetch more items, do so
        if (shouldFetchMore) {
            isFetching.current = true;
            loadItems({ from: itemLength });
        }
    });
}
function useLayout({ align, columnWidth, gutter, items, layout, measurementStore, minCols, positionStore, width, heightUpdateTrigger, _logTwoColWhitespace, _measureAll, _useRAF, _getColumnSpanConfig, _loadingStateItems = [], _renderLoadingStateItems, _earlyBailout, }) {
    const renderLoadingState = Boolean(items.length === 0 && _loadingStateItems && _renderLoadingStateItems);
    const layoutFunction = getLayoutAlgorithm({
        align,
        columnWidth,
        gutter,
        items,
        layout,
        measurementStore,
        positionStore,
        minCols,
        width,
        _getColumnSpanConfig,
        _logTwoColWhitespace,
        _loadingStateItems,
        renderLoadingState,
        _earlyBailout,
    });
    const hasMultiColumnItems = _getColumnSpanConfig &&
        items
            .filter((item) => item && !positionStore.has(item))
            .some((item) => _getColumnSpanConfig(item) !== 1);
    const itemToMeasureCount = hasMultiColumnItems ? MULTI_COL_ITEMS_MEASURE_BATCH_SIZE + 1 : minCols;
    const itemMeasurements = items.filter((item) => measurementStore.has(item));
    const itemMeasurementsCount = itemMeasurements.length;
    const hasPendingMeasurements = itemMeasurementsCount < items.length;
    const canPerformLayout = width != null;
    const loadingStatePositions = canPerformLayout && renderLoadingState ? layoutFunction(_loadingStateItems) : [];
    const itemPositions = useMemo(() => {
        if (!canPerformLayout) {
            return [];
        }
        // we currently calculate positions separately for items that have been measured and items that haven't
        // maintain this paradigm for now for parity but ideally we should just able to pass all items to the layout function
        const itemsWithMeasurements = items.filter((item) => measurementStore.has(item));
        const itemsWithoutMeasurements = items.filter((item) => !measurementStore.has(item));
        const rawPositions = layoutFunction(itemsWithMeasurements).concat(layoutFunction(itemsWithoutMeasurements));
        let measureItemCount = 0;
        return items.reduce((acc, item, i) => {
            var _a;
            const position = (_a = positionStore.get(item)) !== null && _a !== void 0 ? _a : rawPositions[i];
            if (!position) {
                acc.push(null);
            }
            else {
                const hasMeasurement = measurementStore.has(item);
                if (hasMeasurement) {
                    acc.push(position);
                }
                else if (_measureAll || measureItemCount < itemToMeasureCount) {
                    acc.push(position);
                    measureItemCount += 1;
                }
                else {
                    acc.push(null);
                }
            }
            return acc;
        }, []);
        // only recalculate positions when certain things change
        // - itemsToPosition: if we get new items, we should always recalculate positions
        // - itemMeasurementsCount: if we have a change in the number of items we've measured, we should always recalculage
        // - canPerformLayout: if we don't have a width, we can't calculate positions yet. so recalculate once we're able to
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [itemMeasurementsCount, items, canPerformLayout, heightUpdateTrigger]);
    const forceUpdate = useForceUpdate();
    const rafId = useRef(null);
    const updateMeasurement = useCallback((item, itemHeight) => {
        measurementStore.set(item, itemHeight);
        // schedule state update either via startTransition or requestAnimationFrame depending on whether _useRAF is true.
        // requestAnimationFrame is to test parity with Masonry V1
        if (!_useRAF) {
            startTransition(() => {
                forceUpdate();
            });
        }
        else if (!rafId.current) {
            rafId.current = requestAnimationFrame(() => {
                rafId.current = null;
                forceUpdate();
            });
        }
    }, [measurementStore, forceUpdate, _useRAF]);
    const positions = renderLoadingState ? loadingStatePositions : itemPositions;
    // Math.max() === -Infinity when there are no positions
    const height = positions.length
        ? Math.max(...positions.map((pos) => (pos && pos.top >= 0 ? pos.top + pos.height : 0)))
        : 0;
    return {
        hasPendingMeasurements,
        height,
        positions,
        renderLoadingState,
        updateMeasurement,
    };
}
function useViewport({ containerHeight, containerOffset, scrollContainer, scrollTop, virtualBufferFactor, virtualBoundsTop, virtualBoundsBottom, virtualize, }) {
    if (virtualize && scrollContainer && Boolean(virtualBufferFactor)) {
        const virtualBuffer = containerHeight * virtualBufferFactor;
        const offsetScrollPos = scrollTop - containerOffset;
        const viewportTop = virtualBoundsTop
            ? offsetScrollPos - virtualBoundsTop
            : offsetScrollPos - virtualBuffer;
        const viewportBottom = virtualBoundsBottom
            ? offsetScrollPos + containerHeight + virtualBoundsBottom
            : offsetScrollPos + containerHeight + virtualBuffer;
        return {
            viewportTop,
            viewportBottom,
        };
    }
    return {
        viewportTop: -Infinity,
        viewportBottom: Infinity,
    };
}
function MasonryLoadingStateItem({ height, idx, item, left, renderItem, top, width, }) {
    var _a, _b, _c;
    return (jsxRuntime.jsx("div", { className: [styles$n.Masonry__Item, styles$n.Masonry__Item__Mounted].join(' '), "data-grid-item": true, role: "listitem", style: {
            top,
            left,
            width: (_a = layoutNumberToCssDimension(width)) !== null && _a !== void 0 ? _a : 0,
            height: (_b = layoutNumberToCssDimension(height)) !== null && _b !== void 0 ? _b : 0,
        }, children: (_c = renderItem === null || renderItem === void 0 ? void 0 : renderItem({ data: item, itemIdx: idx })) !== null && _c !== void 0 ? _c : null }));
}
function MasonryItem({ height, idx, isMeasurement, isServerRenderOrHydration, item, layout, left, renderItem, serializedColumnSpanConfig, top, updateMeasurement, width, resizeObserver, }) {
    // This isn't great since it currently returns false during server render/hydration and potentially true after
    // This should be revisited
    const isRtl = isServerRenderOrHydration || typeof document === 'undefined' ? false : (document === null || document === void 0 ? void 0 : document.dir) === 'rtl';
    const className = isServerRenderOrHydration ? 'static' : styles$n.Masonry__Item;
    const refCallback = isServerRenderOrHydration
        ? (el) => {
            // purposely not checking for layout === 'serverRenderedFlexible' here
            if (el && layout !== 'flexible') {
                // if we're hydrating from the server, we should only measure items on the initial render pass
                // if we're not rendering a flexible layout.  "serverRenderedFlexible" is an exception because we assume
                // that the caller has added the proper CSS to ensure the layout is correct during server render
                updateMeasurement(item, el.clientHeight);
            }
        }
        : (el) => {
            if (el && isMeasurement) {
                updateMeasurement(item, el.clientHeight);
            }
        };
    const style = isMeasurement
        ? {
            visibility: 'hidden',
            position: 'absolute',
            top: layoutNumberToCssDimension(top),
            left: layoutNumberToCssDimension(left),
            width: layoutNumberToCssDimension(width),
            height: layoutNumberToCssDimension(height),
        }
        : Object.assign(Object.assign({ top: 0 }, (isRtl ? { right: 0 } : { left: 0 })), { transform: `translateX(${isRtl ? left * -1 : left}px) translateY(${top}px)`, WebkitTransform: `translateX(${isRtl ? left * -1 : left}px) translateY(${top}px)`, width: layoutNumberToCssDimension(width), height: layoutNumberToCssDimension(height) });
    return (jsxRuntime.jsx("div", { ref: refCallback, className: className, "data-column-span": serializedColumnSpanConfig, "data-grid-item": true, role: "listitem", 
        // @ts-expect-error - TS2322 - Type '{ visibility: string; position: string; top: number | null | undefined; left: number | null | undefined; width: number | null | undefined; height: number | null | undefined; } | { transform: string; ... 7 more ...; left?: undefined; } | { ...; }' is not assignable to type 'CSSProperties | undefined'.
        style: style, children: jsxRuntime.jsx(ItemResizeObserverWrapper, { idx: idx, resizeObserver: resizeObserver, children: renderItem({ data: item, itemIdx: idx, isMeasuring: isMeasurement }) }) }));
}
const MasonryLoadingStateItemMemo = memo(MasonryLoadingStateItem);
const MasonryItemMemo = memo(MasonryItem);
function Masonry({ align = 'center', columnWidth = 236, gutterWidth: gutter, items, layout = 'basic', loadItems = () => { }, measurementStore: measurementStoreProp, minCols = 3, positionStore: positionStoreProp, renderItem, scrollContainer, virtualBufferFactor = 0.7, virtualBoundsBottom, virtualBoundsTop, virtualize = false, _logTwoColWhitespace, _measureAll, _useRAF, _getColumnSpanConfig, _dynamicHeights, _loadingStateItems = [], _renderLoadingStateItems, _earlyBailout, }, ref) {
    const hasSetInitialWidth = useRef(false);
    const [gridWrapperEl, setGridWrapperEl] = useState(null);
    const gridWrapperRef = useCallback((el) => {
        if (el) {
            setGridWrapperEl(el);
        }
    }, []);
    const measurementStore = useMemo(() => measurementStoreProp || createMeasurementStore(), [measurementStoreProp]);
    const positionStore = useMemo(() => positionStoreProp || createMeasurementStore(), [positionStoreProp]);
    const scrollContainerElement = useMemo(() => (typeof window !== 'undefined' ? scrollContainer === null || scrollContainer === void 0 ? void 0 : scrollContainer() : null), [scrollContainer]);
    const [updateElementWidth, width] = useElementWidth(gridWrapperEl);
    const { containerHeight, containerOffset, scrollTop } = useScrollContainer({
        gridWrapper: gridWrapperEl,
        scrollContainer: scrollContainerElement,
    });
    const forceUpdate = useForceUpdate();
    const reflow = () => {
        measurementStore.reset();
        positionStore.reset();
        updateElementWidth();
        startTransition(() => {
            forceUpdate();
        });
    };
    // these are all for backwards compatibility with the old Masonry
    // will work on removing these once this lands
    useImperativeHandle(ref, () => ({
        handleResize: () => updateElementWidth(),
        reflow,
        state: {
            width,
        },
    }));
    // respond to changes in width (e.g. resize)
    useEffect(() => {
        if (hasSetInitialWidth.current && width != null) {
            // whenever the width changes, we need to reset all measurements
            // we only want to do this after the initial width has been set, so we use a ref to track that
            // reflow the grid
            reflow();
        }
        if (!hasSetInitialWidth.current && width != null) {
            hasSetInitialWidth.current = true;
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [width]);
    const [heightUpdateTrigger, setHeightUpdateTrigger] = useState(0);
    const resizeObserver = useMemo(() => _dynamicHeights && typeof window !== 'undefined' && positionStore
        ? new ResizeObserver((entries) => {
            let triggerUpdate = false;
            entries.forEach(({ target, contentRect }) => {
                const idx = Number(target.getAttribute('data-grid-item-idx'));
                if (typeof idx === 'number') {
                    const changedItem = items[idx];
                    triggerUpdate =
                        recalcHeights({
                            items,
                            changedItem,
                            newHeight: contentRect.height,
                            positionStore,
                            measurementStore,
                        }) || triggerUpdate;
                }
            });
            if (triggerUpdate) {
                setHeightUpdateTrigger((prev) => prev + 1);
            }
        })
        : undefined, [_dynamicHeights, items, measurementStore, positionStore]);
    const { hasPendingMeasurements, height, positions, renderLoadingState, updateMeasurement } = useLayout({
        align,
        columnWidth,
        gutter,
        items,
        layout,
        measurementStore,
        minCols,
        positionStore,
        width,
        heightUpdateTrigger,
        _logTwoColWhitespace,
        _measureAll,
        _useRAF,
        _getColumnSpanConfig,
        _loadingStateItems,
        _renderLoadingStateItems,
        _earlyBailout,
    });
    useFetchOnScroll({
        containerHeight,
        containerOffset,
        hasPendingMeasurements,
        height,
        items,
        loadItems,
        scrollTop,
        scrollContainerElement,
        width,
    });
    const isServerRenderOrHydration = width == null && hasPendingMeasurements;
    const canPerformFullLayout = width != null && !renderLoadingState;
    const { viewportTop, viewportBottom } = useViewport({
        containerHeight,
        containerOffset,
        scrollContainer: scrollContainerElement,
        scrollTop,
        virtualBufferFactor,
        virtualBoundsTop,
        virtualBoundsBottom,
        virtualize,
    });
    let gridBody = null;
    if (isServerRenderOrHydration || canPerformFullLayout) {
        gridBody = items.filter(Boolean).map((item, i) => {
            var _a, _b;
            const key = `item-${i}`;
            const columnSpanConfig = (_a = _getColumnSpanConfig === null || _getColumnSpanConfig === void 0 ? void 0 : _getColumnSpanConfig(item)) !== null && _a !== void 0 ? _a : 1;
            const position = canPerformFullLayout
                ? positions[i]
                : {
                    top: 0,
                    left: 0,
                    // we don't know the height yet when server rendering or hydrating
                    height: undefined,
                    width: 
                    // eslint-disable-next-line no-nested-ternary
                    layout === 'flexible' ||
                        layout === 'serverRenderedFlexible' ||
                        typeof columnSpanConfig === 'object'
                        ? undefined // we can't set a width for server rendered flexible items
                        : typeof columnSpanConfig === 'number' && columnWidth != null && gutter != null
                            ? columnWidth * columnSpanConfig + gutter * (columnSpanConfig - 1)
                            : columnWidth,
                };
            if (!position) {
                return null;
            }
            const isMeasurement = canPerformFullLayout ? !measurementStore.has(item) : false;
            const isVisible = isServerRenderOrHydration || isMeasurement
                ? true
                : !(position.top + ((_b = position.height) !== null && _b !== void 0 ? _b : 0) < viewportTop || position.top > viewportBottom);
            const serializedColumnSpanConfig = typeof columnSpanConfig === 'number'
                ? columnSpanConfig
                : btoa(JSON.stringify(columnSpanConfig));
            return isVisible ? (jsxRuntime.jsx(MasonryItemMemo, { height: position.height, idx: i, isMeasurement: isMeasurement, isServerRenderOrHydration: isServerRenderOrHydration, item: item, layout: layout, left: position.left, renderItem: renderItem, resizeObserver: resizeObserver, serializedColumnSpanConfig: serializedColumnSpanConfig, top: position.top, updateMeasurement: updateMeasurement, width: position.width }, key)) : null;
        });
    }
    else if (renderLoadingState) {
        gridBody = _loadingStateItems.map((item, i) => {
            const key = `item-${i}`;
            const position = positions[i];
            if (!position) {
                return null;
            }
            return (jsxRuntime.jsx(MasonryLoadingStateItemMemo, { height: position.top, idx: i, item: item, left: position.left, renderItem: _renderLoadingStateItems, top: position.top, width: position.width }, key));
        });
    }
    return (jsxRuntime.jsx("div", { ref: gridWrapperRef, style: { width: '100%' }, children: jsxRuntime.jsx("div", { className: styles$n.Masonry, role: "list", style: { height, width }, children: gridBody }) }));
}
const MasonryWithForwardRef = forwardRef(
// @ts-expect-error - TS2345
Masonry);
// @ts-expect-error - TS3339
MasonryWithForwardRef.createMeasurementStore = createMeasurementStore;

var modalStyles = {"container":"Fwt _he Hsu _O1 mQ8 Rym QLY KS5 L4E","mobileWrapper":"zZi XiG XbT _O1","wrapper":"ZHw XiG XbT _O1 ho- ueq J8R"};

// ScrollBoundaryContainerWithForwardRef is the ScrollBoundaryContainer to be used internally, within components (e. Modal, OverlayPanel).
// It has an extended API with private props (onScroll, padding, and ref) to maintain border shadows in the component main content container.
const ScrollBoundaryContainerWithForwardRef = forwardRef(function ScrollBoundaryContainer({ children, onScroll, includesFooter, padding = 0, height = '100%', overflow = 'auto', }, ref) {
    const { addRef } = useScrollBoundaryContainer();
    const anchorRef = useRef(null);
    // When using both forwardRef and innerRef, React.useimperativehandle() allows a parent component
    // that renders <Button ref={inputRef} /> to call inputRef.current.focus()
    // @ts-expect-error - TS2322 - Type 'HTMLElement | null' is not assignable to type 'HTMLElement'.
    useImperativeHandle(ref, () => anchorRef.current);
    useEffect(() => {
        if (anchorRef.current) {
            addRef(anchorRef.current);
        }
    }, [addRef]);
    return (jsxRuntime.jsx(BoxWithForwardRef, { ref: anchorRef, direction: includesFooter ? 'column' : undefined, display: includesFooter ? 'flex' : undefined, flex: onScroll || includesFooter ? 'grow' : undefined, height: height, onScroll: onScroll, overflow: includesFooter ? 'visible' : overflow, padding: padding, position: "relative", width: includesFooter ? '100%' : undefined, children: children }));
});
ScrollBoundaryContainerWithForwardRef.displayName = 'InternalScrollBoundaryContainer';

function FullPage({ accessibilityLabel, align, backIconButton, children, onDismiss, footer, forwardIconButton, padding, primaryAction, heading, role, showDismissButton, subHeading, }) {
    var _a;
    const id = useId$1();
    // Consumes DefaultLabelProvider
    const { accessibilityLabel: defaultAccessibilityLabel } = useDefaultLabelContext('SheetMobile');
    // Consumes GlobalEventsHandlerProvider
    const { sheetMobileHandlers } = (_a = useGlobalEventsHandlerContext()) !== null && _a !== void 0 ? _a : {
        sheetMobileHandlers: { onOpen: () => { }, onClose: () => { } },
    };
    const { onClose, onOpen } = sheetMobileHandlers !== null && sheetMobileHandlers !== void 0 ? sheetMobileHandlers : {
        onOpen: () => { },
        onClose: () => { },
    };
    useEffect(() => {
        onOpen === null || onOpen === void 0 ? void 0 : onOpen();
        return function cleanup() {
            onClose === null || onClose === void 0 ? void 0 : onClose();
        };
    }, [onClose, onOpen]);
    // Handle onDismiss triggering from ESC keyup event
    useEffect(() => {
        function handleKeyUp(event) {
            if (event.keyCode === ESCAPE) {
                onDismiss();
            }
        }
        window.addEventListener('keyup', handleKeyUp);
        return function cleanup() {
            window.removeEventListener('keyup', handleKeyUp);
        };
    }, [onDismiss]);
    // When SheetMobile is full page displayed in mobile browser, the body scroll is still accessible. Here we disable to just allow the scrolling within Modal
    useEffect(() => {
        var _a, _b;
        let prevOverflowStyle = 'auto';
        // @ts-expect-error - TS2339 - Property 'body' does not exist on type 'Window & typeof globalThis'.
        if (window && ((_b = (_a = window.body) === null || _a === void 0 ? void 0 : _a.style) === null || _b === void 0 ? void 0 : _b.overflow)) {
            // @ts-expect-error - TS2339 - Property 'body' does not exist on type 'Window & typeof globalThis'.
            prevOverflowStyle = window.body.style.overflow;
            // @ts-expect-error - TS2339 - Property 'body' does not exist on type 'Window & typeof globalThis'.
            window.body.style.overflow = 'hidden';
        }
        return () => {
            var _a, _b;
            // @ts-expect-error - TS2339 - Property 'body' does not exist on type 'Window & typeof globalThis'.
            if (window && ((_b = (_a = window.body) === null || _a === void 0 ? void 0 : _a.style) === null || _b === void 0 ? void 0 : _b.overflow)) {
                // @ts-expect-error - TS2339 - Property 'body' does not exist on type 'Window & typeof globalThis'.
                window.body.style.overflow = prevOverflowStyle;
            }
        };
    }, []);
    return (jsxRuntime.jsx(NoScrollBehavior, { children: jsxRuntime.jsx(TrapFocusBehavior, { children: jsxRuntime.jsx("div", { className: classnames(sheetMobileStyles.container, sheetMobileStyles.fullPageContainer), children: jsxRuntime.jsx(Backdrop, { closeOnOutsideClick: false, children: jsxRuntime.jsx("div", { "aria-label": accessibilityLabel !== null && accessibilityLabel !== void 0 ? accessibilityLabel : defaultAccessibilityLabel, className: classnames(sheetMobileStyles.fullPageWrapper, focusStyles.hideOutline), id: id, role: role, style: { width: '100%' }, tabIndex: -1, children: jsxRuntime.jsx(ContentContainer, { footer: footer, header: jsxRuntime.jsx(Header$1, { align: align, backIconButton: backIconButton, forwardIconButton: forwardIconButton, heading: heading, id: id, onDismiss: onDismiss, primaryAction: primaryAction, showDismissButton: showDismissButton, subHeading: subHeading }), padding: padding, children: children }) }) }) }) }) }));
}

const SIZE_WIDTH_MAP$1 = {
    sm: 540,
    md: 720,
    lg: 900,
};
function Header({ align, heading, subHeading, }) {
    return (jsxRuntime.jsxs(BoxWithForwardRef, { justifyContent: align, padding: 6, children: [jsxRuntime.jsx(Heading, { accessibilityLevel: 1, align: align, size: "500", children: heading }), subHeading && (jsxRuntime.jsx(BoxWithForwardRef, { marginTop: 1, children: jsxRuntime.jsx(TextWithForwardRef, { align: align, children: subHeading }) }))] }));
}
/**
 * A [Modal](https://gestalt.pinterest.systems/web/modal) displays content that requires user interaction. Modals appear on a layer above the page and therefore block the content underneath, preventing users from interacting with anything else besides the Modal. Modal should be used to gather short bits of information from the user. For confirmation of an action or acknowledgment, use [ModalAlert](https://gestalt.pinterest.systems/web/modalalert).
 *
 * ![Modal light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Modal.spec.ts-snapshots/Modal-chromium-darwin.png)
 * ![Modal mobile](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Modal-mobile.spec.ts-snapshots/Modal-mobile-chromium-darwin.png)
 * ![Modal dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Modal-dark.spec.ts-snapshots/Modal-dark-chromium-darwin.png)
 *
 */
function Modal({ _dangerouslyDisableScrollBoundaryContainer = false, accessibilityModalLabel, align = 'center', children, closeOnOutsideClick = true, onDismiss, footer, padding = 'default', heading, role = 'dialog', size = 'sm', subHeading, }) {
    const deviceType = useDeviceType();
    const isMobile = deviceType === 'mobile';
    const [showTopShadow, setShowTopShadow] = useState(false);
    const [showBottomShadow, setShowBottomShadow] = useState(false);
    const contentRef = useRef(null);
    useEffect(() => {
        function handleKeyUp(event) {
            if (event.keyCode === ESCAPE) {
                onDismiss();
            }
        }
        window.addEventListener('keyup', handleKeyUp);
        return function cleanup() {
            window.removeEventListener('keyup', handleKeyUp);
        };
    }, [onDismiss]);
    const handleOutsideClick = () => {
        if (closeOnOutsideClick) {
            onDismiss();
        }
    };
    const updateShadows = useCallback(() => {
        const target = contentRef.current;
        if (!target) {
            return;
        }
        const hasVerticalScrollbar = target.clientHeight < target.scrollHeight;
        setShowTopShadow(hasVerticalScrollbar && target.scrollTop > 0);
        setShowBottomShadow(hasVerticalScrollbar && target.offsetHeight + target.scrollTop < target.scrollHeight);
    }, []);
    useEffect(() => {
        window.addEventListener('resize', updateShadows);
        return () => {
            window.removeEventListener('resize', updateShadows);
        };
    }, [updateShadows]);
    useEffect(() => {
        updateShadows();
    }, [updateShadows]);
    const width = typeof size === 'string' ? SIZE_WIDTH_MAP$1[size] : size;
    if (isMobile) {
        return (jsxRuntime.jsx(FullPage, { align: align, footer: footer, heading: heading, onDismiss: onDismiss, padding: padding, role: role, showDismissButton: true, subHeading: subHeading, children: children }));
    }
    return (jsxRuntime.jsx(NoScrollBehavior, { children: jsxRuntime.jsx(TrapFocusBehavior, { children: jsxRuntime.jsx("div", { "aria-label": accessibilityModalLabel, className: modalStyles.container, role: role, children: jsxRuntime.jsx(Backdrop, { closeOnOutsideClick: closeOnOutsideClick, onClick: handleOutsideClick, children: jsxRuntime.jsx("div", { className: classnames(modalStyles.wrapper, focusStyles.hideOutline), style: { width }, tabIndex: -1, children: jsxRuntime.jsxs(BoxWithForwardRef, { direction: "column", display: "flex", flex: "grow", position: "relative", width: "100%", children: [Boolean(heading) && (jsxRuntime.jsx(BoxWithForwardRef, { borderStyle: showTopShadow ? 'raisedTopShadow' : undefined, fit: true, position: "relative", zIndex: new FixedZIndex(1), children: typeof heading === 'string' ? (jsxRuntime.jsx(Header, { align: align, heading: heading, subHeading: subHeading })) : (jsxRuntime.jsx(BoxWithForwardRef, { padding: 6, children: heading })) })), _dangerouslyDisableScrollBoundaryContainer ? (jsxRuntime.jsx(BoxWithForwardRef
                                // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLElement | null | undefined>' is not assignable to type 'LegacyRef<HTMLElement> | undefined'.
                                , { 
                                    // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLElement | null | undefined>' is not assignable to type 'LegacyRef<HTMLElement> | undefined'.
                                    ref: contentRef, flex: "grow", onScroll: updateShadows, overflow: "auto", padding: padding === 'none' ? 0 : 6, children: children })) : (jsxRuntime.jsx(ScrollBoundaryContainerProvider, { children: jsxRuntime.jsx(ScrollBoundaryContainerWithForwardRef
                                    // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLElement | null | undefined>' is not assignable to type 'LegacyRef<HTMLElement> | undefined'.
                                    , { 
                                        // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLElement | null | undefined>' is not assignable to type 'LegacyRef<HTMLElement> | undefined'.
                                        ref: contentRef, onScroll: updateShadows, padding: padding === 'none' ? 0 : 6, children: children }) })), Boolean(footer) && (jsxRuntime.jsx(BoxWithForwardRef, { borderStyle: showBottomShadow ? 'raisedBottomShadow' : undefined, fit: true, position: "relative", zIndex: new FixedZIndex(1), children: jsxRuntime.jsx(BoxWithForwardRef, { padding: 6, children: footer }) }))] }) }) }) }) }) }));
}
Modal.displayName = 'Modal';

function ModalAlertAction(_a) {
    var { dataTestId, type, accessibilityLabel, disabled, label } = _a, props = __rest(_a, ["dataTestId", "type", "accessibilityLabel", "disabled", "label"]);
    const color = type === 'primary' ? 'red' : 'gray';
    return props.role === 'link' ? (jsxRuntime.jsx(ButtonLinkWithForwardRef, { accessibilityLabel: accessibilityLabel, color: color, dataTestId: dataTestId, disabled: disabled, fullWidth: true, href: props.href || '', iconEnd: "visit", onClick: props.onClick, rel: props.rel, size: "lg", target: props.target, text: label })) : (jsxRuntime.jsx(ButtonWithForwardRef, { accessibilityLabel: accessibilityLabel, color: color, dataTestId: dataTestId, disabled: disabled, fullWidth: true, onClick: props.onClick, size: "lg", text: label }));
}

const ICON_COLOR_MAP$1 = {
    error: {
        icon: 'workflow-status-problem',
        color: 'error',
    },
    warning: {
        icon: 'workflow-status-warning',
        color: 'warning',
    },
};
function ModalAlertHeader({ accessibilityDismissButtonLabel, type, heading, onDismiss, }) {
    return (jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", flex: "grow", gap: 4, children: [type !== 'default' && (jsxRuntime.jsx(BoxWithForwardRef, { children: jsxRuntime.jsx(Icon, { accessibilityLabel: type, color: ICON_COLOR_MAP$1[type].color, icon: ICON_COLOR_MAP$1[type].icon, size: "20" }) })), jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "grow", children: jsxRuntime.jsx(Heading, { accessibilityLevel: 1, size: "400", children: heading }) }), type === 'default' && (jsxRuntime.jsx(BoxWithForwardRef, { marginStart: 2, children: jsxRuntime.jsx(IconButtonWithForwardRef, { accessibilityLabel: accessibilityDismissButtonLabel, bgColor: "white", icon: "cancel", iconColor: "darkGray", onClick: onDismiss, size: "sm" }) }))] }));
}

/**
 * A [ModalAlert](https://gestalt.pinterest.systems/web/modalalert) is a simple modal dialog used to alert a user of an issue, or to request confirmation after a user-triggered action. ModalAlert overlays and blocks page content until it is dismissed by the user.
 *
 * ![ModalAlert light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/ModalAlert.spec.ts-snapshots/ModalAlert-chromium-darwin.png)
 * ![ModalAlert mobile](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/ModalAlert-mobile.spec.ts-snapshots/ModalAlert-mobile-chromium-darwin.png)
 * ![ModalAlert dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/ModalAlert-dark.spec.ts-snapshots/ModalAlert-dark-chromium-darwin.png)
 *
 */
function ModalAlert({ accessibilityDismissButtonLabel, accessibilityModalLabel, type = 'default', children, onDismiss, heading, primaryAction, secondaryAction, }) {
    const { accessibilityDismissButtonLabel: accessibilityDismissButtonLabelDefault } = useDefaultLabelContext('Modal');
    Object.entries({ primaryAction, secondaryAction }).forEach(([key, value]) => {
        if (value &&
            typeof value === 'object' &&
            [value.href, value.onClick].every((item) => item === undefined)) {
            throw new Error(`Either an \`href\` or an \`onClick\` handler must be provided to \`${key}\`.`);
        }
    });
    return (
    // ModalAlert is not adaptive to mobile
    jsxRuntime.jsx(DeviceTypeProvider, { deviceType: "desktop", children: jsxRuntime.jsx(Modal, { accessibilityModalLabel: accessibilityModalLabel, align: "start", closeOnOutsideClick: type === 'default', footer: jsxRuntime.jsxs(FlexWithForwardRef, { gap: 2, justifyContent: "end", children: [secondaryAction && jsxRuntime.jsx(ModalAlertAction, Object.assign({ type: "secondary" }, secondaryAction)), primaryAction && jsxRuntime.jsx(ModalAlertAction, Object.assign({ type: "primary" }, primaryAction))] }), heading: jsxRuntime.jsx(ModalAlertHeader, { accessibilityDismissButtonLabel: accessibilityDismissButtonLabel !== null && accessibilityDismissButtonLabel !== void 0 ? accessibilityDismissButtonLabel : accessibilityDismissButtonLabelDefault, heading: heading, onDismiss: onDismiss, type: type }), onDismiss: onDismiss, role: "alertdialog", size: "sm", children: children }) }));
}
ModalAlert.displayName = 'ModalAlert';

const parseHandlerValue = (handler) => ({ event, value, }) => {
    const parsedValue = parseFloat(value);
    handler === null || handler === void 0 ? void 0 : handler({
        event,
        value: Number.isFinite(parsedValue) ? parsedValue : undefined,
    });
};
/**
 * [NumberField](https://gestalt.pinterest.systems/web/numberfield) allows for numerical input.
 *
 * ![NumberField light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/NumberField.spec.ts-snapshots/NumberField-chromium-darwin.png)
 * ![NumberField dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/NumberField-dark.spec.ts-snapshots/NumberField-dark-chromium-darwin.png)
 *
 */
const NumberFieldWithForwardRef = forwardRef(function NumberField({ autoComplete, dataTestId, disabled = false, mobileEnterKeyHint, errorMessage, helperText, id, label, labelDisplay = 'visible', max, min, name, onBlur, onChange, onFocus, onKeyDown, placeholder, readOnly = false, size = 'md', step, value, }, ref) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    if (isInVRExperiment) {
        return (jsxRuntime.jsx(InternalTextFieldWithForwardRef, { ref: ref, autoComplete: autoComplete, dataTestId: dataTestId, disabled: disabled, errorMessage: errorMessage, helperText: helperText, id: id, label: label, labelDisplay: labelDisplay, max: max, min: min, mobileEnterKeyHint: mobileEnterKeyHint, name: name, onBlur: parseHandlerValue(onBlur), onChange: parseHandlerValue(onChange), onFocus: parseHandlerValue(onFocus), onKeyDown: parseHandlerValue(onKeyDown), placeholder: placeholder, readOnly: readOnly, size: size, step: step, type: "number", 
            // See comment above — we need to stringify what we give InternalTextField
            value: value === undefined ? value : String(value) }));
    }
    return (jsxRuntime.jsx(InternalTextFieldWithForwardRef$1, { ref: ref, autoComplete: autoComplete, dataTestId: dataTestId, disabled: disabled, errorMessage: errorMessage, helperText: helperText, id: id, label: label, labelDisplay: labelDisplay, max: max, min: min, mobileEnterKeyHint: mobileEnterKeyHint, name: name, onBlur: parseHandlerValue(onBlur), onChange: parseHandlerValue(onChange), onFocus: parseHandlerValue(onFocus), onKeyDown: parseHandlerValue(onKeyDown), placeholder: placeholder, readOnly: readOnly, size: size, step: step, type: "number", 
        // See comment above — we need to stringify what we give InternalTextField
        value: value === undefined ? value : String(value) }));
});
NumberFieldWithForwardRef.displayName = 'NumberField';

/**
 * DismissingElement is a render props component that provides access to the callback function `onDismissStart`. `onDismissStart` triggers the exit-animation from external trigger points in a component. Internal trigger points are pressing `ESC` key, built-in dismiss buttons, and clicking outside the component. Use DismissingElement when external elements to the component, such as header, footer or any content element require dismissing the animated component.
 */
function DismissingElement({ children }) {
    const { onExternalDismiss } = useRequestAnimationFrame();
    return jsxRuntime.jsx(Fragment, { children: children({ onDismissStart: onExternalDismiss }) });
}
DismissingElement.displayName = 'DismissingElement';

function ConfirmationPopover({ anchor, message, subtext, primaryAction, secondaryAction, onDismiss, }) {
    var _a, _b, _c, _d;
    const confirmationButtonRef = useRef(null);
    const { onExternalDismiss } = useRequestAnimationFrame();
    const { dismissConfirmationMessage: messageDefault, dismissConfirmationSubtext: subtextDefault, dismissConfirmationPrimaryActionText: primaryActionTextDefault, dismissConfirmationSecondaryActionText: secondaryActionTextDefault, dismissConfirmationPrimaryActionTextLabel: primaryActionTextLabelDefault, dismissConfirmationSecondaryActionTextLabel: secondaryActionTextLabelDefault, } = useDefaultLabelContext('OverlayPanel');
    useEffect(() => {
        var _a;
        (_a = confirmationButtonRef === null || confirmationButtonRef === void 0 ? void 0 : confirmationButtonRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }, [confirmationButtonRef]);
    // Handle onDismiss triggering from ESC keyup event
    useEffect(() => {
        function handleKeyDown(event) {
            if (event.keyCode === ESCAPE)
                event.stopPropagation();
        }
        // @ts-expect-error - TS2769 - No overload matches this call.
        window.addEventListener('keydown', handleKeyDown);
        return function cleanup() {
            // @ts-expect-error - TS2769 - No overload matches this call.
            window.removeEventListener('keydown', handleKeyDown);
        };
    }, []);
    return (jsxRuntime.jsx(InternalPopover, { accessibilityLabel: "Popover", anchor: anchor, color: "white", disablePortal: true, idealDirection: "down", onDismiss: () => onDismiss(), role: "dialog", shouldFocus: true, showCaret: false, size: "md", children: jsxRuntime.jsx(TrapFocusBehavior, { children: jsxRuntime.jsx(BoxWithForwardRef, { padding: 3, width: "100%", children: jsxRuntime.jsxs(FlexWithForwardRef, { direction: "column", gap: 4, children: [jsxRuntime.jsx(BoxWithForwardRef, { role: "alert", children: jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", direction: "column", gap: 2, width: "100%", children: [jsxRuntime.jsx(TextWithForwardRef, { weight: "bold", children: message !== null && message !== void 0 ? message : messageDefault }), jsxRuntime.jsx(TextWithForwardRef, { children: subtext !== null && subtext !== void 0 ? subtext : subtextDefault })] }) }), jsxRuntime.jsxs(FlexWithForwardRef, { gap: 2, justifyContent: "center", children: [jsxRuntime.jsx(ButtonWithForwardRef, { accessibilityLabel: (_a = secondaryAction === null || secondaryAction === void 0 ? void 0 : secondaryAction.accessibilityLabel) !== null && _a !== void 0 ? _a : secondaryActionTextLabelDefault, color: "gray", onClick: ({ event }) => {
                                        var _a;
                                        (_a = secondaryAction === null || secondaryAction === void 0 ? void 0 : secondaryAction.onClick) === null || _a === void 0 ? void 0 : _a.call(secondaryAction, { event });
                                        onDismiss();
                                    }, text: (_b = secondaryAction === null || secondaryAction === void 0 ? void 0 : secondaryAction.text) !== null && _b !== void 0 ? _b : secondaryActionTextDefault }), jsxRuntime.jsx(ButtonWithForwardRef
                                // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLAnchorElement | HTMLButtonElement | null>' is not assignable to type 'LegacyRef<HTMLButtonElement> | undefined'.
                                , { 
                                    // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLAnchorElement | HTMLButtonElement | null>' is not assignable to type 'LegacyRef<HTMLButtonElement> | undefined'.
                                    ref: confirmationButtonRef, accessibilityLabel: (_c = primaryAction === null || primaryAction === void 0 ? void 0 : primaryAction.accessibilityLabel) !== null && _c !== void 0 ? _c : primaryActionTextLabelDefault, color: "red", onClick: ({ event }) => {
                                        var _a;
                                        (_a = primaryAction === null || primaryAction === void 0 ? void 0 : primaryAction.onClick) === null || _a === void 0 ? void 0 : _a.call(primaryAction, { event });
                                        onExternalDismiss();
                                    }, text: (_d = primaryAction === null || primaryAction === void 0 ? void 0 : primaryAction.text) !== null && _d !== void 0 ? _d : primaryActionTextDefault })] })] }) }) }) }));
}

var overlayPanelStyles = {"container":"cNb _he Hsu _O1 jx- Rym QLY KS5 L4E","wrapper":"yxg XiG XbT _O1"};

const PADDING_BOINTS = 6;
const SIZE_WIDTH_MAP = {
    sm: 540,
    md: 720,
    lg: 900,
};
function InternalOverlayPanel({ accessibilityDismissButtonLabel, accessibilityLabel, children, closeOnOutsideClick, dismissConfirmation, footer, heading, onAnimationEnd, onDismiss, size, subHeading, }) {
    const [showTopShadow, setShowTopShadow] = useState(false);
    const [showBottomShadow, setShowBottomShadow] = useState(false);
    const [showPopover, setShowPopover] = useState(false);
    const contentRef = useRef(null);
    const dismissButtonRef = useRef(null);
    const id = useId$1();
    const { animationState, handleAnimationEnd } = useAnimation();
    const { handleRequestAnimationFrame, onExternalDismiss } = useRequestAnimationFrame();
    const { accessibilityDismissButtonLabel: accessibilityDismissButtonLabelDefault } = useDefaultLabelContext('OverlayPanel');
    const enabledDismiss = typeof dismissConfirmation === 'undefined';
    const { message, subtext, primaryAction, secondaryAction } = dismissConfirmation !== null && dismissConfirmation !== void 0 ? dismissConfirmation : {};
    function buildDismissableSubcomponent(component) {
        return typeof component === 'function'
            ? component({ onDismissStart: onExternalDismiss })
            : component;
    }
    const handleOnAnimationEnd = useCallback(() => {
        handleAnimationEnd === null || handleAnimationEnd === void 0 ? void 0 : handleAnimationEnd();
        handleRequestAnimationFrame();
        onAnimationEnd === null || onAnimationEnd === void 0 ? void 0 : onAnimationEnd({
            animationState: animationState === ANIMATION_STATE.animatedOpening ? 'in' : 'out',
        });
    }, [animationState, onAnimationEnd, handleAnimationEnd, handleRequestAnimationFrame]);
    const handleBackdropClick = useCallback(() => {
        if (closeOnOutsideClick && enabledDismiss) {
            onExternalDismiss();
        }
        if (closeOnOutsideClick && !enabledDismiss) {
            setShowPopover(true);
        }
    }, [closeOnOutsideClick, onExternalDismiss, enabledDismiss]);
    // Handle the shadows on top and bottom of the content area when scrolling
    const updateShadows = useCallback(() => {
        const target = contentRef.current;
        if (!target)
            return;
        const hasVerticalScrollbar = target.clientHeight < target.scrollHeight;
        setShowTopShadow(hasVerticalScrollbar && target.scrollTop > 0);
        setShowBottomShadow(hasVerticalScrollbar && target.offsetHeight + target.scrollTop < target.scrollHeight);
    }, []);
    useEffect(() => {
        var _a;
        (_a = dismissButtonRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }, [dismissButtonRef]);
    useEffect(() => {
        function handleKeyDown(event) {
            // Handle onDismiss triggering from ESC keyup event
            if (event.keyCode === ESCAPE && enabledDismiss) {
                onExternalDismiss();
            }
            if (event.keyCode === ESCAPE && !enabledDismiss) {
                setShowPopover((value) => !value);
            }
        }
        // we must use keydown instead of keyup to match Popover events, as Popover gets dismissed in onKeyUp and we need to stopPropagation in the confirmation Popover
        // @ts-expect-error - TS2769 - No overload matches this call.
        window.addEventListener('keydown', handleKeyDown);
        return function cleanup() {
            // @ts-expect-error - TS2769 - No overload matches this call.
            window.removeEventListener('keydown', handleKeyDown);
        };
    }, [onExternalDismiss, enabledDismiss]);
    useEffect(() => {
        updateShadows();
        window.addEventListener('resize', updateShadows);
        return () => {
            window.removeEventListener('resize', updateShadows);
        };
    }, [updateShadows]);
    if (!!subHeading && !heading) {
        throw new Error(`Gestalt OverlayPanel's \`subHeading\` prop requires to be along with \`heading\` prop. Remove this prop or add \`heading\``);
    }
    // Use useLayoutEffect instead of useEffect as we need to close the component synchronously after all DOM mutations, useEffect was needed to prevent changing state while still rendering but useEffect will create a ms blink of the full OverlayPanel after closing which gets prevented with useLayoutEffect
    useLayoutEffect(() => {
        if (animationState === ANIMATION_STATE.unmount) {
            onDismiss();
        }
    }, [animationState, onDismiss]);
    return (jsxRuntime.jsx(NoScrollBehavior, { children: jsxRuntime.jsx(TrapFocusBehavior, { children: jsxRuntime.jsx("div", { className: overlayPanelStyles.container, children: jsxRuntime.jsx(Backdrop, { closeOnOutsideClick: closeOnOutsideClick, onClick: handleBackdropClick, children: jsxRuntime.jsx("div", { "aria-label": accessibilityLabel, className: classnames(overlayPanelStyles.wrapper, focusStyles.hideOutline, {
                            [animation.slideInRtlInitialize]: animationState === ANIMATION_STATE.hidden,
                            [animation.animationInSide]: animationState === ANIMATION_STATE.animatedOpening,
                            [animation.animationOutSide]: animationState === ANIMATION_STATE.animatedClosing,
                        }), id: id, onAnimationEnd: handleOnAnimationEnd, role: "dialog", style: { width: SIZE_WIDTH_MAP[size] }, tabIndex: -1, children: jsxRuntime.jsxs(BoxWithForwardRef, { direction: "column", display: "flex", flex: "grow", position: "relative", width: "100%", children: [Boolean(heading) && (jsxRuntime.jsxs(BoxWithForwardRef, { ref: dismissButtonRef, borderStyle: showTopShadow ? 'raisedTopShadow' : undefined, fit: true, position: "relative", children: [jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", flex: "grow", justifyContent: "between", children: [jsxRuntime.jsx(BoxWithForwardRef, { display: "flex", flex: "grow", justifyContent: "start", padding: PADDING_BOINTS, children: jsxRuntime.jsx(Heading, { accessibilityLevel: 1, size: "500", children: heading }) }), jsxRuntime.jsx(BoxWithForwardRef, { flex: "none", paddingX: 6, paddingY: 7, children: jsxRuntime.jsx(InternalDismissIconButtonWithForwardRef
                                                    // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLElement | null>' is not assignable to type 'LegacyRef<HTMLButtonElement> | undefined'.
                                                    , { 
                                                        // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLElement | null>' is not assignable to type 'LegacyRef<HTMLButtonElement> | undefined'.
                                                        ref: dismissButtonRef, accessibilityControls: id, accessibilityLabel: accessibilityDismissButtonLabel !== null && accessibilityDismissButtonLabel !== void 0 ? accessibilityDismissButtonLabel : accessibilityDismissButtonLabelDefault, onClick: enabledDismiss ? onExternalDismiss : () => setShowPopover(true), size: "md" }) })] }), buildDismissableSubcomponent(subHeading)] })), !heading && (jsxRuntime.jsx(BoxWithForwardRef, { display: "flex", flex: "grow", justifyContent: "end", marginBottom: 8, children: jsxRuntime.jsx(BoxWithForwardRef, { flex: "none", paddingX: 6, paddingY: 7, position: "absolute", zIndex: new FixedZIndex(1), children: jsxRuntime.jsx(InternalDismissIconButtonWithForwardRef
                                        // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLElement | null>' is not assignable to type 'LegacyRef<HTMLButtonElement> | undefined'.
                                        , { 
                                            // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLElement | null>' is not assignable to type 'LegacyRef<HTMLButtonElement> | undefined'.
                                            ref: dismissButtonRef, accessibilityControls: id, accessibilityLabel: accessibilityDismissButtonLabel !== null && accessibilityDismissButtonLabel !== void 0 ? accessibilityDismissButtonLabel : accessibilityDismissButtonLabelDefault, onClick: enabledDismiss ? onExternalDismiss : () => setShowPopover(true), size: "md" }) }) })), jsxRuntime.jsx(ScrollBoundaryContainerProvider, { children: jsxRuntime.jsxs(ScrollBoundaryContainerWithForwardRef, { includesFooter: true, children: [jsxRuntime.jsx(ScrollBoundaryContainerProvider, { children: jsxRuntime.jsx(ScrollBoundaryContainerWithForwardRef, { ref: contentRef, onScroll: updateShadows, padding: PADDING_BOINTS, children: buildDismissableSubcomponent(children) }) }), Boolean(footer) && (jsxRuntime.jsx(BoxWithForwardRef, { borderStyle: showBottomShadow ? 'raisedBottomShadow' : undefined, fit: true, position: "relative", children: jsxRuntime.jsx(BoxWithForwardRef, { padding: PADDING_BOINTS, children: buildDismissableSubcomponent(footer) }) }))] }) }), showPopover && (jsxRuntime.jsx(ConfirmationPopover, { anchor: dismissButtonRef.current, message: message, onDismiss: () => {
                                        var _a;
                                        setShowPopover(false);
                                        (_a = dismissButtonRef === null || dismissButtonRef === void 0 ? void 0 : dismissButtonRef.current) === null || _a === void 0 ? void 0 : _a.focus();
                                    }, primaryAction: primaryAction, secondaryAction: secondaryAction, subtext: subtext }))] }) }) }) }) }) }));
}

/**
 * [OverlayPanels](https://gestalt.pinterest.systems/web/overlaypanel ) are surfaces that allow users to view optional information or complete sub-tasks in a workflow while keeping the context of the current page. The most common example of OverlayPanel displays content in a panel that opens from the side of the screen for the user to read or input information. OverlayPanels have default, internal padding for content.
 *
 * ![OverlayPanel light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/OverlayPanel.spec.ts-snapshots/OverlayPanel-chromium-darwin.png)
 * ![OverlayPanel dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/OverlayPanel-dark.spec.ts-snapshots/OverlayPanel-dark-chromium-darwin.png)
 */
function OverlayPanel({ accessibilityDismissButtonLabel, accessibilityLabel, children, closeOnOutsideClick = true, footer, heading, onAnimationEnd, dismissConfirmation, onDismiss, size = 'sm', subHeading, }) {
    return (jsxRuntime.jsx(AnimationProvider, { children: jsxRuntime.jsxs(RequestAnimationFrameProvider, { children: [jsxRuntime.jsx(InternalOverlayPanel, { accessibilityDismissButtonLabel: accessibilityDismissButtonLabel, accessibilityLabel: accessibilityLabel, closeOnOutsideClick: closeOnOutsideClick, dismissConfirmation: dismissConfirmation, footer: footer, heading: heading, 
                    // @ts-expect-error - TS2322 - Type '((arg1: { animationState: "in" | "out"; }) => void) | undefined' is not assignable to type '(arg1: { animationState: "in" | "out"; }) => void | null | undefined'.
                    onAnimationEnd: onAnimationEnd, onDismiss: onDismiss, size: size, subHeading: subHeading, children: children }), ' '] }) }));
}
OverlayPanel.displayName = 'OverlayPanel';
OverlayPanel.DismissingElement = DismissingElement;

var styles$m = {"pageHeader":"CzO","pageHeaderBorderBottom":"UFw"};

function PageHeaderTitle({ marginTop, title, }) {
    return (jsxRuntime.jsxs(Fragment, { children: [jsxRuntime.jsx(BoxWithForwardRef, { display: "block", smDisplay: "none", children: jsxRuntime.jsx(Heading, { accessibilityLevel: 1, lineClamp: 1, overflow: "breakAll", size: "400", children: title }) }), jsxRuntime.jsx(BoxWithForwardRef, { dangerouslySetInlineStyle: {
                    __style: marginTop ? { marginTop: `${marginTop}px` } : {},
                }, display: "none", smDisplay: "block", children: jsxRuntime.jsx(Heading, { accessibilityLevel: 1, lineClamp: 1, overflow: "breakAll", size: "500", children: title }) })] }));
}
function PageHeaderThumbnail({ thumbnail }) {
    return (jsxRuntime.jsx(BoxWithForwardRef, { "aria-hidden": true, display: "none", smDisplay: "block", children: jsxRuntime.jsx(Mask, { height: 48, rounding: 2, width: 48, children: thumbnail }) }));
}
function PageHeaderBadge({ badgeText, badgeTooltip, type = 'info', }) {
    return badgeTooltip ? (jsxRuntime.jsx(Badge, { position: "middle", text: badgeText, tooltip: badgeTooltip, type: type })) : (jsxRuntime.jsx(Badge, { position: "middle", text: badgeText, type: type }));
}
function PageHeaderHelperIconButton({ accessibilityLabel, accessibilityControls, accessibilityExpanded, onClick, }) {
    return (jsxRuntime.jsx(IconButtonWithForwardRef, { accessibilityControls: accessibilityControls, accessibilityExpanded: accessibilityExpanded, accessibilityHaspopup: true, accessibilityLabel: accessibilityLabel, bgColor: "lightGray", icon: "question-mark", iconColor: "darkGray", onClick: onClick, size: "xs" }));
}
function PageHeaderSubtext({ subtext, helperLink, }) {
    return (jsxRuntime.jsx(BoxWithForwardRef, { display: "none", smDisplay: "block", children: jsxRuntime.jsxs(TextWithForwardRef, { inline: true, children: [subtext, helperLink ? (jsxRuntime.jsxs(Fragment, { children: [' ', jsxRuntime.jsx(TextWithForwardRef, { inline: true, children: jsxRuntime.jsx(LinkWithForwardRef, { accessibilityLabel: helperLink.accessibilityLabel, display: "inlineBlock", href: helperLink.href, onClick: helperLink.onClick, target: "blank", children: helperLink.text }) })] })) : null] }) }));
}
function PageHeaderActionBlock({ primaryAction, secondaryAction, dropdownAccessibilityLabel = '', }) {
    var _a, _b;
    const [open, setOpen] = useState(false);
    const anchorRef = useRef(null);
    const consolidatedDropdownItems = [
        ...((_a = primaryAction === null || primaryAction === void 0 ? void 0 : primaryAction.dropdownItems) !== null && _a !== void 0 ? _a : []),
        ...((_b = secondaryAction === null || secondaryAction === void 0 ? void 0 : secondaryAction.dropdownItems) !== null && _b !== void 0 ? _b : []),
    ];
    return (jsxRuntime.jsxs(Fragment, { children: [jsxRuntime.jsx(BoxWithForwardRef, { display: "none", mdDisplay: "block", children: jsxRuntime.jsxs(FlexWithForwardRef, { gap: { column: 0, row: 2 }, children: [secondaryAction ? (jsxRuntime.jsx(BoxWithForwardRef, { alignItems: "center", display: "flex", height: 48, children: secondaryAction.component })) : null, primaryAction ? (jsxRuntime.jsx(BoxWithForwardRef, { alignItems: "center", display: "flex", height: 48, children: primaryAction.component })) : null] }) }), jsxRuntime.jsxs(BoxWithForwardRef, { display: "block", mdDisplay: "none", children: [jsxRuntime.jsx(IconButtonWithForwardRef
                    // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLAnchorElement | HTMLButtonElement | null>' is not assignable to type 'LegacyRef<HTMLButtonElement> | undefined'.
                    , { 
                        // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLAnchorElement | HTMLButtonElement | null>' is not assignable to type 'LegacyRef<HTMLButtonElement> | undefined'.
                        ref: anchorRef, accessibilityControls: "pageheader-dropdown", accessibilityExpanded: open, accessibilityHaspopup: true, accessibilityLabel: dropdownAccessibilityLabel, icon: "ellipsis", iconColor: "darkGray", onClick: () => setOpen((prevVal) => !prevVal), selected: open, size: "lg" }), open && (jsxRuntime.jsx(Dropdown, { anchor: anchorRef.current, id: "pageheader-dropdown", onDismiss: () => setOpen(false), children: consolidatedDropdownItems.map((element, idx) => cloneElement(element, { key: `pageheader-dropdown-item-${idx}` })) }))] })] }));
}
function PageHeaderItemsBlock({ items }) {
    return (jsxRuntime.jsx(BoxWithForwardRef, { display: "none", mdDisplay: "block", overflow: "hidden", children: jsxRuntime.jsx(FlexWithForwardRef, { gap: { column: 0, row: 6 }, children: items.slice(0, 2).map((item, i) => (
            // eslint-disable-next-line react/no-array-index-key
            jsxRuntime.jsx(FlexWithForwardRef.Item, { children: item }, i))) }) }));
}

/**
 * [PageHeader](https://gestalt.pinterest.systems/web/pageheader) is used to indicate the title of the current screen and can also provide additional content and actions that relate to the current screen as a whole.
 *
 * ![PageHeader light mode secondary action](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/PageHeader-items-secondaryAction.spec.ts-snapshots/PageHeader-items-secondaryAction-md-chromium-darwin.png)
 * ![PageHeader light mode badge](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/PageHeader-thumbnail-badge-iconButton.spec.ts-snapshots/PageHeader-thumbnail-badge-iconButton-sm-chromium-darwin.png)
 * ![PageHeader dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/PageHeader-borderStyle-dark.spec.ts-snapshots/PageHeader-borderStyle-dark-chromium-darwin.png)
 *
 */
function PageHeader({ badge, dropdownAccessibilityLabel, helperIconButton, helperLink, items, maxWidth = '100%', primaryAction, secondaryAction, subtext, title, thumbnail, borderStyle = 'none', }) {
    return (jsxRuntime.jsx("div", { className: borderStyle === 'sm' ? styles$m.pageHeaderBorderBottom : styles$m.pageHeader, children: jsxRuntime.jsx(BoxWithForwardRef, { color: "default", paddingX: 8, paddingY: 4, width: "100%", children: jsxRuntime.jsx(FlexWithForwardRef, { flex: "grow", justifyContent: "center", maxWidth: "100%", children: jsxRuntime.jsxs(FlexWithForwardRef, { flex: "grow", maxWidth: maxWidth, children: [jsxRuntime.jsx(FlexWithForwardRef.Item, { alignSelf: "center", flex: "grow", minWidth: 0, children: jsxRuntime.jsx(BoxWithForwardRef, { marginEnd: 6, children: jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", gap: { row: 4, column: 0 }, children: [thumbnail ? jsxRuntime.jsx(PageHeaderThumbnail, { thumbnail: thumbnail }) : null, jsxRuntime.jsxs(FlexWithForwardRef, { direction: "column", gap: { column: 1, row: 0 }, children: [jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", children: [jsxRuntime.jsx(PageHeaderTitle, { marginTop: thumbnail && subtext ? -4 : undefined, title: title }), jsxRuntime.jsx(BoxWithForwardRef, { display: "none", marginStart: badge ? 1 : 3, smDisplay: "block", children: jsxRuntime.jsxs(FlexWithForwardRef, { gap: { column: 0, row: 3 }, children: [badge ? (jsxRuntime.jsx(PageHeaderBadge, { badgeText: badge.text, badgeTooltip: badge.tooltip, type: badge.type })) : null, helperIconButton ? (jsxRuntime.jsx(PageHeaderHelperIconButton, { accessibilityControls: helperIconButton.accessibilityControls, accessibilityExpanded: helperIconButton.accessibilityExpanded, accessibilityLabel: helperIconButton.accessibilityLabel, onClick: helperIconButton.onClick })) : null] }) })] }), subtext ? (jsxRuntime.jsx(PageHeaderSubtext, { helperLink: helperLink, subtext: subtext })) : null] })] }) }) }), jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "none", minWidth: 0, children: jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", gap: { row: 8, column: 0 }, height: "100%", children: [items && items.length !== 0 ? jsxRuntime.jsx(PageHeaderItemsBlock, { items: items }) : null, primaryAction || secondaryAction ? (jsxRuntime.jsx(PageHeaderActionBlock, { dropdownAccessibilityLabel: dropdownAccessibilityLabel, primaryAction: primaryAction, secondaryAction: secondaryAction })) : null] }) })] }) }) }) }));
}
PageHeader.displayName = 'PageHeader';

/**
 * [Popover](https://gestalt.pinterest.systems/web/popover) is a floating view that contains a task related to the content on screen. It can be triggered when the user clicks or focuses on an element, typically [Button](https://gestalt.pinterest.systems/web/button) or [IconButton](https://gestalt.pinterest.systems/web/iconbutton). It can also be triggered automatically, as in the case of user education. Popover is non-modal and can be dismissed by interacting with another part of the screen or an item within Popover.
 *
 * Popover is most appropriate for desktop screens and can contain a variety of elements, such as [Button](https://gestalt.pinterest.systems/web/button) and [Images](https://gestalt.pinterest.systems/web/image). Popover is also the container used to construct more complex elements like [Dropdown](https://gestalt.pinterest.systems/web/dropdown) and the board picker, pictured below, which allow people to choose the board to save a Pin to.
 *
 * ![Popover light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Popover.spec.ts-snapshots/Popover-chromium-darwin.png)
 * ![Popover dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Popover-dark.spec.ts-snapshots/Popover-dark-chromium-darwin.png)
 *
 */
function Popover({ accessibilityLabel = 'Popover', accessibilityDismissButtonLabel, anchor, children, showDismissButton, onKeyDown, id, idealDirection, forceDirection = false, onDismiss, positionRelativeToAnchor = true, disablePortal = true, color = 'white', role = 'dialog', shouldFocus = true, _deprecatedShowCaret = false, size = 'sm', scrollBoundary, hideWhenReferenceHidden = true, __onPositioned, __overflow, }) {
    return (jsxRuntime.jsx(InternalPopover, { accessibilityDismissButtonLabel: accessibilityDismissButtonLabel, accessibilityLabel: accessibilityLabel, anchor: anchor, color: color === 'deprecatedBlue' ? 'blue' : color, disablePortal: disablePortal !== null && disablePortal !== void 0 ? disablePortal : positionRelativeToAnchor, forceDirection: forceDirection, hideWhenReferenceHidden: hideWhenReferenceHidden, id: id, idealDirection: idealDirection, onDismiss: onDismiss, onKeyDown: onKeyDown, onPositioned: __onPositioned, overflow: __overflow, role: role, scrollBoundary: scrollBoundary, shouldFocus: shouldFocus, showCaret: _deprecatedShowCaret, showDismissButton: showDismissButton, size: size, children: children }));
}
Popover.displayName = 'Popover';

var styles$l = {"textColorOverride":"_xV"};

function PrimaryAction$1(props) {
    if (props.role === 'link') {
        return (jsxRuntime.jsx(ButtonLinkWithForwardRef, { accessibilityLabel: props.accessibilityLabel, color: "white", fullWidth: false, href: props.href, onClick: props.onClick, rel: props.rel, target: props.target, text: props.text }));
    }
    return (jsxRuntime.jsx(ButtonWithForwardRef, { accessibilityLabel: props.accessibilityLabel, color: "white", fullWidth: false, onClick: props.onClick, text: props.text }));
}
/**
 * [PopoverEducational](https://gestalt.pinterest.systems/web/popovereducationaleducational) is a floating container that introduces users to elements on the screen. Used for education or onboarding experiences.
 * ![PopoverEducational light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/PopoverEducational.spec.ts-snapshots/PopoverEducational-chromium-darwin.png)
 * ![PopoverEducational dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/PopoverEducational-dark.spec.ts-snapshots/PopoverEducational-dark-chromium-darwin.png)
 */
function PopoverEducational({ accessibilityLabel = 'Popover', anchor, children, id, idealDirection, forceDirection = false, message, onDismiss, primaryAction, role = 'tooltip', shouldFocus = false, size = 'sm', zIndex, _experimentalVariant, }) {
    if (!anchor) {
        return null;
    }
    let textElement;
    if (typeof message === 'string') {
        textElement = jsxRuntime.jsx(TextWithForwardRef, { color: "inverse", children: message });
    }
    // If `message` is a Text component, we need to override any text colors within to ensure they all match
    if (message &&
        typeof message !== 'string' &&
        // @ts-expect-error - TS2339
        Children.only(message).type.displayName === 'Text') {
        textElement = jsxRuntime.jsx("span", { className: styles$l.textColorOverride, children: message });
    }
    return (jsxRuntime.jsx(BoxWithForwardRef, { position: zIndex ? 'relative' : undefined, zIndex: zIndex, children: jsxRuntime.jsx(InternalPopover, { accessibilityLabel: accessibilityLabel, anchor: anchor, color: _experimentalVariant === 'notification' ? 'darkGray' : 'blue', disableFocusTrap: true, disablePortal: true, forceDirection: forceDirection, hideWhenReferenceHidden: true, id: id, idealDirection: idealDirection, onDismiss: onDismiss, role: primaryAction && !children ? 'dialog' : role, shouldFocus: shouldFocus, showCaret: true, size: size, children: children !== null && children !== void 0 ? children : (message ? (jsxRuntime.jsx(BoxWithForwardRef, { padding: 4, tabIndex: 0, children: jsxRuntime.jsxs(FlexWithForwardRef, { direction: "column", gap: 3, children: [textElement, primaryAction ? (jsxRuntime.jsx(FlexWithForwardRef.Item, { alignSelf: "end", flex: "grow", children: jsxRuntime.jsx(PrimaryAction$1, Object.assign({}, primaryAction)) })) : null] }) })) : null) }) }));
}
PopoverEducational.displayName = 'PopoverEducational';

var styles$k = {"innerCircle":"DgX Hsu","pulse-animation":"t25","outerCircle":"uWM","appear-animation":"W9B"};

/**
 * [Pulsar](https://gestalt.pinterest.systems/web/pulsar ) brings focus to a specific element on the screen, acting like "training wheels" to guide people towards the intended way to perform the action. Pulsar is used in isolation or combination with other education components for more instruction.
 *
 * ![Pulsar light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Pulsar.spec.ts-snapshots/Pulsar-chromium-darwin.png)
 * ![Pulsar dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Pulsar-dark.spec.ts-snapshots/Pulsar-dark-chromium-darwin.png)
 */
function Pulsar({ paused, size = 136 }) {
    return (jsxRuntime.jsx(BoxWithForwardRef, { dangerouslySetInlineStyle: {
            __style: {
                animationIterationCount: paused ? 0 : 'infinite',
                outline: 'none',
                boxShadow: 'none',
            },
        }, display: paused ? 'none' : 'block', height: size, position: "relative", width: size, children: jsxRuntime.jsx("div", { className: styles$k.innerCircle, children: jsxRuntime.jsx("div", { className: styles$k.outerCircle }) }) }));
}
Pulsar.displayName = 'Pulsar';

var styles$j = {"RadioButton":"ty9 kVc Hsu INd _O1 KS5 mQ8 XiG Pw5","Border":"fRe nG5","BorderCheckedSm":"LSV","BorderCheckedMd":"dJq","BorderSelected":"iKS gSJ","BorderDisabled":"CVS adn","BorderDisabledChecked":"JtD Fvo","BorderHovered":"dxz dPY","BorderUnchecked":"qs6 XgI","BgDisabled":"K4t","BgEnabled":"E0x","InputEnabled":"ac9 BG7","VRRadioButton":"i9p Hsu MIw CLD zHq INd Pw5","checked":"RE8","unchecked":"wH4","noTransition":"gzd","noTransitionDelay":"aXp"};

var controlStyles = {"input":"M8E MIw e43","sizeSm":"ruV","sizeMd":"xpn"};

/**
 * **NOTE** The standalone RadioButton is soon to be deprecated, use [RadioGroup](https://gestalt.pinterest.systems/web/radiogroup) and RadioGroup.RadioButton instead.**NOTE**
 */
const RadioButtonWithForwardRef = forwardRef(function RadioButton({ checked = false, disabled = false, id, image, label, name, onChange, subtext, value, size = 'md', }, ref) {
    const [focused, setFocused] = useState(false);
    const [hovered, setHover] = useState(false);
    const handleChange = (event) => onChange({ checked: event.target.checked, event });
    const handleBlur = () => setFocused(false);
    const handleFocus = () => setFocused(true);
    const handleHover = (isHovered) => setHover(isHovered);
    let borderStyle = styles$j.Border;
    if (disabled && checked) {
        borderStyle = styles$j.BorderDisabledChecked;
    }
    else if (!disabled && checked) {
        borderStyle = styles$j.BorderSelected;
    }
    else if (!disabled && hovered) {
        borderStyle = styles$j.BorderHovered;
    }
    let borderWidth = styles$j.BorderUnchecked;
    if (disabled && !checked) {
        borderWidth = styles$j.BorderDisabled;
    }
    else if (checked && size === 'sm') {
        borderWidth = styles$j.BorderCheckedSm;
    }
    else if (checked && size === 'md') {
        borderWidth = styles$j.BorderCheckedMd;
    }
    const styleSize = size === 'sm' ? controlStyles.sizeSm : controlStyles.sizeMd;
    const bgStyle = disabled && !checked ? styles$j.BgDisabled : styles$j.BgEnabled;
    const { isFocusVisible } = useFocusVisible();
    return (jsxRuntime.jsxs(BoxWithForwardRef, { alignItems: "start", display: "flex", justifyContent: "start", marginEnd: -1, marginStart: -1, children: [jsxRuntime.jsx(Label, { htmlFor: id, children: jsxRuntime.jsx(BoxWithForwardRef, { paddingX: 1, children: jsxRuntime.jsx("div", { className: classnames(bgStyle, borderStyle, borderWidth, styleSize, styles$j.RadioButton, {
                            [focusStyles.accessibilityOutlineFocus]: focused && isFocusVisible,
                        }), children: jsxRuntime.jsx("input", { 
                            // checking for "focused" is not required by screenreaders but it prevents a11y integration tests to complain about missing label, as aria-describedby seems to shadow label in tests though it's a W3 accepeted pattern https://www.w3.org/TR/WCAG20-TECHS/ARIA1.html
                            ref: ref, "aria-describedby": subtext && focused ? `${id}-helperText` : undefined, checked: checked, className: classnames(controlStyles.input, styleSize, {
                                [styles$j.InputEnabled]: !disabled,
                            }), disabled: disabled, id: id, name: name, onBlur: handleBlur, onChange: handleChange, onFocus: handleFocus, onMouseEnter: () => handleHover(true), onMouseLeave: () => handleHover(false), type: "radio", value: value }) }) }) }), Boolean(image) && jsxRuntime.jsx(BoxWithForwardRef, { paddingX: 1, children: image }), jsxRuntime.jsxs(BoxWithForwardRef, { children: [label && (jsxRuntime.jsx(Label, { htmlFor: id, children: jsxRuntime.jsx(BoxWithForwardRef, { dangerouslySetInlineStyle: {
                                __style: { marginTop: size === 'md' ? '2px' : '-1px' },
                            }, paddingX: 1, children: jsxRuntime.jsx(TextWithForwardRef, { color: disabled ? 'subtle' : undefined, size: size === 'sm' ? '200' : '300', children: label }) }) })), label && subtext && (jsxRuntime.jsx(BoxWithForwardRef, { padding: 1, children: jsxRuntime.jsx(TextWithForwardRef, { color: "subtle", size: size === 'sm' ? '200' : '300', children: subtext }) }))] })] }));
});
RadioButtonWithForwardRef.displayName = 'RadioButton';

const initialContextState = {
    parentName: '',
};
const context = createContext(initialContextState);
const RadioGroupContextProvider = context.Provider;
function useRadioGroupContext() {
    const contextContent = useContext(context);
    return contextContent;
}

/**
 *  Use [RadioGroup.RadioButtons](https://gestalt.pinterest.systems/web/radiogroup#RadioGroup.RadioButton) to present an option for selection to the user within a RadioGroup. They should not be used outside of RadioGroup or when the user can select more than one option from a list.
 *
 * ![RadioGroup light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/RadioGroup.spec.ts-snapshots/RadioGroup-chromium-darwin.png)
 * ![RadioGroup dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/RadioGroup-dark.spec.ts-snapshots/RadioGroup-dark-chromium-darwin.png)
 *
 */
const RadioGroupButtonWithForwardRef = forwardRef(function RadioButton({ checked = false, disabled = false, id, image, label, name, onChange, helperText, value, badge, size = 'md', }, ref) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const [focused, setFocused] = useState(false);
    const [hovered, setHover] = useState(false);
    const handleChange = (event) => onChange({ checked: event.target.checked, event });
    const handleBlur = () => setFocused(false);
    const handleFocus = () => setFocused(true);
    const handleHover = (isHovered) => setHover(isHovered);
    let borderColor = styles$j.Border;
    if (disabled && checked) {
        borderColor = styles$j.BorderDisabledChecked;
    }
    else if (!disabled && checked) {
        borderColor = styles$j.BorderSelected;
    }
    else if (!disabled && hovered) {
        borderColor = styles$j.BorderHovered;
    }
    let borderWidth = styles$j.BorderUnchecked;
    if (disabled && !checked) {
        borderWidth = styles$j.BorderDisabled;
    }
    else if (checked && size === 'sm') {
        borderWidth = styles$j.BorderCheckedSm;
    }
    else if (checked && size === 'md') {
        borderWidth = styles$j.BorderCheckedMd;
    }
    const uncheckedBorderWidth = disabled ? styles$j.BorderDisabled : styles$j.BorderUnchecked;
    const styleSize = size === 'sm' ? controlStyles.sizeSm : controlStyles.sizeMd;
    const bgStyle = disabled && !checked ? styles$j.BgDisabled : styles$j.BgEnabled;
    const { isFocusVisible } = useFocusVisible();
    const { parentName } = useRadioGroupContext();
    const tapScaleAnimation = useTapScaleAnimation();
    if (parentName !== 'RadioGroup') {
        throw new Error(`RadioGroup.RadioButton must be used within a [RadioGroup](https://gestalt.pinterest.systems/web/radiogroup).`);
    }
    const radioButtonStyles = isInVRExperiment
        ? classnames(styleSize, Layout.relative, borderStyles.circle, tapScaleAnimation.classes, {
            [focusStyles.accessibilityOutlineFocus]: focused && isFocusVisible,
        })
        : classnames(bgStyle, borderColor, borderWidth, styleSize, styles$j.RadioButton, {
            [focusStyles.accessibilityOutlineFocus]: focused && isFocusVisible,
        });
    const sharedBorderStyles = classnames(styles$j.VRRadioButton, borderColor, bgStyle, styleSize);
    const checkedBorderStyles = classnames(sharedBorderStyles, styles$j.checked, borderWidth, {
        [styles$j.noTransitionDelay]: checked,
    });
    const uncheckedBorderStyles = classnames(sharedBorderStyles, styles$j.unchecked, uncheckedBorderWidth, {
        [boxStyles.opacity0]: checked || disabled,
        [styles$j.noTransition]: checked,
    });
    return (jsxRuntime.jsxs(BoxWithForwardRef, { alignItems: "start", display: "flex", justifyContent: "start", marginEnd: -1, marginStart: -1, children: [jsxRuntime.jsx(BoxWithForwardRef, { paddingX: 1, children: jsxRuntime.jsxs("div", { ref: tapScaleAnimation.elementRef, className: radioButtonStyles, onMouseDown: () => {
                        if (isInVRExperiment)
                            tapScaleAnimation.handleMouseDown();
                    }, onMouseUp: () => {
                        if (isInVRExperiment)
                            tapScaleAnimation.handleMouseUp();
                    }, children: [isInVRExperiment && (jsxRuntime.jsxs(Fragment, { children: [jsxRuntime.jsx("div", { className: checkedBorderStyles }), jsxRuntime.jsx("div", { className: uncheckedBorderStyles })] })), jsxRuntime.jsx("input", { 
                            // checking for "focused" is not required by screenreaders but it prevents a11y integration tests to complain about missing label, as aria-describedby seems to shadow label in tests though it's a W3 accepeted pattern https://www.w3.org/TR/WCAG20-TECHS/ARIA1.html
                            ref: ref, "aria-describedby": helperText && focused ? `${id}-helperText` : undefined, checked: checked, className: classnames(controlStyles.input, styleSize, {
                                [styles$j.InputEnabled]: !disabled,
                            }), disabled: disabled, id: id, name: name, onBlur: handleBlur, onChange: handleChange, onFocus: handleFocus, onMouseEnter: () => handleHover(true), onMouseLeave: () => handleHover(false), type: "radio", value: value })] }) }), Boolean(image) && jsxRuntime.jsx(BoxWithForwardRef, { paddingX: 1, children: image }), jsxRuntime.jsxs(FlexWithForwardRef, { direction: "column", children: [jsxRuntime.jsxs(FlexWithForwardRef, { direction: "row", children: [label && (jsxRuntime.jsx(Label, { htmlFor: id, children: jsxRuntime.jsx(BoxWithForwardRef, { dangerouslySetInlineStyle: {
                                        __style: { marginTop: size === 'md' ? '2px' : '-1px' },
                                    }, paddingX: 1, children: jsxRuntime.jsx(TextWithForwardRef, { color: disabled ? 'subtle' : undefined, size: size === 'sm' ? '200' : '300', children: label }) }) })), badge && (jsxRuntime.jsx(FlexWithForwardRef.Item, { alignSelf: "end", minWidth: 0, children: jsxRuntime.jsx(BoxWithForwardRef, { dangerouslySetInlineStyle: { __style: { top: '1px' } }, position: "relative", children: jsxRuntime.jsx(Badge, { text: badge.text, type: badge.type || 'info' }) }) }))] }), label && helperText ? (jsxRuntime.jsx(BoxWithForwardRef, { paddingX: 1, children: jsxRuntime.jsx(FormHelperText, { id: `${id}-helperText`, text: helperText }) })) : null] })] }));
});
RadioGroupButtonWithForwardRef.displayName = 'RadioGroup.RadioButton';

/**
 *  [RadioGroups](https://gestalt.pinterest.systems/web/radiogroup) are used for selecting only 1 item from a list of 2 or more items. If you need multiple selection or have only one option, use [Checkbox](https://gestalt.pinterest.systems/web/checkbox). If you need to provide a binary on/off choice that takes effect immediately, use [Switch](https://gestalt.pinterest.systems/web/switch).
 *
 */
function RadioGroup({ children, direction = 'column', errorMessage, id, legend, legendDisplay = 'visible', }) {
    var _a;
    // Consume GlobalEventsHandlerProvider
    const { radioGroupHandlers } = (_a = useGlobalEventsHandlerContext()) !== null && _a !== void 0 ? _a : {
        radioGroupHandlers: undefined,
    };
    useEffect(() => {
        if (radioGroupHandlers === null || radioGroupHandlers === void 0 ? void 0 : radioGroupHandlers.onRender)
            radioGroupHandlers === null || radioGroupHandlers === void 0 ? void 0 : radioGroupHandlers.onRender();
    }, [radioGroupHandlers]);
    return (jsxRuntime.jsx(RadioGroupContextProvider, { value: { parentName: 'RadioGroup' }, children: jsxRuntime.jsx(Fieldset, { errorMessage: errorMessage, id: id, legend: legend, legendDisplay: legendDisplay, children: jsxRuntime.jsx(FlexWithForwardRef, { direction: direction, gap: direction === 'row' ? { row: 4, column: 0 } : { column: 2, row: 0 }, children: children }) }) }));
}
RadioGroup.displayName = 'RadioGroup';
RadioGroup.RadioButton = RadioGroupButtonWithForwardRef;

/**
 * [ScrollBoundaryContainer](https://gestalt.pinterest.systems/web/utilities/scrollboundarycontainer) is used with anchor-based components such as Popover, Tooltip, Dropdown or ComboBox. ScrollBoundaryContainer is needed for proper positioning when the anchor-based component is anchored to an element that is located within a scrolling container. The use of ScrollBoundaryContainer ensures the anchor-based component remains attached to its anchor when scrolling. Don't use ScrollBoundaryContainer to add scrolling to a container, use [Box's props](https://gestalt.pinterest.systems/web/box#Props) instead.
 *
 * ![ScrollBoundaryContainer](https://raw.githubusercontent.com/pinterest/gestalt/master/docs/graphics/building-blocks/ScrollBoundaryContainer.svg)
 */
function ScrollBoundaryContainerWithProvider({ children, height = '100%', overflow = 'auto', }) {
    return (jsxRuntime.jsx(ScrollBoundaryContainerProvider, { children: jsxRuntime.jsx(ScrollBoundaryContainerWithForwardRef, { height: height, overflow: overflow, children: children }) }));
}
ScrollBoundaryContainerWithProvider.displayName = 'ScrollBoundaryContainer';

class ScrollFetch extends PureComponent {
    constructor() {
        super(...arguments);
        /**
         * Fetches additional items if needed.
         */
        this.updatePosition = throttle(() => {
            this.setState(this.getScrollState());
        });
        this.state = {
            containerHeight: 0,
            scrollHeight: 0,
            scrollTop: 0,
        };
        /**
         * Returns the scrollable content height.
         */
        this.getScrollHeight = () => {
            const { container } = this.props;
            if (!container) {
                return 0;
            }
            return getScrollHeight(container);
        };
    }
    /**
     * Adds scroll listener after the component mounts.
     */
    componentDidMount() {
        const { container } = this.props;
        if (!container) {
            return;
        }
        setTimeout(() => {
            // @ts-expect-error - TS2345 - Argument of type '{ scrollHeight?: number | undefined; scrollTop?: number | undefined; containerHeight: number; }' is not assignable to parameter of type 'State | ((prevState: Readonly<State>, props: Readonly<Props>) => State | Pick<State, "scrollHeight" | "scrollTop" | "containerHeight"> | null) | Pick<...> | null'.
            this.setState(Object.assign({ containerHeight: getElementHeight(container) }, this.getScrollState()));
        });
    }
    /**
     * Update scroll buffer and check after the component updates.
     */
    componentDidUpdate() {
        // setTimeout so the parent component can calculate renderHeight().
        this.updatePosition();
    }
    getScrollState() {
        const { container, renderHeight } = this.props;
        if (!container) {
            return null;
        }
        const scrollHeight = renderHeight || this.getScrollHeight;
        return {
            scrollHeight: scrollHeight(),
            scrollTop: getScrollPos(container),
        };
    }
    render() {
        const { containerHeight, scrollHeight, scrollTop } = this.state;
        const { container, fetchMore, isAtEnd, isFetching } = this.props;
        const props = {
            containerHeight,
            fetchMore,
            isAtEnd,
            isFetching,
            scrollHeight,
            scrollTop,
        };
        if (!container || isAtEnd) {
            return null;
        }
        return (jsxRuntime.jsx(ScrollContainer, { onScroll: this.updatePosition, scrollContainer: container, children: jsxRuntime.jsx(FetchItems, Object.assign({}, props)) }));
    }
}
ScrollFetch.defaultProps = {
    // @ts-expect-error - TS2322 - Type '(Window & typeof globalThis) | undefined' is not assignable to type 'HTMLElement | undefined'.
    container: typeof window !== 'undefined' ? window : undefined,
};

var styles$i = {"input":"ta7 iyn KI_ Lfz XgI Hsu tBJ dyH iFc sAJ L4E","inputActive":"uKU","inputHovered":"Zj6 dPY BG7","clear":"StA H-G S7o C7G"};

var styles$h = {"enabledText":"XQM","disabledText":"Bdl","enabled":"r4p","enabledBorder":"aZF","errorBorder":"xVo","inputParent":"ikv","input":"m72","label":"vby","visuallyHidden":"Z2A","startIconLabelWrapper":"XxZ","startIconNoLabelWrapper":"LZf","endClearButtonWrapper":"aUQ","md_input":"hW_ Q1L Ucg","md_inputLabelPadding":"xkw","md_inputNoLabelPadding":"JMX","md_inputStartPadding":"ZNI","md_inputNoEndButtonEndPadding":"cks","md_inputEndButtonEndPadding":"KGk","md_labelTopPosition":"Nvu","md_labelPosition":"Jmd","md_startIconLabel":"r4m","md_startIcon":"np6","md_endClearButtonWrapper":"TDM","md_ClearButtonWrapper":"mxv","lg_input":"fvn Q1L Ucg","lg_inputLabelPadding":"drc","lg_inputNoLabelPadding":"Yn5","lg_inputStartPadding":"NPE","lg_inputNoEndButtonEndPadding":"hwr","lg_inputEndButtonEndPadding":"npd","lg_labelTopPosition":"yNV","lg_labelPosition":"ehQ","lg_startIconLabel":"cdt","lg_startIcon":"j0z","lg_endClearButtonWrapper":"XLo","lg_ClearButtonWrapper":"OmE"};

const ENTER = 13;
const SPACE = 32;
const TAB = 9;
const SearchFieldWithForwardRef$1 = forwardRef(function TextField({ autoComplete, dataTestId, errorMessage, hasError = false, id, label, labelDisplay, onBlur, onChange, onClick, onFocus, onKeyDown, placeholder, size = 'md', value, }, ref) {
    const innerRef = useRef(null);
    const labelRef = useRef(null);
    // @ts-expect-error - TS2322 - Type 'HTMLDivElement | HTMLInputElement | null' is not assignable to type 'HTMLInputElement'.
    useImperativeHandle(ref, () => innerRef.current);
    const hasErrorMessage = Boolean(errorMessage);
    const isLabelVisible = labelDisplay === 'visible';
    const isClearIconButtonVisible = !!value;
    const isMD = size === 'md';
    const isLG = size === 'lg';
    // ==== STATE ====
    const [focused, setFocused] = useState(false);
    const [ellipsisActive, setEllipsisActive] = useState(false);
    const [iconFocused, setIconFocused] = useState(false);
    // ==== A11Y ====
    const ariaDescribedby = hasErrorMessage ? `${id}-error` : undefined;
    const isEllipsisActive = (element) => element.offsetHeight < element.scrollHeight || element.offsetWidth < element.scrollWidth;
    const checkEllipsisActive = useCallback(() => {
        if (labelRef.current && !ellipsisActive && isEllipsisActive(labelRef === null || labelRef === void 0 ? void 0 : labelRef.current)) {
            setEllipsisActive(true);
        }
        else if (labelRef.current && ellipsisActive && !isEllipsisActive(labelRef === null || labelRef === void 0 ? void 0 : labelRef.current)) {
            setEllipsisActive(false);
        }
    }, [ellipsisActive]);
    useEffect(() => {
        if (!label)
            return () => { };
        checkEllipsisActive();
        if (typeof window !== 'undefined')
            window.addEventListener('resize', checkEllipsisActive);
        return () => {
            if (typeof window !== 'undefined')
                window === null || window === void 0 ? void 0 : window.removeEventListener('resize', checkEllipsisActive);
        };
    }, [label, checkEllipsisActive]);
    return (jsxRuntime.jsxs("div", { children: [jsxRuntime.jsxs("div", { className: classnames(styles$h.inputParent), children: [label && (jsxRuntime.jsx("label", { className: classnames(styles$h.label, {
                            // md
                            [styles$h.md_labelTopPosition]: isMD,
                            [styles$h.md_labelPosition]: isMD,
                            // lg
                            [styles$h.lg_labelTopPosition]: isLG,
                            [styles$h.lg_labelPosition]: isLG,
                            [boxStyles.visuallyHidden]: !isLabelVisible,
                        }), htmlFor: id, children: jsxRuntime.jsx(TextUIWithForwardRef, { ref: labelRef, color: "default", lineClamp: 1, size: "xs", title: ellipsisActive ? label : '', children: label }) })), jsxRuntime.jsx("div", { "aria-hidden": true, className: classnames({
                            [styles$h.startIconLabelWrapper]: label,
                            [styles$h.startIconNoLabelWrapper]: !label || !isLabelVisible,
                            [styles$h.md_startIcon]: isMD,
                            [styles$h.lg_startIcon]: isLG,
                            [styles$h.md_startIconLabel]: label && isMD,
                            [styles$h.lg_startIconLabel]: label && isLG,
                        }), children: jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: "default", icon: "search", size: 16 }) }), jsxRuntime.jsx("input", { ref: innerRef, "aria-describedby": focused ? ariaDescribedby : undefined, "aria-invalid": hasErrorMessage || hasError ? 'true' : 'false', autoComplete: autoComplete, className: classnames(styles$h.input, typographyStyle.truncate, typographyStyle.lineClamp, styles$h.enabled, styles$h.enabledText, {
                            [styles$h.enabledBorder]: !hasErrorMessage,
                            [styles$h.errorBorder]: hasErrorMessage,
                            // md
                            [styles$h.md_input]: isMD,
                            [styles$h.md_inputPadding]: isMD,
                            [styles$h.md_inputLabelPadding]: isMD && label && isLabelVisible,
                            [styles$h.md_inputNoLabelPadding]: isMD && (!label || (label && !isLabelVisible)),
                            [styles$h.md_inputStartPadding]: isMD,
                            [styles$h.md_inputEndButtonEndPadding]: isMD && isClearIconButtonVisible,
                            [styles$h.sm_inputNoEndButtonEndPadding]: isMD && !isClearIconButtonVisible,
                            // lg
                            [styles$h.lg_input]: isLG,
                            [styles$h.lg_inputPadding]: isLG,
                            [styles$h.lg_inputLabelPadding]: isLG && label && isLabelVisible,
                            [styles$h.lg_inputNoLabelPadding]: isLG && (!label || (label && !isLabelVisible)),
                            [styles$h.lg_inputStartPadding]: isLG,
                            [styles$h.lg_inputEndButtonEndPadding]: isLG && isClearIconButtonVisible,
                            [styles$h.lg_inputNoEndButtonEndPadding]: isLG && !isClearIconButtonVisible,
                        }), "data-test-id": dataTestId, enterKeyHint: "search", id: id, onBlur: (event) => {
                            setFocused(false);
                            onBlur === null || onBlur === void 0 ? void 0 : onBlur({ event, value: event.currentTarget.value });
                        }, onChange: (event) => {
                            onChange({ event, value: event.currentTarget.value });
                        }, onClick: (event) => onClick === null || onClick === void 0 ? void 0 : onClick({ event, value: event.currentTarget.value }), onFocus: (event) => {
                            setFocused(true);
                            onFocus === null || onFocus === void 0 ? void 0 : onFocus({ event, value: event.currentTarget.value });
                        }, onKeyDown: (event) => onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown({ event, value: event.currentTarget.value }), placeholder: placeholder, role: "searchbox", value: value }), isClearIconButtonVisible ? (jsxRuntime.jsx("div", { className: classnames(styles$h.endClearButtonWrapper, {
                            [styles$h.md_endClearButtonWrapper]: isMD,
                            [styles$h.lg_endClearButtonWrapper]: isLG,
                        }), children: jsxRuntime.jsx(TapAreaWithForwardRef, { accessibilityLabel: "Clear date", onBlur: () => setIconFocused(false), onFocus: () => setIconFocused(true), onKeyDown: ({ event }) => {
                                var _a;
                                if ([ENTER, SPACE].includes(event.keyCode)) {
                                    (_a = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
                                    // @ts-expect-error - TS2322 - Type 'KeyboardEvent<HTMLDivElement>' is not assignable to type 'ChangeEvent<HTMLInputElement>'.
                                    onChange({ value: '', event });
                                }
                                if (event.keyCode !== TAB)
                                    event.preventDefault();
                            }, onMouseEnter: () => setIconFocused(true), onMouseLeave: () => setIconFocused(false), onTap: ({ event }) => {
                                var _a;
                                (_a = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
                                // @ts-expect-error - TS2322 - Type 'KeyboardEvent<HTMLDivElement>' is not assignable to type 'ChangeEvent<HTMLInputElement>'.
                                onChange({ value: '', event });
                            }, rounding: 2, tapStyle: "compress", children: jsxRuntime.jsx(Pog, { accessibilityLabel: "", bgColor: iconFocused ? 'lightGray' : 'transparent', icon: "clear", iconColor: "darkGray", size: "sm" }) }) })) : null] }), hasErrorMessage ? (jsxRuntime.jsx(FormErrorMessage, { id: `${id}-error`, size: size, text: errorMessage })) : null] }));
});
SearchFieldWithForwardRef$1.displayName = 'SearchField';

/**
 * [SearchField](https://gestalt.pinterest.systems/web/searchfield) allows users to search for free-form content.
 *
 * ![SearchField light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/SearchField.spec.ts-snapshots/SearchField-chromium-darwin.png)
 * ![SearchField dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/SearchField-dark.spec.ts-snapshots/SearchField-dark-chromium-darwin.png)
 *
 */
const SearchFieldWithForwardRef = forwardRef(function SearchField({ accessibilityLabel, accessibilityClearButtonLabel, autoComplete, dataTestId, id, label, labelDisplay = 'visible', onBlur, onChange, onFocus, onKeyDown, placeholder, size = 'md', value, errorMessage, }, ref) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const [hovered, setHovered] = useState(false);
    const [focused, setFocused] = useState(false);
    // Ref to the input
    const inputRef = useRef(null);
    // @ts-expect-error - TS2322 - Type 'HTMLInputElement | null' is not assignable to type 'HTMLInputElement'.
    useImperativeHandle(ref, () => inputRef.current);
    const handleChange = (event) => {
        onChange({
            value: event.currentTarget.value,
            event,
        });
    };
    const handleMouseEnter = () => setHovered(true);
    const handleMouseLeave = () => setHovered(false);
    const handleFocus = (event) => {
        setFocused(true);
        if (onFocus) {
            onFocus({
                value: event.currentTarget.value,
                event,
            });
        }
    };
    const handleBlur = (event) => {
        setFocused(false);
        if (onBlur) {
            onBlur({ value: event.currentTarget.value, event });
        }
    };
    const handleKeyDown = (event) => {
        if (onKeyDown) {
            onKeyDown({ event, value: event.currentTarget.value });
        }
    };
    const hasValue = value && value.length > 0;
    const hideSearchIcon = focused || hasValue;
    const className = classnames(styles$i.input, {
        [Layout.medium]: size === 'md',
        [Layout.large]: size === 'lg',
        [styles$i.inputActive]: focused || hasValue,
        [styles$i.inputHovered]: hovered,
    }, errorMessage ? formElement.errored : formElement.normal);
    if (isInVRExperiment) {
        return (jsxRuntime.jsx(SearchFieldWithForwardRef$1, { ref: ref, autoComplete: autoComplete, dataTestId: dataTestId, errorMessage: errorMessage, id: id, label: label, labelDisplay: labelDisplay, onBlur: onBlur, onChange: onChange, onFocus: onFocus, onKeyDown: onKeyDown, placeholder: placeholder, size: size, value: value }));
    }
    return (jsxRuntime.jsxs("span", { children: [label && jsxRuntime.jsx(FormLabel, { id: id, label: label, labelDisplay: labelDisplay, size: size }), jsxRuntime.jsxs(BoxWithForwardRef, { alignItems: "center", display: "flex", onBlur: handleBlur, onFocus: handleFocus, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, position: "relative", children: [!hideSearchIcon && (jsxRuntime.jsx(BoxWithForwardRef, { dangerouslySetInlineStyle: {
                            __style: {
                                pointerEvents: 'none',
                                // Added the following lines for Safari support
                                top: '50%',
                                transform: 'translateY(-50%)',
                            },
                        }, left: true, paddingX: 4, position: "absolute", right: true, children: jsxRuntime.jsx(Icon, { accessibilityLabel: "", icon: "search" }) })), jsxRuntime.jsx("input", { ref: inputRef, "aria-describedby": errorMessage ? `${id}-error` : null, "aria-invalid": errorMessage ? 'true' : 'false', "aria-label": accessibilityLabel, autoComplete: autoComplete, className: className, id: id, onChange: handleChange, onKeyDown: handleKeyDown, placeholder: placeholder, role: "searchbox", type: "search", value: value }), hasValue && (jsxRuntime.jsx("div", { className: styles$i.clear, children: jsxRuntime.jsx(IconButtonWithForwardRef, { accessibilityLabel: accessibilityClearButtonLabel || '', bgColor: "transparent", icon: "cancel", onClick: ({ event }) => {
                                var _a;
                                (_a = inputRef === null || inputRef === void 0 ? void 0 : inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
                                onChange({ value: '', event });
                            }, padding: size === 'md' ? 1 : undefined, selected: focused, size: "xs" }) }))] }), errorMessage && jsxRuntime.jsx(FormErrorMessage, { id: `${id}-error`, text: errorMessage })] }));
});
SearchFieldWithForwardRef.displayName = 'SearchField';

/**
 * [SearchGuide](https://gestalt.pinterest.systems/web/searchguide) appends and refines a search query. They appear under [SearchField](/web/searchfield) after user submits a search input.
 *
 * ![SearchGuide light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/SearchGuide.spec.ts-snapshots/SearchGuide-chromium-darwin.png)
 * ![SearchGuide dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/SearchGuide-dark.spec.ts-snapshots/SearchGuide-dark-chromium-darwin.png)
 *
 */
const SearchGuideWithForwardRef = forwardRef(function SearchGuide({ accessibilityControls, accessibilityExpanded, accessibilityHaspopup, accessibilityLabel, color = '01', dataTestId, expandable = false, onClick, selected = false, text, thumbnail, }, ref) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const innerRef = useRef(null);
    // When using both forwardRef and innerRef, React.useimperativehandle() allows a parent component
    // that renders <SearchGuide ref={inputRef} /> to call inputRef.current.focus()
    // @ts-expect-error - TS2322 - Type 'HTMLButtonElement | null' is not assignable to type 'HTMLButtonElement'.
    useImperativeHandle(ref, () => innerRef.current);
    const { isFocusVisible } = useFocusVisible();
    const colorClass = {
        '01': 'color01',
        '02': 'color02',
        '03': 'color03',
        '04': 'color04',
        '05': 'color05',
        '06': 'color06',
        '07': 'color07',
        '08': 'color08',
        '09': 'color09',
        '10': 'color10',
        '11': 'color11',
    };
    const buttonClasses = isInVRExperiment
        ? classnames(styles$M.searchguideVr, touchableStyles.tapTransition, {
            [focusStyles.hideOutline]: !isFocusVisible,
            [styles$M.vrFocused]: isFocusVisible,
            [styles$M.selectedVr]: selected,
        })
        : classnames(styles$M.searchguide, touchableStyles.tapTransition, [styles$M[colorClass[color]]], {
            [styles$M.selected]: selected,
            [focusStyles.hideOutline]: !isFocusVisible && !selected,
            [focusStyles.accessibilityOutline]: isFocusVisible,
        });
    const childrenDivClasses = classnames(styles$M.childrenDiv, isInVRExperiment && {
        [styles$M[`color${color}`]]: !selected,
        [styles$M.selectedVr]: selected,
    });
    const textComponent = text.length > 0 ? (jsxRuntime.jsx(TextUIWithForwardRef, { align: "center", color: isInVRExperiment && selected ? 'inverse' : 'dark', overflow: "noWrap", children: text })) : null;
    const thumbnailVariant = thumbnail && (jsxRuntime.jsx(BoxWithForwardRef, { marginEnd: 3, children: jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", gap: { row: 2, column: 0 }, justifyContent: "center", children: ['avatar' in thumbnail && (jsxRuntime.jsx(BoxWithForwardRef, { "aria-hidden": true, marginStart: isInVRExperiment ? 2 : 1, minWidth: 32, children: cloneElement(thumbnail.avatar, { size: 'fit', outline: true }) })), 'avatarGroup' in thumbnail && (jsxRuntime.jsx(BoxWithForwardRef, { "aria-hidden": true, marginStart: isInVRExperiment ? 2 : 1, minWidth: 32, children: cloneElement(thumbnail.avatarGroup, { size: 'sm' }) })), 'image' in thumbnail && (jsxRuntime.jsx("div", { className: isInVRExperiment ? styles$M.imageDivVr : styles$M.imageDiv, children: cloneElement(thumbnail.image, { fit: 'cover' }) })), 'icon' in thumbnail && (jsxRuntime.jsx(BoxWithForwardRef, { marginStart: 3, children: cloneElement(thumbnail.icon, {
                        color: isInVRExperiment && selected ? 'inverse' : 'dark',
                    }) })), text.length > 0 && textComponent, expandable ? (jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: isInVRExperiment && selected ? 'inverse' : 'dark', icon: "arrow-down", size: 12 })) : null] }) }));
    const defaultVariant = (jsxRuntime.jsx(BoxWithForwardRef, { paddingX: 5, children: jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", gap: { row: 2, column: 0 }, justifyContent: "center", children: [textComponent, expandable ? (jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: isInVRExperiment && selected ? 'inverse' : 'dark', icon: "arrow-down", size: 12 })) : null] }) }));
    return (jsxRuntime.jsx("button", { ref: innerRef, "aria-controls": accessibilityControls, "aria-expanded": accessibilityExpanded, "aria-haspopup": accessibilityHaspopup || expandable, "aria-label": accessibilityLabel, "aria-pressed": selected, className: buttonClasses, "data-test-id": dataTestId, onClick: (event) => onClick === null || onClick === void 0 ? void 0 : onClick({ event }), type: "button", children: jsxRuntime.jsx("div", { className: childrenDivClasses, children: thumbnail ? thumbnailVariant : defaultVariant }) }));
});
SearchGuideWithForwardRef.displayName = 'SearchGuide';

/**
 * [SearchGuideLink](https://gestalt.pinterest.systems/web/searchguidelink) appends and refines a search query. They appear under [SearchField](/web/searchfield) after user submits a search input.
 *
 * ![SearchGuideLink light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/SearchGuideLink.spec.ts-snapshots/SearchGuideLink-chromium-darwin.png)
 * ![SearchGuideLink dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/SearchGuideLink-dark.spec.ts-snapshots/SearchGuideLink-dark-chromium-darwin.png)
 *
 */
const SearchGuideLinkWithForwardRef = forwardRef(function SearchGuide({ accessibilityLabel, color = '01', dataTestId, onClick, text, thumbnail, href, rel = 'none', target = null, tabIndex = 0, }, ref) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const innerRef = useRef(null);
    // When using both forwardRef and innerRef, React.useimperativehandle() allows a parent component
    // that renders <SearchGuideLink ref={inputRef} /> to call inputRef.current.focus()
    // @ts-expect-error - TS2322 - Type 'HTMLButtonElement | null' is not assignable to type 'HTMLButtonElement'.
    useImperativeHandle(ref, () => innerRef.current);
    const colorClass = {
        '01': 'color01',
        '02': 'color02',
        '03': 'color03',
        '04': 'color04',
        '05': 'color05',
        '06': 'color06',
        '07': 'color07',
        '08': 'color08',
        '09': 'color09',
        '10': 'color10',
        '11': 'color11',
    };
    const childrenDivClasses = classnames(styles$M.childrenDiv, isInVRExperiment && {
        [styles$M[`color${color}`]]: true,
    });
    const textComponent = (jsxRuntime.jsx(TextUIWithForwardRef, { align: "center", color: "dark", overflow: "noWrap", children: text }));
    const thumbnailVariant = thumbnail && (jsxRuntime.jsx(BoxWithForwardRef, { marginEnd: 3, children: jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", gap: { row: 2, column: 0 }, justifyContent: "center", children: ['avatar' in thumbnail && (jsxRuntime.jsx(BoxWithForwardRef, { "aria-hidden": true, marginStart: isInVRExperiment ? 2 : 1, minWidth: 32, children: cloneElement(thumbnail.avatar, { size: 'fit', outline: true }) })), 'avatarGroup' in thumbnail && (jsxRuntime.jsx(BoxWithForwardRef, { "aria-hidden": true, marginStart: isInVRExperiment ? 2 : 1, minWidth: 32, children: cloneElement(thumbnail.avatarGroup, { size: 'sm' }) })), 'image' in thumbnail && (jsxRuntime.jsx("div", { className: isInVRExperiment ? styles$M.imageDivVr : styles$M.imageDiv, children: cloneElement(thumbnail.image, { fit: 'cover' }) })), 'icon' in thumbnail && (jsxRuntime.jsx(BoxWithForwardRef, { marginStart: 3, children: cloneElement(thumbnail.icon, {
                        color: 'dark',
                    }) })), text.length > 0 && textComponent] }) }));
    const defaultVariant = (jsxRuntime.jsx(BoxWithForwardRef, { paddingX: 5, children: jsxRuntime.jsx(FlexWithForwardRef, { alignItems: "center", gap: { row: 2, column: 0 }, justifyContent: "center", children: textComponent }) }));
    const handleClick = ({ event, dangerouslyDisableOnNavigation, }) => onClick
        ? onClick({
            event,
            dangerouslyDisableOnNavigation: dangerouslyDisableOnNavigation !== null && dangerouslyDisableOnNavigation !== void 0 ? dangerouslyDisableOnNavigation : (() => { }),
        })
        : undefined;
    return (jsxRuntime.jsx(InternalLinkWithForwardRef, { ref: innerRef, "aria-label": accessibilityLabel, colorClass: isInVRExperiment ? undefined : colorClass[color], dataTestId: dataTestId, href: href, onClick: handleClick, rel: rel, tabIndex: tabIndex, target: target, wrappedComponent: "searchGuide", children: jsxRuntime.jsx("div", { className: childrenDivClasses, children: thumbnail ? thumbnailVariant : defaultVariant }) }));
});
SearchGuideLinkWithForwardRef.displayName = 'SearchGuideLink';

var styles$g = {"SegmentedControl":"l92 Hsu _O1 b8T","sm":"wg1","md":"XTe","lg":"BXc","item":"ope ujU e43 adn BG7","itemIsNotSelected":"izI","itemIsSelected":"zHr"};

const getDensityStyles = (s) => {
    switch (s) {
        case 'sm':
            return { fontSize: '200', iconSize: 16 };
        case 'lg':
            return { fontSize: '300', iconSize: 24 };
        case 'md':
        default:
            return { fontSize: '300', iconSize: 20 };
    }
};
const applyDensityStyle = (s) => styles$g[`${s}`];
// layout.css contains a mapping of size to min-height
const applyMinHeight = (s) => {
    const lookup = { 'sm': 'small', 'md': 'medium', 'lg': 'large' };
    return Layout[`${lookup[s]}`];
};
function SegmentedControlItem({ index, item, isSelected, onChange, size = 'md', width, }) {
    const { isFocusVisible } = useFocusVisible();
    const cs = classnames(styles$g.item, {
        [styles$g.itemIsNotSelected]: !isSelected,
        [styles$g.itemIsSelected]: isSelected,
        [focusStyles.hideOutline]: !isFocusVisible,
        [focusStyles.accessibilityOutline]: isFocusVisible,
    }, applyDensityStyle(size));
    const { fontSize, iconSize } = getDensityStyles(size);
    return (jsxRuntime.jsx("button", { "aria-selected": isSelected, className: cs, onClick: (event) => onChange({ event, activeIndex: index }), role: "tab", 
        // @ts-expect-error - TS2322 - Type 'string | null | undefined' is not assignable to type 'Width<string | number> | undefined'.
        style: { width }, type: "button", children: typeof item === 'string' ? (
        // @ts-expect-error - TS2322 - Type 'string' is not assignable to type 'Size | undefined'.
        jsxRuntime.jsx(TextWithForwardRef, { align: "center", color: "default", size: fontSize, weight: "bold", children: item })) : (jsxRuntime.jsx(BoxWithForwardRef, { display: "flex", justifyContent: "center", children: typeof item === 'object' && item && item.type && item.type.displayName === 'Icon'
                ? // @ts-expect-error - TS2769 - No overload matches this call.
                    cloneElement(item, { size: iconSize })
                : item })) }));
}
/**
 * [SegmentedControl](https://gestalt.pinterest.systems/web/segmentedcontrol)  may be used to group multiple selections. The controls display the current state and related state.
 *
 * Create layout to convey clear sense of information hierarchy. When a control is engaged, information below the control should also be updated.
 *
 * ![SegmentedControl light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/SegmentedControl.spec.ts-snapshots/SegmentedControl-chromium-darwin.png)
 * ![SegmentedControl dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/SegmentedControl-dark.spec.ts-snapshots/SegmentedControl-dark-chromium-darwin.png)
 *
 */
function SegmentedControl({ items, onChange, responsive, selectedItemIndex, size = 'md', }) {
    const buttonWidth = responsive ? undefined : `${Math.floor(100 / Math.max(1, items.length))}%`;
    return (jsxRuntime.jsx("div", { className: classnames(styles$g.SegmentedControl, applyMinHeight(size), applyDensityStyle(size)), role: "tablist", children: items.map((item, i) => (jsxRuntime.jsx(SegmentedControlItem
        // eslint-disable-next-line react/no-array-index-key
        , { index: i, isSelected: i === selectedItemIndex, item: item, onChange: onChange, size: size, width: buttonWidth }, i))) }));
}
SegmentedControl.displayName = 'SegmentedControl';

var styles$f = {"select":"eMC tBJ dyH iFc sAJ BG7 XiG L4E","placeholder":"YNJ","selected":"jA0","enabled":"yur"};

/**
 * Use [SelectList.Group](https://gestalt.pinterest.systems/selectlist#SelectList.Group) to group a subset of the options within SelectList.
 */
function SelectListGroup({ children, disabled, label }) {
    return (jsxRuntime.jsx("optgroup", { disabled: disabled, label: label, children: children }));
}
SelectListGroup.displayName = 'SelectList.Group';

/**
 * Use [SelectList.Option](https://gestalt.pinterest.systems/selectlist#SelectList.Option) to define the available options within SelectList.
 */
function SelectListOption({ disabled, label, value }) {
    return (jsxRuntime.jsx("option", { disabled: disabled, value: value, children: label }));
}
SelectListOption.displayName = 'SelectList.Option';

var styles$e = {"inputStyle":"REf","placeholderText":"UpH","enabledText":"AEx","disabledText":"VTS","enabled":"khZ","disabled":"a8S","enabledBorder":"x7d","errorBorder":"Arg","disabledBorder":"OUV","inputParent":"BLm","input":"bC1","label":"n8P","visuallyHidden":"faD","endIconContainer":"Tbi","md_input":"qJQ Q1L Ucg","md_inputLabelPadding":"BAE","md_inputNoLabelPadding":"yr3","md_inputStartPadding":"ugm","md_inputEndButtonEndPadding":"Ezn","md_labelTopPosition":"dtB","md_labelPosition":"ccR","md_endIconContainer":"mRX","lg_input":"Shn Q1L Ucg","lg_inputLabelPadding":"N2F","lg_inputNoLabelPadding":"kD1","lg_inputStartPadding":"fmK","lg_inputEndButtonEndPadding":"mLH","lg_labelTopPosition":"DTf","lg_labelPosition":"mhD","lg_endIconContainer":"PY6"};

function IconEnd({ disabled, size }) {
    const isMD = size === 'md';
    const isLG = size === 'lg';
    return (jsxRuntime.jsx("div", { className: classnames(styles$e.endIconContainer, {
            [styles$e.md_endIconContainer]: isMD,
            [styles$e.lg_endIconContainer]: isLG,
        }), children: jsxRuntime.jsx(BoxWithForwardRef, { alignItems: "center", "aria-hidden": true, display: "flex", height: "100%", marginEnd: 2, rounding: "circle", children: jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: disabled ? 'subtle' : 'default', icon: "arrow-down", size: 12 }) }) }));
}

const SelectListWithForwardRef = forwardRef(function InternalSelectList({ dataTestId, children, disabled = false, errorMessage, helperText, id, label, labelDisplay = 'visible', name, onBlur, onChange, onFocus, placeholder, size = 'md', value, }, ref) {
    const innerRef = useRef(null);
    const labelRef = useRef(null);
    // @ts-expect-error - TS2322 - Type 'HTMLDivElement | HTMLInputElement | null' is not assignable to type 'HTMLInputElement'.
    useImperativeHandle(ref, () => innerRef.current);
    const hasErrorMessage = Boolean(errorMessage);
    const isLabelVisible = labelDisplay === 'visible';
    const showPlaceholder = placeholder && !value;
    const isMD = size === 'md';
    const isLG = size === 'lg';
    // ==== STATE ====
    const [focused, setFocused] = useState(false);
    const [ellipsisActive, setEllipsisActive] = useState(false);
    // ==== A11Y ====
    let ariaDescribedby;
    if (hasErrorMessage) {
        ariaDescribedby = `${id}-error`;
    }
    if (helperText) {
        ariaDescribedby = `${id}-helperText`;
    }
    const isEllipsisActive = (element) => element.offsetHeight < element.scrollHeight || element.offsetWidth < element.scrollWidth;
    const checkEllipsisActive = useCallback(() => {
        if (labelRef.current && !ellipsisActive && isEllipsisActive(labelRef === null || labelRef === void 0 ? void 0 : labelRef.current)) {
            setEllipsisActive(true);
        }
        else if (labelRef.current && ellipsisActive && !isEllipsisActive(labelRef === null || labelRef === void 0 ? void 0 : labelRef.current)) {
            setEllipsisActive(false);
        }
    }, [ellipsisActive]);
    useEffect(() => {
        if (!label)
            return () => { };
        checkEllipsisActive();
        if (typeof window !== 'undefined')
            window.addEventListener('resize', checkEllipsisActive);
        return () => {
            if (typeof window !== 'undefined')
                window === null || window === void 0 ? void 0 : window.removeEventListener('resize', checkEllipsisActive);
        };
    }, [label, checkEllipsisActive]);
    return (jsxRuntime.jsxs("div", { children: [jsxRuntime.jsxs("div", { className: classnames(styles$e.inputParent, {
                    [styles$e.enabled]: !disabled,
                    [styles$e.disabled]: disabled,
                }), children: [label && (jsxRuntime.jsx("label", { className: classnames(styles$e.label, {
                            [boxStyles.visuallyHidden]: !isLabelVisible,
                            // md
                            [styles$e.md_labelTopPosition]: isMD,
                            [styles$e.md_labelPosition]: isMD,
                            // lg
                            [styles$e.lg_labelTopPosition]: isLG,
                            [styles$e.lg_labelPosition]: isLG,
                        }), htmlFor: id, title: ellipsisActive ? label : '', children: jsxRuntime.jsx(TextUIWithForwardRef, { ref: labelRef, color: disabled ? 'disabled' : 'default', lineClamp: 1, size: "xs", title: ellipsisActive ? label : '', children: label }) })), !disabled && jsxRuntime.jsx(IconEnd, { disabled: disabled, size: size }), jsxRuntime.jsxs("select", { "aria-describedby": focused ? ariaDescribedby : undefined, "aria-invalid": hasErrorMessage ? 'true' : 'false', className: classnames(styles$e.input, styles$e.inputStyle, typographyStyle.truncate, {
                            [styles$e.placeholderText]: !disabled && placeholder && !value,
                            [styles$e.enabledText]: (!disabled && placeholder && value) || (!disabled && !placeholder),
                            [styles$e.enabledBorder]: !disabled && !hasErrorMessage,
                            [styles$e.errorBorder]: !disabled && hasErrorMessage,
                            [styles$e.disabledText]: disabled,
                            [styles$e.disabledBorder]: disabled,
                            // md
                            [styles$e.md_input]: isMD,
                            [styles$e.md_inputPadding]: isMD,
                            [styles$e.md_inputStartPadding]: isMD,
                            [styles$e.md_inputEndButtonEndPadding]: isMD,
                            [styles$e.md_inputLabelPadding]: isMD && label && isLabelVisible,
                            [styles$e.md_inputNoLabelPadding]: isMD && (!label || (label && !isLabelVisible)),
                            // lg
                            [styles$e.lg_input]: isLG,
                            [styles$e.lg_inputPadding]: isLG,
                            [styles$e.lg_inputStartPadding]: isLG,
                            [styles$e.lg_inputEndButtonEndPadding]: isLG,
                            [styles$e.lg_inputLabelPadding]: isLG && label && isLabelVisible,
                            [styles$e.lg_inputNoLabelPadding]: isLG && (!label || (label && !isLabelVisible)),
                        }), "data-test-id": dataTestId, disabled: disabled, id: id, name: name, onBlur: (event) => {
                            onBlur === null || onBlur === void 0 ? void 0 : onBlur({ event, value: event.currentTarget.value });
                            setFocused(false);
                        }, onChange: (event) => {
                            if (value !== event.target.value) {
                                onChange({ event, value: event.target.value });
                            }
                        }, onFocus: (event) => {
                            onFocus === null || onFocus === void 0 ? void 0 : onFocus({ event, value: event.currentTarget.value });
                            setFocused(true);
                        }, placeholder: placeholder, 
                        // @ts-expect-error - TS2322 - Type 'string | null | undefined' is not assignable to type 'string | number | readonly string[] | undefined'.
                        value: showPlaceholder ? placeholder : value, children: [showPlaceholder && (jsxRuntime.jsx("option", { disabled: true, hidden: true, value: placeholder, children: placeholder })), children] })] }), helperText && !hasErrorMessage ? (jsxRuntime.jsx(FormHelperText, { disabled: disabled, id: `${id}-helperText`, size: size, text: helperText })) : null, !disabled && hasErrorMessage ? (jsxRuntime.jsx(FormErrorMessage, { id: `${id}-error`, size: size, text: errorMessage })) : null] }));
});
SelectListWithForwardRef.displayName = 'InternalSelectList';

/**
 * [SelectList](https://gestalt.pinterest.systems/web/selectlist) displays a list of actions or options using the browser’s native select.
 *
 * ![SelectList light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/SelectList.spec.ts-snapshots/SelectList-chromium-darwin.png)
 * ![SelectList dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/SelectList-dark.spec.ts-snapshots/SelectList-dark-chromium-darwin.png)
 *
 */
function SelectList({ dataTestId, children, disabled = false, errorMessage, helperText, id, label, labelDisplay = 'visible', name, onBlur, onChange, onFocus, placeholder, size = 'md', value, }) {
    const [focused, setFocused] = useState(false);
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const handleOnChange = (event) => {
        if (value !== event.target.value) {
            onChange({ event, value: event.target.value });
        }
    };
    const handleBlur = (event) => {
        const { value: eventValue } = event.target;
        onBlur === null || onBlur === void 0 ? void 0 : onBlur({ event, value: eventValue });
        handleOnChange(event);
        setFocused(false);
    };
    const handleFocus = (event) => {
        const { value: eventValue } = event.target;
        onFocus === null || onFocus === void 0 ? void 0 : onFocus({ event, value: eventValue });
        setFocused(true);
    };
    const classes = classnames(styles$f.select, formElement.base, size === 'md' ? Layout.medium : Layout.large, {
        [styles$f.placeholder]: !disabled && placeholder && !value,
        [styles$f.selected]: (!disabled && placeholder && value) || (!disabled && !placeholder),
        [styles$f.enabled]: !disabled,
        [formElement.md]: size === 'md',
        [formElement.lg]: size === 'lg',
        [formElement.normal]: !errorMessage,
        [formElement.disabled]: disabled,
        [formElement.errored]: !disabled && !!errorMessage,
    });
    const showPlaceholder = placeholder && !value;
    let ariaDescribedby;
    if (errorMessage) {
        ariaDescribedby = `${id}-error`;
    }
    if (label && helperText) {
        ariaDescribedby = `${id}-helperText`;
    }
    if (isInVRExperiment) {
        return (jsxRuntime.jsx(SelectListWithForwardRef, { dataTestId: dataTestId, disabled: disabled, errorMessage: errorMessage, helperText: helperText, id: id, label: label, labelDisplay: labelDisplay, name: name, onBlur: onBlur, onChange: onChange, onFocus: onFocus, placeholder: placeholder, size: size, value: value, children: children }));
    }
    return (jsxRuntime.jsxs(BoxWithForwardRef, { children: [label && jsxRuntime.jsx(FormLabel, { id: id, label: label, labelDisplay: labelDisplay, size: size }), jsxRuntime.jsxs(BoxWithForwardRef, { dangerouslySetInlineStyle: {
                    __style: { backgroundColor: TOKEN_COLOR_BACKGROUND_FORMFIELD_PRIMARY },
                }, display: "flex", position: "relative", rounding: 4, width: "100%", children: [jsxRuntime.jsx(BoxWithForwardRef, { alignItems: "center", bottom: true, dangerouslySetInlineStyle: {
                            __style: { paddingRight: 14, paddingTop: 2 },
                        }, display: "flex", position: "absolute", right: true, top: true, children: jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: disabled ? 'subtle' : 'default', icon: "arrow-down", size: 12 }) }), jsxRuntime.jsxs("select", { "aria-describedby": focused ? ariaDescribedby : undefined, "aria-invalid": errorMessage ? 'true' : 'false', className: classes, "data-test-id": dataTestId, disabled: disabled, id: id, name: name, onBlur: handleBlur, onChange: handleOnChange, onFocus: handleFocus, 
                        // @ts-expect-error - TS2322 - Type 'string | null | undefined' is not assignable to type 'string | number | readonly string[] | undefined'.
                        value: showPlaceholder ? placeholder : value, children: [showPlaceholder && (jsxRuntime.jsx("option", { disabled: true, hidden: true, value: placeholder, children: placeholder })), children] })] }), helperText && !errorMessage ? (jsxRuntime.jsx(FormHelperText, { id: `${id}-helperText`, text: helperText })) : null, errorMessage && jsxRuntime.jsx(FormErrorMessage, { id: `${id}-error`, text: errorMessage })] }));
}
SelectList.Option = SelectListOption;
SelectList.Group = SelectListGroup;
SelectList.displayName = 'SelectList';

/**
 * [SheetMobile](https://gestalt.pinterest.systems/web/sheetmobile) is a mobile only component. It is not used in desktop experiences.
 *
 * SheetMobile is a supplementary container that sits on top of the screen’s primary content and can be dismissed in order to interact with the underlying content. Sheets can contain a wide variety of information and layouts, including menu items, actions, and supplemental content.
 *
 *
 * ![SheetMobile light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/SheetMobile.spec.ts-snapshots/SheetMobile-chromium-darwin.png)
 * ![SheetMobile dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/SheetMobile-dark.spec.ts-snapshots/SheetMobile-dark-chromium-darwin.png)
 *
 */
function SheetMobile({ align = 'start', backIconButton, children, closeOnOutsideClick = true, forwardIconButton, onAnimationEnd, onDismiss, onOutsideClick, footer, padding, primaryAction, heading, role = 'dialog', showDismissButton = true, subHeading, size = 'default', zIndex, }) {
    if (size === 'full')
        return (jsxRuntime.jsx(FullPage, { align: align, backIconButton: backIconButton, footer: footer, forwardIconButton: forwardIconButton, heading: heading, onDismiss: onDismiss, padding: padding, primaryAction: primaryAction, role: role, showDismissButton: true, subHeading: subHeading, children: children }));
    if (['default', 'auto'].includes(size))
        return (jsxRuntime.jsx(AnimationProvider, { children: jsxRuntime.jsx(RequestAnimationFrameProvider, { children: jsxRuntime.jsx(PartialPage, { align: align, backIconButton: backIconButton, closeOnOutsideClick: closeOnOutsideClick, footer: footer, forwardIconButton: forwardIconButton, heading: heading, 
                    // @ts-expect-error - TS2322 - Type '((arg1: { animationState: "in" | "out"; }) => void) | undefined' is not assignable to type '(arg1: { animationState: "in" | "out"; }) => void | null | undefined'.
                    onAnimationEnd: onAnimationEnd, onDismiss: onDismiss, onOutsideClick: onOutsideClick, padding: padding, primaryAction: primaryAction, role: role, showDismissButton: showDismissButton, size: size, subHeading: subHeading, zIndex: zIndex, children: children }) }) }));
    throw new Error(`Gestalt SheetMobile only accepts three valid size values: 'default', 'auto', and 'full'. Please, provide a valid size value.`);
}
SheetMobile.DismissingElement = DismissingElement;
SheetMobile.displayName = 'SheetMobile';

const SideNavigationContext = createContext({
    selectedItemId: '',
    setSelectedItemId: () => { },
    selectedMobileChildren: null,
    setSelectedMobileChildren: () => { },
    hideActiveChildren: false,
    setHideActiveChildren: () => { },
    overlayPreview: false,
    setOverlayPreview: () => { },
    setTransitioning: () => { },
});
const { Provider: Provider$1, Consumer: SideNavigationConsumer } = SideNavigationContext;
function SideNavigationProvider({ children, dismissButton, collapsible, collapsed, onCollapse: onCollapseProp, onPreview, }) {
    const [selectedItemId, setSelectedItemId] = useState('');
    const [selectedMobileChildren, setSelectedMobileChildren] = useState(null);
    const [hideActiveChildren, setHideActiveChildren] = useState(false);
    const [overlayPreview, setOverlayPreviewCb] = useState(false);
    const [transitioning, setTransitioning] = useState(false);
    const onCollapse = (state) => {
        if (collapsed !== state)
            setTransitioning(true);
        onCollapseProp === null || onCollapseProp === void 0 ? void 0 : onCollapseProp(state);
    };
    const setOverlayPreview = (state) => {
        if (overlayPreview !== state)
            setTransitioning(true);
        setOverlayPreviewCb(state);
        onPreview === null || onPreview === void 0 ? void 0 : onPreview(state);
    };
    const sideNavigationContext = {
        selectedItemId,
        setSelectedItemId,
        selectedMobileChildren,
        setSelectedMobileChildren,
        hideActiveChildren,
        setHideActiveChildren,
        overlayPreview,
        setOverlayPreview,
        dismissButton,
        collapsible,
        collapsed,
        onCollapse,
        transitioning,
        setTransitioning,
    };
    return jsxRuntime.jsx(Provider$1, { value: sideNavigationContext, children: children });
}
function useSideNavigation() {
    return useContext(SideNavigationContext);
}

function ItemsEllipsis({ active, accessibilityLabel, notificationAccessibilityLabel, }) {
    const { setOverlayPreview } = useSideNavigation();
    const { accessibilityEllipsisLabel: deafultAccessibilityEllipsisLabel } = useDefaultLabelContext('SideNavigation');
    return (jsxRuntime.jsx(TapAreaWithForwardRef, { accessibilityLabel: accessibilityLabel || deafultAccessibilityEllipsisLabel, onTap: () => setOverlayPreview(true), rounding: 2, children: jsxRuntime.jsxs(BoxWithForwardRef, { alignItems: "center", color: active === 'page' ? 'selected' : undefined, display: "flex", height: 44, justifyContent: "center", position: "relative", rounding: 2, width: 44, children: [notificationAccessibilityLabel ? (jsxRuntime.jsx(BoxWithForwardRef, { "aria-label": notificationAccessibilityLabel, color: "primary", dangerouslySetInlineStyle: { __style: { top: 4, right: 4 } }, height: 8, position: "absolute", role: "status", rounding: "circle", width: 8 })) : null, jsxRuntime.jsx(BoxWithForwardRef, { "aria-hidden": true, children: jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: active === 'page' ? 'inverse' : 'default', icon: "ellipsis", inline: true, size: 20 }) })] }) }));
}

var styles$d = {"ulItem":"p_1","liItem":"rp6","borderExpandableSelected":"fk9","fullHeight":"pOA","contentWidthTransition":"X45","section":"B3O","sectionStartDivider":"oRn","sectionEndDivider":"txr"};

// Function is copied from "react-keyed-flatten-children" and modified for simplicity
// https://github.com/grrowl/react-keyed-flatten-children/blob/master/index.ts
function flattenChildrenWithKeys(children, depth = 0, keys = []) {
    return Children.toArray(children).reduce((acc, node, nodeIndex) => {
        // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        if (node.type === Fragment) {
            acc.push(...flattenChildrenWithKeys(
            // @ts-expect-error - TS2339 - Property 'props' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
            node.props.children, depth + 1, 
            // @ts-expect-error - TS2339 - Property 'key' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
            keys.concat(node.key || nodeIndex)));
        }
        else if (isValidElement(node)) {
            acc.push(cloneElement(node, {
                key: keys.concat(String(node.key)).join('.'),
            }));
        }
        else if (typeof node === 'string' || typeof node === 'number') {
            acc.push(node);
        }
        return acc;
    }, []);
}
/**
 * Do not use if the children need to be rendered.
 * Use `flattenChildrenWithKeys` to render
 * as it assigns keys to the children without keys.
 * */
function flattenChildren(children) {
    return Children.toArray(children).reduce((acc, child) => {
        // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        if (child.type !== Fragment)
            return acc.concat(child);
        // @ts-expect-error - TS2339 - Property 'props' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        return acc.concat(flattenChildren(child.props.children));
    }, []);
}

const ALLOWED_CHILDREN_MAP = {
    main: ['SideNavigation.Section', 'SideNavigation.TopItem', 'SideNavigation.Group'],
    nested: ['SideNavigation.NestedItem', 'SideNavigation.NestedGroup'],
};
function validateChildren({ children, filterLevel, }) {
    children.forEach((child) => {
        const isTopLevel = filterLevel === 'main';
        // @ts-expect-error - TS2345 - Argument of type 'any' is not assignable to parameter of type 'never'. | TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        if (!ALLOWED_CHILDREN_MAP[filterLevel].includes(child.type.displayName)) {
            throw new Error(
            // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
            `Gestalt ${child.type.displayName} cannot be used at ${isTopLevel ? 'the top' : 'a nested'} level`);
        }
    });
}
function countItemsWithIcon(children) {
    // @ts-expect-error - TS2322 - Type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal' is not assignable to type 'number'.
    return flattenChildren(children).reduce((count, child) => 
    // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
    child.type.displayName === 'SideNavigation.Section'
        ? // @ts-expect-error - TS2365 - Operator '+' cannot be applied to types 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal' and 'number'. | TS2339 - Property 'props' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
            count + countItemsWithIcon(child.props.children)
        : // @ts-expect-error - TS2365 - Operator '+' cannot be applied to types 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal' and 'number'. | TS2339 - Property 'props' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
            count + Number(Boolean(child.props.icon)), 0);
}
function getChildrenActiveProp(children) {
    var _a;
    if (children.length === 0)
        return undefined;
    // @ts-expect-error - TS2339 - Property 'props' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
    const activeChild = children.find((child) => { var _a; return !!((_a = child.props) === null || _a === void 0 ? void 0 : _a.active); });
    // @ts-expect-error - TS2339 - Property 'props' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'. | TS2339 - Property 'props' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
    if ((_a = activeChild === null || activeChild === void 0 ? void 0 : activeChild.props) === null || _a === void 0 ? void 0 : _a.active)
        return activeChild.props.active;
    const grandChildren = children
        .filter((child) => {
        var _a, _b;
        // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        return ((_a = child === null || child === void 0 ? void 0 : child.type) === null || _a === void 0 ? void 0 : _a.displayName) === 'SideNavigation.Group' ||
            // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
            ((_b = child === null || child === void 0 ? void 0 : child.type) === null || _b === void 0 ? void 0 : _b.displayName) === 'SideNavigation.NestedGroup';
    })
        // @ts-expect-error - TS2339 - Property 'props' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        .map((child) => { var _a; return flattenChildren((_a = child === null || child === void 0 ? void 0 : child.props) === null || _a === void 0 ? void 0 : _a.children); })
        .flat();
    return getChildrenActiveProp(grandChildren);
}
function renderEllipses(items) {
    return items.map((item, i) => {
        // @ts-expect-error - TS2339 - Property 'props' does not exist on type 'Props | ReactElement<never, string | JSXElementConstructor<any>>'.
        if (item.props)
            return item;
        return (
        // eslint-disable-next-line react/no-array-index-key
        jsxRuntime.jsx("li", { className: classnames(styles$d.liItem), children: jsxRuntime.jsx(ItemsEllipsis, Object.assign({}, item)) }, i));
    });
}
/**
 * Reduces `TopItem` and `Group` items into ellipsis if they have no icons.
 * This is for items that are not inside `Section`.
 * If there are `TopItem` or `Group` items before and after `Section`s,
 * each portion will have separate ellipses for iconless items.
 * Ellipses are added as props object, not a component, during the process,
 * so it is easier to update.
 */
function reduceIconlessChildrenIntoEllipsis(children) {
    // @ts-expect-error - TS7034 - Variable 'lastEllipsisIndex' implicitly has type 'any' in some locations where its type cannot be determined.
    let lastEllipsisIndex;
    // @ts-expect-error - TS7034 - Variable 'lastSectionIndex' implicitly has type 'any' in some locations where its type cannot be determined.
    let lastSectionIndex;
    const items = children.reduce((acc, child, index) => {
        // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        const isSection = child.type.displayName === 'SideNavigation.Section';
        // @ts-expect-error - TS2339 - Property 'props' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        const shouldSkip = isSection || !!child.props.icon;
        // Keep track of last section index
        if (isSection)
            lastSectionIndex = index;
        // Sections or items with icons are skipped and just added to the items list.
        if (shouldSkip)
            return acc.concat(child);
        // @ts-expect-error - TS2339 - Property 'props' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        const { notificationAccessibilityLabel, active } = child.props;
        // Create new ellipsis if there are no ellipses
        // or after the last ellipsis there is a section.
        // @ts-expect-error - TS7005 - Variable 'lastEllipsisIndex' implicitly has an 'any' type. | TS7005 - Variable 'lastEllipsisIndex' implicitly has an 'any' type. | TS7005 - Variable 'lastSectionIndex' implicitly has an 'any' type.
        if (lastEllipsisIndex === undefined || lastEllipsisIndex < lastSectionIndex) {
            const ellipsis = {};
            lastEllipsisIndex = index;
            acc.push(ellipsis);
        }
        // Take the last ellipsis from the resulting list of items.
        // @ts-expect-error - TS2339 - Property 'at' does not exist on type 'any[]'. | TS7005 - Variable 'lastEllipsisIndex' implicitly has an 'any' type.
        const lastEllipsis = acc.at(lastEllipsisIndex);
        if (lastEllipsis) {
            // Set notification label of the current child to the last ellipsis
            // unless the ellipsis already has a notification label.
            lastEllipsis.notificationAccessibilityLabel || (lastEllipsis.notificationAccessibilityLabel = notificationAccessibilityLabel);
            // Set ellipsis active prop if the current child or
            // one of its nested children is active.
            if (active) {
                lastEllipsis.active || (lastEllipsis.active = active);
                // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
            }
            else if (child.type.displayName === 'SideNavigation.Group') {
                // @ts-expect-error - TS2339 - Property 'props' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
                lastEllipsis.active || (lastEllipsis.active = getChildrenActiveProp(flattenChildren(child.props.children)));
            }
        }
        return acc;
    }, []);
    // @ts-expect-error - TS2322 - Type '(Element | Props)[]' is not assignable to type 'readonly ReactNode[]'.
    return renderEllipses(items);
}

/** @deprecated */
const getChildrenToArray$1 = ({ children, filterLevel, }) => {
    // @ts-expect-error - TS7034 - Variable 'navigationChildren' implicitly has type 'any[]' in some locations where its type cannot be determined.
    const navigationChildren = [];
    let recursionLevel = 0;
    const getChildren = ({ nodeChildren }) => Children.toArray(nodeChildren).forEach((child) => {
        // Detect incorrect subcomponent usage at the main level
        // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        if (filterLevel === 'main' && ALLOWED_CHILDREN_MAP.nested.includes(child.type.displayName)) {
            // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
            throw new Error(`Gestalt ${child.type.displayName} cannot be used at the top level`);
        }
        // Detect incorrect subcomponent usage at the nested level
        // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        if (filterLevel === 'nested' && ALLOWED_CHILDREN_MAP.main.includes(child.type.displayName)) {
            // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
            throw new Error(`Gestalt ${child.type.displayName} cannot be used in a nested level`);
        }
        // Get and return valid children
        // @ts-expect-error - TS2345 - Argument of type 'any' is not assignable to parameter of type 'never'. | TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        if (ALLOWED_CHILDREN_MAP[filterLevel].includes(child.type.displayName)) {
            navigationChildren.push(child);
            // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        }
        else if ((child === null || child === void 0 ? void 0 : child.type) === Fragment) {
            recursionLevel += 1;
            if (recursionLevel < 2) {
                // @ts-expect-error - TS2339 - Property 'props' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
                getChildren({ nodeChildren: child.props.children });
            }
        }
    });
    getChildren({ nodeChildren: children });
    // @ts-expect-error - TS7005 - Variable 'navigationChildren' implicitly has an 'any[]' type.
    return navigationChildren;
};

function SideNavigationMobile({ accessibilityLabel, children, footer, header, id, mobileTitle, dismissButton, showBorder, }) {
    const dismissButtonRef = useRef(null);
    const navigationChildren = getChildrenToArray$1({
        children,
        filterLevel: 'main',
    });
    const { selectedMobileChildren } = useSideNavigation();
    useEffect(() => {
        if (dismissButtonRef.current) {
            dismissButtonRef.current.focus();
        }
    }, [dismissButtonRef]);
    return (jsxRuntime.jsx(BoxWithForwardRef, { "aria-label": accessibilityLabel, as: "nav", height: "100%", id: id, width: "100%", children: jsxRuntime.jsx("div", { className: showBorder ? classnames(borderStyles.borderRight, styles$d.fullHeight) : undefined, children: jsxRuntime.jsx(BoxWithForwardRef, { color: "default", dangerouslySetInlineStyle: { __style: { paddingBottom: 24 } }, padding: 2, children: selectedMobileChildren !== null && selectedMobileChildren !== void 0 ? selectedMobileChildren : (jsxRuntime.jsxs(Fragment, { children: [jsxRuntime.jsx(BoxWithForwardRef, { height: 64, paddingY: 2, children: jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", height: "100%", justifyContent: "center", children: [jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "grow", children: jsxRuntime.jsx(FlexWithForwardRef, { alignItems: "center", height: "100%", justifyContent: "start", children: jsxRuntime.jsx(Heading, { lineClamp: 1, size: "400", children: mobileTitle }) }) }), jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "none", children: jsxRuntime.jsx(InternalDismissIconButtonWithForwardRef
                                        // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLAnchorElement | HTMLButtonElement | null>' is not assignable to type 'LegacyRef<HTMLButtonElement> | undefined'.
                                        , { 
                                            // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLAnchorElement | HTMLButtonElement | null>' is not assignable to type 'LegacyRef<HTMLButtonElement> | undefined'.
                                            ref: dismissButtonRef, accessibilityControls: id, accessibilityLabel: (dismissButton === null || dismissButton === void 0 ? void 0 : dismissButton.accessibilityLabel) || '', onClick: () => dismissButton === null || dismissButton === void 0 ? void 0 : dismissButton.onDismiss() }) })] }) }), jsxRuntime.jsxs(FlexWithForwardRef, { direction: "column", gap: { column: 4, row: 0 }, children: [header ? (jsxRuntime.jsxs(FlexWithForwardRef, { direction: "column", gap: { column: 4, row: 0 }, children: [jsxRuntime.jsx(BoxWithForwardRef, { paddingX: 4, children: header }), jsxRuntime.jsx(Divider, {})] })) : null, jsxRuntime.jsx("ul", { className: classnames(styles$d.ulItem), children: navigationChildren }), footer ? (jsxRuntime.jsxs(FlexWithForwardRef, { direction: "column", gap: { column: 4, row: 0 }, children: [jsxRuntime.jsx(Divider, {}), jsxRuntime.jsx(BoxWithForwardRef, { paddingX: 4, children: footer })] })) : null] })] })) }) }) }));
}

const DEFAULT_ZINDEX = new FixedZIndex(1);
/**
 * [Sticky](https://gestalt.pinterest.systems/web/sticky) allows an element to become fixed when it reaches a threshold (top, left, bottom, or right).
 *
 * ![Sticky](https://raw.githubusercontent.com/pinterest/gestalt/master/docs/graphics/building-blocks/Sticky.svg)
 */
function Sticky({ bottom, children, height, left, right, top, zIndex }) {
    const style = Object.assign(Object.assign({}, (height !== undefined ? { height } : {})), { top: top != null ? top : undefined, left: left != null ? left : undefined, right: right != null ? right : undefined, bottom: bottom != null ? bottom : undefined, zIndex: (zIndex !== null && zIndex !== void 0 ? zIndex : DEFAULT_ZINDEX).index() });
    return (jsxRuntime.jsx("div", { className: Layout.sticky, style: style, children: children }));
}
Sticky.displayName = 'Sticky';

function Collapser({ raised }) {
    const { collapsed, overlayPreview, onCollapse, setOverlayPreview } = useSideNavigation();
    const { accessibilityCollapseButtonLabel, accessibilityExpandButtonLabel } = useDefaultLabelContext('SideNavigation');
    return (jsxRuntime.jsx(Sticky, { top: 0, children: jsxRuntime.jsx(BoxWithForwardRef, { borderStyle: raised ? 'raisedTopShadow' : undefined, color: raised ? 'default' : undefined, display: "flex", justifyContent: collapsed && !overlayPreview ? 'center' : 'end', marginBottom: -2, padding: 2, children: jsxRuntime.jsx(IconButtonWithForwardRef, { accessibilityLabel: collapsed ? accessibilityExpandButtonLabel : accessibilityCollapseButtonLabel, icon: collapsed ? 'arrow-double-forward' : 'arrow-double-back', onClick: () => {
                    onCollapse === null || onCollapse === void 0 ? void 0 : onCollapse(!collapsed);
                    if (collapsed)
                        setOverlayPreview(false);
                }, size: "xs" }) }) }));
}

function NavigationContent({ accessibilityLabel, children, footer, header, showBorder, }) {
    const navigationChildren = flattenChildrenWithKeys(children);
    validateChildren({ children: navigationChildren, filterLevel: 'main' });
    const { collapsible, collapsed: sideNavigationCollapsed, onCollapse, overlayPreview, setOverlayPreview, transitioning, setTransitioning, } = useSideNavigation();
    const mainContainer = useRef(null);
    const scrollContainer = useRef(null);
    const transitionContainer = useRef(null);
    const [isScrolled, setIsScrolled] = useState(false);
    const [collapsedContainerWidth, setCollapsedContainerWidth] = useState();
    const previewTimeoutRef = useRef();
    useEffect(() => {
        const element = transitionContainer.current;
        const transitionEndHandler = ({ target }) => {
            if (target === element)
                setTransitioning(false);
        };
        element === null || element === void 0 ? void 0 : element.addEventListener('transitionend', transitionEndHandler);
        return () => element === null || element === void 0 ? void 0 : element.removeEventListener('transitionend', transitionEndHandler);
    }, [setTransitioning]);
    useEffect(() => {
        const element = scrollContainer.current;
        const scrollHandler = () => setIsScrolled(!!(element === null || element === void 0 ? void 0 : element.scrollTop));
        const mouseEnterHandler = () => {
            var _a;
            if (sideNavigationCollapsed && !transitioning) {
                // @ts-expect-error - TS2769 - No overload matches this call.
                clearTimeout(previewTimeoutRef.current);
                setCollapsedContainerWidth((_a = mainContainer.current) === null || _a === void 0 ? void 0 : _a.offsetWidth);
                setOverlayPreview(true);
            }
        };
        const mouseLeaveHandler = () => {
            if (sideNavigationCollapsed) {
                // @ts-expect-error - TS2769 - No overload matches this call.
                clearTimeout(previewTimeoutRef.current);
                previewTimeoutRef.current = setTimeout(() => setOverlayPreview(false), 1000);
            }
        };
        element === null || element === void 0 ? void 0 : element.addEventListener('scroll', scrollHandler);
        element === null || element === void 0 ? void 0 : element.addEventListener('mouseenter', mouseEnterHandler);
        element === null || element === void 0 ? void 0 : element.addEventListener('mouseleave', mouseLeaveHandler);
        return () => {
            element === null || element === void 0 ? void 0 : element.removeEventListener('scroll', scrollHandler);
            element === null || element === void 0 ? void 0 : element.removeEventListener('mouseenter', mouseEnterHandler);
            element === null || element === void 0 ? void 0 : element.removeEventListener('mouseleave', mouseLeaveHandler);
        };
    }, [sideNavigationCollapsed, onCollapse, setOverlayPreview, transitioning]);
    const isCollapsed = sideNavigationCollapsed && !overlayPreview;
    const items = isCollapsed
        ? reduceIconlessChildrenIntoEllipsis(navigationChildren)
        : navigationChildren;
    const iconCount = countItemsWithIcon(navigationChildren);
    const shouldCollapseEmpty = iconCount === 0;
    const shouldHideItems = sideNavigationCollapsed && shouldCollapseEmpty && !overlayPreview;
    const normalWidth = 280;
    const headerWidth = isCollapsed ? 44 : undefined;
    const collapsedWidth = shouldCollapseEmpty ? 40 : 60;
    const contentWidth = isCollapsed ? collapsedWidth : normalWidth;
    return (
    // 1st wrapper - always has dynamic width, but in overlay-preview state its width is static
    jsxRuntime.jsx(BoxWithForwardRef, { ref: mainContainer, "aria-label": accessibilityLabel, as: "nav", color: "default", height: "100%", minWidth: collapsible ? undefined : normalWidth, position: "relative", width: sideNavigationCollapsed ? collapsedContainerWidth : undefined, zIndex: overlayPreview ? new FixedZIndex(1) : undefined, children: jsxRuntime.jsx("div", { ref: scrollContainer, className: classnames(styles$d.fullHeight, Layout.overflowAutoY, {
                [borderStyles.borderRight]: showBorder && !overlayPreview,
                [borderStyles.raisedBottom]: overlayPreview,
                [boxStyles.default]: collapsible,
            }), style: { width: collapsible ? 'max-content' : undefined }, children: jsxRuntime.jsxs("div", { 
                // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLElement | null>' is not assignable to type 'LegacyRef<HTMLDivElement> | undefined'.
                ref: transitionContainer, className: classnames({ [styles$d.contentWidthTransition]: collapsible }), style: { width: collapsible ? contentWidth : undefined }, children: [collapsible && jsxRuntime.jsx(Collapser, { raised: isScrolled }), jsxRuntime.jsx(BoxWithForwardRef, { dangerouslySetInlineStyle: {
                            __style: {
                                paddingBottom: 24,
                            },
                        }, display: shouldHideItems ? 'none' : undefined, padding: 2, width: collapsible ? contentWidth : undefined, children: jsxRuntime.jsxs(FlexWithForwardRef, { direction: "column", gap: { column: 4, row: 0 }, children: [header ? (jsxRuntime.jsxs(FlexWithForwardRef, { direction: "column", gap: { column: 4, row: 0 }, children: [jsxRuntime.jsx(BoxWithForwardRef, { width: headerWidth, children: header }), jsxRuntime.jsx(Divider, {})] })) : null, jsxRuntime.jsx("ul", { className: classnames(styles$d.ulItem), children: items }), footer ? (jsxRuntime.jsxs(FlexWithForwardRef, { direction: "column", gap: { column: 4, row: 0 }, children: [jsxRuntime.jsx(Divider, {}), jsxRuntime.jsx(BoxWithForwardRef, { width: headerWidth, children: footer })] })) : null] }) })] }) }) }));
}

function MaybeTooltip$1({ children, disabled, tooltip, }) {
    if (!tooltip)
        return children;
    return (jsxRuntime.jsx(InternalTooltip, { accessibilityLabel: tooltip.accessibilityLabel, disabled: disabled, idealDirection: (tooltip === null || tooltip === void 0 ? void 0 : tooltip.idealDirection) || 'up', inline: tooltip.inline, text: tooltip.text, zIndex: tooltip === null || tooltip === void 0 ? void 0 : tooltip.zIndex, children: children }));
}

const ItemIconButton = forwardRef(function ItemIconButton({ accessibilityControls, accessibilityExpanded, accessibilityLabel, selected, icon, isItemActive, children, onBlur, onFocus, onMouseEnter, onMouseLeave, onTap, }, ref) {
    const { isHovered: hovered, isFocused: focused, handleOnMouseEnter, handleOnMouseLeave, handleOnFocus, handleOnBlur, } = useInteractiveStates();
    let bgColor = 'transparent';
    let iconColor = 'darkGray';
    if (!isItemActive && !hovered && !focused) {
        bgColor = 'transparent';
        iconColor = 'darkGray';
    }
    if (isItemActive && (hovered || focused)) {
        bgColor = 'gray';
        iconColor = 'white';
    }
    if (isItemActive && !hovered && !focused) {
        iconColor = 'white';
    }
    if (isItemActive && selected) {
        bgColor = 'white';
        iconColor = 'darkGray';
    }
    return (jsxRuntime.jsxs(TapAreaWithForwardRef, { ref: ref, accessibilityControls: accessibilityControls, accessibilityExpanded: accessibilityExpanded, accessibilityLabel: accessibilityLabel, onBlur: (event) => {
            handleOnBlur();
            onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);
        }, onFocus: (event) => {
            handleOnFocus();
            onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);
        }, onMouseEnter: (event) => {
            handleOnMouseEnter();
            onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(event);
        }, onMouseLeave: (event) => {
            handleOnMouseLeave();
            onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(event);
        }, onTap: ({ event }) => {
            // We need event.stopPropagation(); so the SideNavigation.TopItem's onClick doesn't get trigger as well
            event.stopPropagation();
            onTap === null || onTap === void 0 ? void 0 : onTap({ event });
        }, rounding: "circle", tapStyle: "compress", children: [jsxRuntime.jsx(Pog, { accessibilityLabel: "", active: (hovered || focused) && !isItemActive, 
                // @ts-expect-error - TS2322 - Type 'string' is not assignable to type '"gray" | "red" | "white" | "transparent" | "transparentDarkGray" | "lightGray" | undefined'.
                bgColor: bgColor, icon: icon, 
                // @ts-expect-error - TS2322 - Type 'string' is not assignable to type '"darkGray" | "gray" | "red" | "white" | "brandPrimary" | undefined'.
                iconColor: iconColor, selected: selected === true && !isItemActive, size: "xs" }), children] }));
});
function PrimaryActionIconButton({ icon = 'ellipsis', onClick, tooltip, dropdownItems, isItemActive, setShowIconButton, forceIconButton, setForceIconButton, setCompression, }) {
    var _a;
    const id = useId$1();
    const innerRef = useRef(null);
    const [selected, setSelected] = useState(dropdownItems ? false : undefined);
    const [open, setOpen] = useState(false);
    useEffect(() => {
        // As soon as Dropdown gets dismissed and unselects IconButton, we hide and stop forcing it
        if (forceIconButton === 'force' && selected === false) {
            setShowIconButton('hide');
            setForceIconButton === null || setForceIconButton === void 0 ? void 0 : setForceIconButton('default');
        }
    }, [selected, forceIconButton, setShowIconButton, setForceIconButton]);
    const tooltipZIndex = (tooltip === null || tooltip === void 0 ? void 0 : tooltip.zIndex)
        ? new CompositeZIndex([new FixedZIndex(1), tooltip === null || tooltip === void 0 ? void 0 : tooltip.zIndex].filter(Boolean))
        : new FixedZIndex(1);
    const dropdownZIndex = new CompositeZIndex([tooltipZIndex]);
    return (jsxRuntime.jsx(MaybeTooltip$1, { disabled: open, tooltip: {
            text: tooltip.text,
            accessibilityLabel: '',
            zIndex: tooltipZIndex,
        }, children: jsxRuntime.jsx(ItemIconButton, { ref: innerRef, accessibilityControls: id, accessibilityExpanded: open, accessibilityLabel: (_a = tooltip === null || tooltip === void 0 ? void 0 : tooltip.accessibilityLabel) !== null && _a !== void 0 ? _a : tooltip.text, icon: icon, isItemActive: isItemActive, onBlur: () => {
                // With keyboard navigation, we want to hide IconButton if we keep tabbing without opening Dropdown
                // However, Dropdown captures focus, therefore, as soon as it opens could hide IconButton and unmount itself, never displaying
                // We prevent this by disabling this action until Dropdown gets dismissed and unselects IconButton
                if (typeof selected === 'undefined' || forceIconButton === 'default') {
                    setShowIconButton('hide');
                }
            }, onFocus: () => setShowIconButton('show'), onMouseEnter: () => setCompression('none'), onMouseLeave: () => setCompression('compress'), onTap: ({ event }) => {
                // As soon as IconButton gets clicked, we force its display, only if selected === false.
                // We don't force if selected ===  undefined, which would indicate there's no Dropdown associated, just an action
                if (selected === false) {
                    setForceIconButton === null || setForceIconButton === void 0 ? void 0 : setForceIconButton('force');
                }
                if (selected !== undefined) {
                    setSelected((value) => !value);
                    setOpen((value) => !value);
                }
                onClick === null || onClick === void 0 ? void 0 : onClick({ event });
            }, rounding: "circle", selected: selected, tapStyle: "compress", children: open && (jsxRuntime.jsx(Dropdown, { anchor: innerRef.current, id: id, onDismiss: () => {
                    setSelected(false);
                    setOpen(false);
                }, zIndex: dropdownZIndex, children: dropdownItems === null || dropdownItems === void 0 ? void 0 : dropdownItems.map((element, idx) => cloneElement(element, {
                    key: `sidenavigation-dropdown-item-${idx}`,
                })) })) }) }));
}

function SideNavigationGroupExpandIconButton({ expanded, active, isLink: hasLink, expandIconButtonProps, }) {
    if (!hasLink) {
        return (jsxRuntime.jsx(BoxWithForwardRef, { alignItems: "center", "aria-hidden": true, display: "flex", height: 24, justifyContent: "center", marginEnd: -2, rounding: "circle", tabIndex: -1, width: 24, children: jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: active ? 'inverse' : 'default', icon: expanded ? 'arrow-up' : 'arrow-down', size: 12 }) }));
    }
    return (jsxRuntime.jsx(ItemIconButton, { accessibilityControls: expandIconButtonProps === null || expandIconButtonProps === void 0 ? void 0 : expandIconButtonProps.accessibilityControls, accessibilityExpanded: expandIconButtonProps === null || expandIconButtonProps === void 0 ? void 0 : expandIconButtonProps.accessibilityExpanded, accessibilityLabel: "", icon: expanded ? 'arrow-up' : 'arrow-down', isItemActive: !!active, onKeyDown: ({ event }) => event.stopPropagation(), onTap: ({ event }) => {
            var _a;
            event.preventDefault();
            event.stopPropagation();
            (_a = expandIconButtonProps === null || expandIconButtonProps === void 0 ? void 0 : expandIconButtonProps.onTap) === null || _a === void 0 ? void 0 : _a.call(expandIconButtonProps, { event });
        } }));
}

const NESTING_MARGIN_START_MAP = {
    '0': TOKEN_SPACE_400,
    '1': TOKEN_SPACE_1200,
    '2': '68px',
};
function ItemContent({ active, badge, counter, icon, label, primaryAction, notificationAccessibilityLabel, setCompression, hovered, focused, hasBorder, isGroup, children, }) {
    const { nestedLevel: level } = useNesting();
    const nestedLevel = isGroup
        ? level - 1 // compensate for NestingLevelProvider always wrapping ItemContent in SideNavigationGroup
        : level;
    const isTopLevel = nestedLevel === 0;
    const deviceType = useDeviceType();
    const isMobile = deviceType === 'mobile';
    const { collapsed: sideNavigationCollapsed, overlayPreview } = useSideNavigation();
    const [forceIconButton, setForceIconButton] = useState('default');
    const [showIconButton, setShowIconButton] = useState('hide');
    useEffect(() => {
        if (!isMobile && primaryAction && showIconButton === 'hide' && (hovered || focused)) {
            setShowIconButton('show');
        }
        if (!isMobile &&
            primaryAction &&
            showIconButton === 'show' &&
            !hovered &&
            !focused &&
            forceIconButton === 'default') {
            setShowIconButton('hide');
        }
    }, [hovered, focused, primaryAction, forceIconButton, isMobile, showIconButton]);
    const collapsed = sideNavigationCollapsed && !overlayPreview;
    const inactiveItemColor = hovered ? 'secondary' : undefined;
    const itemColor = active ? 'selected' : inactiveItemColor;
    const textColor = active ? 'inverse' : 'default';
    const counterColor = active ? 'inverse' : 'subtle';
    const nestingMargin = isMobile
        ? // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'number' can't be used to index type '{ readonly '0': "var(--space-400)"; readonly '1': "var(--space-1200)"; readonly '2': "68px"; }'.
            NESTING_MARGIN_START_MAP[isTopLevel ? 0 : nestedLevel - 1]
        : // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'number' can't be used to index type '{ readonly '0': "var(--space-400)"; readonly '1': "var(--space-1200)"; readonly '2': "68px"; }'.
            NESTING_MARGIN_START_MAP[nestedLevel];
    return (jsxRuntime.jsxs(BoxWithForwardRef, { alignItems: "center", color: itemColor, dangerouslySetInlineStyle: {
            __style: {
                outline: hasBorder ? `2px solid ${TOKEN_COLOR_BACKGROUND_SELECTED_BASE}` : undefined,
                paddingInlineStart: collapsed ? undefined : nestingMargin,
                paddingInlineEnd: collapsed ? undefined : TOKEN_SPACE_400,
            },
        }, display: "flex", height: collapsed ? 44 : undefined, justifyContent: collapsed ? 'center' : undefined, minHeight: collapsed ? undefined : 44, padding: collapsed ? 3 : undefined, paddingY: collapsed ? undefined : 2, position: "relative", rounding: 2, width: collapsed ? 44 : undefined, children: [collapsed && icon && notificationAccessibilityLabel ? (jsxRuntime.jsx(BoxWithForwardRef, { "aria-label": notificationAccessibilityLabel, color: "primary", dangerouslySetInlineStyle: { __style: { top: 4, right: 4 } }, height: 8, position: "absolute", role: "status", rounding: "circle", width: 8 })) : null, jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", flex: "grow", gap: { row: 2, column: 0 }, height: "100%", justifyContent: collapsed ? 'center' : undefined, children: [icon ? (jsxRuntime.jsx(FlexWithForwardRef.Item, { children: jsxRuntime.jsx(BoxWithForwardRef, { "aria-hidden": !collapsed, children: typeof icon === 'string' ? (jsxRuntime.jsx(Icon, { accessibilityLabel: collapsed ? label : '', color: textColor, icon: icon, inline: true, size: 20 })) : (jsxRuntime.jsx(Icon, { accessibilityLabel: collapsed ? label : '', color: textColor, dangerouslySetSvgPath: icon, inline: true, size: 20 })) }) })) : null, !collapsed && (jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "grow", children: jsxRuntime.jsxs(TextWithForwardRef, { color: textColor, inline: true, children: [label, (badge || notificationAccessibilityLabel) && (jsxRuntime.jsxs(BoxWithForwardRef, { display: "inlineBlock", height: "100%", marginStart: 1, children: [jsxRuntime.jsx(BoxWithForwardRef, { display: "visuallyHidden", children: `, ` }), !notificationAccessibilityLabel && badge ? (jsxRuntime.jsx(Badge, { text: badge.text, type: badge.type })) : null, notificationAccessibilityLabel ? (jsxRuntime.jsx(BoxWithForwardRef, { "aria-label": notificationAccessibilityLabel, color: "primary", height: 8, role: "status", rounding: "circle", width: 8 })) : null] }))] }) })), !collapsed && counter && (showIconButton === 'hide' || isMobile) ? (jsxRuntime.jsxs(FlexWithForwardRef.Item, { flex: "none", children: [jsxRuntime.jsx(BoxWithForwardRef, { display: "visuallyHidden", children: `, ` }), jsxRuntime.jsx(BoxWithForwardRef, { "aria-label": counter.accessibilityLabel, children: jsxRuntime.jsx(TextWithForwardRef, { align: "end", color: counterColor, children: counter.number }) })] })) : null, !collapsed && (showIconButton === 'show' || isMobile) && primaryAction ? (jsxRuntime.jsxs(FlexWithForwardRef.Item, { flex: "none", children: [counter ? (jsxRuntime.jsxs(BoxWithForwardRef, { display: "visuallyHidden", children: [`, `, jsxRuntime.jsx(BoxWithForwardRef, { "aria-label": counter === null || counter === void 0 ? void 0 : counter.accessibilityLabel })] })) : null, jsxRuntime.jsx(BoxWithForwardRef, { "aria-hidden": true, marginEnd: -2, rounding: "circle", children: jsxRuntime.jsx(PrimaryActionIconButton, { dropdownItems: primaryAction === null || primaryAction === void 0 ? void 0 : primaryAction.dropdownItems, forceIconButton: forceIconButton, icon: primaryAction === null || primaryAction === void 0 ? void 0 : primaryAction.icon, isItemActive: !!active, onClick: primaryAction === null || primaryAction === void 0 ? void 0 : primaryAction.onClick, setCompression: setCompression, setForceIconButton: setForceIconButton, setShowIconButton: setShowIconButton, tooltip: primaryAction.tooltip }) })] })) : null, children] })] }));
}

function SideNavigationGroupContent({ expanded, selectedItemId, itemId, icon, label, badge, notificationAccessibilityLabel, counter, display, primaryAction, setCompression, hovered, focused, hasActiveChild, active, isLink, expandIconButtonProps, }) {
    const deviceType = useDeviceType();
    const isMobile = deviceType === 'mobile';
    const { collapsed: sideNavigationCollapsed, overlayPreview } = useSideNavigation();
    const collapsed = sideNavigationCollapsed && !overlayPreview;
    const hasBorder = sideNavigationCollapsed || !expanded ? hasActiveChild : expanded && selectedItemId === itemId;
    return (jsxRuntime.jsx(ItemContent, { active: active, badge: badge, counter: counter, focused: focused, hasBorder: hasBorder, hovered: hovered, icon: icon, isGroup: true, label: label, notificationAccessibilityLabel: notificationAccessibilityLabel, primaryAction: primaryAction, setCompression: setCompression, children: (!collapsed && ['expandable', 'expandableExpanded'].includes(display)) ||
            isMobile ? (jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "none", children: jsxRuntime.jsx(BoxWithForwardRef, { marginEnd: -2, rounding: "circle", width: 24, children: jsxRuntime.jsx(SideNavigationGroupExpandIconButton, { active: active, expanded: expanded, expandIconButtonProps: expandIconButtonProps, isLink: isLink }) }) })) : null }));
}

function SideNavigationGroupItemTapControl({ accessibilityControls, accessibilityCurrent, accessibilityExpanded, children, onLinkClick, onTap, href, isExpandable, tapStyle, onBlur, onFocus, onMouseEnter, onMouseLeave, }) {
    if (href) {
        return (jsxRuntime.jsx(TapAreaLinkWithForwardRef, { accessibilityCurrent: accessibilityCurrent, href: href, onBlur: onBlur, onFocus: onFocus, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, onTap: (e) => {
                onLinkClick === null || onLinkClick === void 0 ? void 0 : onLinkClick(e);
                onTap === null || onTap === void 0 ? void 0 : onTap();
            }, rounding: 2, tapStyle: tapStyle, children: children }));
    }
    if (isExpandable) {
        return (jsxRuntime.jsx(TapAreaWithForwardRef, { accessibilityControls: accessibilityControls, accessibilityExpanded: accessibilityExpanded, onBlur: onBlur, onFocus: onFocus, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, onTap: onTap, rounding: 2, tapStyle: tapStyle, children: children }));
    }
    return children;
}

function SideNavigationGroupMobile({ children, badge, counter, display = 'expandable', hasActiveChild = false, icon, label, primaryAction, notificationAccessibilityLabel, }) {
    // Manages PrimaryAction
    const [compression, setCompression] = useState('compress');
    const [hovered, setHovered] = useState(false);
    const [focused, setFocused] = useState(false);
    // Manages children
    const itemId = useId$1();
    const { nestedLevel } = useNesting();
    const { dismissButton, selectedItemId, setSelectedItemId, setSelectedMobileChildren, hideActiveChildren, setHideActiveChildren, } = useSideNavigation();
    const isTopLevel = nestedLevel === 0;
    const childrenArray = getChildrenToArray$1({
        children,
        filterLevel: 'nested',
    });
    const childrenList = useMemo(() => (jsxRuntime.jsx("ul", { className: classnames(styles$d.ulItem), id: itemId, children: childrenArray })), [itemId, childrenArray]);
    const [expanded, setExpanded] = useState(false);
    let topLevelChildrenList;
    if (isTopLevel) {
        topLevelChildrenList = (jsxRuntime.jsxs(Fragment, { children: [jsxRuntime.jsx(BoxWithForwardRef, { height: 64, paddingY: 2, position: "relative", children: jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", height: "100%", justifyContent: "center", children: [jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "none", children: jsxRuntime.jsx(IconButtonWithForwardRef, { accessibilityLabel: "Go to previous item", icon: "arrow-back", onClick: () => {
                                        setHideActiveChildren(true);
                                        setSelectedMobileChildren(null);
                                    }, size: "lg", tooltip: {
                                        text: 'Go to previous item',
                                        idealDirection: 'up',
                                    } }) }), jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "grow", children: jsxRuntime.jsx(FlexWithForwardRef, { alignItems: "center", height: "100%", justifyContent: "center", children: jsxRuntime.jsx(Heading, { lineClamp: 1, size: "400", children: label }) }) }), jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "none", children: jsxRuntime.jsx(InternalDismissIconButtonWithForwardRef, { accessibilityControls: dismissButton === null || dismissButton === void 0 ? void 0 : dismissButton.id, accessibilityLabel: (dismissButton === null || dismissButton === void 0 ? void 0 : dismissButton.accessibilityLabel) || '', onClick: () => dismissButton === null || dismissButton === void 0 ? void 0 : dismissButton.onDismiss() }) })] }) }), childrenList] }));
    }
    const passedChildren = isTopLevel ? topLevelChildrenList : childrenList;
    const elevateChildrenToParent = useCallback(() => setSelectedMobileChildren(jsxRuntime.jsx(NestingProvider, { componentName: "SideNavigation", maxNestedLevels: 2, children: passedChildren })), [passedChildren, setSelectedMobileChildren]);
    useEffect(() => {
        if (isTopLevel && hasActiveChild && !hideActiveChildren) {
            elevateChildrenToParent();
        }
        else if (hasActiveChild && !hideActiveChildren) {
            setExpanded(true);
        }
    }, [isTopLevel, hasActiveChild, hideActiveChildren, itemId, elevateChildrenToParent]);
    return (jsxRuntime.jsx(NestingProvider, { componentName: "SideNavigation", maxNestedLevels: 2, children: jsxRuntime.jsxs("li", { className: classnames(styles$d.liItem), children: [jsxRuntime.jsx(TapAreaWithForwardRef, { accessibilityControls: display === 'expandable' ? itemId : undefined, accessibilityExpanded: display === 'expandable' ? expanded : undefined, onBlur: () => setFocused(false), onFocus: () => setFocused(true), onMouseEnter: () => setHovered(true), onMouseLeave: () => setHovered(false), onTap: () => {
                        if (isTopLevel) {
                            elevateChildrenToParent();
                        }
                        else {
                            setExpanded((value) => {
                                if (!value)
                                    setSelectedItemId(itemId);
                                return !value;
                            });
                        }
                    }, rounding: 2, tapStyle: compression, children: jsxRuntime.jsx(SideNavigationGroupContent, { badge: badge, counter: counter, display: display, expanded: expanded, focused: focused, hovered: hovered, icon: icon, itemId: itemId, label: label, notificationAccessibilityLabel: notificationAccessibilityLabel, primaryAction: primaryAction, selectedItemId: selectedItemId, setCompression: setCompression }) }), expanded ? passedChildren : null] }) }));
}

/**
 * Use [SideNavigation.Group](https://gestalt.pinterest.systems/web/sidenavigation#SideNavigation.Group) to hold SideNavigation.NestedItem and SideNavigation.NestedGroup at the top level of SideNavigation. It supports badges, icons, counters, and notifications.
 */
function SideNavigationGroup({ active, badge, children, counter, display = 'expandable', expanded: expandedProp, icon, notificationAccessibilityLabel, label, onClick, onExpand, primaryAction, href, }) {
    // Manages adaptiveness
    const deviceType = useDeviceType();
    const isMobile = deviceType === 'mobile';
    // Manages PrimaryAction
    const [compression, setCompression] = useState('compress');
    const [hovered, setHovered] = useState(false);
    const [focused, setFocused] = useState(false);
    // Manages children
    const itemId = useId$1();
    const { collapsed: sideNavigationCollapsed, overlayPreview, setOverlayPreview, selectedItemId, setSelectedItemId, } = useSideNavigation();
    const navigationChildren = flattenChildrenWithKeys(children);
    const hasAnyActiveChild = !!getChildrenActiveProp(navigationChildren);
    validateChildren({ children: navigationChildren, filterLevel: 'nested' });
    const isExpandable = display === 'expandable';
    const isUncontrolled = expandedProp === undefined;
    const isLink = !!href;
    const [expanded, setExpanded] = useState(hasAnyActiveChild || !isExpandable);
    const isExpanded = isUncontrolled ? expanded : expandedProp;
    const collapsed = sideNavigationCollapsed && !overlayPreview;
    const handleExpand = () => {
        if (isUncontrolled) {
            setExpanded((value) => !value);
        }
        else {
            onExpand === null || onExpand === void 0 ? void 0 : onExpand({ expanded: !isExpanded });
        }
    };
    const handleTap = () => {
        // Always `true` when item is not a link.
        // When item is a link and not expanded, allows expanding in the first click.
        const shoudlToggleExpand = !isLink || (isLink && !isExpanded);
        if (shoudlToggleExpand) {
            handleExpand();
        }
        if (!isExpanded && selectedItemId !== itemId)
            setSelectedItemId(itemId);
        if (collapsed) {
            setOverlayPreview(true);
        }
    };
    if (isMobile) {
        return (jsxRuntime.jsx(SideNavigationGroupMobile, { badge: badge, counter: counter, display: display, hasActiveChild: hasAnyActiveChild, icon: icon, label: label, notificationAccessibilityLabel: notificationAccessibilityLabel, primaryAction: primaryAction, children: navigationChildren }));
    }
    return (jsxRuntime.jsx(NestingProvider, { componentName: "SideNavigation", maxNestedLevels: 2, children: jsxRuntime.jsxs("li", { className: classnames(styles$d.liItem), children: [jsxRuntime.jsx(SideNavigationGroupItemTapControl, { accessibilityControls: itemId, accessibilityCurrent: active === 'page' ? active : undefined, accessibilityExpanded: isExpanded, href: href, isExpandable: isExpandable, onBlur: () => setFocused(false), onFocus: () => setFocused(true), onLinkClick: onClick, onMouseEnter: () => setHovered(true), onMouseLeave: () => setHovered(false), onTap: handleTap, tapStyle: compression, children: jsxRuntime.jsx(SideNavigationGroupContent, { active: active, badge: badge, counter: counter, display: display, expanded: isExpanded, expandIconButtonProps: {
                            accessibilityControls: itemId,
                            accessibilityExpanded: isExpanded,
                            onTap: handleExpand,
                        }, focused: focused, hasActiveChild: hasAnyActiveChild, hovered: hovered, icon: icon, isLink: isLink, itemId: itemId, label: label, notificationAccessibilityLabel: notificationAccessibilityLabel, primaryAction: primaryAction, selectedItemId: selectedItemId, setCompression: setCompression }) }), !collapsed && isExpanded ? (jsxRuntime.jsx("ul", { className: classnames(styles$d.ulItem), id: itemId, children: navigationChildren })) : null] }) }));
}
SideNavigationGroup.displayName = 'SideNavigation.Group';

/**
 * Use [SideNavigation.NestedGroup](https://gestalt.pinterest.systems/web/sidenavigation#SideNavigation.NestedGroup) to hold SideNavigation.NestedItem in the second nested level of Pageheader.
 */
function SideNavigationNestedGroup({ active, children, counter, display = 'expandable', expanded, label, primaryAction, href, onClick, onExpand, }) {
    return (jsxRuntime.jsx(SideNavigationGroup, { active: active, counter: counter, display: display, expanded: expanded, href: href, label: label, onClick: onClick, onExpand: onExpand, primaryAction: primaryAction, children: children }));
}
SideNavigationNestedGroup.displayName = 'SideNavigation.NestedGroup';

/**
 * Use [SideNavigation.TopItem](https://gestalt.pinterest.systems/web/sidenavigation#SideNavigation.TopItem) to redirect the user to a different page or section. SideNavigation.TopItem must be used at the top level of SideNavigation. It supports badges, icons, counters, and notifications.
 */
const SideNavigationTopItemWithForwardRef = forwardRef(function SideNavigationTopItem({ active, href, badge, counter, icon, label, primaryAction, notificationAccessibilityLabel, onClick, }, ref) {
    const { collapsed: sideNavigationCollapsed, setSelectedItemId, setOverlayPreview, } = useSideNavigation();
    const itemId = useId$1();
    const [compression, setCompression] = useState('compress');
    const [hovered, setHovered] = useState(false);
    const [focused, setFocused] = useState(false);
    return (jsxRuntime.jsx("li", { ref: ref, className: classnames(styles$d.liItem), children: jsxRuntime.jsx(TapAreaLinkWithForwardRef, { accessibilityCurrent: active, href: href, onBlur: () => setFocused(false), onFocus: () => setFocused(true), onMouseEnter: () => setHovered(true), onMouseLeave: () => setHovered(false), onTap: ({ event, dangerouslyDisableOnNavigation }) => {
                setSelectedItemId(itemId);
                onClick === null || onClick === void 0 ? void 0 : onClick({ event, dangerouslyDisableOnNavigation });
                if (sideNavigationCollapsed)
                    setOverlayPreview(false);
            }, rounding: 2, tapStyle: compression, children: jsxRuntime.jsx(ItemContent, { active: active, badge: badge, counter: counter, focused: focused, hovered: hovered, icon: icon, label: label, notificationAccessibilityLabel: notificationAccessibilityLabel, primaryAction: primaryAction, setCompression: setCompression }) }) }));
});
SideNavigationTopItemWithForwardRef.displayName = 'SideNavigation.TopItem';

/**
 * Use [SideNavigation.NestedItem](https://gestalt.pinterest.systems/web/sidenavigation#SideNavigation.NestedItem) to redirect the user to a different page or section. SideNavigation.NestedItem must be used in second and third nested levels.
 */
const SideNavigationNestedItemWithForwardRef = forwardRef(function SideNavigationNestedItem({ active, counter, href, label, onClick, primaryAction }, ref) {
    return (jsxRuntime.jsx(SideNavigationTopItemWithForwardRef, { ref: ref, active: active, counter: counter, href: href, label: label, onClick: onClick, primaryAction: primaryAction }));
});
SideNavigationNestedItemWithForwardRef.displayName = 'SideNavigation.NestedItem';

/**
 * Use [SideNavigation.Section](https://gestalt.pinterest.systems/web/sidenavigation#SideNavigation.Section) to categorize navigation menu items into groups and also avoid redundant language in labels.
 */
function SideNavigationSection({ children, label }) {
    const { collapsed: sideNavigationCollapsed, overlayPreview } = useSideNavigation();
    const navigationChildren = flattenChildrenWithKeys(children);
    validateChildren({ children: navigationChildren, filterLevel: 'main' });
    const collapsed = sideNavigationCollapsed && !overlayPreview;
    const shouldCollapseAsEllipsis = collapsed && countItemsWithIcon(navigationChildren) !== navigationChildren.length;
    const ellipsisActiveProp = shouldCollapseAsEllipsis
        ? getChildrenActiveProp(navigationChildren)
        : undefined;
    const itemWithNotification = shouldCollapseAsEllipsis
        ? // @ts-expect-error - TS2339 - Property 'props' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
            navigationChildren.find((child) => !!child.props.notificationAccessibilityLabel)
        : null;
    return (jsxRuntime.jsxs("li", { className: classnames(styles$d.liItem, styles$d.section), children: [collapsed ? (jsxRuntime.jsx("div", { className: styles$d.sectionStartDivider, children: jsxRuntime.jsx(Divider, {}) })) : (jsxRuntime.jsx(BoxWithForwardRef, { marginBottom: 2, paddingX: 4, role: "presentation", children: jsxRuntime.jsx(TextWithForwardRef, { lineClamp: 2, size: "300", weight: "bold", children: label }) })), shouldCollapseAsEllipsis ? (jsxRuntime.jsx(ItemsEllipsis, { accessibilityLabel: `Collapsed ${label}. Expand for more options`, active: ellipsisActiveProp, notificationAccessibilityLabel: 
                // @ts-expect-error - TS2339 - Property 'props' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode>'.
                itemWithNotification === null || itemWithNotification === void 0 ? void 0 : itemWithNotification.props.notificationAccessibilityLabel })) : (jsxRuntime.jsx("ul", { className: classnames(styles$d.ulItem), children: navigationChildren })), collapsed && (jsxRuntime.jsx("div", { className: styles$d.sectionEndDivider, children: jsxRuntime.jsx(Divider, {}) }))] }));
}
SideNavigationSection.displayName = 'SideNavigation.Section';

/**
 * [SideNavigation](https://gestalt.pinterest.systems/web/sidenavigation) is start-aligned and arranged vertically. It is used to navigate between page urls or sections when you have too many menu items to fit in horizontal [Tabs](https://gestalt.pinterest.systems/web/tabs).
 *
 * **NOTE**This component is on alpha phase, still under developoment. The component will support three levels and keyboard navigation. The component will change behavior and the API might also change in future component version releases.**NOTE**
 *
 * ![SideNavigation light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/SideNavigation.spec.ts-snapshots/SideNavigation-chromium-darwin.png)
 * ![SideNavigation dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/SideNavigation-dark.spec.ts-snapshots/SideNavigation-dark-chromium-darwin.png)
 *
 */
function SideNavigation({ accessibilityLabel, children, dismissButton, footer, header, showBorder, mobileTitle, collapsed, onCollapse, onPreview, }) {
    var _a, _b, _c;
    const { accessibilityDismissButtonLabel } = useDefaultLabelContext('SideNavigation');
    const id = useId$1();
    const deviceType = useDeviceType();
    const isMobile = deviceType === 'mobile';
    const collapsible = collapsed != null;
    if (isMobile) {
        return (jsxRuntime.jsx(SideNavigationProvider, { dismissButton: {
                accessibilityLabel: (_a = dismissButton === null || dismissButton === void 0 ? void 0 : dismissButton.accessibilityLabel) !== null && _a !== void 0 ? _a : accessibilityDismissButtonLabel,
                onDismiss: (_b = dismissButton === null || dismissButton === void 0 ? void 0 : dismissButton.onDismiss) !== null && _b !== void 0 ? _b : (() => { }),
                id,
            }, children: jsxRuntime.jsx(ScrollBoundaryContainerWithProvider, { children: jsxRuntime.jsx(SideNavigationMobile, { accessibilityLabel: accessibilityLabel, dismissButton: dismissButton && {
                        onDismiss: dismissButton.onDismiss,
                        accessibilityLabel: (_c = dismissButton.accessibilityLabel) !== null && _c !== void 0 ? _c : accessibilityDismissButtonLabel,
                    }, footer: footer, header: header, id: id, mobileTitle: mobileTitle, showBorder: showBorder, children: children }) }) }));
    }
    return (jsxRuntime.jsx(SideNavigationProvider, { collapsed: collapsed, collapsible: collapsible, onCollapse: onCollapse, onPreview: onPreview, children: jsxRuntime.jsx(ScrollBoundaryContainerWithProvider, { overflow: collapsible ? 'visible' : undefined, children: jsxRuntime.jsx(NavigationContent, { accessibilityLabel: accessibilityLabel, footer: footer, header: header, showBorder: showBorder, children: children }) }) }));
}
SideNavigation.Section = SideNavigationSection;
SideNavigation.TopItem = SideNavigationTopItemWithForwardRef;
SideNavigation.NestedItem = SideNavigationNestedItemWithForwardRef;
SideNavigation.Group = SideNavigationGroup;
SideNavigation.NestedGroup = SideNavigationNestedGroup;
SideNavigation.displayName = 'SideNavigation';

// If `text` is a Text component, we need to override any text colors within to ensure they all match
function OverridingSpan({ textElement, isError, inverseTextColor, size = '300', }) {
    const isInExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const { colorSchemeName } = useColorScheme();
    const isDarkMode = colorSchemeName === 'darkMode';
    let textColorOverrideStyles = isDarkMode
        ? stylesText.textColorOverrideLight
        : stylesText.textColorOverrideDark;
    if (inverseTextColor) {
        textColorOverrideStyles = isDarkMode
            ? stylesText.textColorOverrideDark
            : stylesText.textColorOverrideLight;
    }
    // Error type enforces bold weight and red color
    if (isError) {
        textColorOverrideStyles = isInExperiment
            ? stylesText.textColorOverrideErrorVr
            : stylesText.textColorOverrideError;
    }
    return (jsxRuntime.jsx("span", { className: classnames(typographyStyle[`fontSize${size}Override`], textColorOverrideStyles), children: textElement }));
}

// If `text` is a Text / Link component, we need to override any text colors within to ensure they all match
const isComponentNode = ({ text, components, }) => typeof text !== 'string' &&
    // @ts-expect-error - TS2339
    components.includes(Children.only(text).type.displayName);

const ICON_COLOR_MAP = {
    canceled: {
        icon: 'workflow-status-canceled',
        color: 'subtle',
    },
    halted: {
        icon: 'workflow-status-halted',
        color: 'default',
    },
    inProgress: {
        icon: 'workflow-status-in-progress',
        color: 'success',
    },
    locked: {
        icon: 'lock',
        color: 'subtle',
    },
    ok: {
        icon: 'workflow-status-ok',
        color: 'success',
    },
    problem: {
        icon: 'workflow-status-problem',
        color: 'error',
    },
    unstarted: {
        icon: 'workflow-status-unstarted',
        color: 'default',
    },
    queued: {
        icon: 'workflow-status-queued',
        color: 'default',
    },
    warning: {
        icon: 'workflow-status-warning',
        color: 'warning',
    },
};
/**
 * [Status](https://gestalt.pinterest.systems/web/status) is a graphic indicator of an element’s state.
 *
 * ![Status light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Status.spec.ts-snapshots/Status-chromium-darwin.png)
 * ![Status dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Status-dark.spec.ts-snapshots/Status-dark-chromium-darwin.png)
 *
 */
function Status({ accessibilityLabel, subtext, title, type }) {
    const { icon, color } = ICON_COLOR_MAP[type];
    const isTextNode = title && isComponentNode({ text: title, components: ['Text'] });
    return (jsxRuntime.jsxs(FlexWithForwardRef, { direction: "column", children: [jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", gap: { row: 2, column: 0 }, children: [jsxRuntime.jsx(Icon, { accessibilityLabel: accessibilityLabel !== null && accessibilityLabel !== void 0 ? accessibilityLabel : '', color: color, icon: icon, size: 16 }), isTextNode && jsxRuntime.jsx(OverridingSpan, { size: "200", textElement: title !== null && title !== void 0 ? title : '' }), !isTextNode && title && jsxRuntime.jsx(TextWithForwardRef, { size: "200", children: title })] }), subtext && title && (jsxRuntime.jsx(BoxWithForwardRef, { marginStart: 6, children: jsxRuntime.jsx(TextWithForwardRef, { color: "subtle", size: "200", children: subtext }) }))] }));
}
Status.displayName = 'Status';

var styles$c = {"switch":"jPl kVc Hsu XiG","borderColorTransition":"Tny","enabledUnselected":"XTE","enabledSelected":"kiO","focus":"cQT","disabledUnselected":"rBm","disabledSelected":"axa","slider":"U7Q Hsu MIw INd","sliderVr":"usk Hsu MIw INd","sliderVrOn":"rRv","sliderVrOff":"lv3","disabledSlider":"GLG","sliderRight":"taI","sliderLeft":"RDh","sliderDark":"GEq nG5","sliderLight":"fhX LJB","checkbox":"sAX MIw L4E e43 adn yQo","checkboxEnabled":"C8A BG7"};

/**
 * Use [Switch](https://gestalt.pinterest.systems/web/switch) for single cell options that can be turned on and off only. If you have a cell with multiple options that can activated, consider using [Checkbox](https://gestalt.pinterest.systems/web/checkbox).
 *
 * Switch supports right-to-left(RTL) language locales layout (auto flip on RTL locales like Arabic).
 *
 * ![Switch light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Switch.spec.ts-snapshots/Switch-chromium-darwin.png)
 * ![Switch dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Switch-dark.spec.ts-snapshots/Switch-dark-chromium-darwin.png)
 *
 */
function Switch({ disabled = false, id, name, onChange, switched = false }) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const handleChange = (event) => {
        const { checked } = event.target;
        onChange({ event, value: checked });
    };
    const { handleOnFocus, handleOnBlur, isFocused } = useInteractiveStates();
    const { isFocusVisible } = useFocusVisible();
    const switchStyles = classnames(styles$c.switch, {
        [focusStyles.accessibilityOutlineFocus]: isFocused && isFocusVisible && !isInVRExperiment,
        [styles$c.focus]: isFocused && isFocusVisible && isInVRExperiment,
        [styles$c.disabledSelected]: disabled && switched,
        [styles$c.disabledUnselected]: disabled && !switched,
        [styles$c.enabledSelected]: !disabled && switched,
        [styles$c.enabledUnselected]: !disabled && !switched && !(isFocused && isFocusVisible && isInVRExperiment),
        [styles$c.borderColorTransition]: !isInVRExperiment,
    });
    const sliderStyles = classnames(styles$c.slider, {
        [styles$c.sliderRight]: switched,
        [styles$c.sliderLeft]: !switched,
        [styles$c.sliderDark]: !disabled,
        [styles$c.sliderLight]: disabled,
    });
    const sliderVrStyles = classnames(styles$c.sliderVr, {
        [styles$c.sliderVrOn]: switched,
        [styles$c.sliderVrOff]: !switched,
        [styles$c.disabledSlider]: disabled && !switched,
    });
    const inputStyles = classnames(styles$c.checkbox, {
        [styles$c.checkboxEnabled]: !disabled,
    });
    return (jsxRuntime.jsxs("div", { className: switchStyles, children: [jsxRuntime.jsx("input", { checked: switched, className: inputStyles, disabled: disabled, id: id, name: name, onBlur: handleOnBlur, onChange: handleChange, onFocus: handleOnFocus, type: "checkbox" }), jsxRuntime.jsx("div", { className: isInVRExperiment ? sliderVrStyles : sliderStyles })] }));
}
Switch.displayName = 'Switch';

const TableContext = createContext({
    stickyColumns: 0,
});
const { Provider } = TableContext;
function TableContextProvider({ children, stickyColumns }) {
    return jsxRuntime.jsx(Provider, { value: { stickyColumns }, children: children });
}
function useTableContext() {
    const { stickyColumns } = useContext(TableContext);
    return { stickyColumns };
}

var styles$b = {"table":"pbE","th":"Zj2 zDA V92 pXK","td":"Zdn V92 pXK","stickyHeader":"Wai vEU","stickyFooter":"wmf Hx-","columnSticky":"atw","horizontalScrollRight":"cTB","columnStickyShadow":"HKv","horizontalScrollLeft":"mtx","tfooter":"gOI","thead":"Hw2","tbody":"e7B","drawer":"m-Z","hoverShadeGray":"Jn1","selected":"Q0p","unselected":"F3l"};

/**
 * Use [Table.Body](https://gestalt.pinterest.systems/web/table#Table.Body) to group the body content in Table.
 */
function TableBody({ children }) {
    return jsxRuntime.jsx("tbody", { className: styles$b.tbody, children: children });
}
TableBody.displayName = 'Table.Body';

/**
 * Use [Table.Cell](https://gestalt.pinterest.systems/web/table#Table.Cell) for individual table values.
 */
function TableCell({ children, colSpan, rowSpan, shouldBeSticky, previousTotalWidth, shouldHaveShadow, }) {
    const cs = classnames(styles$b.td, shouldBeSticky && styles$b.columnSticky, shouldHaveShadow && styles$b.columnStickyShadow);
    return (jsxRuntime.jsx("td", { className: cs, colSpan: colSpan, rowSpan: rowSpan, style: {
            left: shouldBeSticky ? previousTotalWidth : undefined,
            right: shouldBeSticky ? previousTotalWidth : undefined,
        }, children: children }));
}
TableCell.displayName = 'Table.Cell';

/**
 * Use [Table.Footer](https://gestalt.pinterest.systems/web/table#Table.Footer) to group the footer content in Table.
 */
function TableFooter({ children, sticky }) {
    return (jsxRuntime.jsx("tfoot", { className: classnames(!sticky && styles$b.tfooter, sticky && styles$b.stickyFooter), children: children }));
}
TableFooter.displayName = 'Table.Footer';

/**
 * Use [Table.Header](https://gestalt.pinterest.systems/web/table#Table.Header) to group the header content in Table.
 */
function TableHeader({ children, display = 'tableHeaderGroup', sticky = false, }) {
    return (jsxRuntime.jsx("thead", { className: classnames(display === 'visuallyHidden' && boxStyles.visuallyHidden, !sticky && styles$b.thead, sticky && styles$b.stickyHeader), children: children }));
}
TableHeader.displayName = 'Table.Header';

/**
 * Use [Table.HeaderCell](https://gestalt.pinterest.systems/web/table#Table.HeaderCell) to define a header cell in Table.
 */
function TableHeaderCell({ children, colSpan, previousTotalWidth, rowSpan, scope, shouldBeSticky, shouldHaveShadow, }) {
    const cs = classnames(styles$b.th, shouldBeSticky && styles$b.columnSticky, shouldHaveShadow && styles$b.columnStickyShadow);
    return (jsxRuntime.jsx("th", { className: cs, colSpan: colSpan, rowSpan: rowSpan, scope: scope || 'col', style: {
            left: shouldBeSticky ? previousTotalWidth : undefined,
            right: shouldBeSticky ? previousTotalWidth : undefined,
        }, children: children }));
}
TableHeaderCell.displayName = 'Table.HeaderCell';

/**
 * Use [Table.Row](https://gestalt.pinterest.systems/web/table#Table.Row) to define a row in Table.
 */
function TableRow({ children, hoverStyle = 'none', selected }) {
    const { stickyColumns } = useTableContext();
    const rowRef = useRef();
    const [columnWidths, setColumnWidths] = useState([]);
    useEffect(() => {
        if ((rowRef === null || rowRef === void 0 ? void 0 : rowRef.current) && stickyColumns) {
            // @ts-expect-error - TS2488 - Type 'HTMLCollection' must have a '[Symbol.iterator]()' method that returns an iterator.
            const colWidths = [...rowRef.current.children].map((item) => item.clientWidth);
            setColumnWidths(colWidths);
        }
    }, [stickyColumns]);
    const renderCellWithIndex = (child, index) => {
        const shouldBeSticky = stickyColumns ? stickyColumns >= 0 && index < stickyColumns : false;
        const shouldHaveShadow = stickyColumns ? stickyColumns - 1 === index : false;
        const previousWidths = columnWidths.slice(0, index);
        const previousTotalWidth = previousWidths.length > 0 ? previousWidths.reduce((a, b) => a + b) : 0;
        // @ts-expect-error - TS2769 - No overload matches this call.
        return cloneElement(child, {
            shouldBeSticky,
            previousTotalWidth,
            shouldHaveShadow,
        });
    };
    const rowStyle = classnames({
        [styles$b.hoverShadeGray]: hoverStyle === 'gray' && selected !== 'selected',
        [styles$b.selected]: selected === 'selected',
        [styles$b.unselected]: selected === 'unselected',
    });
    return (
    // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLTableRowElement | null | undefined>' is not assignable to type 'LegacyRef<HTMLTableRowElement> | undefined'.
    jsxRuntime.jsx("tr", { ref: rowRef, className: rowStyle, children: Number(stickyColumns) > 0 ? Children.map(children, renderCellWithIndex) : children }));
}
TableRow.displayName = 'Table.Row';

function getChildrenCount(children) {
    const topChildren = Children.toArray(children);
    let nestedChildrenCount = 0;
    topChildren.forEach((child) => {
        // We need to check for Fragment first, so we can check for nested Table.Cell that don't get counted in Children.toArray
        // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        if ((child === null || child === void 0 ? void 0 : child.type) === Fragment) {
            // @ts-expect-error - TS2339 - Property 'props' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
            const nestedChildren = child.props.children.reduce(
            // @ts-expect-error - TS7006 - Parameter 'accumulator' implicitly has an 'any' type. | TS7006 - Parameter 'currentValue' implicitly has an 'any' type.
            (accumulator, currentValue) => { var _a; return ((_a = currentValue === null || currentValue === void 0 ? void 0 : currentValue.type) === null || _a === void 0 ? void 0 : _a.displayName) === 'Table.Cell' ? 1 + accumulator : accumulator; }, -1);
            nestedChildrenCount += nestedChildren;
        }
    });
    return topChildren.length + nestedChildrenCount;
}

/**
 * Use [Table.RowDrawer](https://gestalt.pinterest.systems/web/table#Table.RowDrawer) to define a row drawer to display additional content.
 */
function TableRowDrawer({ children, drawerContents, hoverStyle = 'none', id, selected, }) {
    const { stickyColumns } = useTableContext();
    const rowRef = useRef();
    const [columnWidths, setColumnWidths] = useState([]);
    useEffect(() => {
        if ((rowRef === null || rowRef === void 0 ? void 0 : rowRef.current) && stickyColumns) {
            // @ts-expect-error - TS2488 - Type 'HTMLCollection' must have a '[Symbol.iterator]()' method that returns an iterator.
            const colWidths = [...rowRef.current.children].map((item) => item.clientWidth);
            setColumnWidths(colWidths);
        }
    }, [stickyColumns]);
    const renderCellWithAdjustedIndex = (child, index) => {
        // Account for initial expandable column
        const adjustedIndex = index + 1;
        const shouldBeSticky = stickyColumns
            ? stickyColumns >= 0 && adjustedIndex < stickyColumns
            : false;
        const shouldHaveShadow = stickyColumns ? stickyColumns - 1 === adjustedIndex : false;
        const previousWidths = columnWidths.slice(0, adjustedIndex);
        const previousTotalWidth = previousWidths.length > 0 ? previousWidths.reduce((a, b) => a + b) : 0;
        // @ts-expect-error - TS2769 - No overload matches this call.
        return cloneElement(child, {
            shouldBeSticky,
            previousTotalWidth,
            shouldHaveShadow,
        });
    };
    const rowStyle = classnames({
        [styles$b.hoverShadeGray]: hoverStyle === 'gray' && selected !== 'selected',
        [styles$b.selected]: selected === 'selected',
        [styles$b.unselected]: selected === 'unselected',
    });
    return (jsxRuntime.jsxs(Fragment, { children: [jsxRuntime.jsx("tr", { ref: rowRef, "aria-details": drawerContents ? id : undefined, className: rowStyle, children: Number(stickyColumns) > 0 ? Children.map(children, renderCellWithAdjustedIndex) : children }), drawerContents ? (jsxRuntime.jsx("tr", { id: id, children: jsxRuntime.jsx("td", { className: styles$b.drawer, colSpan: getChildrenCount(children), children: jsxRuntime.jsx(BoxWithForwardRef, { padding: 2, children: drawerContents }) }) })) : null] }));
}
TableRowDrawer.displayName = 'Table.RowDrawer';

/**
 * Use [Table.RowExpandable](https://gestalt.pinterest.systems/web/table#Table.RowExpandable) to define a row that expands and collapses additional content.
 */
function TableRowExpandable({ accessibilityCollapseLabel, accessibilityExpandLabel, children, expanded: expandedControlled, expandedContents, onExpand, id, hoverStyle = 'gray', selected, }) {
    const { stickyColumns } = useTableContext();
    const rowRef = useRef();
    const [columnWidths, setColumnWidths] = useState([]);
    const [isExpanded, setIsExpanded] = useState(expandedControlled !== null && expandedControlled !== void 0 ? expandedControlled : false);
    useEffect(() => {
        if ((rowRef === null || rowRef === void 0 ? void 0 : rowRef.current) && stickyColumns) {
            // @ts-expect-error - TS2488 - Type 'HTMLCollection' must have a '[Symbol.iterator]()' method that returns an iterator.
            const colWidths = [...rowRef.current.children].map((item) => item.clientWidth);
            setColumnWidths(colWidths);
        }
    }, [stickyColumns]);
    useEffect(() => {
        if (expandedControlled !== undefined && isExpanded !== expandedControlled) {
            setIsExpanded(expandedControlled);
        }
    }, [isExpanded, setIsExpanded, expandedControlled]);
    const renderCellWithAdjustedIndex = (child, index) => {
        // Account for initial expandable column
        const adjustedIndex = index + 1;
        const shouldBeSticky = stickyColumns
            ? stickyColumns >= 0 && adjustedIndex < stickyColumns
            : false;
        const shouldHaveShadow = stickyColumns ? stickyColumns - 1 === adjustedIndex : false;
        const previousWidths = columnWidths.slice(0, adjustedIndex);
        const previousTotalWidth = previousWidths.length > 0 ? previousWidths.reduce((a, b) => a + b) : 0;
        // @ts-expect-error - TS2769 - No overload matches this call.
        return cloneElement(child, {
            shouldBeSticky,
            previousTotalWidth,
            shouldHaveShadow,
        });
    };
    const rowStyle = classnames({
        [styles$b.hoverShadeGray]: hoverStyle === 'gray' && selected !== 'selected',
        [styles$b.selected]: selected === 'selected',
        [styles$b.unselected]: selected === 'unselected',
    });
    return (jsxRuntime.jsxs(Fragment, { children: [jsxRuntime.jsxs("tr", { ref: rowRef, className: rowStyle, children: [jsxRuntime.jsx(TableCell, { previousTotalWidth: 0, shouldBeSticky: stickyColumns ? stickyColumns > 0 : false, children: jsxRuntime.jsx(IconButtonWithForwardRef, { accessibilityControls: id, accessibilityExpanded: isExpanded, accessibilityLabel: isExpanded ? accessibilityCollapseLabel : accessibilityExpandLabel, icon: isExpanded ? 'arrow-up' : 'arrow-down', iconColor: "darkGray", onClick: ({ event }) => {
                                if (expandedControlled === undefined) {
                                    setIsExpanded((value) => !value);
                                }
                                onExpand === null || onExpand === void 0 ? void 0 : onExpand({ event, expanded: isExpanded });
                            }, size: "xs" }) }), Number(stickyColumns) > 0 ? Children.map(children, renderCellWithAdjustedIndex) : children] }), isExpanded ? (jsxRuntime.jsx("tr", { id: id, children: jsxRuntime.jsx("td", { className: styles$b.drawer, colSpan: getChildrenCount(children) + 1, children: jsxRuntime.jsx(BoxWithForwardRef, { padding: 6, children: expandedContents }) }) })) : null] }));
}
TableRowExpandable.displayName = 'Table.RowExpandable';

function SortIcon({ align, status, sortOrder, visibility, }) {
    return (jsxRuntime.jsx(BoxWithForwardRef, { dangerouslySetInlineStyle: {
            __style: { visibility },
        }, marginEnd: align === 'end' ? 2 : undefined, marginStart: align === 'start' ? 2 : undefined, children: jsxRuntime.jsx(Icon, { accessibilityLabel: "", color: status === 'active' ? 'default' : 'subtle', icon: status === 'active' && sortOrder === 'asc' ? 'sort-ascending' : 'sort-descending' }) }));
}
/**
 * Use [Table.SortableHeaderCell](https://gestalt.pinterest.systems/web/table#Table.SortableHeaderCell) to define a header cell with sorting functionality in Table.
 */
function TableSortableHeaderCell({ align = 'start', children, colSpan, onSortChange, previousTotalWidth, rowSpan, scope, shouldBeSticky, shouldHaveShadow, status, sortOrder, }) {
    const [isFocused, setFocused] = useState(false);
    const [isHovered, setHovered] = useState(false);
    const shouldShowIcon = status === 'active' || isHovered || isFocused;
    const visibility = shouldShowIcon ? 'visible' : 'hidden';
    return (jsxRuntime.jsx(TableHeaderCell, { colSpan: colSpan, previousTotalWidth: previousTotalWidth, rowSpan: rowSpan, scope: scope, shouldBeSticky: shouldBeSticky, shouldHaveShadow: shouldHaveShadow, children: jsxRuntime.jsx(BoxWithForwardRef, { display: "inlineBlock", width: "100%", children: jsxRuntime.jsx(TapAreaWithForwardRef, { fullWidth: false, onBlur: () => setFocused(false), onFocus: () => setFocused(true), onMouseEnter: () => setHovered(true), onMouseLeave: () => setHovered(false), onTap: ({ event }) => {
                    setFocused(false);
                    onSortChange({ event });
                }, children: jsxRuntime.jsxs(BoxWithForwardRef, { alignItems: "center", display: "flex", justifyContent: align, children: [align === 'end' && (jsxRuntime.jsx(SortIcon, { align: align, sortOrder: sortOrder, status: status, visibility: visibility })), children, align === 'start' && (jsxRuntime.jsx(SortIcon, { align: align, sortOrder: sortOrder, status: status, visibility: visibility }))] }) }) }) }));
}
TableSortableHeaderCell.displayName = 'Table.SortableHeaderCell';

/**
 * [Table](https://gestalt.pinterest.systems/web/table) is a set of structured data that is easy for a user to scan, examine, and compare. Table data is displayed in a grid format and can be used to structure both interactive and static data.
 *
 * ![Table light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Table.spec.ts-snapshots/Table-chromium-darwin.png)
 *
 */
function Table({ accessibilityLabel, borderStyle, children, maxHeight, stickyColumns, }) {
    const [showShadowScroll, setShowShadowScroll] = useState(null);
    const tableRef = useRef(null);
    const updateShadows = useCallback(() => {
        const target = tableRef.current;
        if (!target) {
            return;
        }
        if (target.scrollLeft > 0) {
            setShowShadowScroll('right');
        }
        else if (target.scrollLeft < 0) {
            setShowShadowScroll('left');
        }
        else {
            setShowShadowScroll(null);
        }
    }, []);
    useEffect(() => {
        const target = tableRef.current;
        target === null || target === void 0 ? void 0 : target.addEventListener('scroll', updateShadows);
        updateShadows();
        return () => {
            target === null || target === void 0 ? void 0 : target.removeEventListener('scroll', updateShadows);
        };
    }, [updateShadows]);
    const classNames = classnames(styles$b.table, showShadowScroll === 'right' && styles$b.horizontalScrollRight, showShadowScroll === 'left' && styles$b.horizontalScrollLeft);
    return (jsxRuntime.jsx(BoxWithForwardRef, Object.assign({ overflow: "auto" }, (borderStyle === 'sm' ? { borderStyle: 'sm', rounding: 1 } : {}), { 
        // @ts-expect-error - TS2322 - Type 'MutableRefObject<HTMLElement | null | undefined>' is not assignable to type 'LegacyRef<HTMLElement> | undefined'.
        ref: tableRef, maxHeight: maxHeight, tabIndex: 0, children: jsxRuntime.jsxs("table", { className: classNames, children: [jsxRuntime.jsx(BoxWithForwardRef, { as: "caption", dangerouslySetInlineStyle: {
                        __style: { clip: 'rect(1px, 1px, 1px, 1px)', whiteSpace: 'nowrap' },
                    }, height: 1, overflow: "hidden", position: "absolute", width: 1, children: accessibilityLabel }), jsxRuntime.jsx(TableContextProvider, { stickyColumns: stickyColumns, children: children })] }) })));
}
Table.Body = TableBody;
Table.Cell = TableCell;
Table.Footer = TableFooter;
Table.Header = TableHeader;
Table.HeaderCell = TableHeaderCell;
Table.Row = TableRow;
Table.RowDrawer = TableRowDrawer;
Table.RowExpandable = TableRowExpandable;
Table.SortableHeaderCell = TableSortableHeaderCell;
Table.displayName = 'Table';

var styles$a = {"container":"QfX"};

const ALLOWED_CHILDREN = ['TableOfContents.Item'];
const getChildrenToArray = ({ children }) => {
    // @ts-expect-error - TS7034 - Variable 'childrenArray' implicitly has type 'any[]' in some locations where its type cannot be determined.
    const childrenArray = [];
    let recursionLevel = 0;
    const getChildren = ({ nodeChildren }) => Children.toArray(nodeChildren).forEach((child) => {
        // We need to check for Fragment first, so we can check for display namevalid
        // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        if ((child === null || child === void 0 ? void 0 : child.type) === Fragment) {
            recursionLevel += 1;
            if (recursionLevel < 2) {
                // @ts-expect-error - TS2339 - Property 'props' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
                return getChildren({ nodeChildren: child.props.children });
            }
        }
        // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        if (ALLOWED_CHILDREN.includes(child.type.displayName)) {
            return childrenArray.push(child);
        }
        // @ts-expect-error - TS2339 - Property 'type' does not exist on type 'string | number | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal'.
        throw new Error(`${child.type.displayName} cannot be used with Gestalt TableOfContents`);
    });
    getChildren({ nodeChildren: children });
    // @ts-expect-error - TS7005 - Variable 'childrenArray' implicitly has an 'any[]' type.
    return childrenArray.map((child, idx) => cloneElement(child, { key: idx }));
};

function TableOfContentsItemList({ children }) {
    const childrenArray = getChildrenToArray({ children });
    return (jsxRuntime.jsx(NestingProvider, { componentName: "TableOfContents", maxNestedLevels: 5, children: jsxRuntime.jsx("ul", { className: classnames(Layout.flex, Layout.flexColumn, Whitespace.m0, Whitespace.p0), children: childrenArray }) }));
}

var styles$9 = {"item":"Mmg V92 ujU","itemEndPadding":"NEJ","itemHover":"u_D","nestingIndentation1":"pbJ","nestingIndentation2":"h_g","nestingIndentation3":"hKe","nestingIndentation4":"LXD","nestingIndentation5":"MKA"};

function TableOfContentsAnchor({ label, active, href, onClick }) {
    const { nestedLevel } = useNesting();
    const { handleOnFocus, handleOnBlur, handleOnMouseEnter, handleOnMouseLeave, isHovered } = useInteractiveStates();
    const hasMarker = active || isHovered;
    const markerColor = active ? 'inverse' : 'tertiary';
    const nestingFontSize = nestedLevel === 1 ? '300' : '200';
    return (jsxRuntime.jsx(TapAreaLinkWithForwardRef, { href: href, onBlur: handleOnBlur, onFocus: handleOnFocus, onMouseEnter: handleOnMouseEnter, onMouseLeave: handleOnMouseLeave, onTap: onClick, rounding: 2, tapStyle: "compress", children: jsxRuntime.jsxs(FlexWithForwardRef, { children: [jsxRuntime.jsx(BoxWithForwardRef, { color: hasMarker ? markerColor : 'transparent', minWidth: 4, rounding: "pill" }), jsxRuntime.jsx("div", { className: classnames(styles$9.item, styles$9.itemPadding, 
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore cannot infer type with dynamic property name
                    styles$9[`nestingIndentation${nestedLevel}`], {
                        [styles$9.itemHover]: isHovered,
                    }), children: jsxRuntime.jsx(TextWithForwardRef, { size: nestingFontSize, weight: active ? 'bold' : 'normal', children: label }) })] }) }));
}

/**
 * [TableOfContents.Item](https://gestalt.pinterest.systems/web/tableofcontents#TableOfContents.Item) is a subcomponent of [TableOfContents](https://gestalt.pinterest.systems/web/tableofcontents). Use [TableOfContents.Item](https://gestalt.pinterest.systems/web/tableofcontents#TableOfContents.Item) to redirect the user to a different section of a page.
 */
function TableOfContentsItem(props) {
    return (jsxRuntime.jsxs("li", { className: classnames(ListStyles.noStyle, boxWhitespace.marginTop1), children: [jsxRuntime.jsx(TableOfContentsAnchor, { active: props.active, href: props.href, label: props.label, onClick: props.onClick }), props.children ? jsxRuntime.jsx(TableOfContentsItemList, { children: props.children }) : null] }));
}
TableOfContentsItem.displayName = 'TableOfContents.Item';

/**
 * [TableOfContents](https://gestalt.pinterest.systems/web/tableofcontents) component is used to navigate to anchors on a page. It also serves as an outline of a page’s content. TableOfContents is placed on the right side of the page, close to the main content block.

 * ![TableOfContents light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/TableOfContents.spec.ts-snapshots/TableOfContents-chromium-darwin.png)
 * ![TableOfContents dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/TableOfContents-dark.spec.ts-snapshots/TableOfContents-dark-chromium-darwin.png)
 */
function TableOfContents({ accessibilityLabel, title, children }) {
    const { accessibilityLabel: accessibilityLabelDefault } = useDefaultLabelContext('TableOfContents');
    return (jsxRuntime.jsxs("div", { "aria-label": accessibilityLabel !== null && accessibilityLabel !== void 0 ? accessibilityLabel : accessibilityLabelDefault, className: styles$a.container, role: "navigation", children: [title ? (jsxRuntime.jsx(BoxWithForwardRef, { marginBottom: 3, paddingX: 3, children: jsxRuntime.jsx(Heading, { size: "400", children: title }) })) : null, jsxRuntime.jsx(TableOfContentsItemList, { children: children })] }));
}
TableOfContents.Item = TableOfContentsItem;
TableOfContents.displayName = 'TableOfContents';

function Notification() {
    return (jsxRuntime.jsx(BoxWithForwardRef, { color: "primary", dangerouslySetInlineStyle: { __style: { marginTop: '1px' } }, height: 6, rounding: "circle", width: 6 }));
}
function Count({ count }) {
    const displayCount = count < 100 ? `${count}` : '99+';
    return (jsxRuntime.jsx(BoxWithForwardRef, { color: "primary", dangerouslySetInlineStyle: {
            __style: {
                padding: `0 ${displayCount.length > 1 ? 3 : 0}px`,
            },
        }, height: 16, minWidth: 16, rounding: "pill", children: jsxRuntime.jsx(BoxWithForwardRef, { dangerouslySetInlineStyle: {
                __style: { padding: '0 0 1px 1px' },
            }, children: jsxRuntime.jsx(TextWithForwardRef, { align: "center", color: "light", size: "100", weight: "bold", children: displayCount }) }) }));
}
function Underline() {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    return (jsxRuntime.jsx(BoxWithForwardRef, { color: "selected", dangerouslySetInlineStyle: {
            __style: {
                borderRadius: isInVRExperiment ? TOKEN_ROUNDING_0 : 1.5,
            },
        }, height: isInVRExperiment ? 2 : 3, width: "100%" }));
}

var style = {"paddingY":"aKy V92","focused":"__A"};

const COLORS = Object.freeze({
    default: {
        base: TOKEN_COLOR_BACKGROUND_TABS_DEFAULT_BASE,
        hover: TOKEN_COLOR_BACKGROUND_TABS_DEFAULT_HOVER,
        active: TOKEN_COLOR_BACKGROUND_TABS_DEFAULT_ACTIVE,
    },
    transparent: {
        base: TOKEN_COLOR_BACKGROUND_TABS_TRANSPARENT_BASE,
        hover: TOKEN_COLOR_BACKGROUND_TABS_TRANSPARENT_HOVER,
        active: TOKEN_COLOR_BACKGROUND_TABS_TRANSPARENT_ACTIVE,
    },
});
const TabWithForwardRef = forwardRef(function Tab({ bgColor, href, indicator, id, index, isActive, onChange, text, dataTestId }, ref) {
    const { handleOnMouseEnter, handleOnMouseLeave, handleOnBlur, handleOnFocus, handleOnMouseDown, handleOnMouseUp, isFocused, isHovered, isActive: isPressed, } = useInteractiveStates();
    const { isFocusVisible } = useFocusVisible();
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const isRtl = typeof document === 'undefined' ? false : (document === null || document === void 0 ? void 0 : document.dir) === 'rtl';
    let color = COLORS[bgColor].base;
    if (!isActive) {
        if (isPressed) {
            color = COLORS[bgColor].active;
        }
        else if (isHovered || isFocused) {
            color = COLORS[bgColor].hover;
        }
    }
    return (jsxRuntime.jsx("div", { ref: isInVRExperiment ? undefined : ref, className: classnames({
            [style.paddingY]: !isInVRExperiment,
            [style.focused]: isInVRExperiment && isFocused && isFocusVisible,
        }), id: id, children: jsxRuntime.jsx(TapAreaLinkWithForwardRef
        // @ts-expect-error - TS2322 Type 'ForwardedRef<HTMLDivElement> | undefined' is not assignable to type 'LegacyRef<HTMLAnchorElement> | undefined'.
        , { 
            // @ts-expect-error - TS2322 Type 'ForwardedRef<HTMLDivElement> | undefined' is not assignable to type 'LegacyRef<HTMLAnchorElement> | undefined'.
            ref: isInVRExperiment ? ref : undefined, accessibilityCurrent: isActive ? 'page' : undefined, dataTestId: dataTestId, href: href, onBlur: handleOnBlur, onFocus: handleOnFocus, onMouseDown: handleOnMouseDown, onMouseEnter: handleOnMouseEnter, onMouseLeave: handleOnMouseLeave, onMouseUp: handleOnMouseUp, onTap: ({ event, dangerouslyDisableOnNavigation }) => {
                onChange({
                    activeTabIndex: index,
                    event,
                    dangerouslyDisableOnNavigation,
                });
            }, rounding: isInVRExperiment ? 4 : 2, tapStyle: !isActive && !isInVRExperiment ? 'compress' : 'none', children: jsxRuntime.jsx(FlexWithForwardRef, { alignItems: "center", direction: "column", children: jsxRuntime.jsxs(BoxWithForwardRef, { dangerouslySetInlineStyle: { __style: { backgroundColor: color } }, height: isInVRExperiment ? 48 : undefined, paddingX: isInVRExperiment ? 3 : 2, paddingY: 2, position: "relative", rounding: isInVRExperiment ? 4 : 2, userSelect: "none", children: [jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", gap: { row: 2, column: 0 }, height: isInVRExperiment ? '100%' : undefined, justifyContent: "center", children: [jsxRuntime.jsx(TextUIWithForwardRef, { color: "default", overflow: "noWrap", size: "md", children: text }), indicator === 'dot' && jsxRuntime.jsx(Notification, {}), typeof indicator === 'number' && Number.isFinite(indicator) && (jsxRuntime.jsx(Count, { count: indicator }))] }), isActive && (jsxRuntime.jsx(BoxWithForwardRef, { dangerouslySetInlineStyle: {
                                __style: {
                                    bottom: isInVRExperiment ? 8 : -3,
                                    left: !isRtl && isInVRExperiment ? 8 : undefined,
                                    right: isRtl && isInVRExperiment ? -8 : undefined,
                                },
                            }, position: "absolute", 
                            // 4px/boint, padding on left and right
                            width: `calc(100% - ${(isInVRExperiment ? 2 : 2) * 4 * 2}px)`, children: jsxRuntime.jsx(Underline, {}) }))] }) }) }) }));
});
TabWithForwardRef.displayName = 'Tab';

/**
 * [Tabs](https://gestalt.pinterest.systems/web/tabs) may be used navigate between multiple URLs. Tabs are intended as page-level navigation - if you're looking at just switching panels of content, please use [SegmentedControl](https://gestalt.pinterest.systems/web/segmentedcontrol).
 *
 * ![Tabs light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Tabs.spec.ts-snapshots/Tabs-chromium-darwin.png)
 * ![Tabs dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Tabs-dark.spec.ts-snapshots/Tabs-dark-chromium-darwin.png)
 *
 */
function Tabs({ activeTabIndex, bgColor = 'default', onChange, tabs, wrap, dataTestId, }) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    return (jsxRuntime.jsx(FlexWithForwardRef, { alignItems: "center", gap: isInVRExperiment ? undefined : { row: 4, column: 0 }, justifyContent: "start", wrap: wrap, children: tabs.map(({ href, id, indicator, ref, text }, index) => (jsxRuntime.jsx(TabWithForwardRef, { 
            // @ts-expect-error - TS2322 - Type '{ current: HTMLElement | null | undefined; } | undefined' is not assignable to type 'LegacyRef<HTMLElement> | undefined'.
            ref: ref, bgColor: bgColor, dataTestId: dataTestId, href: href, id: id, index: index, indicator: indicator, isActive: activeTabIndex === index, onChange: onChange, text: text }, id || `${href}_${index}`))) }));
}
Tabs.displayName = 'Tabs';

var styles$8 = {"default":"m3n","error":"G5j","warning":"Rbb","closeButton":"EHo adn BG7 lnZ wsz","sm":"bIW","md":"UMs","lg":"HWu"};

const backgroundColorByType = Object.freeze({
    default: 'secondary',
    error: 'errorBase',
    warning: 'warningBase',
});
const foregroundColorByType = Object.freeze({
    default: 'default',
    error: 'inverse',
    warning: 'inverse',
});
const iconsByType = Object.freeze({
    error: 'workflow-status-problem',
    warning: 'workflow-status-warning',
});
const applyDensityTheme = (size) => {
    switch (size) {
        case 'sm':
            return {
                rounding: 1,
                paddingX: 1,
                paddingY: undefined,
                height: 24,
                iconSize: 12,
                removeIconGap: 2,
                removeIconSize: 8,
                fontSize: '100',
            };
        case 'lg':
            return {
                rounding: 3,
                paddingX: 4,
                paddingY: 3,
                height: 48,
                iconSize: 16,
                removeIconGap: 4,
                removeIconSize: 8,
                fontSize: '200',
            };
        case 'md':
        default:
            return {
                rounding: 2,
                paddingX: 2,
                paddingY: 1,
                height: 32,
                iconSize: 12,
                removeIconGap: 3,
                removeIconSize: 8,
                fontSize: '200',
            };
    }
};
/**
 * [Tags](https://gestalt.pinterest.systems/web/tag) can be used to categorize, classify or filter content, usually via keywords. They can appear within [TextFields](https://gestalt.pinterest.systems/web/textfield#tagsExample), [TextAreas](https://gestalt.pinterest.systems/web/textarea#tagsExample), [ComboBox](https://gestalt.pinterest.systems/web/combobox#Tags) or as standalone components.
 *
 * ![Tag light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Tag.spec.ts-snapshots/Tag-chromium-darwin.png)
 * ![Tag dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Tag-dark.spec.ts-snapshots/Tag-dark-chromium-darwin.png)
 */
function Tag({ accessibilityRemoveIconLabel, disabled = false, onRemove, size = 'md', text, type = 'default', }) {
    const hasIcon = ['error', 'warning'].includes(type);
    const bgColor = backgroundColorByType[type];
    const fgColor = disabled && !hasIcon ? 'subtle' : foregroundColorByType[type];
    const { accessibilityErrorIconLabel, accessibilityRemoveIconLabel: accessibilityRemoveIconLabelDefault, accessibilityWarningIconLabel, } = useDefaultLabelContext('Tag');
    const accessibilityLabels = {
        error: accessibilityErrorIconLabel,
        warning: accessibilityWarningIconLabel,
    };
    const { isFocusVisible } = useFocusVisible();
    const removeIconClasses = classnames(styles$8.closeButton, styles$8[type], touchableStyles.tapTransition, {
        [focusStyles.hideOutline]: !isFocusVisible,
        [focusStyles.accessibilityOutline]: isFocusVisible,
    }, styles$8[size]);
    const { height, rounding, paddingX, paddingY, fontSize, iconSize, removeIconSize } = applyDensityTheme(size);
    return (jsxRuntime.jsx(BoxWithForwardRef, { "aria-disabled": disabled, color: bgColor, dangerouslySetInlineStyle: {
            __style: disabled && !hasIcon ? { border: `solid 1px ${TOKEN_COLOR_BORDER_TAG_DISABLED}` } : {},
        }, display: "inlineBlock", height: height, maxWidth: 300, 
        // @ts-expect-error - TS2322 - Type 'number' is not assignable to type 'Padding | undefined'.
        paddingX: paddingX, 
        // @ts-expect-error - TS2322 - Type 'number | undefined' is not assignable to type 'Padding | undefined'.
        paddingY: paddingY, position: "relative", 
        // @ts-expect-error - TS2322 - Type 'number' is not assignable to type '0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | "circle" | "pill" | undefined'.
        rounding: rounding, children: jsxRuntime.jsxs(BoxWithForwardRef, { alignItems: "center", display: "flex", height: "100%", marginEnd: disabled ? 0 : 5, children: [(type === 'error' || type === 'warning') && (jsxRuntime.jsx(BoxWithForwardRef, { marginEnd: 1, marginStart: 1, children: jsxRuntime.jsx(Icon, { accessibilityLabel: accessibilityLabels[type], color: fgColor, icon: iconsByType[type], size: iconSize }) })), jsxRuntime.jsx(TextWithForwardRef, { color: fgColor, inline: true, lineClamp: 1, overflow: "breakAll", 
                    // @ts-expect-error - TS2322 - Type 'string' is not assignable to type 'Size | undefined'.
                    size: fontSize, children: text }), jsxRuntime.jsx(BoxWithForwardRef, { children: !disabled && (
                    // @ts-expect-error - TS2322 - Type '(arg1: { event: MouseEvent<HTMLButtonElement, MouseEvent>; }) => void' is not assignable to type 'MouseEventHandler<HTMLButtonElement>'.
                    jsxRuntime.jsx("button", { className: removeIconClasses, onClick: onRemove, type: "button", children: jsxRuntime.jsx(BoxWithForwardRef, { alignItems: "center", dangerouslySetInlineStyle: {
                                __style: { marginTop: '1px' },
                            }, display: "flex", justifyContent: "center", width: "100%", children: jsxRuntime.jsx(Icon, { accessibilityLabel: accessibilityRemoveIconLabel !== null && accessibilityRemoveIconLabel !== void 0 ? accessibilityRemoveIconLabel : accessibilityRemoveIconLabelDefault, color: fgColor, icon: "cancel", size: removeIconSize }) }) })) })] }) }));
}
Tag.displayName = 'Tag';

var styles$7 = {"tagLarge":"wyV Hsu","tagMedium":"QE0 Hsu V92","tagSmall":"M3c Hsu _co","tagWrapperRounded":"nRf DUt","hovered":"F4y BG7 LJB","primary":"a9r","secondary":"snf","disabled":"MsM","dismissButton":"WjL BG7","dismissButtonPosition":"L-P","dismissButtonRounding":"v4P","dismissHovered":"ZIS LJB"};

/**
 *
 * Given an interactions state for a checkbox, returns the relevant bg and border color
 * */
function getCheckboxColor({ state, colorStyles, opts, }) {
    const defaultBackgroundColor = TOKEN_COLOR_TRANSPARENT;
    const defaultBorderColor = TOKEN_COLOR_TRANSPARENT;
    if (state.disabled) {
        return {
            backgroundColor: TOKEN_COLOR_GRAY_ROBOFLOW_300,
            borderColor: defaultBorderColor,
        };
    }
    if (state.hovered && !state.selected) {
        return {
            backgroundColor: TOKEN_COLOR_BACKGROUND_FORMFIELD_PRIMARY,
            borderColor: TOKEN_COLOR_BORDER_DEFAULT,
        };
    }
    if (state.selected) {
        return {
            backgroundColor: colorStyles.borderColor,
            borderColor: defaultBorderColor,
        };
    }
    if (opts === null || opts === void 0 ? void 0 : opts.showByDefault) {
        return {
            backgroundColor: TOKEN_COLOR_BACKGROUND_FORMFIELD_PRIMARY,
            borderColor: TOKEN_COLOR_BORDER_DEFAULT,
        };
    }
    return {
        backgroundColor: defaultBackgroundColor,
        borderColor: defaultBorderColor,
    };
}

/** Gets the relevant dataviz color from a code. We use the color hex to generate a shade. Data visualization colors are a part of theme tokens */
function getDataVisualizationColor(theme, vizColor, opts) {
    const hex = theme === 'lightMode'
        ? // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type '`color-data-visualization-${string}`' can't be used to index type '{ "color-red-pushpin-0": string; "color-red-pushpin-50": string; "color-red-pushpin-100": string; "color-red-pushpin-200": string; "color-red-pushpin-300": string; "color-red-pushpin-400": string; ... 327 more ...; "elevation-datepicker": string; }'.
            lightColorDesignTokens[`color-data-visualization-${vizColor}`]
        : // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type '`color-data-visualization-${string}`' can't be used to index type '{ "color-red-pushpin-0": string; "color-red-pushpin-50": string; "color-red-pushpin-100": string; "color-red-pushpin-200": string; "color-red-pushpin-300": string; "color-red-pushpin-400": string; ... 327 more ...; "elevation-datepicker": string; }'.
            darkColorDesignTokens[`color-data-visualization-${vizColor}`];
    if (!hex)
        throw new Error('Invalid Color Token provided to TileData');
    // add an alpha channel to the hex, at 10% opacity
    // https://gist.github.com/lopspower/03fb1cc0ac9f32ef38f4
    return (opts === null || opts === void 0 ? void 0 : opts.lighten) ? `${hex}1A` : hex;
}

const sizes = {
    sm: { fontSize: '200' },
    md: { fontSize: '200' },
    lg: { fontSize: '300' },
};
/**
 * [TagData](https://gestalt.pinterest.systems/web/tagdata)  enables users to select multiple categories to compare with each other in a graph or chart. It contains a label and can be used as a filter for different sources.
 *
 * ![TagData light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/tagdata.spec.ts-snapshots/tagdata-chromium-darwin.png)
 * ![TagData dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/tagdata-dark.spec.ts-snapshots/tagdata-dark-chromium-darwin.png)
 */
function TagData({ accessibilityRemoveIconLabel, baseColor = 'primary', color = '05', disabled = false, id, onTap, onRemove, selected, showCheckbox, size = 'md', text, tooltip, }) {
    var _a;
    const { accessibilityRemoveIconLabel: accessibilityRemoveIconLabelDefault } = useDefaultLabelContext('TagData');
    const { colorSchemeName } = useColorScheme();
    const borderColor = getDataVisualizationColor(colorSchemeName, color);
    const bgColor = getDataVisualizationColor(colorSchemeName, color, { lighten: true });
    const fgColor = disabled ? 'subtle' : 'default';
    const colorStyles = {
        borderColor,
        backgroundColor: bgColor,
    };
    const { handleOnBlur, handleOnMouseEnter, handleOnMouseLeave, isHovered } = useInteractiveStates();
    const isFocusVisible = useFocusVisible();
    const getTagClasses = () => classnames(borderStyles.solid, borderStyles.transparentBorder, {
        [styles$7.tagLarge]: size === 'lg',
        [styles$7.tagMedium]: size === 'md',
        [styles$7.tagSmall]: size === 'sm',
        [styles$7.primary]: baseColor === 'primary',
        [styles$7.secondary]: baseColor === 'secondary',
        [styles$7.hovered]: isHovered,
        [styles$7.disabled]: disabled,
        [styles$7.tagWrapperRounded]: true,
    });
    const getRemoveIconClasses = () => classnames(borderStyles.solid, borderStyles.transparentBorder, styles$7.dismissButton, styles$7.dismissButtonRounding, styles$7.dismissButtonPosition, {
        [styles$7.primary]: baseColor === 'primary',
        [styles$7.secondary]: baseColor === 'secondary',
        [styles$7.disabled]: disabled,
        [styles$7.dismissHovered]: isHovered,
        [focusStyles.hideOutline]: !isFocusVisible,
        [focusStyles.accessibilityOutline]: isFocusVisible,
    });
    const checkboxId = useId$1();
    const tileStyle = selected && !disabled ? colorStyles : {};
    const checkBoxStyle = getCheckboxColor({
        state: { hovered: isHovered, selected: !!selected, disabled },
        colorStyles,
        opts: {
            showByDefault: true,
        },
    });
    return (jsxRuntime.jsxs(BoxWithForwardRef, { display: "inlineBlock", maxWidth: 300, position: "relative", rounding: 2, children: [jsxRuntime.jsx(MaybeTooltip$1, { disabled: disabled, tooltip: tooltip, children: jsxRuntime.jsx(TapAreaWithForwardRef, { disabled: disabled, fullHeight: true, fullWidth: true, onBlur: handleOnBlur, onMouseEnter: handleOnMouseEnter, onMouseLeave: handleOnMouseLeave, onTap: ({ event }) => onTap === null || onTap === void 0 ? void 0 : onTap({ event, id, selected: !selected }), role: "button", rounding: 2, children: jsxRuntime.jsx("div", { className: getTagClasses(), style: tileStyle, children: jsxRuntime.jsxs(BoxWithForwardRef, { alignItems: "center", display: "flex", height: "100%", marginEnd: onRemove ? 4 : 0, paddingX: 2, children: [showCheckbox && (jsxRuntime.jsx(BoxWithForwardRef, { marginEnd: 1, children: jsxRuntime.jsx(InternalCheckboxWithForwardRef, { checked: selected, id: `readonly-checkbox-${checkboxId}`, readOnly: true, size: "sm", style: checkBoxStyle }) })), jsxRuntime.jsx(TextWithForwardRef, { color: fgColor, inline: true, lineClamp: 1, overflow: "breakAll", size: (_a = sizes[size]) === null || _a === void 0 ? void 0 : _a.fontSize, title: tooltip && tooltip.text ? '' : text, children: text })] }) }) }) }), onRemove && (jsxRuntime.jsx("button", { className: getRemoveIconClasses(), disabled: disabled, onClick: (event) => {
                    onRemove({ event, id });
                }, onMouseEnter: handleOnMouseEnter, onMouseLeave: handleOnMouseLeave, style: tileStyle, type: "button", children: jsxRuntime.jsx(BoxWithForwardRef, { alignItems: "center", display: "flex", justifyContent: "center", width: "100%", children: jsxRuntime.jsx(Icon, { accessibilityLabel: accessibilityRemoveIconLabel !== null && accessibilityRemoveIconLabel !== void 0 ? accessibilityRemoveIconLabel : accessibilityRemoveIconLabelDefault, color: fgColor, icon: "cancel", size: 10 }) }) }))] }));
}
TagData.displayName = 'TagData';

var styles$6 = {"textArea":"Gnj Hsu tBJ dyH iFc sAJ L4E","unstyledTextArea":"L2q YMx tBJ dyH iFc sAJ MIw Rym QLY p6V ojN","textAreaSpacer":"Q2i YMx tBJ dyH iFc sAJ","textAreaWrapper":"vTx"};

var styles$5 = {"input":"LNh Q1L Ucg","inputParent":"c7Q","enabledText":"V8K","disabledText":"pZW","borderFocus":"bDX","enabled":"ElC","enabledBorder":"Md_","enabledBorderHover":"PRX","errorBorder":"kD5","errorBorderHover":"RdO","errorBorderFocus":"ekg","disabled":"kCD","label":"f7N","md_input":"XtU","md_visibleLabel":"RRV","md_noLabel":"byu","md_inputHorizontalPadding":"mz7","md_label":"F51","md_labelPos":"aWm"};

const TextAreaWithForwardRef$1 = forwardRef(function TextArea({ dataTestId, disabled = false, errorMessage, hasError = false, helperText, id, label, labelDisplay, maxLength, name, onBlur, onChange, onClick, onFocus, onKeyDown, placeholder, readOnly, rows = 2, value, }, ref) {
    var _a;
    const innerRef = useRef(null);
    const labelRef = useRef(null);
    const { handleOnBlur, handleOnFocus, handleOnMouseEnter, handleOnMouseLeave, isHovered, isFocused, } = useInteractiveStates();
    // @ts-expect-error - TS2322 - Type 'HTMLDivElement | HTMLTextAreaElement | null' is not assignable to type 'HTMLTextAreaElement'.
    useImperativeHandle(ref, () => innerRef.current);
    const hasErrorMessage = Boolean(errorMessage);
    const isLabelVisible = labelDisplay === 'visible';
    // ==== STATE ====
    const [currentLength, setCurrentLength] = useState((_a = value === null || value === void 0 ? void 0 : value.length) !== null && _a !== void 0 ? _a : 0);
    const [ellipsisActive, setEllipsisActive] = useState(false);
    // ==== A11Y ====
    let ariaDescribedby;
    if (hasErrorMessage) {
        ariaDescribedby = `${id}-error`;
    }
    if (helperText || maxLength) {
        ariaDescribedby = `${id}-helperText`;
    }
    const isEllipsisActive = (element) => element.offsetHeight < element.scrollHeight || element.offsetWidth < element.scrollWidth;
    const checkEllipsisActive = useCallback(() => {
        if (labelRef.current && !ellipsisActive && isEllipsisActive(labelRef === null || labelRef === void 0 ? void 0 : labelRef.current)) {
            setEllipsisActive(true);
        }
        else if (labelRef.current && ellipsisActive && !isEllipsisActive(labelRef === null || labelRef === void 0 ? void 0 : labelRef.current)) {
            setEllipsisActive(false);
        }
    }, [ellipsisActive]);
    useEffect(() => {
        if (!label)
            return () => { };
        checkEllipsisActive();
        if (typeof window !== 'undefined')
            window.addEventListener('resize', checkEllipsisActive);
        return () => {
            if (typeof window !== 'undefined')
                window === null || window === void 0 ? void 0 : window.removeEventListener('resize', checkEllipsisActive);
        };
    }, [label, checkEllipsisActive]);
    return (jsxRuntime.jsxs("div", { children: [jsxRuntime.jsx("div", { onMouseEnter: handleOnMouseEnter, onMouseLeave: handleOnMouseLeave, children: jsxRuntime.jsxs("div", { className: classnames(styles$5.inputParent, styles$5.md_input, styles$5.md_inputHorizontalPadding, {
                        [styles$5.disabled]: disabled,
                        [styles$5.disabledText]: disabled,
                        [styles$5.enabled]: !disabled,
                        [styles$5.enabledText]: !disabled,
                        [styles$5.borderFocus]: !disabled && isFocused && !hasErrorMessage,
                        [styles$5.errorBorderFocus]: !disabled && isFocused && hasErrorMessage,
                        [styles$5.enabledBorder]: !disabled && !isFocused && !hasErrorMessage && !isHovered,
                        [styles$5.enabledBorderHover]: !disabled && !isFocused && !hasErrorMessage && isHovered,
                        [styles$5.errorBorder]: !disabled && !isFocused && hasErrorMessage,
                        [styles$5.errorBorderHover]: !disabled && !isFocused && hasErrorMessage && isHovered,
                        // md
                        [styles$5.md_visibleLabel]: label && isLabelVisible,
                        [styles$5.md_noLabel]: !label || (label && !isLabelVisible),
                    }), children: [label && (jsxRuntime.jsx("label", { className: classnames(styles$5.label, styles$5.md_label, styles$5.md_labelPos, {
                                [boxStyles.visuallyHidden]: !isLabelVisible,
                            }), htmlFor: id, children: jsxRuntime.jsx(TextUIWithForwardRef, { ref: labelRef, color: disabled ? 'disabled' : 'default', lineClamp: 1, size: "xs", title: ellipsisActive ? label : '', children: label }) })), jsxRuntime.jsx("textarea", { ref: innerRef, "aria-describedby": isFocused ? ariaDescribedby : undefined, "aria-invalid": hasErrorMessage || hasError ? 'true' : 'false', className: classnames(styles$5.input), "data-test-id": dataTestId, disabled: disabled, id: id, maxLength: maxLength === null || maxLength === void 0 ? void 0 : maxLength.characterCount, name: name, onBlur: (event) => {
                                handleOnBlur();
                                onBlur === null || onBlur === void 0 ? void 0 : onBlur({ event, value: event.currentTarget.value });
                            }, onChange: (event) => {
                                var _a, _b;
                                setCurrentLength((_b = (_a = event.currentTarget.value) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0);
                                onChange({ event, value: event.currentTarget.value });
                            }, onClick: (event) => onClick === null || onClick === void 0 ? void 0 : onClick({ event, value: event.currentTarget.value }), onFocus: (event) => {
                                handleOnFocus();
                                onFocus === null || onFocus === void 0 ? void 0 : onFocus({ event, value: event.currentTarget.value });
                            }, onKeyDown: (event) => onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown({ event, value: event.currentTarget.value }), placeholder: placeholder, readOnly: readOnly, rows: rows, value: value })] }) }), (helperText || maxLength) && !hasErrorMessage ? (jsxRuntime.jsx(FormHelperText, { currentLength: currentLength, disabled: disabled, id: `${id}-helperText`, maxLength: maxLength, size: "lg", text: helperText })) : null, !disabled && hasErrorMessage ? (jsxRuntime.jsx(FormErrorMessage, { id: `${id}-error`, size: "md", text: errorMessage })) : null] }));
});
TextAreaWithForwardRef$1.displayName = 'TextArea';

const ROW_HEIGHT = 24;
const INPUT_PADDING_WITH_TAGS = 20;
/**
 * [TextArea](https://gestalt.pinterest.systems/web/textarea) allows for multi-line input.
 *
 * ![TextArea light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/TextArea.spec.ts-snapshots/TextArea-chromium-darwin.png)
 * ![TextArea dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/TextArea-dark.spec.ts-snapshots/TextArea-dark-chromium-darwin.png)
 *
 */
const TextAreaWithForwardRef = forwardRef(function TextArea({ dataTestId, disabled = false, errorMessage, hasError = false, helperText, id, label, labelDisplay = 'visible', maxLength, name, onBlur, onChange, onFocus, onKeyDown, placeholder, readOnly = false, rows, tags, value, }, ref) {
    var _a;
    const [focused, setFocused] = useState(false);
    const [currentLength, setCurrentLength] = useState((_a = value === null || value === void 0 ? void 0 : value.length) !== null && _a !== void 0 ? _a : 0);
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const defaultRows = isInVRExperiment ? 2 : 3;
    const overridenRows = rows !== null && rows !== void 0 ? rows : defaultRows;
    const handleChange = (event) => {
        var _a, _b;
        setCurrentLength((_b = (_a = event.currentTarget.value) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0);
        onChange({ event, value: event.currentTarget.value });
    };
    const handleBlur = (event) => {
        setFocused(false);
        if (onBlur) {
            onBlur({ event, value: event.currentTarget.value });
        }
    };
    const handleFocus = (event) => {
        setFocused(true);
        if (onFocus) {
            onFocus({ event, value: event.currentTarget.value });
        }
    };
    const handleKeyDown = (event) => {
        if (onKeyDown) {
            onKeyDown({ event, value: event.currentTarget.value });
        }
    };
    const hasErrorMessage = Boolean(errorMessage);
    const classes = classnames(styles$6.textArea, formElement.base, formElement.lg, disabled ? formElement.disabled : formElement.enabled, (hasError || hasErrorMessage) && !focused ? formElement.errored : formElement.normal, tags
        ? {
            [focusStyles.accessibilityOutlineFocus]: focused,
            [styles$6.textAreaWrapper]: true,
        }
        : {});
    if (maxLength && maxLength.characterCount < 0) {
        throw new Error('`maxLength` must be an integer value 0 or higher.');
    }
    let ariaDescribedby;
    if (hasErrorMessage) {
        ariaDescribedby = `${id}-error`;
    }
    if (helperText || maxLength) {
        ariaDescribedby = `${id}-helperText`;
    }
    const inputElement = (jsxRuntime.jsx("textarea", { 
        // checking for "focused" is not required by screenreaders but it prevents a11y integration tests to complain about missing label, as aria-describedby seems to shadow label in tests though it's a W3 accepeted pattern https://www.w3.org/TR/WCAG20-TECHS/ARIA1.html
        ref: ref, "aria-describedby": focused ? ariaDescribedby : undefined, "aria-invalid": hasErrorMessage || hasError ? 'true' : 'false', className: tags ? styles$6.unstyledTextArea : classes, "data-test-id": dataTestId, disabled: disabled, id: id, maxLength: maxLength === null || maxLength === void 0 ? void 0 : maxLength.characterCount, name: name, onBlur: handleBlur, onChange: handleChange, onFocus: handleFocus, onKeyDown: handleKeyDown, placeholder: placeholder, readOnly: readOnly, rows: tags ? undefined : overridenRows, value: value }));
    const tagsWrapperStyle = {
        minHeight: overridenRows * ROW_HEIGHT + INPUT_PADDING_WITH_TAGS,
        maxHeight: overridenRows * ROW_HEIGHT + INPUT_PADDING_WITH_TAGS,
    };
    if (isInVRExperiment && !tags)
        return (jsxRuntime.jsx(TextAreaWithForwardRef$1, { ref: ref, dataTestId: dataTestId, disabled: disabled, errorMessage: errorMessage, hasError: hasError, helperText: helperText, id: id, label: label, labelDisplay: labelDisplay, maxLength: maxLength, name: name, onBlur: onBlur, onChange: onChange, onFocus: onFocus, onKeyDown: onKeyDown, placeholder: placeholder, readOnly: readOnly, rows: overridenRows, value: value }));
    if (isInVRExperiment && tags)
        return (jsxRuntime.jsx(TagAreaWithForwardRef, { ref: ref, dataTestId: dataTestId, disabled: disabled, errorMessage: errorMessage, hasError: hasError, helperText: helperText, id: id, label: label, labelDisplay: labelDisplay, maxLength: maxLength, name: name, 
            // @ts-expect-error - TS2322
            onBlur: onBlur, 
            // @ts-expect-error - TS2322
            onChange: onChange, 
            // @ts-expect-error - TS2322
            onFocus: onFocus, 
            // @ts-expect-error - TS2322
            onKeyDown: onKeyDown, placeholder: placeholder, readOnly: readOnly, rows: overridenRows, size: "md", tags: tags, value: value }));
    return (jsxRuntime.jsxs("span", { children: [label && jsxRuntime.jsx(FormLabel, { id: id, label: label, labelDisplay: labelDisplay, size: "lg" }), tags ? (jsxRuntime.jsxs("div", { className: classes, style: tagsWrapperStyle, children: [tags.map((tag, tagIndex) => (
                    // eslint-disable-next-line react/no-array-index-key
                    jsxRuntime.jsx(BoxWithForwardRef, { marginBottom: 1, marginEnd: 1, children: tag }, tagIndex))), jsxRuntime.jsxs(BoxWithForwardRef, { flex: "grow", maxWidth: "100%", overflow: "hidden", position: "relative", children: [jsxRuntime.jsx("div", { "aria-hidden": true, className: styles$6.textAreaSpacer, children: value || '-' }), inputElement] })] })) : (inputElement), (helperText || maxLength) && !errorMessage ? (jsxRuntime.jsx(FormHelperText, { currentLength: currentLength, id: `${id}-helperText`, maxLength: maxLength, text: helperText })) : null, hasErrorMessage && jsxRuntime.jsx(FormErrorMessage, { id: `${id}-error`, text: errorMessage })] }));
});
TextAreaWithForwardRef.displayName = 'TextArea';

var styles$4 = {"textCompact":"WMr dyH","default":"Uhi","emphasis":"Ww9"};

function isNotNullish(val) {
    return val !== null && val !== undefined;
}
/**
 * [TextCompact](https://gestalt.pinterest.systems/web/textcompact) component is used for metadata, annotations, and other instances where text should be small and dense. Its line height is tighter than the Text component.
 *
 * ![Text light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/TextCompact.spec.ts-snapshots/TextCompact-chromium-darwin.png)
 * ![Text dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/TextUI-dark.spec.ts-snapshots/TextCompact-dark-chromium-darwin.png)
 */
const TextCompactWithForwardRef = forwardRef(function Text({ align = 'start', children, color = 'default', dataTestId, inline = false, italic = false, lineClamp, overflow = 'breakWord', title, weight = 'default', }, ref) {
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const colorClass = semanticColors.includes(color) && stylesText[color];
    const getWordBreakStyle = () => {
        if (overflow === 'breakAll') {
            return typographyStyle.breakAll;
        }
        // default to breakWord if lineClamp is set
        if (overflow === 'breakWord' || isNotNullish(lineClamp)) {
            return typographyStyle.breakWord;
        }
        return undefined;
    };
    const cs = classnames(color && colorClass, align === 'center' && typographyStyle.alignCenter, 
    // @ts-expect-error - TS2367 - This condition will always return 'false' since the types '"center" | "start" | "end" | "forceLeft" | "forceRight"' and '"justify"' have no overlap.
    align === 'justify' && typographyStyle.alignJustify, align === 'start' && typographyStyle.alignStart, align === 'end' && typographyStyle.alignEnd, align === 'forceLeft' && typographyStyle.alignForceLeft, align === 'forceRight' && typographyStyle.alignForceRight, getWordBreakStyle(), overflow === 'noWrap' && typographyStyle.noWrap, italic && typographyStyle.fontStyleItalic, isNotNullish(lineClamp) && typographyStyle.lineClamp, {
        [stylesText.Text]: !isInVRExperiment,
        [typographyStyle.fontSize100]: !isInVRExperiment,
        [typographyStyle.fontWeightSemiBold]: !isInVRExperiment && weight === 'emphasis',
        [typographyStyle.fontWeightNormal]: !isInVRExperiment && weight === 'default',
        [styles$4.textCompact]: isInVRExperiment,
        [styles$4.default]: isInVRExperiment && weight === 'default',
        [styles$4.emphasis]: isInVRExperiment && weight === 'emphasis',
    });
    const Tag = inline ? 'span' : 'div';
    return (jsxRuntime.jsx(Tag, Object.assign({ className: cs, "data-test-id": dataTestId, title: title !== null && title !== void 0 ? title : (isNotNullish(lineClamp) && typeof children === 'string' ? children : undefined) }, (lineClamp ? { style: { WebkitLineClamp: lineClamp } } : {}), { ref: ref, children: children })));
});
TextCompactWithForwardRef.displayName = 'TextCompact';

function MaybeTooltip({ children, tooltipText, }) {
    return tooltipText ? (jsxRuntime.jsx(Tooltip, { inline: true, text: tooltipText, children: children })) : (children);
}
function IconButtonEnd({ accessibilityChecked, accessibilityHidden, accessibilityLabel, hoverStyle = 'default', icon, onClick, pogPadding = 1, role, tapStyle, tooltipText, size, }) {
    const [focused, setFocused] = useState(false);
    const isSM = size === 'sm';
    const isMD = size === 'md';
    const isLG = size === 'lg';
    return (jsxRuntime.jsx("div", { className: classnames(styles$r.endIconContainer, {
            [styles$r.sm_endIconContainer]: isSM,
            [styles$r.md_endIconContainer]: isMD,
            [styles$r.lg_endIconContainer]: isLG,
        }), children: jsxRuntime.jsx(MaybeTooltip, { tooltipText: tooltipText, children: jsxRuntime.jsx(TapAreaWithForwardRef, { accessibilityChecked: accessibilityChecked, accessibilityLabel: accessibilityLabel, onBlur: () => setFocused(false), onFocus: () => setFocused(true), onKeyDown: ({ event }) => {
                    if ([ENTER$1, SPACE$1].includes(event.keyCode))
                        onClick();
                    if (event.keyCode !== TAB$1)
                        event.preventDefault();
                }, onMouseEnter: () => setFocused(true), onMouseLeave: () => setFocused(false), onTap: onClick, role: role, rounding: 1, tabIndex: accessibilityHidden ? -1 : 0, tapStyle: tapStyle, children: jsxRuntime.jsx(Pog, { accessibilityLabel: "", bgColor: focused && hoverStyle === 'default' ? 'lightGray' : 'transparent', icon: icon, iconColor: "darkGray", padding: pogPadding, size: "sm" }) }) }) }));
}

/**
 * [TextField](https://gestalt.pinterest.systems/web/textfield) allows for multiple types of text input.
 *
 * ![TextField light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/TextField.spec.ts-snapshots/TextField-chromium-darwin.png)
 * ![TextField dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/TextField-dark.spec.ts-snapshots/TextField-dark-chromium-darwin.png)
 *
 */
const TextFieldWithForwardRef = forwardRef(function TextField({ autoComplete, dataTestId, disabled = false, errorMessage, hasError = false, helperText, id, label, labelDisplay = 'visible', maxLength, mobileEnterKeyHint, mobileInputMode, name, onBlur, onChange, onFocus, onKeyDown, placeholder, readOnly = false, size = 'md', tags, type: typeProp = 'text', value, }, ref) {
    /**
     * Yes, this is initializing a state variable with a prop value and then disregarding the prop value — often a code smell, I know. This is necessary to internalize the effective input type (password vs text) and not force the user to handle responding to clicks on the button
     */
    const [type, setType] = useState(typeProp);
    const isInVRExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    useEffect(() => {
        setType(typeProp);
    }, [typeProp]);
    const isPasswordField = typeProp === 'password';
    const isCurrentlyPasswordType = type === 'password';
    const { accessibilityHidePasswordLabel, accessibilityShowPasswordLabel } = useDefaultLabelContext('TextField');
    if (isInVRExperiment && !tags) {
        return (jsxRuntime.jsx(InternalTextFieldWithForwardRef, { ref: ref, autoComplete: autoComplete, dataTestId: dataTestId, disabled: disabled, errorMessage: errorMessage, hasError: hasError, helperText: helperText, iconButton: isPasswordField ? (jsxRuntime.jsx(IconButtonEnd, { accessibilityChecked: !isCurrentlyPasswordType, accessibilityLabel: isCurrentlyPasswordType
                    ? accessibilityShowPasswordLabel !== null && accessibilityShowPasswordLabel !== void 0 ? accessibilityShowPasswordLabel : ''
                    : accessibilityHidePasswordLabel !== null && accessibilityHidePasswordLabel !== void 0 ? accessibilityHidePasswordLabel : '', icon: isCurrentlyPasswordType ? 'eye' : 'eye-hide', onClick: () => {
                    setType(isCurrentlyPasswordType ? 'text' : 'password');
                }, role: "switch", size: size, tooltipText: isCurrentlyPasswordType
                    ? accessibilityShowPasswordLabel !== null && accessibilityShowPasswordLabel !== void 0 ? accessibilityShowPasswordLabel : ''
                    : accessibilityHidePasswordLabel !== null && accessibilityHidePasswordLabel !== void 0 ? accessibilityHidePasswordLabel : '' })) : undefined, id: id, label: label, labelDisplay: labelDisplay, maxLength: maxLength, mobileEnterKeyHint: mobileEnterKeyHint, mobileInputMode: mobileInputMode, name: name, onBlur: onBlur, onChange: onChange, onFocus: onFocus, onKeyDown: onKeyDown, placeholder: placeholder, readOnly: readOnly, size: size, tags: tags, type: type, value: value }));
    }
    if (isInVRExperiment && tags)
        return (jsxRuntime.jsx(TagAreaWithForwardRef
        // @ts-expect-error - TS2322
        , { 
            // @ts-expect-error - TS2322
            ref: ref, dataTestId: dataTestId, disabled: disabled, errorMessage: errorMessage, hasError: hasError, helperText: helperText, id: id, label: label, labelDisplay: labelDisplay, maxLength: maxLength, name: name, onBlur: onBlur, onChange: onChange, onFocus: onFocus, onKeyDown: onKeyDown, placeholder: placeholder, readOnly: readOnly, size: size, tags: tags, value: value }));
    return (jsxRuntime.jsx(InternalTextFieldWithForwardRef$1, { ref: ref, autoComplete: autoComplete, dataTestId: dataTestId, disabled: disabled, errorMessage: errorMessage, hasError: hasError, helperText: helperText, iconButton: isPasswordField ? (jsxRuntime.jsx(IconButtonEnd$1, { accessibilityChecked: !isCurrentlyPasswordType, accessibilityLabel: isCurrentlyPasswordType
                ? accessibilityShowPasswordLabel !== null && accessibilityShowPasswordLabel !== void 0 ? accessibilityShowPasswordLabel : ''
                : accessibilityHidePasswordLabel !== null && accessibilityHidePasswordLabel !== void 0 ? accessibilityHidePasswordLabel : '', icon: isCurrentlyPasswordType ? 'eye' : 'eye-hide', onClick: () => {
                setType(isCurrentlyPasswordType ? 'text' : 'password');
            }, role: "switch", tooltipText: isCurrentlyPasswordType
                ? accessibilityShowPasswordLabel !== null && accessibilityShowPasswordLabel !== void 0 ? accessibilityShowPasswordLabel : ''
                : accessibilityHidePasswordLabel !== null && accessibilityHidePasswordLabel !== void 0 ? accessibilityHidePasswordLabel : '' })) : undefined, id: id, label: label, labelDisplay: labelDisplay, maxLength: maxLength, mobileEnterKeyHint: mobileEnterKeyHint, mobileInputMode: mobileInputMode, name: name, onBlur: onBlur, onChange: onChange, onFocus: onFocus, onKeyDown: onKeyDown, placeholder: placeholder, readOnly: readOnly, size: size, tags: tags, type: type, value: value }));
});
TextFieldWithForwardRef.displayName = 'TextField';

var styles$3 = {"baseTile":"Dp0 _O1 i1W Kzl ho- Hsu XgI Pw5 gaK","tileWidth":"t3W","hovered":"Qyg","focused":"J0f C1J","disabled":"iWp gaK","dataVisualizationColor01":"tVN","dataVisualizationColor02":"kNO","dataVisualizationColor03":"xPy","dataVisualizationColor04":"ojT","dataVisualizationColor05":"yHQ","dataVisualizationColor06":"UQ-","dataVisualizationColor07":"lD_","dataVisualizationColor08":"HiQ","dataVisualizationColor09":"nHc","dataVisualizationColor10":"Jgp","dataVisualizationColor11":"S_n","dataVisualizationColor12":"wzh"};

/**
 * [TileData](https://gestalt.pinterest.systems/web/tiledata) enables users to select multiple categories to compare with each other in a graph or chart view, while still being able to see all of the data points.
 *
 * ![TileData light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/TileData.spec.ts-snapshots/TileData-chromium-darwin.png)
 * ![TileData dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/TileData-dark.spec.ts-snapshots/TileData-dark-chromium-darwin.png)
 *
 */
function TileData({ color = '05', disabled = false, id, onTap, selected, showCheckbox, tooltip, title, trend, trendSentiment, value, }) {
    const { colorSchemeName } = useColorScheme();
    const borderColor = getDataVisualizationColor(colorSchemeName, color);
    const colorStyles = {
        borderColor,
    };
    const { handleOnBlur, handleOnMouseEnter, handleOnMouseLeave, isHovered } = useInteractiveStates();
    const checkboxId = useId$1();
    const getClasses = () => classnames(styles$3.baseTile, styles$3.tileWidth, {
        [styles$3.hovered]: isHovered,
        [styles$3.disabled]: disabled,
        [styles$3[`dataVisualizationColor${color}`]]: selected && !disabled,
    });
    const tileStyle = selected && !disabled ? colorStyles : {};
    const checkBoxStyle = getCheckboxColor({
        state: { hovered: isHovered, selected: !!selected, disabled },
        colorStyles,
    });
    return (jsxRuntime.jsx(MaybeTooltip$1, { disabled: disabled, tooltip: tooltip, children: jsxRuntime.jsx(BoxWithForwardRef, { children: jsxRuntime.jsx(TapAreaWithForwardRef, { disabled: disabled, onBlur: handleOnBlur, onMouseEnter: handleOnMouseEnter, onMouseLeave: handleOnMouseLeave, onTap: ({ event }) => onTap === null || onTap === void 0 ? void 0 : onTap({ event, id, selected: !selected }), role: "button", rounding: 4, children: jsxRuntime.jsx("div", { className: getClasses(), style: tileStyle, children: jsxRuntime.jsxs(FlexWithForwardRef, { direction: "row", gap: 2, children: [jsxRuntime.jsx(InternalDatapoint, { disabled: disabled, lineClamp: 2, maxTitleWidth: 135, minTitleWidth: 80, numTitleRows: 2, title: title, trend: trend, trendSentiment: trendSentiment, value: value }), showCheckbox && (jsxRuntime.jsx(InternalCheckboxWithForwardRef, { checked: selected, id: `readonly-checkbox-blah-${checkboxId}`, readOnly: true, size: "sm", style: checkBoxStyle }))] }) }) }) }) }));
}
TileData.displayName = 'TileData';

var styles$2 = {"toast":"LkD"};

function PrimaryAction(_a) {
    var _b;
    var { accessibilityLabel, label, size = 'lg' } = _a, props = __rest(_a, ["accessibilityLabel", "label", "size"]);
    const isInExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    if (props.role === 'link')
        return (jsxRuntime.jsx(ButtonLinkWithForwardRef, { accessibilityLabel: accessibilityLabel, color: "white", href: (_b = props.href) !== null && _b !== void 0 ? _b : '', onClick: props.onClick, rel: props.rel, size: size, target: props.target, text: label }));
    return (jsxRuntime.jsx(ButtonWithForwardRef, { accessibilityLabel: accessibilityLabel, color: isInExperiment ? 'white' : undefined, onClick: props.onClick, size: size, text: label }));
}

const DEFAULT_COLORS = {
    containerColor: 'inverse',
    textColor: 'inverse',
    iconColor: 'white',
};
const COLORS_BY_TYPE = Object.freeze({
    default: DEFAULT_COLORS,
    success: DEFAULT_COLORS,
    error: Object.assign(Object.assign({}, DEFAULT_COLORS), { containerColor: 'errorBase' }),
    progress: {
        containerColor: 'secondary',
        textColor: 'default',
        iconColor: 'darkGray',
    },
});
/**
 * [Toasts](https://gestalt.pinterest.systems/web/toast) are brief and small messages that overlay content, but do not block the user’s flow, as they are out of the way and ephemeral.
 *
 * Toasts do not require user action and primarily acknowledge that a user has performed an action or completed a task.
 *
 * ![Toast light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Toast.spec.ts-snapshots/Toast-chromium-darwin.png)
 */
function Toast({ _dangerouslySetPrimaryAction, _dangerouslySetThumbnail, dismissButton, helperLink, primaryAction, text, thumbnail, type = 'default', }) {
    var _a;
    const isInExperiment = useInExperiment({
        webExperimentName: 'web_gestalt_visualRefresh',
        mwebExperimentName: 'web_gestalt_visualRefresh',
    });
    const responsiveMinWidth = useResponsiveMinWidth();
    const isMobileWidth = responsiveMinWidth === 'xs';
    const isTextNode = isComponentNode({ text, components: ['Text'] });
    const { accessibilityDismissButtonLabel: accessibilityDismissButtonLabelDefault } = useDefaultLabelContext('Toast');
    const { containerColor, textColor, iconColor } = isInExperiment && type === 'progress'
        ? {
            containerColor: 'inverse',
            textColor: 'inverse',
            iconColor: 'darkGray',
        }
        : COLORS_BY_TYPE[type];
    const isDefaultToast = type === 'default';
    const isNotDefaultToast = ['success', 'error', 'progress'].includes(type);
    const isImage = isDefaultToast &&
        !_dangerouslySetThumbnail &&
        // @ts-expect-error - TS2339 - Property 'image' does not exist on type '{ image: any; } | { avatar: any; } | { icon: any; }'.
        !!(thumbnail === null || thumbnail === void 0 ? void 0 : thumbnail.image) &&
        // @ts-expect-error - TS2339 - Property 'image' does not exist on type '{ image: any; } | { avatar: any; } | { icon: any; }'.
        Children.only(thumbnail.image).type.displayName === 'Image';
    const isIcon = isDefaultToast &&
        !_dangerouslySetThumbnail &&
        // @ts-expect-error - TS2339 - Property 'icon' does not exist on type '{ image: any; } | { avatar: any; } | { icon: any; }'.
        !!(thumbnail === null || thumbnail === void 0 ? void 0 : thumbnail.icon) &&
        // @ts-expect-error - TS2339 - Property 'icon' does not exist on type '{ image: any; } | { avatar: any; } | { icon: any; }'.
        Children.only(thumbnail.icon).type.displayName === 'Icon';
    const isAvatar = isDefaultToast &&
        !_dangerouslySetThumbnail &&
        // @ts-expect-error - TS2339 - Property 'avatar' does not exist on type '{ image: any; } | { avatar: any; } | { icon: any; }'.
        !!(thumbnail === null || thumbnail === void 0 ? void 0 : thumbnail.avatar) &&
        // @ts-expect-error - TS2339 - Property 'avatar' does not exist on type '{ image: any; } | { avatar: any; } | { icon: any; }'.
        Children.only(thumbnail.avatar).type.displayName === 'Avatar';
    return (jsxRuntime.jsx("div", { className: styles$2.toast, role: "status", children: jsxRuntime.jsx(BoxWithForwardRef
        // @ts-expect-error - TS2322 - Type 'string' is not assignable to type '"selected" | "default" | "shopping" | "inverse" | "light" | "dark" | "darkWash" | "lightWash" | "transparent" | "transparentDarkGray" | "infoBase" | "infoWeak" | "errorBase" | ... 15 more ... | undefined'.
        , { 
            // @ts-expect-error - TS2322 - Type 'string' is not assignable to type '"selected" | "default" | "shopping" | "inverse" | "light" | "dark" | "darkWash" | "lightWash" | "transparent" | "transparentDarkGray" | "infoBase" | "infoWeak" | "errorBase" | ... 15 more ... | undefined'.
            color: containerColor, dangerouslySetInlineStyle: {
                __style: {
                    paddingInlineStart: TOKEN_ROUNDING_400,
                    paddingInlineEnd: isInExperiment ? TOKEN_ROUNDING_300 : TOKEN_ROUNDING_400,
                },
            }, display: isInExperiment ? 'flex' : undefined, minHeight: isInExperiment ? 60 : undefined, paddingY: 3, rounding: 4, width: "100%", children: jsxRuntime.jsxs(FlexWithForwardRef, { alignItems: "center", gap: isInExperiment ? { column: 2, row: 3 } : 4, children: [isDefaultToast && _dangerouslySetThumbnail ? (jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "none", children: _dangerouslySetThumbnail })) : null, isImage ? (jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "none", children: jsxRuntime.jsx(ImageThumbnail, { thumbnail: thumbnail.image }) })) : null, isIcon ? (jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "none", children: jsxRuntime.jsx(IconThumbnail, { overrideColor: "inverse", thumbnail: thumbnail.icon }) })) : null, isAvatar ? (jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "none", children: jsxRuntime.jsx(AvatarThumbnail, { thumbnail: thumbnail.avatar }) })) : null, isNotDefaultToast ? (jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "none", children: jsxRuntime.jsx(TypeThumbnail, { type: type }) })) : null, jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "grow", children: jsxRuntime.jsx(Message, { helperLink: helperLink, text: isTextNode ? undefined : text, 
                            // @ts-expect-error - TS2322 - Type 'string' is not assignable to type '"link" | "warning" | "error" | "default" | "subtle" | "success" | "shopping" | "inverse" | "light" | "dark" | undefined'.
                            textColor: textColor, textElement: isTextNode ? (jsxRuntime.jsx(OverridingSpan, { inverseTextColor: true, isError: type === 'error', textElement: text })) : undefined, type: type }) }), primaryAction || _dangerouslySetPrimaryAction ? (
                    // Allow button text to wrap on mobile
                    jsxRuntime.jsxs(FlexWithForwardRef.Item, { flex: isMobileWidth ? 'shrink' : 'none', children: [isValidElement(_dangerouslySetPrimaryAction) ? _dangerouslySetPrimaryAction : null, !_dangerouslySetPrimaryAction &&
                                (primaryAction === null || primaryAction === void 0 ? void 0 : primaryAction.accessibilityLabel) &&
                                (primaryAction === null || primaryAction === void 0 ? void 0 : primaryAction.label)
                                ? (primaryAction.role === 'link' && (jsxRuntime.jsx(PrimaryAction, { accessibilityLabel: primaryAction.accessibilityLabel, href: primaryAction.href, label: primaryAction.label, onClick: primaryAction.onClick, rel: primaryAction === null || primaryAction === void 0 ? void 0 : primaryAction.rel, role: "link", size: "sm", target: primaryAction === null || primaryAction === void 0 ? void 0 : primaryAction.target })),
                                    primaryAction.role !== 'link' && (jsxRuntime.jsx(PrimaryAction, { accessibilityLabel: primaryAction.accessibilityLabel, label: primaryAction.label, onClick: primaryAction.onClick, role: "button", size: "sm" })))
                                : null] })) : null, dismissButton ? (jsxRuntime.jsx(FlexWithForwardRef.Item, { flex: "none", children: jsxRuntime.jsx(InternalDismissIconButtonWithForwardRef, { accessibilityLabel: (_a = dismissButton.accessibilityLabel) !== null && _a !== void 0 ? _a : accessibilityDismissButtonLabelDefault, 
                            // @ts-expect-error - TS2322 - Type 'string' is not assignable to type '"darkGray" | "gray" | "red" | "white" | "brandPrimary" | undefined'.
                            iconColor: iconColor, onClick: dismissButton.onDismiss, size: "xs" }) })) : null] }) }) }));
}
Toast.displayName = 'Toast';

var styles$1 = {"video":"hwa kVc MIw L4E","player":"iCM XiG L4E","playhead":"QCH _O1 KS5 L4E BG7","controls":"hoF MIw _O1 KS5 ojN Rym p6V hjq _co","blackBg":"wUN","transparentBg":"pa9"};

class VideoPlayhead extends PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            seeking: false,
        };
        this.setPlayheadRef = (ref) => {
            this.playhead = ref;
        };
        this.seek = (clientX) => {
            var _a;
            if (this.playhead) {
                const { duration, seek } = this.props;
                const { left, right, width } = this.playhead.getBoundingClientRect();
                // As a convention, text direction is defined in `dir` attribute of `html` tag of the document.
                // The following check is done under the assuption of that convention.
                const isRTL = ((_a = document.querySelector('html')) === null || _a === void 0 ? void 0 : _a.getAttribute('dir')) === 'rtl';
                const difference = isRTL ? right - clientX : clientX - left;
                const percent = Math.max(0, Math.min(difference / width, 1));
                const newTime = percent * duration;
                seek(newTime);
            }
        };
        // eslint-disable-next-line class-methods-use-this
        this.stopClick = (event) => event.stopPropagation();
        this.handleMouseDown = (event) => {
            // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection
            // Test via a getter in the options object to see if the passive property is accessed
            let supportsPassive = false;
            try {
                const opts = Object.defineProperty({}, 'passive', {
                    get() {
                        supportsPassive = true;
                    },
                });
                // skip this for mouse events, keep supportsPassive as false
                // @ts-expect-error - TS2339 - Property 'clientX' does not exist on type 'MouseEvent<HTMLDivElement, MouseEvent> | TouchEvent<HTMLDivElement>'.
                if (!(event === null || event === void 0 ? void 0 : event.clientX)) {
                    // @ts-expect-error - TS2769 - No overload matches this call.
                    window.addEventListener('testPassive', null, opts);
                    // @ts-expect-error - TS2769 - No overload matches this call.
                    window.removeEventListener('testPassive', null, opts);
                }
            }
            catch (e) {
                // do nothing
            }
            // Chrome, starting with version 56 (desktop, Chrome for Android, and Android webview), where the default value for the passive option for touchstart and touchmove is true and calls to preventDefault() will have no effect.
            // supportsPassive is false for mouse events as well as touch events when passive is not supported
            if (!supportsPassive) {
                event.preventDefault();
            }
            const { onPlayheadDown } = this.props;
            onPlayheadDown(event);
            this.setState({ seeking: true });
            // @ts-expect-error - TS2339 - Property 'clientX' does not exist on type 'MouseEvent<HTMLDivElement, MouseEvent> | TouchEvent<HTMLDivElement>'. | TS2339 - Property 'clientX' does not exist on type 'MouseEvent<HTMLDivElement, MouseEvent> | TouchEvent<HTMLDivElement>'.
            if (!!(event === null || event === void 0 ? void 0 : event.clientX) && typeof (event === null || event === void 0 ? void 0 : event.clientX) === 'number') {
                // @ts-expect-error - TS2339 - Property 'clientX' does not exist on type 'MouseEvent<HTMLDivElement, MouseEvent> | TouchEvent<HTMLDivElement>'.
                this.seek(event.clientX);
            }
            // @ts-expect-error - TS2339 - Property 'touches' does not exist on type 'MouseEvent<HTMLDivElement, MouseEvent> | TouchEvent<HTMLDivElement>'.
            if (event === null || event === void 0 ? void 0 : event.touches) {
                // @ts-expect-error - TS2339 - Property 'touches' does not exist on type 'MouseEvent<HTMLDivElement, MouseEvent> | TouchEvent<HTMLDivElement>'.
                this.seek(event.touches[0].clientX);
            }
        };
        this.handleMouseLeave = (event) => {
            const { onPlayheadUp } = this.props;
            const { seeking } = this.state;
            // If the user is seeking and mouse leaves playhead then end the seek
            if (seeking) {
                this.setState({ seeking: false });
                onPlayheadUp(event);
            }
        };
        this.handleMouseMove = (event) => {
            // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection
            // Test via a getter in the options object to see if the passive property is accessed
            let supportsPassive = false;
            try {
                const opts = Object.defineProperty({}, 'passive', {
                    get() {
                        supportsPassive = true;
                    },
                });
                // skip this for mouse events, keep supportsPassive as false
                // @ts-expect-error - TS2339 - Property 'clientX' does not exist on type 'MouseEvent<HTMLDivElement, MouseEvent> | TouchEvent<HTMLDivElement>'.
                if (!(event === null || event === void 0 ? void 0 : event.clientX)) {
                    // @ts-expect-error - TS2769 - No overload matches this call.
                    window.addEventListener('testPassive', null, opts);
                    // @ts-expect-error - TS2769 - No overload matches this call.
                    window.removeEventListener('testPassive', null, opts);
                }
            }
            catch (e) {
                // do nothing
            }
            // Chrome, starting with version 56 (desktop, Chrome for Android, and Android webview), where the default value for the passive option for touchstart and touchmove is true and calls to preventDefault() will have no effect.
            // supportsPassive is false for mouse events and touch events when passive is not supported
            if (!supportsPassive) {
                event.preventDefault();
            }
            const { seeking } = this.state;
            // @ts-expect-error - TS2339 - Property 'clientX' does not exist on type 'MouseEvent<HTMLDivElement, MouseEvent> | TouchEvent<HTMLDivElement>'. | TS2339 - Property 'clientX' does not exist on type 'MouseEvent<HTMLDivElement, MouseEvent> | TouchEvent<HTMLDivElement>'.
            if (seeking && !!(event === null || event === void 0 ? void 0 : event.clientX) && typeof (event === null || event === void 0 ? void 0 : event.clientX) === 'number') {
                // @ts-expect-error - TS2339 - Property 'clientX' does not exist on type 'MouseEvent<HTMLDivElement, MouseEvent> | TouchEvent<HTMLDivElement>'.
                this.seek(event.clientX);
            }
            // @ts-expect-error - TS2339 - Property 'touches' does not exist on type 'MouseEvent<HTMLDivElement, MouseEvent> | TouchEvent<HTMLDivElement>'.
            if (seeking && (event === null || event === void 0 ? void 0 : event.touches)) {
                // @ts-expect-error - TS2339 - Property 'touches' does not exist on type 'MouseEvent<HTMLDivElement, MouseEvent> | TouchEvent<HTMLDivElement>'.
                this.seek(event.touches[0].clientX);
            }
        };
        this.handleMouseUp = (event) => {
            const { onPlayheadUp } = this.props;
            this.setState({ seeking: false });
            onPlayheadUp(event);
        };
    }
    render() {
        const { accessibilityProgressBarLabel, currentTime, duration } = this.props;
        const width = `${Math.floor((currentTime * 10000) / duration) / 100}%`;
        return (jsxRuntime.jsx(BoxWithForwardRef, { height: 16, position: "relative", children: jsxRuntime.jsx("div", { ref: this.setPlayheadRef, "aria-label": accessibilityProgressBarLabel, "aria-valuemax": duration, "aria-valuemin": "0", "aria-valuenow": currentTime, className: styles$1.playhead, onClick: this.stopClick, 
                // onmouse events don't get correctly triggered on mobile
                onKeyPress: this.stopClick, onMouseDown: this.handleMouseDown, onMouseLeave: this.handleMouseLeave, onMouseMove: this.handleMouseMove, 
                // ontouch events handle scrubber on mobile
                onMouseUp: this.handleMouseUp, onTouchEnd: this.handleMouseUp, onTouchMove: this.handleMouseMove, onTouchStart: this.handleMouseDown, role: "progressbar", 
                // @ts-expect-error - TS2322 - Type 'string' is not assignable to type 'number | undefined'.
                tabIndex: "-1", children: jsxRuntime.jsxs(BoxWithForwardRef, { color: "secondary", display: "flex", height: 4, left: true, position: "absolute", right: true, rounding: 2, children: [jsxRuntime.jsx(BoxWithForwardRef, { color: "light", height: "100%", rounding: 2, width: width }), jsxRuntime.jsx(BoxWithForwardRef, { color: "light", dangerouslySetInlineStyle: { __style: { marginTop: -6 } }, height: 16, marginStart: -2, rounding: "circle", width: 16 })] }) }) }));
    }
}

const timeToString = (time) => {
    const rounded = Math.floor(time || 0);
    const minutes = Math.floor(rounded / 60);
    const seconds = rounded - minutes * 60;
    const minutesStr = minutes < 10 ? `0${minutes}` : minutes;
    const secondsStr = seconds < 10 ? `0${seconds}` : seconds;
    return `${minutesStr}:${secondsStr}`;
};
function VideoControls({ captionsButton, currentTime, duration, fullscreen, onCaptionsChange, onFullscreenChange, onPause, onPlay, onPlayheadDown, onPlayheadUp, onVolumeChange, playing, seek, volume, }) {
    const handleFullscreenChange = ({ event, }) => {
        event.stopPropagation();
        onFullscreenChange();
    };
    const handlePlayingChange = ({ event, }) => {
        if (playing) {
            onPause(event);
        }
        else {
            onPlay(event);
        }
    };
    const handleCaptionsChange = ({ event, }) => {
        event.stopPropagation();
        onCaptionsChange(event);
    };
    const handleVolumeChange = ({ event, }) => {
        onVolumeChange(event);
    };
    const muted = volume === 0;
    const [showFullscreenButton, setShowFullscreenButton] = useState(false);
    const { accessibilityHideCaptionsLabel: defaultAccessibilityHideCaptionsLabel, accessibilityShowCaptionsLabel: defaultAccessibilityShowCaptionsLabel, accessibilityMaximizeLabel: defaultAccessibilityMaximizeLabel, accessibilityMinimizeLabel: defaultAccessibilityMinimizeLabel, accessibilityMuteLabel: defaultAccessibilityMuteLabel, accessibilityPauseLabel: defaultAccessibilityPauseLabel, accessibilityPlayLabel: defaultAccessibilityPlayLabel, accessibilityProgressLabel: defaultAccessibilityProgressLabel, accessibilityUnmuteLabel: defaultAccessibilityUnmuteLabel, } = useDefaultLabelContext('Video');
    useEffect(() => {
        setShowFullscreenButton(typeof document !== 'undefined' &&
            (!!document.fullscreenEnabled ||
                // @ts-expect-error - TS2339 - Property 'webkitFullscreenEnabled' does not exist on type 'Document'.
                !!document.webkitFullscreenEnabled ||
                // @ts-expect-error - TS2339 - Property 'mozFullScreenEnabled' does not exist on type 'Document'.
                !!document.mozFullScreenEnabled ||
                // @ts-expect-error - TS2551 - Property 'msFullscreenEnabled' does not exist on type 'Document'. Did you mean 'fullscreenEnabled'?
                !!document.msFullscreenEnabled));
    }, []);
    return (jsxRuntime.jsxs("div", { className: styles$1.controls, children: [jsxRuntime.jsx(BoxWithForwardRef, { padding: 2, children: jsxRuntime.jsx(TapAreaWithForwardRef, { fullWidth: false, onTap: handlePlayingChange, children: jsxRuntime.jsx(Icon, { accessibilityLabel: playing ? defaultAccessibilityPauseLabel : defaultAccessibilityPlayLabel, color: "light", icon: playing ? 'pause' : 'play', size: 20 }) }) }), captionsButton && (jsxRuntime.jsx(BoxWithForwardRef, { padding: 2, children: jsxRuntime.jsxs(TapAreaWithForwardRef, { fullWidth: false, onTap: handleCaptionsChange, children: [jsxRuntime.jsx(Icon, { accessibilityLabel: captionsButton === 'enabled'
                                ? defaultAccessibilityHideCaptionsLabel
                                : defaultAccessibilityShowCaptionsLabel, color: "light", icon: "captions", size: 20 }), captionsButton === 'enabled' && (jsxRuntime.jsx(BoxWithForwardRef, { color: "light", height: 2, marginTop: 1, position: "absolute", rounding: 4, width: 20 }))] }) })), jsxRuntime.jsx(BoxWithForwardRef, { padding: 2, width: 50, children: jsxRuntime.jsx(TextWithForwardRef, { align: "end", color: "light", overflow: "normal", size: "100", children: timeToString(currentTime) }) }), jsxRuntime.jsx(BoxWithForwardRef, { flex: "grow", padding: 2, children: jsxRuntime.jsx(VideoPlayhead, { accessibilityProgressBarLabel: defaultAccessibilityProgressLabel, currentTime: currentTime, duration: duration, onPlayheadDown: onPlayheadDown, onPlayheadUp: onPlayheadUp, seek: seek }) }), jsxRuntime.jsx(BoxWithForwardRef, { padding: 2, width: 50, children: jsxRuntime.jsx(TextWithForwardRef, { align: "end", color: "light", overflow: "normal", size: "100", children: timeToString(duration) }) }), jsxRuntime.jsx(BoxWithForwardRef, { padding: 2, children: jsxRuntime.jsx(TapAreaWithForwardRef, { fullWidth: false, onTap: handleVolumeChange, children: jsxRuntime.jsx(Icon, { accessibilityLabel: muted ? defaultAccessibilityUnmuteLabel : defaultAccessibilityMuteLabel, color: "light", icon: muted ? 'mute' : 'sound', size: 20 }) }) }), showFullscreenButton && (jsxRuntime.jsx(BoxWithForwardRef, { padding: 2, children: jsxRuntime.jsx(TapAreaWithForwardRef, { fullWidth: false, onTap: handleFullscreenChange, children: jsxRuntime.jsx(Icon, { accessibilityLabel: fullscreen ? defaultAccessibilityMinimizeLabel : defaultAccessibilityMaximizeLabel, color: "light", icon: fullscreen ? 'minimize' : 'maximize', size: 20 }) }) }))] }));
}

// For more information on fullscreen and vendor prefixes see
// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API
const requestFullscreen = (element) => {
    if (element.requestFullscreen) {
        element.requestFullscreen();
        // @ts-expect-error - TS2339 - Property 'webkitRequestFullscreen' does not exist on type 'HTMLElement'.
    }
    else if (element.webkitRequestFullscreen) {
        // @ts-expect-error - TS2339 - Property 'webkitRequestFullscreen' does not exist on type 'HTMLElement'.
        element.webkitRequestFullscreen();
        // @ts-expect-error - TS2339 - Property 'mozRequestFullScreen' does not exist on type 'HTMLElement'.
    }
    else if (element.mozRequestFullScreen) {
        // @ts-expect-error - TS2339 - Property 'mozRequestFullScreen' does not exist on type 'HTMLElement'.
        element.mozRequestFullScreen();
        // @ts-expect-error - TS2551 - Property 'msRequestFullscreen' does not exist on type 'HTMLElement'. Did you mean 'requestFullscreen'?
    }
    else if (element.msRequestFullscreen) {
        // @ts-expect-error - TS2551 - Property 'msRequestFullscreen' does not exist on type 'HTMLElement'. Did you mean 'requestFullscreen'?
        element.msRequestFullscreen();
    }
};
const exitFullscreen = () => {
    if (document.exitFullscreen) {
        document.exitFullscreen();
        // @ts-expect-error - TS2339 - Property 'webkitExitFullscreen' does not exist on type 'Document'.
    }
    else if (document.webkitExitFullscreen) {
        // @ts-expect-error - TS2339 - Property 'webkitExitFullscreen' does not exist on type 'Document'.
        document.webkitExitFullscreen();
        // @ts-expect-error - TS2339 - Property 'mozCancelFullScreen' does not exist on type 'Document'.
    }
    else if (document.mozCancelFullScreen) {
        // @ts-expect-error - TS2339 - Property 'mozCancelFullScreen' does not exist on type 'Document'.
        document.mozCancelFullScreen();
        // @ts-expect-error - TS2551 - Property 'msExitFullscreen' does not exist on type 'Document'. Did you mean 'exitFullscreen'?
    }
    else if (document.msExitFullscreen) {
        // @ts-expect-error - TS2551 - Property 'msExitFullscreen' does not exist on type 'Document'. Did you mean 'exitFullscreen'?
        document.msExitFullscreen();
    }
};
// Normally document.fullscreen suffices here as a flag, but IE11 does not
// have a vendor specific version so we must instead use the actual element
const isFullscreen = () => document.fullscreenElement ||
    // @ts-expect-error - TS2339 - Property 'webkitFullscreenElement' does not exist on type 'Document'.
    document.webkitFullscreenElement ||
    // @ts-expect-error - TS2339 - Property 'mozFullScreenElement' does not exist on type 'Document'.
    document.mozFullScreenElement ||
    // @ts-expect-error - TS2551 - Property 'msFullscreenElement' does not exist on type 'Document'. Did you mean 'fullscreenElement'?
    document.msFullscreenElement;
const addFullscreenEventListener = (listener) => {
    document.addEventListener('fullscreenchange', listener);
    document.addEventListener('webkitfullscreenchange', listener);
    document.addEventListener('mozfullscreenchange', listener);
    document.addEventListener('MSFullscreenChange', listener);
};
const removeFullscreenEventListener = (listener) => {
    document.removeEventListener('fullscreenchange', listener);
    document.removeEventListener('webkitfullscreenchange', listener);
    document.removeEventListener('mozfullscreenchange', listener);
    document.removeEventListener('MSFullscreenChange', listener);
};
const isNewSource = (oldSource, newSource) => {
    if (typeof oldSource !== typeof newSource) {
        // If the source type changed from string to Array
        // or vice versa, we have a new source
        return true;
    }
    if (Array.isArray(newSource)) {
        if (oldSource.length !== newSource.length) {
            // If the sources are both an Array, and the lengths
            // do not match we evaluate as a new source
            return true;
        }
        // If the sources are both an Array and the same length,
        // verify every element stayed the same
        return newSource.some((source, index) => !Array.isArray(oldSource) ||
            source.type !== oldSource[index].type ||
            source.src !== oldSource[index].src);
    }
    // If the sources are both a string, simply compare
    // the new with the old
    return newSource !== oldSource;
};
/**
 * [Video](https://gestalt.pinterest.systems/web/video) is used for media layout.
 *
 * ![Video light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/Video.spec.ts-snapshots/Video-chromium-darwin.png)
 */
class Video extends PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            currentTime: 0,
            duration: 0,
            fullscreen: false,
            captionsButton: this.props.captions ? 'enabled' : null,
        };
        /**
         * DOM reference housekeeping that is needed for functionality
         */
        // The player element encapsulates the actual video DOM
        // element as well as the controls to bring both fullscreen
        this.setPlayerRef = (ref) => {
            this.player = ref;
        };
        // The actual reference to the video HTML DOM element
        this.setVideoRef = (ref) => {
            this.video = ref;
        };
        /**
         * Functions that directly interact with the HTML video element
         */
        // Set the video to the desired playback rate: 1 (normal)
        this.setPlaybackRate = (playbackRate) => {
            if (this.video) {
                this.video.playbackRate = playbackRate;
            }
        };
        // Set the video to the desired volume: 0 (muted) -> 1 (max)
        this.setVolume = (volume) => {
            if (this.video) {
                this.video.volume = volume;
            }
        };
        // Change the video source and re-load the video
        this.load = () => {
            if (this.video && this.video.load) {
                this.video.load();
            }
        };
        // Pause the video
        this.pause = () => {
            if (this.video) {
                this.video.pause();
            }
        };
        // Play the video
        this.play = () => __awaiter(this, void 0, void 0, function* () {
            if (this.video) {
                const isPlaying = this.video.currentTime > 0 &&
                    !this.video.paused &&
                    !this.video.ended &&
                    this.video.readyState > 2;
                if (!isPlaying) {
                    const startPlayPromise = this.video.play();
                    if (startPlayPromise !== undefined) {
                        startPlayPromise.then().catch((error) => { var _a, _b; return (_b = (_a = this.props).onPlayError) === null || _b === void 0 ? void 0 : _b.call(_a, { error }); });
                    }
                }
            }
        });
        // Seek the video to the desired time
        this.seek = (time) => {
            if (this.video) {
                this.video.currentTime = time;
            }
        };
        // Toggle captions on/off
        this.toggleCaptions = () => {
            var _a;
            // @ts-expect-error - TS2488 - Type 'never[] | TextTrackList' must have a '[Symbol.iterator]()' method that returns an iterator.
            const [videoTrack] = ((_a = this.video) === null || _a === void 0 ? void 0 : _a.textTracks) || [];
            if (videoTrack) {
                const isShowing = videoTrack.mode === 'showing';
                videoTrack.mode = isShowing ? 'disabled' : 'showing';
                this.setState({ captionsButton: isShowing ? 'disabled' : 'enabled' });
            }
        };
        // Enter/exit fullscreen video player mode
        this.toggleFullscreen = () => {
            if (isFullscreen()) {
                exitFullscreen();
            }
            else if (this.player) {
                requestFullscreen(this.player);
            }
        };
        /**
         * Handlers for various media events on the video
         */
        // Sent when enough data is available that the media can be played
        this.handleCanPlay = (event) => {
            const { onReady } = this.props;
            onReady === null || onReady === void 0 ? void 0 : onReady({ event });
        };
        // Sent when playback of the media starts after having been paused.
        this.handleControlsPlay = (event) => {
            const { onControlsPlay } = this.props;
            onControlsPlay === null || onControlsPlay === void 0 ? void 0 : onControlsPlay({ event });
        };
        // Sent when playback is paused.
        this.handleControlsPause = (event) => {
            const { onControlsPause } = this.props;
            onControlsPause === null || onControlsPause === void 0 ? void 0 : onControlsPause({ event });
        };
        // The metadata has loaded or changed, indicating a change in
        // duration of the media
        this.handleDurationChange = (event) => {
            const { onDurationChange } = this.props;
            const duration = (this.video && this.video.duration) || 0;
            this.setState({ duration });
            onDurationChange === null || onDurationChange === void 0 ? void 0 : onDurationChange({ event, duration });
        };
        // Sent when playback completes.
        this.handleEnded = (event) => {
            const { onEnded } = this.props;
            onEnded === null || onEnded === void 0 ? void 0 : onEnded({ event });
        };
        // Sent when an error occurs.
        this.handleError = (event) => {
            const { onError } = this.props;
            onError === null || onError === void 0 ? void 0 : onError({ event });
        };
        // Sent when the video is switched to/out-of fullscreen mode
        this.handleFullscreenChange = (event) => {
            const { onFullscreenChange } = this.props;
            const fullscreen = !!isFullscreen();
            this.setState({ fullscreen });
            onFullscreenChange === null || onFullscreenChange === void 0 ? void 0 : onFullscreenChange({ event, fullscreen });
        };
        // Sent when the video has started to load
        this.handleLoadStart = (event) => {
            const { onLoadStart } = this.props;
            onLoadStart === null || onLoadStart === void 0 ? void 0 : onLoadStart({ event });
        };
        // Sent when playback of the media is paused.
        this.handlePause = (event) => {
            const { onPause } = this.props;
            onPause === null || onPause === void 0 ? void 0 : onPause({ event });
        };
        // Sent when playback of the media is ready to start after having been paused.
        this.handlePlay = (event) => {
            const { onPlay } = this.props;
            onPlay === null || onPlay === void 0 ? void 0 : onPlay({ event });
        };
        // Sent when playback of the media is ready to start after having been paused.
        this.handlePlaying = (event) => {
            const { onPlaying } = this.props;
            onPlaying === null || onPlaying === void 0 ? void 0 : onPlaying({ event });
        };
        // Sent when mouse down event happens on playhead
        this.handlePlayheadDown = (event) => {
            const { onPlayheadDown } = this.props;
            onPlayheadDown === null || onPlayheadDown === void 0 ? void 0 : onPlayheadDown({ event });
        };
        // Sent when mouse up event happens on playhead
        this.handlePlayheadUp = (event) => {
            const { onPlayheadUp } = this.props;
            onPlayheadUp === null || onPlayheadUp === void 0 ? void 0 : onPlayheadUp({ event });
        };
        // Sent periodically to inform interested parties of progress downloading the media
        this.handleProgress = (event) => {
            var _a;
            const { onLoadedChange } = this.props;
            const buffered = (_a = this.video) === null || _a === void 0 ? void 0 : _a.buffered;
            const loaded = buffered && buffered.length > 0 ? buffered.end(buffered.length - 1) : 0;
            onLoadedChange === null || onLoadedChange === void 0 ? void 0 : onLoadedChange({ event, loaded });
        };
        // Sent when a seek operation completes.
        this.handleSeek = (event) => {
            const { onSeek } = this.props;
            onSeek === null || onSeek === void 0 ? void 0 : onSeek({ event });
        };
        // Sent when a seek operation beings.
        this.handleSeeking = (event) => {
            const { onSeeking } = this.props;
            onSeeking === null || onSeeking === void 0 ? void 0 : onSeeking({ event });
        };
        // Sent when trying to fetch data but the data is unexpectedly not forthcoming.
        this.handleStalled = (event) => {
            const { onStalled } = this.props;
            onStalled === null || onStalled === void 0 ? void 0 : onStalled({ event });
        };
        // The time indicated by the element's currentTime attribute has changed
        this.handleTimeUpdate = (event) => {
            const { onTimeChange } = this.props;
            const currentTime = (this.video && this.video.currentTime) || 0;
            this.setState({ currentTime });
            onTimeChange === null || onTimeChange === void 0 ? void 0 : onTimeChange({ event, time: currentTime });
        };
        // Sent when the audio volume changes
        this.handleVolumeChange = (event) => {
            const { onVolumeChange } = this.props;
            const muted = (this.video && this.video.muted) || false;
            onVolumeChange === null || onVolumeChange === void 0 ? void 0 : onVolumeChange({ event, volume: muted ? 1 : 0 });
        };
        // Sent when playback has stopped because of a temporary lack of data.
        this.handleWaiting = (event) => {
            const { onWaiting } = this.props;
            onWaiting === null || onWaiting === void 0 ? void 0 : onWaiting({ event });
        };
    }
    /**
     * React lifecycle hooks pertinent to Video
     */
    componentDidMount() {
        const { captions, playbackRate, volume, playing, autoplay, startTime } = this.props;
        // Set up event listeners to catch backdoors in fullscreen
        // changes such as using the ESC key to exit
        if (typeof document !== 'undefined') {
            addFullscreenEventListener(this.handleFullscreenChange);
        }
        // Load the video to hydrate the DOM after a server render
        this.load();
        // Set the initial volume
        this.setVolume(volume);
        // Set the initial playback rate
        this.setPlaybackRate(playbackRate);
        if (startTime) {
            this.seek(startTime);
        }
        if (!autoplay && playing) {
            this.play();
        }
        if (captions && this.video && this.video.textTracks && this.video.textTracks[0]) {
            this.video.textTracks[0].mode = 'showing';
        }
    }
    componentDidUpdate(prevProps) {
        // If the video source changed, reload the video
        if (isNewSource(prevProps.src, this.props.src)) {
            this.load();
        }
        // If the startTime has changed, update
        if (prevProps.startTime !== this.props.startTime) {
            this.seek(this.props.startTime || 0);
        }
        // If the volume changed, set the new volume
        if (prevProps.volume !== this.props.volume) {
            this.setVolume(this.props.volume);
        }
        // If the playback rate changed, set the new rate
        if (prevProps.playbackRate !== this.props.playbackRate) {
            this.setPlaybackRate(this.props.playbackRate);
        }
        // If the playback changed, play or pause the video
        if (prevProps.playing !== this.props.playing) {
            if (this.props.playing) {
                this.play();
            }
            else {
                this.pause();
            }
        }
    }
    componentWillUnmount() {
        removeFullscreenEventListener(this.handleFullscreenChange);
    }
    render() {
        const { aspectRatio, autoplay, backgroundColor, captions, children, crossOrigin, dataTestId, disableRemotePlayback, loop, objectFit, playing, playsInline, poster, preload, src, volume, } = this.props;
        const { currentTime, duration, fullscreen, captionsButton } = this.state;
        const paddingBottom = (fullscreen && '0') || `${(1 / aspectRatio) * 100}%`;
        let crossOriginPolicy = crossOrigin || undefined;
        if (captions && crossOriginPolicy !== 'anonymous') {
            if (crossOriginPolicy === undefined) {
                crossOriginPolicy = 'anonymous';
            }
            else {
                throw new Error(`"The crossOrigin policy must be set to 'anonymous' for captions to work."`);
            }
        }
        const playerClasses = classnames(styles$1.player, {
            [styles$1.blackBg]: backgroundColor === 'black',
            [styles$1.transparentBg]: backgroundColor === 'transparent',
        });
        return (jsxRuntime.jsxs("div", { ref: this.setPlayerRef, className: playerClasses, style: { paddingBottom, height: fullscreen ? '100%' : 0 }, children: [jsxRuntime.jsxs("video", Object.assign({ autoPlay: autoplay, className: styles$1.video }, { crossOrigin: crossOriginPolicy }, { "data-test-id": dataTestId, disableRemotePlayback: disableRemotePlayback, loop: loop, muted: volume === 0 }, (objectFit ? { style: { objectFit } } : null), { ref: this.setVideoRef, onCanPlay: this.handleCanPlay, onDurationChange: this.handleDurationChange, onEnded: this.handleEnded, onError: this.handleError, onLoadStart: this.handleLoadStart, onPause: this.handlePause, onPlay: this.handlePlay, onPlaying: this.handlePlaying, onProgress: this.handleProgress, onSeeked: this.handleSeek, onSeeking: this.handleSeeking, onStalled: this.handleStalled, onTimeUpdate: this.handleTimeUpdate, onWaiting: this.handleWaiting, playsInline: playsInline, poster: poster, preload: preload, src: typeof src === 'string' ? src : undefined, children: [Array.isArray(src) &&
                            src.map((source) => jsxRuntime.jsx("source", { src: source.src, type: source.type }, source.src)), jsxRuntime.jsx("track", { kind: "captions", src: captions })] })), Boolean(children) && (jsxRuntime.jsx(BoxWithForwardRef, { bottom: true, left: true, overflow: "hidden", position: "absolute", right: true, top: true, children: children })), this.props.controls && (jsxRuntime.jsx(VideoControls, { captionsButton: captionsButton, currentTime: currentTime, duration: duration, fullscreen: fullscreen, onCaptionsChange: this.toggleCaptions, onFullscreenChange: this.toggleFullscreen, onPause: this.handleControlsPause, onPlay: this.handleControlsPlay, onPlayheadDown: this.handlePlayheadDown, onPlayheadUp: this.handlePlayheadUp, onVolumeChange: this.handleVolumeChange, playing: playing, seek: this.seek, volume: volume }))] }));
    }
}
Video.displayName = 'Video';
Video.defaultProps = {
    startTime: 0,
    disableRemotePlayback: false,
    backgroundColor: 'black',
    playbackRate: 1,
    playing: false,
    preload: 'auto',
    volume: 0,
};

var styles = {"washanimated":"T3r MIw DUt QLY p6V ojN Rym jr-","hover":"wMk","animate-in":"oqM","animate-in-rtl":"dyq"};

function isNil(val) {
    return val === undefined || val === null;
}
/**
 * [WashAnimated](https://gestalt.pinterest.systems/web/washanimated) is used to highlight content in grids. It visually shows that children elements belong together and can highlight the items on hover.
 * ![WashAnimated light mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/WashAnimated.spec.ts-snapshots/WashAnimated-chromium-darwin.png)
 * ![WashAnimated dark mode](https://raw.githubusercontent.com/pinterest/gestalt/master/playwright/visual-test/WashAnimated-dark.spec.ts-snapshots/Button-dark-chromium-darwin.png)
 */
function WashAnimated({ active, children, image, onMouseEnter, onMouseLeave, }) {
    const [hovered, setHovered] = useState(false);
    const handleMouseEnter = (event) => {
        setHovered(true);
        onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter({ event });
    };
    const handleMouseLeave = (event) => {
        setHovered(false);
        onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave({ event });
    };
    const classes = classnames(styles.washanimated, {
        [styles.hover]: isNil(active) ? hovered : active,
    });
    return (jsxRuntime.jsxs(BoxWithForwardRef, { onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, position: "relative", children: [Boolean(image) && jsxRuntime.jsx(BoxWithForwardRef, { marginBottom: 1, children: image }), jsxRuntime.jsx(BoxWithForwardRef, { children: children }), jsxRuntime.jsx("div", { className: classes })] }));
}
WashAnimated.displayName = 'WashAnimated';

export { Accordion, ActivationCard, Avatar, AvatarGroupWithForwardRef as AvatarGroup, Badge, BannerCallout, BannerOverlay, BannerSlim, BannerUpsell, BoxWithForwardRef as Box, ButtonWithForwardRef as Button, ButtonGroup, ButtonLinkWithForwardRef as ButtonLink, ButtonToggleWithForwardRef as ButtonToggle, CheckboxWithForwardRef as Checkbox, Collage, ColorSchemeProvider, Column, ComboBoxWithForwardRef as ComboBox, CompositeZIndex, Container, Datapoint, DefaultLabelProvider, DeviceTypeProvider, Divider, Dropdown, ExperimentProvider, Fieldset, FixedZIndex, FlexWithForwardRef as Flex, GlobalEventsHandlerProvider, Heading, HelpButton, Icon, IconButtonWithForwardRef as IconButton, IconButtonFloatingWithForwardRef as IconButtonFloating, IconButtonLinkWithForwardRef as IconButtonLink, IconCompact, Image, Label, Layer, Letterbox, LinkWithForwardRef as Link, List, Mask, Masonry$1 as Masonry, MasonryWithForwardRef as MasonryV2, Modal, ModalAlert, NumberFieldWithForwardRef as NumberField, OverlayPanel, PageHeader, Pog, Popover, PopoverEducational, Pulsar, RadioButtonWithForwardRef as RadioButton, RadioGroup, ScrollBoundaryContainerWithProvider as ScrollBoundaryContainer, ScrollFetch, SearchFieldWithForwardRef as SearchField, SearchGuideWithForwardRef as SearchGuide, SearchGuideLinkWithForwardRef as SearchGuideLink, SegmentedControl, SelectList, SheetMobile, SideNavigation, Spinner, Status, Sticky, Switch, Table, TableOfContents, Tabs, Tag, TagData, TapAreaWithForwardRef as TapArea, TapAreaLinkWithForwardRef as TapAreaLink, TextWithForwardRef as Text, TextAreaWithForwardRef as TextArea, TextCompactWithForwardRef as TextCompact, TextFieldWithForwardRef as TextField, TextUIWithForwardRef as TextUI, TileData, Toast, Tooltip, Video, WashAnimated, useColorScheme, useInExperiment as useDangerouslyInGestaltExperiment, useDefaultLabelContext as useDefaultLabel, useDeviceType, useFocusVisible, useGlobalEventsHandlerContext as useGlobalEventsHandler, useReducedMotion };
//# sourceMappingURL=gestalt.es.js.map
